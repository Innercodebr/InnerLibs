### YamlMime:ManagedReference
items:
- uid: InnerLibs.DataBase.Reader
  commentId: T:InnerLibs.DataBase.Reader
  id: DataBase.Reader
  parent: InnerLibs
  children:
  - InnerLibs.DataBase.Reader.#ctor(InnerLibs.DataBase.Result[])
  - InnerLibs.DataBase.Reader.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object}[])
  - InnerLibs.DataBase.Reader.#ctor(System.Data.Common.DbDataReader)
  - InnerLibs.DataBase.Reader.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  - InnerLibs.DataBase.Reader.ApplyToControls(System.Windows.Forms.Control[])
  - InnerLibs.DataBase.Reader.Close
  - InnerLibs.DataBase.Reader.CountRows
  - InnerLibs.DataBase.Reader.CountRows(System.Int32)
  - InnerLibs.DataBase.Reader.Dispose
  - InnerLibs.DataBase.Reader.FillComboBox``1(System.Windows.Forms.ComboBox@,System.String,System.String)
  - InnerLibs.DataBase.Reader.FillDataGridView(System.Windows.Forms.DataGridView@,System.Int32)
  - InnerLibs.DataBase.Reader.FillSelectControl(System.Web.UI.HtmlControls.HtmlSelect@,System.String,System.String,System.String[])
  - InnerLibs.DataBase.Reader.GetColumns
  - InnerLibs.DataBase.Reader.GetCurrentRow
  - InnerLibs.DataBase.Reader.GetCurrentRowAs``1
  - InnerLibs.DataBase.Reader.GetCurrentRowColumns
  - InnerLibs.DataBase.Reader.GetCurrentRowValues
  - InnerLibs.DataBase.Reader.GetItem``1(System.Int32)
  - InnerLibs.DataBase.Reader.GetItem``1(System.String)
  - InnerLibs.DataBase.Reader.GetResult(System.Int32)
  - InnerLibs.DataBase.Reader.GetRow(System.Int32)
  - InnerLibs.DataBase.Reader.GetValue(System.Int32,System.Int32,System.String)
  - InnerLibs.DataBase.Reader.GetValue``1(System.Int32,System.Int32,System.String)
  - InnerLibs.DataBase.Reader.GoBack
  - InnerLibs.DataBase.Reader.GoForward
  - InnerLibs.DataBase.Reader.HasResults
  - InnerLibs.DataBase.Reader.HasRows
  - InnerLibs.DataBase.Reader.IsClosed
  - InnerLibs.DataBase.Reader.Item(System.Int32)
  - InnerLibs.DataBase.Reader.Item(System.Int32,System.Int32)
  - InnerLibs.DataBase.Reader.Item(System.String)
  - InnerLibs.DataBase.Reader.Item(System.String,System.Int32)
  - InnerLibs.DataBase.Reader.NextResult
  - InnerLibs.DataBase.Reader.PreviousResult
  - InnerLibs.DataBase.Reader.Read
  - InnerLibs.DataBase.Reader.Reset
  - InnerLibs.DataBase.Reader.Search(System.Object)
  - InnerLibs.DataBase.Reader.StartOver
  - InnerLibs.DataBase.Reader.ToCSV(System.String)
  - InnerLibs.DataBase.Reader.ToDataTable
  - InnerLibs.DataBase.Reader.ToDelimitedString(System.String,System.String,System.String)
  - InnerLibs.DataBase.Reader.ToDictionary``2(System.String,System.String)
  - InnerLibs.DataBase.Reader.ToHTMLTable(System.Boolean)
  - InnerLibs.DataBase.Reader.ToJSON(System.Boolean,System.String)
  - InnerLibs.DataBase.Reader.ToJSON(System.Int32,System.String)
  - InnerLibs.DataBase.Reader.ToList``1
  - InnerLibs.DataBase.Reader.ToList``1(System.String)
  - InnerLibs.DataBase.Reader.ToListItems(System.String,System.String,System.String[])
  - InnerLibs.DataBase.Reader.ToMarkdownTable
  - InnerLibs.DataBase.Reader.ToQueryString
  - InnerLibs.DataBase.Reader.ToSession(System.Web.SessionState.HttpSessionState,System.Int32)
  - InnerLibs.DataBase.Reader.ToString
  - InnerLibs.DataBase.Reader.ToTextValueList``1(System.String,System.String)
  - InnerLibs.DataBase.Reader.ToUrl(System.String)
  - InnerLibs.DataBase.Reader.ToUrl(System.Uri)
  - InnerLibs.DataBase.Reader.ToXML(System.String,System.String)
  langs:
  - csharp
  - vb
  name: DataBase.Reader
  nameWithType: DataBase.Reader
  fullName: InnerLibs.DataBase.Reader
  type: Class
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: Reader
    path: DatabaseReader.vb
    startLine: 58
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nEstrutura que imita um <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> usando <xref href=\"System.Collections.Generic.List%601\" data-throw-if-not-resolved=\"false\"></xref> de  <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref>. Permite a leitura\nreleitura, atribuição e serialização mesmo após o fechamento da conexão.\n"
  example: []
  syntax:
    content: 'public sealed class Reader : List<DataBase.Result>, IList<DataBase.Result>, ICollection<DataBase.Result>, IList, ICollection, IReadOnlyList<DataBase.Result>, IReadOnlyCollection<DataBase.Result>, IEnumerable<DataBase.Result>, IEnumerable, IDisposable'
    content.vb: >-
      Public NotInheritable Class Reader
          Inherits List(Of DataBase.Result)
          Implements IList(Of DataBase.Result), ICollection(Of DataBase.Result), IList, ICollection, IReadOnlyList(Of DataBase.Result), IReadOnlyCollection(Of DataBase.Result), IEnumerable(Of DataBase.Result), IEnumerable, IDisposable
  inheritance:
  - System.Object
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}
  implements:
  - System.Collections.Generic.IList{InnerLibs.DataBase.Result}
  - System.Collections.Generic.ICollection{InnerLibs.DataBase.Result}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.Generic.IReadOnlyList{InnerLibs.DataBase.Result}
  - System.Collections.Generic.IReadOnlyCollection{InnerLibs.DataBase.Result}
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}
  - System.Collections.IEnumerable
  - System.IDisposable
  inheritedMembers:
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.Add(InnerLibs.DataBase.Result)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IList#Add(System.Object)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.AddRange(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.AsReadOnly
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.BinarySearch(System.Int32,System.Int32,InnerLibs.DataBase.Result,System.Collections.Generic.IComparer{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.BinarySearch(InnerLibs.DataBase.Result)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.BinarySearch(InnerLibs.DataBase.Result,System.Collections.Generic.IComparer{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.Clear
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.Contains(InnerLibs.DataBase.Result)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IList#Contains(System.Object)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.ConvertAll``1(System.Converter{InnerLibs.DataBase.Result,{TOutput}})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.CopyTo(InnerLibs.DataBase.Result[])
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.CopyTo(System.Int32,InnerLibs.DataBase.Result[],System.Int32,System.Int32)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.CopyTo(InnerLibs.DataBase.Result[],System.Int32)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.Exists(System.Predicate{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.Find(System.Predicate{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindAll(System.Predicate{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindIndex(System.Predicate{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindIndex(System.Int32,System.Predicate{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindIndex(System.Int32,System.Int32,System.Predicate{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindLast(System.Predicate{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindLastIndex(System.Predicate{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindLastIndex(System.Int32,System.Predicate{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindLastIndex(System.Int32,System.Int32,System.Predicate{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.ForEach(System.Action{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.GetEnumerator
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#Generic#IEnumerable<T>#GetEnumerator
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.GetRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.IndexOf(InnerLibs.DataBase.Result)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.IndexOf(InnerLibs.DataBase.Result,System.Int32)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.IndexOf(InnerLibs.DataBase.Result,System.Int32,System.Int32)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.Insert(System.Int32,InnerLibs.DataBase.Result)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.LastIndexOf(InnerLibs.DataBase.Result)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.LastIndexOf(InnerLibs.DataBase.Result,System.Int32)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.LastIndexOf(InnerLibs.DataBase.Result,System.Int32,System.Int32)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.Remove(InnerLibs.DataBase.Result)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IList#Remove(System.Object)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.RemoveAll(System.Predicate{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.RemoveAt(System.Int32)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.Reverse
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.Reverse(System.Int32,System.Int32)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.Sort
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.Sort(System.Collections.Generic.IComparer{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.Sort(System.Comparison{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.ToArray
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.TrimExcess
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.TrueForAll(System.Predicate{InnerLibs.DataBase.Result})
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.Capacity
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.Count
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.System.Collections.IList.IsFixedSize
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.System.Collections.Generic.ICollection<T>.IsReadOnly
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.System.Collections.IList.IsReadOnly
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.System.Collections.ICollection.IsSynchronized
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.System.Collections.ICollection.SyncRoot
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.Finalize
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.ClassTools.ContainsAll(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Result})
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.ClassTools.ContainsAny(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Result})
  - InnerLibs.DataBase.Reader.InnerLibs.ClassTools.CreateDictionary
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.ClassTools.DistinctCount
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.ClassTools.FirstOr(InnerLibs.DataBase.Result)
  - System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  - System.Object.InnerLibs.ClassTools.GetProperties
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  - System.Object.InnerLibs.ClassTools.IsArrayOf``1
  - System.Object.InnerLibs.ClassTools.IsDictionary
  - InnerLibs.DataBase.Reader.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Reader},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Reader})
  - InnerLibs.DataBase.Reader.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - InnerLibs.DataBase.Reader.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Reader}[],System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Reader})
  - System.Object.InnerLibs.ClassTools.IsList
  - InnerLibs.DataBase.Reader.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Reader},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Reader})
  - InnerLibs.DataBase.Reader.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - System.Object.InnerLibs.ClassTools.IsType``1
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.ClassTools.LastOr(InnerLibs.DataBase.Result)
  - InnerLibs.DataBase.Reader.InnerLibs.ClassTools.NullCoalesce(InnerLibs.DataBase.Reader[])
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.ClassTools.NullCoalesce
  - InnerLibs.DataBase.Reader.InnerLibs.ClassTools.NullifyProperties
  - System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  - System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  - System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  - System.Object.InnerLibs.DataManipulation.GetDbType
  - InnerLibs.DataBase.Reader.InnerLibs.Converter.DefineEmptyList
  - InnerLibs.DataBase.Reader.InnerLibs.Converter.ChangeType``1
  - System.Object.InnerLibs.JsonViewer.CreateNode
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Mathematic.CalculatePercent``2(System.Func{InnerLibs.DataBase.Result,{TKey}},System.Func{InnerLibs.DataBase.Result,{TValue}})
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Mathematic.CalculatePercent``1(System.Func{InnerLibs.DataBase.Result,{Tvalue}})
  - InnerLibs.DataBase.Reader.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.InnerLibs.Text.GetRandomItem
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Text.Join(System.String)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.InnerLibs.Text.Join(System.String)
  - System.Object.InnerLibs.Text.SerializeJSON(System.String)
  - System.Collections.Generic.List{InnerLibs.DataBase.Result}.InnerLibs.Text.Shuffle
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Text.ToHtmlList(System.Boolean)
  - System.Object.InnerLibs.Verify.IsNumber
  - System.Object.InnerLibs.Verify.IsNotNumber
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Verify.IfNoIndex(System.Int32,InnerLibs.DataBase.Result)
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Verify.IfBlankOrNoIndex(System.Int32,InnerLibs.DataBase.Result)
  - System.Object.InnerLibs.Verify.IfBlank``1({T})
  - InnerLibs.DataBase.Reader.InnerLibs.Verify.NullIf(System.Func{InnerLibs.DataBase.Reader,System.Boolean})
  - InnerLibs.DataBase.Reader.InnerLibs.Verify.NullIf(InnerLibs.DataBase.Reader)
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Verify.IsEmpty
  - InnerLibs.DataBase.Reader.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  - InnerLibs.DataBase.Reader.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.DataBase.Reader,{TextType}},System.Func{InnerLibs.DataBase.Reader,{ValueType}})
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Web.ToListItems``2(System.Func{InnerLibs.DataBase.Result,{TextType}},System.Func{InnerLibs.DataBase.Result,{ValueType}},System.Func{InnerLibs.DataBase.Result,System.Boolean})
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Web.ToListItems``2(System.Func{InnerLibs.DataBase.Result,{TextType}},System.Func{InnerLibs.DataBase.Result,{ValueType}},{ValueType}[])
  - System.Object.InnerLibs.WinForms.GetCastedValue
  - System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  - InnerLibs.DataBase.Reader.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Func{InnerLibs.DataBase.Result,{TKey}},System.Func{InnerLibs.DataBase.Result,{TOrder}},System.Boolean)
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.DistinctBy``1(System.Func{InnerLibs.DataBase.Result,{TKey}})
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.ForEach(System.Action{InnerLibs.DataBase.Result})
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.GroupByPage(System.Int32)
  - InnerLibs.DataBase.Reader.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.DataBase.Reader,System.Func{InnerLibs.DataBase.Reader,System.Object}[])
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.OrderByLike(System.Func{InnerLibs.DataBase.Result,System.String},System.Boolean,System.String[])
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.OrderByRandom
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.Page(System.Int32,System.Int32)
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.SelectJoin(System.Func{InnerLibs.DataBase.Result,System.String},System.String)
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.SelectManyJoin(System.Func{InnerLibs.DataBase.Result,System.Collections.Generic.IEnumerable{System.String}},System.String)
  - System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.TakeAndOrder``1(System.Func{InnerLibs.DataBase.Result,System.Boolean},System.Func{InnerLibs.DataBase.Result,{DefaultOrderType}})
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: InnerLibs.DataBase.Reader.ToString
  commentId: M:InnerLibs.DataBase.Reader.ToString
  id: ToString
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: DataBase.Reader.ToString()
  fullName: InnerLibs.DataBase.Reader.ToString()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToString
    path: DatabaseReader.vb
    startLine: 66
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um Json do objeto\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: InnerLibs.DataBase.Reader.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: InnerLibs.DataBase.Reader.Dispose
  commentId: M:InnerLibs.DataBase.Reader.Dispose
  id: Dispose
  isEii: true
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: IDisposable.Dispose()
  nameWithType: DataBase.Reader.IDisposable.Dispose()
  fullName: InnerLibs.DataBase.Reader.System.IDisposable.Dispose()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: Dispose
    path: DatabaseReader.vb
    startLine: 73
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nEsvazia o reader\n"
  example: []
  syntax:
    content: public void IDisposable.Dispose()
    content.vb: Public Sub Dispose Implements IDisposable.Dispose
  overload: InnerLibs.DataBase.Reader.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: DataBase.Reader.Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.Dispose()
  name.vb: Dispose()
- uid: InnerLibs.DataBase.Reader.Close
  commentId: M:InnerLibs.DataBase.Reader.Close
  id: Close
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: DataBase.Reader.Close()
  fullName: InnerLibs.DataBase.Reader.Close()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: Close
    path: DatabaseReader.vb
    startLine: 82
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nEsvazia e destroi o reader\n"
  example: []
  syntax:
    content: public void Close()
    content.vb: Public Sub Close
  overload: InnerLibs.DataBase.Reader.Close*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.IsClosed
  commentId: P:InnerLibs.DataBase.Reader.IsClosed
  id: IsClosed
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: IsClosed
  nameWithType: DataBase.Reader.IsClosed
  fullName: InnerLibs.DataBase.Reader.IsClosed
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: IsClosed
    path: DatabaseReader.vb
    startLine: 90
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se o Reader está vazio ou fechado ( <xref href=\"System.Collections.Generic.List%601.Count\" data-throw-if-not-resolved=\"false\"></xref> = 0)\n"
  example: []
  syntax:
    content: public object IsClosed { get; }
    parameters: []
    return:
      type: System.Object
      description: ''
    content.vb: Public ReadOnly Property IsClosed As Object
  overload: InnerLibs.DataBase.Reader.IsClosed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: InnerLibs.DataBase.Reader.GetColumns
  commentId: M:InnerLibs.DataBase.Reader.GetColumns
  id: GetColumns
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: GetColumns()
  nameWithType: DataBase.Reader.GetColumns()
  fullName: InnerLibs.DataBase.Reader.GetColumns()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: GetColumns
    path: DatabaseReader.vb
    startLine: 100
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna as colunas do resultado atual\n"
  example: []
  syntax:
    content: public IEnumerable<string> GetColumns()
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: ''
    content.vb: Public Function GetColumns As IEnumerable(Of String)
  overload: InnerLibs.DataBase.Reader.GetColumns*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.GetCurrentRowColumns
  commentId: M:InnerLibs.DataBase.Reader.GetCurrentRowColumns
  id: GetCurrentRowColumns
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: GetCurrentRowColumns()
  nameWithType: DataBase.Reader.GetCurrentRowColumns()
  fullName: InnerLibs.DataBase.Reader.GetCurrentRowColumns()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: GetCurrentRowColumns
    path: DatabaseReader.vb
    startLine: 116
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna apenas as colunas que o resultado atual possuir\n"
  example: []
  syntax:
    content: public IEnumerable<string> GetCurrentRowColumns()
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: ''
    content.vb: Public Function GetCurrentRowColumns As IEnumerable(Of String)
  overload: InnerLibs.DataBase.Reader.GetCurrentRowColumns*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.CountRows
  commentId: M:InnerLibs.DataBase.Reader.CountRows
  id: CountRows
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: CountRows()
  nameWithType: DataBase.Reader.CountRows()
  fullName: InnerLibs.DataBase.Reader.CountRows()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: CountRows
    path: DatabaseReader.vb
    startLine: 128
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o numero de linhas do resultado atual\n"
  example: []
  syntax:
    content: public int CountRows()
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function CountRows As Integer
  overload: InnerLibs.DataBase.Reader.CountRows*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.CountRows(System.Int32)
  commentId: M:InnerLibs.DataBase.Reader.CountRows(System.Int32)
  id: CountRows(System.Int32)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: CountRows(Int32)
  nameWithType: DataBase.Reader.CountRows(Int32)
  fullName: InnerLibs.DataBase.Reader.CountRows(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: CountRows
    path: DatabaseReader.vb
    startLine: 140
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o numero de linhas de um resultado\n"
  example: []
  syntax:
    content: public int CountRows(int ResultIndex)
    parameters:
    - id: ResultIndex
      type: System.Int32
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function CountRows(ResultIndex As Integer) As Integer
  overload: InnerLibs.DataBase.Reader.CountRows*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.Item(System.String)
  commentId: P:InnerLibs.DataBase.Reader.Item(System.String)
  id: Item(System.String)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: DataBase.Reader.Item[String]
  fullName: InnerLibs.DataBase.Reader.Item[System.String]
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: Item
    path: DatabaseReader.vb
    startLine: 153
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o valor da coluna do resultado e linha atual a partir do nome da coluna\n"
  example: []
  syntax:
    content: public object this[string ColumnName] { get; }
    parameters:
    - id: ColumnName
      type: System.String
      description: Nome da Coluna
    return:
      type: System.Object
      description: ''
    content.vb: Public ReadOnly Property Item(ColumnName As String) As Object
  overload: InnerLibs.DataBase.Reader.Item*
  nameWithType.vb: DataBase.Reader.Item(String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: InnerLibs.DataBase.Reader.Item(System.String)
  name.vb: Item(String)
- uid: InnerLibs.DataBase.Reader.GetItem``1(System.String)
  commentId: M:InnerLibs.DataBase.Reader.GetItem``1(System.String)
  id: GetItem``1(System.String)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: GetItem<Type>(String)
  nameWithType: DataBase.Reader.GetItem<Type>(String)
  fullName: InnerLibs.DataBase.Reader.GetItem<Type>(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: GetItem
    path: DatabaseReader.vb
    startLine: 171
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o valor da coluna do resultado e linha atual a partir do nome da coluna convertendo para um outro tipo\n"
  example: []
  syntax:
    content: public Type GetItem<Type>(string ColumnName)
    parameters:
    - id: ColumnName
      type: System.String
      description: ''
    typeParameters:
    - id: Type
      description: ''
    return:
      type: '{Type}'
      description: ''
    content.vb: Public Function GetItem(Of Type)(ColumnName As String) As Type
  overload: InnerLibs.DataBase.Reader.GetItem*
  nameWithType.vb: DataBase.Reader.GetItem(Of Type)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.GetItem(Of Type)(System.String)
  name.vb: GetItem(Of Type)(String)
- uid: InnerLibs.DataBase.Reader.GetItem``1(System.Int32)
  commentId: M:InnerLibs.DataBase.Reader.GetItem``1(System.Int32)
  id: GetItem``1(System.Int32)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: GetItem<Type>(Int32)
  nameWithType: DataBase.Reader.GetItem<Type>(Int32)
  fullName: InnerLibs.DataBase.Reader.GetItem<Type>(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: GetItem
    path: DatabaseReader.vb
    startLine: 186
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o valor da coluna do resultado e linha atual a partir do índice da coluna convertendo para um outro tipo\n"
  example: []
  syntax:
    content: public Type GetItem<Type>(int ColumnIndex)
    parameters:
    - id: ColumnIndex
      type: System.Int32
      description: ''
    typeParameters:
    - id: Type
      description: ''
    return:
      type: '{Type}'
      description: ''
    content.vb: Public Function GetItem(Of Type)(ColumnIndex As Integer) As Type
  overload: InnerLibs.DataBase.Reader.GetItem*
  nameWithType.vb: DataBase.Reader.GetItem(Of Type)(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.GetItem(Of Type)(System.Int32)
  name.vb: GetItem(Of Type)(Int32)
- uid: InnerLibs.DataBase.Reader.Item(System.String,System.Int32)
  commentId: P:InnerLibs.DataBase.Reader.Item(System.String,System.Int32)
  id: Item(System.String,System.Int32)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: Item[String, Int32]
  nameWithType: DataBase.Reader.Item[String, Int32]
  fullName: InnerLibs.DataBase.Reader.Item[System.String, System.Int32]
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: Item
    path: DatabaseReader.vb
    startLine: 202
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o valor da coluna do resultado de uma linha especifica a partir do nome da coluna\ne o Index da linha\n"
  example: []
  syntax:
    content: public object this[string ColumnName, int RowIndex] { get; }
    parameters:
    - id: ColumnName
      type: System.String
      description: Nome da Coluna
    - id: RowIndex
      type: System.Int32
      description: Índice da Linha
    return:
      type: System.Object
      description: ''
    content.vb: Public ReadOnly Property Item(ColumnName As String, RowIndex As Integer) As Object
  overload: InnerLibs.DataBase.Reader.Item*
  nameWithType.vb: DataBase.Reader.Item(String, Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: InnerLibs.DataBase.Reader.Item(System.String, System.Int32)
  name.vb: Item(String, Int32)
- uid: InnerLibs.DataBase.Reader.Item(System.Int32)
  commentId: P:InnerLibs.DataBase.Reader.Item(System.Int32)
  id: Item(System.Int32)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: DataBase.Reader.Item[Int32]
  fullName: InnerLibs.DataBase.Reader.Item[System.Int32]
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: Item
    path: DatabaseReader.vb
    startLine: 219
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o valor da coluna do resultado e linha atual a partir do índice da coluna\n"
  example: []
  syntax:
    content: public object this[int ColumnIndex] { get; }
    parameters:
    - id: ColumnIndex
      type: System.Int32
      description: Índice da Coluna
    return:
      type: System.Object
      description: ''
    content.vb: Public ReadOnly Property Item(ColumnIndex As Integer) As Object
  overload: InnerLibs.DataBase.Reader.Item*
  nameWithType.vb: DataBase.Reader.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: InnerLibs.DataBase.Reader.Item(System.Int32)
  name.vb: Item(Int32)
- uid: InnerLibs.DataBase.Reader.Item(System.Int32,System.Int32)
  commentId: P:InnerLibs.DataBase.Reader.Item(System.Int32,System.Int32)
  id: Item(System.Int32,System.Int32)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: Item[Int32, Int32]
  nameWithType: DataBase.Reader.Item[Int32, Int32]
  fullName: InnerLibs.DataBase.Reader.Item[System.Int32, System.Int32]
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: Item
    path: DatabaseReader.vb
    startLine: 238
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o valor da coluna do resultado de uma linha especifica a partir do nome da coluna\ne o Index da linha\n"
  example: []
  syntax:
    content: public object this[int ColumnIndex, int RowIndex] { get; }
    parameters:
    - id: ColumnIndex
      type: System.Int32
      description: Índice da Coluna
    - id: RowIndex
      type: System.Int32
      description: Índice da Linha
    return:
      type: System.Object
      description: ''
    content.vb: Public ReadOnly Property Item(ColumnIndex As Integer, RowIndex As Integer) As Object
  overload: InnerLibs.DataBase.Reader.Item*
  nameWithType.vb: DataBase.Reader.Item(Int32, Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: InnerLibs.DataBase.Reader.Item(System.Int32, System.Int32)
  name.vb: Item(Int32, Int32)
- uid: InnerLibs.DataBase.Reader.HasRows
  commentId: P:InnerLibs.DataBase.Reader.HasRows
  id: HasRows
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: HasRows
  nameWithType: DataBase.Reader.HasRows
  fullName: InnerLibs.DataBase.Reader.HasRows
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: HasRows
    path: DatabaseReader.vb
    startLine: 253
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se o resultado atual possui linhas\n"
  example: []
  syntax:
    content: public bool HasRows { get; }
    parameters: []
    return:
      type: System.Boolean
      description: ''
    content.vb: Public ReadOnly Property HasRows As Boolean
  overload: InnerLibs.DataBase.Reader.HasRows*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: InnerLibs.DataBase.Reader.HasResults
  commentId: P:InnerLibs.DataBase.Reader.HasResults
  id: HasResults
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: HasResults
  nameWithType: DataBase.Reader.HasResults
  fullName: InnerLibs.DataBase.Reader.HasResults
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: HasResults
    path: DatabaseReader.vb
    startLine: 263
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se exitem resultados\n"
  example: []
  syntax:
    content: public bool HasResults { get; }
    parameters: []
    return:
      type: System.Boolean
      description: ''
    content.vb: Public ReadOnly Property HasResults As Boolean
  overload: InnerLibs.DataBase.Reader.HasResults*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: InnerLibs.DataBase.Reader.GetResult(System.Int32)
  commentId: M:InnerLibs.DataBase.Reader.GetResult(System.Int32)
  id: GetResult(System.Int32)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: GetResult(Int32)
  nameWithType: DataBase.Reader.GetResult(Int32)
  fullName: InnerLibs.DataBase.Reader.GetResult(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: GetResult
    path: DatabaseReader.vb
    startLine: 274
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um resultado (tabela) a partir do seu Index.\n"
  example: []
  syntax:
    content: public DataBase.Result GetResult(int ResultIndex)
    parameters:
    - id: ResultIndex
      type: System.Int32
      description: Indice do resultado
    return:
      type: InnerLibs.DataBase.Result
      description: ''
    content.vb: Public Function GetResult(ResultIndex As Integer) As DataBase.Result
  overload: InnerLibs.DataBase.Reader.GetResult*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.GetRow(System.Int32)
  commentId: M:InnerLibs.DataBase.Reader.GetRow(System.Int32)
  id: GetRow(System.Int32)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: GetRow(Int32)
  nameWithType: DataBase.Reader.GetRow(Int32)
  fullName: InnerLibs.DataBase.Reader.GetRow(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: GetRow
    path: DatabaseReader.vb
    startLine: 283
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma linha do resultado atual\n"
  example: []
  syntax:
    content: public DataBase.Row GetRow(int RowIndex)
    parameters:
    - id: RowIndex
      type: System.Int32
      description: ''
    return:
      type: InnerLibs.DataBase.Row
      description: ''
    content.vb: Public Function GetRow(RowIndex As Integer) As DataBase.Row
  overload: InnerLibs.DataBase.Reader.GetRow*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.GetCurrentRow
  commentId: M:InnerLibs.DataBase.Reader.GetCurrentRow
  id: GetCurrentRow
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: GetCurrentRow()
  nameWithType: DataBase.Reader.GetCurrentRow()
  fullName: InnerLibs.DataBase.Reader.GetCurrentRow()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: GetCurrentRow
    path: DatabaseReader.vb
    startLine: 295
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna a linha atual do resultado atual\n"
  example: []
  syntax:
    content: public DataBase.Row GetCurrentRow()
    return:
      type: InnerLibs.DataBase.Row
      description: ''
    content.vb: Public Function GetCurrentRow As DataBase.Row
  overload: InnerLibs.DataBase.Reader.GetCurrentRow*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.ToJSON(System.Boolean,System.String)
  commentId: M:InnerLibs.DataBase.Reader.ToJSON(System.Boolean,System.String)
  id: ToJSON(System.Boolean,System.String)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToJSON(Boolean, String)
  nameWithType: DataBase.Reader.ToJSON(Boolean, String)
  fullName: InnerLibs.DataBase.Reader.ToJSON(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToJSON
    path: DatabaseReader.vb
    startLine: 303
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um Json do Reader\n"
  example: []
  syntax:
    content: public string ToJSON(bool Clear = false, string DateFormat = "yyyy-MM-dd HH:mm:ss")
    parameters:
    - id: Clear
      type: System.Boolean
    - id: DateFormat
      type: System.String
    return:
      type: System.String
      description: ''
    content.vb: Public Function ToJSON(Clear As Boolean = False, DateFormat As String = "yyyy-MM-dd HH:mm:ss") As String
  overload: InnerLibs.DataBase.Reader.ToJSON*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.ToJSON(System.Int32,System.String)
  commentId: M:InnerLibs.DataBase.Reader.ToJSON(System.Int32,System.String)
  id: ToJSON(System.Int32,System.String)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToJSON(Int32, String)
  nameWithType: DataBase.Reader.ToJSON(Int32, String)
  fullName: InnerLibs.DataBase.Reader.ToJSON(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToJSON
    path: DatabaseReader.vb
    startLine: 338
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o Json do resultado especifico\n"
  example: []
  syntax:
    content: public string ToJSON(int ResultIndex, string DateFormat = "yyyy-MM-dd HH:mm:ss")
    parameters:
    - id: ResultIndex
      type: System.Int32
      description: Índice do resultado
    - id: DateFormat
      type: System.String
    return:
      type: System.String
      description: ''
    content.vb: Public Function ToJSON(ResultIndex As Integer, DateFormat As String = "yyyy-MM-dd HH:mm:ss") As String
  overload: InnerLibs.DataBase.Reader.ToJSON*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.Search(System.Object)
  commentId: M:InnerLibs.DataBase.Reader.Search(System.Object)
  id: Search(System.Object)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: Search(Object)
  nameWithType: DataBase.Reader.Search(Object)
  fullName: InnerLibs.DataBase.Reader.Search(System.Object)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: Search
    path: DatabaseReader.vb
    startLine: 351
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nEncontra linhas onde qualquer valor de suas colunas conter um determinado valor\n"
  example: []
  syntax:
    content: public DataBase.Result Search(object Value)
    parameters:
    - id: Value
      type: System.Object
      description: Valor
    return:
      type: InnerLibs.DataBase.Result
      description: ''
    content.vb: Public Function Search(Value As Object) As DataBase.Result
  overload: InnerLibs.DataBase.Reader.Search*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.#ctor(InnerLibs.DataBase.Result[])
  commentId: M:InnerLibs.DataBase.Reader.#ctor(InnerLibs.DataBase.Result[])
  id: '#ctor(InnerLibs.DataBase.Result[])'
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: Reader(DataBase.Result[])
  nameWithType: DataBase.Reader.Reader(DataBase.Result[])
  fullName: InnerLibs.DataBase.Reader.Reader(InnerLibs.DataBase.Result[])
  type: Constructor
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: .ctor
    path: DatabaseReader.vb
    startLine: 363
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um novo Reader a partir de uma coleçao de listas de Dicionários\n"
  example: []
  syntax:
    content: public Reader(params DataBase.Result[] Tables)
    parameters:
    - id: Tables
      type: InnerLibs.DataBase.Result[]
      description: Conunto de listas de dicionarios
    content.vb: Public Sub New(ParamArray Tables As DataBase.Result())
  overload: InnerLibs.DataBase.Reader.#ctor*
  nameWithType.vb: DataBase.Reader.Reader(DataBase.Result())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.Reader(InnerLibs.DataBase.Result())
  name.vb: Reader(DataBase.Result())
- uid: InnerLibs.DataBase.Reader.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object}[])
  commentId: M:InnerLibs.DataBase.Reader.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object}[])
  id: '#ctor(System.Collections.Generic.IDictionary{System.String,System.Object}[])'
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: Reader(IDictionary<String, Object>[])
  nameWithType: DataBase.Reader.Reader(IDictionary<String, Object>[])
  fullName: InnerLibs.DataBase.Reader.Reader(System.Collections.Generic.IDictionary<System.String, System.Object>[])
  type: Constructor
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: .ctor
    path: DatabaseReader.vb
    startLine: 373
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um novo Reader a partir de uma coleção de dicionários\n"
  example: []
  syntax:
    content: public Reader(params IDictionary<string, object>[] Rows)
    parameters:
    - id: Rows
      type: System.Collections.Generic.IDictionary{System.String,System.Object}[]
      description: Conunto de Dicionários
    content.vb: Public Sub New(ParamArray Rows As IDictionary(Of String, Object)())
  overload: InnerLibs.DataBase.Reader.#ctor*
  nameWithType.vb: DataBase.Reader.Reader(IDictionary(Of String, Object)())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.Reader(System.Collections.Generic.IDictionary(Of System.String, System.Object)())
  name.vb: Reader(IDictionary(Of String, Object)())
- uid: InnerLibs.DataBase.Reader.#ctor(System.Data.Common.DbDataReader)
  commentId: M:InnerLibs.DataBase.Reader.#ctor(System.Data.Common.DbDataReader)
  id: '#ctor(System.Data.Common.DbDataReader)'
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: Reader(DbDataReader)
  nameWithType: DataBase.Reader.Reader(DbDataReader)
  fullName: InnerLibs.DataBase.Reader.Reader(System.Data.Common.DbDataReader)
  type: Constructor
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: .ctor
    path: DatabaseReader.vb
    startLine: 383
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um novo Reader a partir de um <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Reader(DbDataReader Reader)
    parameters:
    - id: Reader
      type: System.Data.Common.DbDataReader
      description: Reader
    content.vb: Public Sub New(Reader As DbDataReader)
  overload: InnerLibs.DataBase.Reader.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.StartOver
  commentId: M:InnerLibs.DataBase.Reader.StartOver
  id: StartOver
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: StartOver()
  nameWithType: DataBase.Reader.StartOver()
  fullName: InnerLibs.DataBase.Reader.StartOver()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: StartOver
    path: DatabaseReader.vb
    startLine: 435
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nReinicia a leitura do Reader retornando os índices para seus valores padrão, é um alias\npara <xref href=\"InnerLibs.DataBase.Reader.Reset\" data-throw-if-not-resolved=\"false\"></xref>)\n"
  example: []
  syntax:
    content: public void StartOver()
    content.vb: Public Sub StartOver
  overload: InnerLibs.DataBase.Reader.StartOver*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.Reset
  commentId: M:InnerLibs.DataBase.Reader.Reset
  id: Reset
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: DataBase.Reader.Reset()
  fullName: InnerLibs.DataBase.Reader.Reset()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: Reset
    path: DatabaseReader.vb
    startLine: 443
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nReinicia a leitura do Reader retornando os índices para seus valores padrão\n"
  example: []
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: InnerLibs.DataBase.Reader.Reset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.NextResult
  commentId: M:InnerLibs.DataBase.Reader.NextResult
  id: NextResult
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: NextResult()
  nameWithType: DataBase.Reader.NextResult()
  fullName: InnerLibs.DataBase.Reader.NextResult()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: NextResult
    path: DatabaseReader.vb
    startLine: 451
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAvança para o próximo resultado\n"
  example: []
  syntax:
    content: public bool NextResult()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function NextResult As Boolean
  overload: InnerLibs.DataBase.Reader.NextResult*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.PreviousResult
  commentId: M:InnerLibs.DataBase.Reader.PreviousResult
  id: PreviousResult
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: PreviousResult()
  nameWithType: DataBase.Reader.PreviousResult()
  fullName: InnerLibs.DataBase.Reader.PreviousResult()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: PreviousResult
    path: DatabaseReader.vb
    startLine: 465
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna para os resultado anterior\n"
  example: []
  syntax:
    content: public bool PreviousResult()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function PreviousResult As Boolean
  overload: InnerLibs.DataBase.Reader.PreviousResult*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.Read
  commentId: M:InnerLibs.DataBase.Reader.Read
  id: Read
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: Read()
  nameWithType: DataBase.Reader.Read()
  fullName: InnerLibs.DataBase.Reader.Read()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: Read
    path: DatabaseReader.vb
    startLine: 479
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAvança para o próximo registro, é um alias para <xref href=\"InnerLibs.DataBase.Reader.GoForward\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool Read()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function Read As Boolean
  overload: InnerLibs.DataBase.Reader.Read*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.GoBack
  commentId: M:InnerLibs.DataBase.Reader.GoBack
  id: GoBack
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: GoBack()
  nameWithType: DataBase.Reader.GoBack()
  fullName: InnerLibs.DataBase.Reader.GoBack()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: GoBack
    path: DatabaseReader.vb
    startLine: 487
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetornar para o registro anterior\n"
  example: []
  syntax:
    content: public bool GoBack()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function GoBack As Boolean
  overload: InnerLibs.DataBase.Reader.GoBack*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.GoForward
  commentId: M:InnerLibs.DataBase.Reader.GoForward
  id: GoForward
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: GoForward()
  nameWithType: DataBase.Reader.GoForward()
  fullName: InnerLibs.DataBase.Reader.GoForward()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: GoForward
    path: DatabaseReader.vb
    startLine: 500
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAvança para o próximo registro\n"
  example: []
  syntax:
    content: public bool GoForward()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function GoForward As Boolean
  overload: InnerLibs.DataBase.Reader.GoForward*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.ToListItems(System.String,System.String,System.String[])
  commentId: M:InnerLibs.DataBase.Reader.ToListItems(System.String,System.String,System.String[])
  id: ToListItems(System.String,System.String,System.String[])
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToListItems(String, String, String[])
  nameWithType: DataBase.Reader.ToListItems(String, String, String[])
  fullName: InnerLibs.DataBase.Reader.ToListItems(System.String, System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToListItems
    path: DatabaseReader.vb
    startLine: 516
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um array de <xref href=\"System.Web.UI.WebControls.ListItem\" data-throw-if-not-resolved=\"false\"></xref> com os Itens de um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public ListItem[] ToListItems(string TextColumn, string ValueColumn = "", string[] SelectedValues = null)
    parameters:
    - id: TextColumn
      type: System.String
      description: Coluna que será usada como Texto do elemento option
    - id: ValueColumn
      type: System.String
      description: Coluna que será usada como Value do elemento option
    - id: SelectedValues
      type: System.String[]
      description: Valores Selecionados
    return:
      type: System.Web.UI.WebControls.ListItem[]
      description: ''
    content.vb: Public Function ToListItems(TextColumn As String, ValueColumn As String = "", SelectedValues As String() = Nothing) As ListItem()
  overload: InnerLibs.DataBase.Reader.ToListItems*
  nameWithType.vb: DataBase.Reader.ToListItems(String, String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.ToListItems(System.String, System.String, System.String())
  name.vb: ToListItems(String, String, String())
- uid: InnerLibs.DataBase.Reader.FillSelectControl(System.Web.UI.HtmlControls.HtmlSelect@,System.String,System.String,System.String[])
  commentId: M:InnerLibs.DataBase.Reader.FillSelectControl(System.Web.UI.HtmlControls.HtmlSelect@,System.String,System.String,System.String[])
  id: FillSelectControl(System.Web.UI.HtmlControls.HtmlSelect@,System.String,System.String,System.String[])
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: FillSelectControl(ref HtmlSelect, String, String, String[])
  nameWithType: DataBase.Reader.FillSelectControl(ref HtmlSelect, String, String, String[])
  fullName: InnerLibs.DataBase.Reader.FillSelectControl(ref System.Web.UI.HtmlControls.HtmlSelect, System.String, System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: FillSelectControl
    path: DatabaseReader.vb
    startLine: 535
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nPreenche um <xref href=\"System.Web.UI.HtmlControls.HtmlSelect\" data-throw-if-not-resolved=\"false\"></xref> com itens do <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void FillSelectControl(ref HtmlSelect SelectControl, string TextColumn, string ValueColumn = "", string[] SelectedValues = null)
    parameters:
    - id: SelectControl
      type: System.Web.UI.HtmlControls.HtmlSelect
    - id: TextColumn
      type: System.String
      description: Coluna que será usada como Texto do elemento option
    - id: ValueColumn
      type: System.String
      description: Coluna que será usada como Value do elemento option
    - id: SelectedValues
      type: System.String[]
      description: Valores Selecionados
    content.vb: Public Sub FillSelectControl(ByRef SelectControl As HtmlSelect, TextColumn As String, ValueColumn As String = "", SelectedValues As String() = Nothing)
  overload: InnerLibs.DataBase.Reader.FillSelectControl*
  nameWithType.vb: DataBase.Reader.FillSelectControl(ByRef HtmlSelect, String, String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.FillSelectControl(ByRef System.Web.UI.HtmlControls.HtmlSelect, System.String, System.String, System.String())
  name.vb: FillSelectControl(ByRef HtmlSelect, String, String, String())
- uid: InnerLibs.DataBase.Reader.ToList``1(System.String)
  commentId: M:InnerLibs.DataBase.Reader.ToList``1(System.String)
  id: ToList``1(System.String)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToList<TValue>(String)
  nameWithType: DataBase.Reader.ToList<TValue>(String)
  fullName: InnerLibs.DataBase.Reader.ToList<TValue>(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToList
    path: DatabaseReader.vb
    startLine: 545
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria uma lista de com os Itens de um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref> convertendo os valores\npara uma classe ou tipo especifico\n"
  example: []
  syntax:
    content: public List<TValue> ToList<TValue>(string Column)
    parameters:
    - id: Column
      type: System.String
      description: Coluna que será usada
    typeParameters:
    - id: TValue
    return:
      type: System.Collections.Generic.List{{TValue}}
      description: ''
    content.vb: Public Function ToList(Of TValue)(Column As String) As List(Of TValue)
  overload: InnerLibs.DataBase.Reader.ToList*
  nameWithType.vb: DataBase.Reader.ToList(Of TValue)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.ToList(Of TValue)(System.String)
  name.vb: ToList(Of TValue)(String)
- uid: InnerLibs.DataBase.Reader.ToList``1
  commentId: M:InnerLibs.DataBase.Reader.ToList``1
  id: ToList``1
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToList<TValue>()
  nameWithType: DataBase.Reader.ToList<TValue>()
  fullName: InnerLibs.DataBase.Reader.ToList<TValue>()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToList
    path: DatabaseReader.vb
    startLine: 562
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria uma lista de uma classe específica com os Itens de um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      public List<TValue> ToList<TValue>()
          where TValue : class
    typeParameters:
    - id: TValue
    return:
      type: System.Collections.Generic.List{{TValue}}
      description: ''
    content.vb: Public Function ToList(Of TValue As Class) As List(Of TValue)
  overload: InnerLibs.DataBase.Reader.ToList*
  nameWithType.vb: DataBase.Reader.ToList(Of TValue)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.ToList(Of TValue)()
  name.vb: ToList(Of TValue)()
- uid: InnerLibs.DataBase.Reader.GetValue(System.Int32,System.Int32,System.String)
  commentId: M:InnerLibs.DataBase.Reader.GetValue(System.Int32,System.Int32,System.String)
  id: GetValue(System.Int32,System.Int32,System.String)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: GetValue(Int32, Int32, String)
  nameWithType: DataBase.Reader.GetValue(Int32, Int32, String)
  fullName: InnerLibs.DataBase.Reader.GetValue(System.Int32, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: GetValue
    path: DatabaseReader.vb
    startLine: 585
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o valor de uma coluna especifica de um resultado de um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public object GetValue(int ResultIndex, int RowIndex, string Column)
    parameters:
    - id: ResultIndex
      type: System.Int32
      description: Indice do resultado
    - id: RowIndex
      type: System.Int32
      description: Indice da linha dor resultado
    - id: Column
      type: System.String
      description: Coluna
    return:
      type: System.Object
      description: ''
    content.vb: Public Function GetValue(ResultIndex As Integer, RowIndex As Integer, Column As String) As Object
  overload: InnerLibs.DataBase.Reader.GetValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.GetValue``1(System.Int32,System.Int32,System.String)
  commentId: M:InnerLibs.DataBase.Reader.GetValue``1(System.Int32,System.Int32,System.String)
  id: GetValue``1(System.Int32,System.Int32,System.String)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: GetValue<Type>(Int32, Int32, String)
  nameWithType: DataBase.Reader.GetValue<Type>(Int32, Int32, String)
  fullName: InnerLibs.DataBase.Reader.GetValue<Type>(System.Int32, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: GetValue
    path: DatabaseReader.vb
    startLine: 597
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o valor de uma coluna especifica de um resultado de um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Type GetValue<Type>(int ResultIndex, int RowIndex, string Column)
    parameters:
    - id: ResultIndex
      type: System.Int32
      description: Indice do resultado
    - id: RowIndex
      type: System.Int32
      description: Indice da linha dor resultado
    - id: Column
      type: System.String
      description: Coluna
    typeParameters:
    - id: Type
      description: Tipo para qual o valor será convertido
    return:
      type: '{Type}'
      description: ''
    content.vb: Public Function GetValue(Of Type)(ResultIndex As Integer, RowIndex As Integer, Column As String) As Type
  overload: InnerLibs.DataBase.Reader.GetValue*
  nameWithType.vb: DataBase.Reader.GetValue(Of Type)(Int32, Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.GetValue(Of Type)(System.Int32, System.Int32, System.String)
  name.vb: GetValue(Of Type)(Int32, Int32, String)
- uid: InnerLibs.DataBase.Reader.GetCurrentRowValues
  commentId: M:InnerLibs.DataBase.Reader.GetCurrentRowValues
  id: GetCurrentRowValues
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: GetCurrentRowValues()
  nameWithType: DataBase.Reader.GetCurrentRowValues()
  fullName: InnerLibs.DataBase.Reader.GetCurrentRowValues()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: GetCurrentRowValues
    path: DatabaseReader.vb
    startLine: 605
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um Array de Valores da linha atual\n"
  example: []
  syntax:
    content: public object[] GetCurrentRowValues()
    return:
      type: System.Object[]
      description: ''
    content.vb: Public Function GetCurrentRowValues As Object()
  overload: InnerLibs.DataBase.Reader.GetCurrentRowValues*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.GetCurrentRowAs``1
  commentId: M:InnerLibs.DataBase.Reader.GetCurrentRowAs``1
  id: GetCurrentRowAs``1
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: GetCurrentRowAs<Type>()
  nameWithType: DataBase.Reader.GetCurrentRowAs<Type>()
  fullName: InnerLibs.DataBase.Reader.GetCurrentRowAs<Type>()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: GetCurrentRowAs
    path: DatabaseReader.vb
    startLine: 613
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um Array de Valores da linha atual\n"
  example: []
  syntax:
    content: >-
      public Type GetCurrentRowAs<Type>()
          where Type : class
    typeParameters:
    - id: Type
    return:
      type: '{Type}'
      description: ''
    content.vb: Public Function GetCurrentRowAs(Of Type As Class) As Type
  overload: InnerLibs.DataBase.Reader.GetCurrentRowAs*
  nameWithType.vb: DataBase.Reader.GetCurrentRowAs(Of Type)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.GetCurrentRowAs(Of Type)()
  name.vb: GetCurrentRowAs(Of Type)()
- uid: InnerLibs.DataBase.Reader.ToDictionary``2(System.String,System.String)
  commentId: M:InnerLibs.DataBase.Reader.ToDictionary``2(System.String,System.String)
  id: ToDictionary``2(System.String,System.String)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToDictionary<TKey, TValue>(String, String)
  nameWithType: DataBase.Reader.ToDictionary<TKey, TValue>(String, String)
  fullName: InnerLibs.DataBase.Reader.ToDictionary<TKey, TValue>(System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToDictionary
    path: DatabaseReader.vb
    startLine: 631
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um Dictionary a partir de <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref> usando uma coluna como Key e\noutra como Value\n"
  example: []
  syntax:
    content: public Dictionary<TKey, TValue> ToDictionary<TKey, TValue>(string KeyColumn, string ValueColumn)
    parameters:
    - id: KeyColumn
      type: System.String
      description: Coluna que será usada como Key do dicionario
    - id: ValueColumn
      type: System.String
      description: Coluna que será usada como Value do dicionario
    typeParameters:
    - id: TKey
    - id: TValue
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: ''
    content.vb: Public Function ToDictionary(Of TKey, TValue)(KeyColumn As String, ValueColumn As String) As Dictionary(Of TKey, TValue)
  overload: InnerLibs.DataBase.Reader.ToDictionary*
  nameWithType.vb: DataBase.Reader.ToDictionary(Of TKey, TValue)(String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.ToDictionary(Of TKey, TValue)(System.String, System.String)
  name.vb: ToDictionary(Of TKey, TValue)(String, String)
- uid: InnerLibs.DataBase.Reader.ToTextValueList``1(System.String,System.String)
  commentId: M:InnerLibs.DataBase.Reader.ToTextValueList``1(System.String,System.String)
  id: ToTextValueList``1(System.String,System.String)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToTextValueList<TValue>(String, String)
  nameWithType: DataBase.Reader.ToTextValueList<TValue>(String, String)
  fullName: InnerLibs.DataBase.Reader.ToTextValueList<TValue>(System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToTextValueList
    path: DatabaseReader.vb
    startLine: 647
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria uma lista de pares com os Itens de um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public TextValueList<TValue> ToTextValueList<TValue>(string TextColumn, string ValueColumn = "")
    parameters:
    - id: TextColumn
      type: System.String
      description: Coluna que será usada como Text do item
    - id: ValueColumn
      type: System.String
      description: Coluna que será usada como Value do item
    typeParameters:
    - id: TValue
    return:
      type: InnerLibs.TextValueList{{TValue}}
      description: ''
    content.vb: Public Function ToTextValueList(Of TValue)(TextColumn As String, ValueColumn As String = "") As TextValueList(Of TValue)
  overload: InnerLibs.DataBase.Reader.ToTextValueList*
  nameWithType.vb: DataBase.Reader.ToTextValueList(Of TValue)(String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.ToTextValueList(Of TValue)(System.String, System.String)
  name.vb: ToTextValueList(Of TValue)(String, String)
- uid: InnerLibs.DataBase.Reader.ToQueryString
  commentId: M:InnerLibs.DataBase.Reader.ToQueryString
  id: ToQueryString
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToQueryString()
  nameWithType: DataBase.Reader.ToQueryString()
  fullName: InnerLibs.DataBase.Reader.ToQueryString()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToQueryString
    path: DatabaseReader.vb
    startLine: 662
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma o resultado de um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref> em QueryString\n"
  example: []
  syntax:
    content: public string ToQueryString()
    return:
      type: System.String
      description: ''
    content.vb: Public Function ToQueryString As String
  overload: InnerLibs.DataBase.Reader.ToQueryString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.ToUrl(System.Uri)
  commentId: M:InnerLibs.DataBase.Reader.ToUrl(System.Uri)
  id: ToUrl(System.Uri)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToUrl(Uri)
  nameWithType: DataBase.Reader.ToUrl(Uri)
  fullName: InnerLibs.DataBase.Reader.ToUrl(System.Uri)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToUrl
    path: DatabaseReader.vb
    startLine: 679
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma url com os itens como parametros\n"
  example: []
  syntax:
    content: public Uri ToUrl(Uri BaseUrl)
    parameters:
    - id: BaseUrl
      type: System.Uri
      description: Url Base
    return:
      type: System.Uri
      description: ''
    content.vb: Public Function ToUrl(BaseUrl As Uri) As Uri
  overload: InnerLibs.DataBase.Reader.ToUrl*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.ToUrl(System.String)
  commentId: M:InnerLibs.DataBase.Reader.ToUrl(System.String)
  id: ToUrl(System.String)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToUrl(String)
  nameWithType: DataBase.Reader.ToUrl(String)
  fullName: InnerLibs.DataBase.Reader.ToUrl(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToUrl
    path: DatabaseReader.vb
    startLine: 696
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma o resultado de um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref> em uma URL\n"
  example: []
  syntax:
    content: public string ToUrl(string BaseUrl)
    parameters:
    - id: BaseUrl
      type: System.String
      description: Url Base
    return:
      type: System.String
      description: ''
    content.vb: Public Function ToUrl(BaseUrl As String) As String
  overload: InnerLibs.DataBase.Reader.ToUrl*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.ToDelimitedString(System.String,System.String,System.String)
  commentId: M:InnerLibs.DataBase.Reader.ToDelimitedString(System.String,System.String,System.String)
  id: ToDelimitedString(System.String,System.String,System.String)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToDelimitedString(String, String, String)
  nameWithType: DataBase.Reader.ToDelimitedString(String, String, String)
  fullName: InnerLibs.DataBase.Reader.ToDelimitedString(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToDelimitedString
    path: DatabaseReader.vb
    startLine: 712
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref> em uma string delimitada por caracteres\n"
  example: []
  syntax:
    content: public string ToDelimitedString(string ColDelimiter = "[ColDelimiter]", string RowDelimiter = "[RowDelimiter]", string TableDelimiter = "[TableDelimiter]")
    parameters:
    - id: ColDelimiter
      type: System.String
      description: Delimitador de Coluna
    - id: RowDelimiter
      type: System.String
      description: Delimitador de Linha
    - id: TableDelimiter
      type: System.String
      description: Delimitador de Tabelas
    return:
      type: System.String
      description: Uma string delimitada
    content.vb: Public Function ToDelimitedString(ColDelimiter As String = "[ColDelimiter]", RowDelimiter As String = "[RowDelimiter]", TableDelimiter As String = "[TableDelimiter]") As String
  overload: InnerLibs.DataBase.Reader.ToDelimitedString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.ToDataTable
  commentId: M:InnerLibs.DataBase.Reader.ToDataTable
  id: ToDataTable
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToDataTable()
  nameWithType: DataBase.Reader.ToDataTable()
  fullName: InnerLibs.DataBase.Reader.ToDataTable()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToDataTable
    path: DatabaseReader.vb
    startLine: 731
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria uma DataTable com os dados deste reader\n"
  example: []
  syntax:
    content: public DataTable ToDataTable()
    return:
      type: System.Data.DataTable
      description: ''
    content.vb: Public Function ToDataTable As DataTable
  overload: InnerLibs.DataBase.Reader.ToDataTable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.ToXML(System.String,System.String)
  commentId: M:InnerLibs.DataBase.Reader.ToXML(System.String,System.String)
  id: ToXML(System.String,System.String)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToXML(String, String)
  nameWithType: DataBase.Reader.ToXML(String, String)
  fullName: InnerLibs.DataBase.Reader.ToXML(System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToXML
    path: DatabaseReader.vb
    startLine: 750
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nConverte um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref> em XML\n"
  example: []
  syntax:
    content: public XmlDocument ToXML(string TableName = "Table", string ItemName = "Row")
    parameters:
    - id: TableName
      type: System.String
      description: Nome do nó principal do documento
    - id: ItemName
      type: System.String
      description: Nome do nó que representa cada linha
    return:
      type: System.Xml.XmlDocument
    content.vb: Public Function ToXML(TableName As String = "Table", ItemName As String = "Row") As XmlDocument
  overload: InnerLibs.DataBase.Reader.ToXML*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.ToCSV(System.String)
  commentId: M:InnerLibs.DataBase.Reader.ToCSV(System.String)
  id: ToCSV(System.String)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToCSV(String)
  nameWithType: DataBase.Reader.ToCSV(String)
  fullName: InnerLibs.DataBase.Reader.ToCSV(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToCSV
    path: DatabaseReader.vb
    startLine: 780
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nConverte um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref> em CSV\n"
  example: []
  syntax:
    content: public string ToCSV(string Separator = ";")
    parameters:
    - id: Separator
      type: System.String
      description: Separador de valores (vírgula)
    return:
      type: System.String
      description: uma string Comma Separated Values (CSV)
    content.vb: Public Function ToCSV(Separator As String = ";") As String
  overload: InnerLibs.DataBase.Reader.ToCSV*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.ToSession(System.Web.SessionState.HttpSessionState,System.Int32)
  commentId: M:InnerLibs.DataBase.Reader.ToSession(System.Web.SessionState.HttpSessionState,System.Int32)
  id: ToSession(System.Web.SessionState.HttpSessionState,System.Int32)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToSession(HttpSessionState, Int32)
  nameWithType: DataBase.Reader.ToSession(HttpSessionState, Int32)
  fullName: InnerLibs.DataBase.Reader.ToSession(System.Web.SessionState.HttpSessionState, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToSession
    path: DatabaseReader.vb
    startLine: 803
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCopia a primeira linha de um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref> para uma sessão\nHttpSessionState usando os nomes das colunas como os nomes dos objetos da sessão\n"
  example: []
  syntax:
    content: public void ToSession(HttpSessionState Session, int Timeout = 0)
    parameters:
    - id: Session
      type: System.Web.SessionState.HttpSessionState
      description: Objeto da sessão
    - id: Timeout
      type: System.Int32
      description: "\nTempo em minutos para a sessão expirar (se não especificado não altera o timeout da sessão)\n"
    content.vb: Public Sub ToSession(Session As HttpSessionState, Timeout As Integer = 0)
  overload: InnerLibs.DataBase.Reader.ToSession*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.ToMarkdownTable
  commentId: M:InnerLibs.DataBase.Reader.ToMarkdownTable
  id: ToMarkdownTable
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToMarkdownTable()
  nameWithType: DataBase.Reader.ToMarkdownTable()
  fullName: InnerLibs.DataBase.Reader.ToMarkdownTable()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToMarkdownTable
    path: DatabaseReader.vb
    startLine: 821
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nConverte um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref> para uma tabela em Markdown Pipe\n"
  example: []
  syntax:
    content: public string ToMarkdownTable()
    return:
      type: System.String
      description: ''
    content.vb: Public Function ToMarkdownTable As String
  overload: InnerLibs.DataBase.Reader.ToMarkdownTable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.ToHTMLTable(System.Boolean)
  commentId: M:InnerLibs.DataBase.Reader.ToHTMLTable(System.Boolean)
  id: ToHTMLTable(System.Boolean)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ToHTMLTable(Boolean)
  nameWithType: DataBase.Reader.ToHTMLTable(Boolean)
  fullName: InnerLibs.DataBase.Reader.ToHTMLTable(System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ToHTMLTable
    path: DatabaseReader.vb
    startLine: 856
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nConverte um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref> para uma tabela em HTML\n"
  example: []
  syntax:
    content: public HtmlElement ToHTMLTable(bool BeautfyColumnNames = false)
    parameters:
    - id: BeautfyColumnNames
      type: System.Boolean
      description: Embeleza nomes de colunas
    return:
      type: InnerLibs.HtmlParser.HtmlElement
      description: ''
    content.vb: Public Function ToHTMLTable(BeautfyColumnNames As Boolean = False) As HtmlElement
  overload: InnerLibs.DataBase.Reader.ToHTMLTable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Reader.ApplyToControls(System.Windows.Forms.Control[])
  commentId: M:InnerLibs.DataBase.Reader.ApplyToControls(System.Windows.Forms.Control[])
  id: ApplyToControls(System.Windows.Forms.Control[])
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ApplyToControls(Control[])
  nameWithType: DataBase.Reader.ApplyToControls(Control[])
  fullName: InnerLibs.DataBase.Reader.ApplyToControls(System.Windows.Forms.Control[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ApplyToControls
    path: DatabaseReader.vb
    startLine: 891
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAplica os valores encontrados nas colunas de um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref> em controles\ncom mesmo ID das colunas. Se os conroles não existirem no resultado eles serão ignorados.\n"
  example: []
  syntax:
    content: public Control[] ApplyToControls(params Control[] Controls)
    parameters:
    - id: Controls
      type: System.Windows.Forms.Control[]
      description: Controles que serão Manipulados
    return:
      type: System.Windows.Forms.Control[]
      description: Um array contendo os inputs manipulados
    content.vb: Public Function ApplyToControls(ParamArray Controls As Control()) As Control()
  overload: InnerLibs.DataBase.Reader.ApplyToControls*
  nameWithType.vb: DataBase.Reader.ApplyToControls(Control())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.ApplyToControls(System.Windows.Forms.Control())
  name.vb: ApplyToControls(Control())
- uid: InnerLibs.DataBase.Reader.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.DataBase.Reader.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  id: ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: ApplyToControls(HtmlControl[])
  nameWithType: DataBase.Reader.ApplyToControls(HtmlControl[])
  fullName: InnerLibs.DataBase.Reader.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: ApplyToControls
    path: DatabaseReader.vb
    startLine: 907
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAplica os valores encontrados nas colunas de um <xref href=\"InnerLibs.DataBase.Reader\" data-throw-if-not-resolved=\"false\"></xref> em controles\ncom mesmo ID das colunas. Se os conroles não existirem no resultado eles serão ignorados.\n"
  example: []
  syntax:
    content: public HtmlControl[] ApplyToControls(params HtmlControl[] Controls)
    parameters:
    - id: Controls
      type: System.Web.UI.HtmlControls.HtmlControl[]
      description: Controles que serão Manipulados
    return:
      type: System.Web.UI.HtmlControls.HtmlControl[]
      description: Um array contendo os inputs manipulados
    content.vb: Public Function ApplyToControls(ParamArray Controls As HtmlControl()) As HtmlControl()
  overload: InnerLibs.DataBase.Reader.ApplyToControls*
  nameWithType.vb: DataBase.Reader.ApplyToControls(HtmlControl())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(HtmlControl())
- uid: InnerLibs.DataBase.Reader.FillDataGridView(System.Windows.Forms.DataGridView@,System.Int32)
  commentId: M:InnerLibs.DataBase.Reader.FillDataGridView(System.Windows.Forms.DataGridView@,System.Int32)
  id: FillDataGridView(System.Windows.Forms.DataGridView@,System.Int32)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: FillDataGridView(ref DataGridView, Int32)
  nameWithType: DataBase.Reader.FillDataGridView(ref DataGridView, Int32)
  fullName: InnerLibs.DataBase.Reader.FillDataGridView(ref System.Windows.Forms.DataGridView, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: FillDataGridView
    path: DatabaseReader.vb
    startLine: 929
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nPreenche um DataGrivView com os resultados\n"
  example: []
  syntax:
    content: public DataGridView FillDataGridView(ref DataGridView DataGridView, int ResultIndex = 0)
    parameters:
    - id: DataGridView
      type: System.Windows.Forms.DataGridView
    - id: ResultIndex
      type: System.Int32
    return:
      type: System.Windows.Forms.DataGridView
      description: ''
    content.vb: Public Function FillDataGridView(ByRef DataGridView As DataGridView, ResultIndex As Integer = 0) As DataGridView
  overload: InnerLibs.DataBase.Reader.FillDataGridView*
  nameWithType.vb: DataBase.Reader.FillDataGridView(ByRef DataGridView, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.FillDataGridView(ByRef System.Windows.Forms.DataGridView, System.Int32)
  name.vb: FillDataGridView(ByRef DataGridView, Int32)
- uid: InnerLibs.DataBase.Reader.FillComboBox``1(System.Windows.Forms.ComboBox@,System.String,System.String)
  commentId: M:InnerLibs.DataBase.Reader.FillComboBox``1(System.Windows.Forms.ComboBox@,System.String,System.String)
  id: FillComboBox``1(System.Windows.Forms.ComboBox@,System.String,System.String)
  parent: InnerLibs.DataBase.Reader
  langs:
  - csharp
  - vb
  name: FillComboBox<TValue>(ref ComboBox, String, String)
  nameWithType: DataBase.Reader.FillComboBox<TValue>(ref ComboBox, String, String)
  fullName: InnerLibs.DataBase.Reader.FillComboBox<TValue>(ref System.Windows.Forms.ComboBox, System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/DatabaseReader.vb
    id: FillComboBox
    path: DatabaseReader.vb
    startLine: 953
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nPreenche um combobox com um TextValueList criado a partir deste DataBase.Reader\n"
  example: []
  syntax:
    content: public ComboBox FillComboBox<TValue>(ref ComboBox ComboBox, string TextColumn, string ValueColumn = null)
    parameters:
    - id: ComboBox
      type: System.Windows.Forms.ComboBox
      description: ''
    - id: TextColumn
      type: System.String
      description: Coluna usada como Texto do ComboBox
    - id: ValueColumn
      type: System.String
      description: Coluna usada como Valor do ComboBox
    typeParameters:
    - id: TValue
      description: Tipo do Valor da coluna
    return:
      type: System.Windows.Forms.ComboBox
      description: ''
    content.vb: Public Function FillComboBox(Of TValue)(ByRef ComboBox As ComboBox, TextColumn As String, ValueColumn As String = Nothing) As ComboBox
  overload: InnerLibs.DataBase.Reader.FillComboBox*
  nameWithType.vb: DataBase.Reader.FillComboBox(Of TValue)(ByRef ComboBox, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.Reader.FillComboBox(Of TValue)(ByRef System.Windows.Forms.ComboBox, System.String, System.String)
  name.vb: FillComboBox(Of TValue)(ByRef ComboBox, String, String)
references:
- uid: System.Data.Common.DbDataReader
  commentId: T:System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: true
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs
  commentId: N:InnerLibs
  name: InnerLibs
  nameWithType: InnerLibs
  fullName: InnerLibs
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  commentId: T:System.Collections.Generic.List{InnerLibs.DataBase.Result}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DataBase.Result>
  nameWithType: List<DataBase.Result>
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>
  nameWithType.vb: List(Of DataBase.Result)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result)
  name.vb: List(Of DataBase.Result)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{InnerLibs.DataBase.Result}
  commentId: T:System.Collections.Generic.IList{InnerLibs.DataBase.Result}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<DataBase.Result>
  nameWithType: IList<DataBase.Result>
  fullName: System.Collections.Generic.IList<InnerLibs.DataBase.Result>
  nameWithType.vb: IList(Of DataBase.Result)
  fullName.vb: System.Collections.Generic.IList(Of InnerLibs.DataBase.Result)
  name.vb: IList(Of DataBase.Result)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{InnerLibs.DataBase.Result}
  commentId: T:System.Collections.Generic.ICollection{InnerLibs.DataBase.Result}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<DataBase.Result>
  nameWithType: ICollection<DataBase.Result>
  fullName: System.Collections.Generic.ICollection<InnerLibs.DataBase.Result>
  nameWithType.vb: ICollection(Of DataBase.Result)
  fullName.vb: System.Collections.Generic.ICollection(Of InnerLibs.DataBase.Result)
  name.vb: ICollection(Of DataBase.Result)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Generic.IReadOnlyList{InnerLibs.DataBase.Result}
  commentId: T:System.Collections.Generic.IReadOnlyList{InnerLibs.DataBase.Result}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<DataBase.Result>
  nameWithType: IReadOnlyList<DataBase.Result>
  fullName: System.Collections.Generic.IReadOnlyList<InnerLibs.DataBase.Result>
  nameWithType.vb: IReadOnlyList(Of DataBase.Result)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of InnerLibs.DataBase.Result)
  name.vb: IReadOnlyList(Of DataBase.Result)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{InnerLibs.DataBase.Result}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{InnerLibs.DataBase.Result}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<DataBase.Result>
  nameWithType: IReadOnlyCollection<DataBase.Result>
  fullName: System.Collections.Generic.IReadOnlyCollection<InnerLibs.DataBase.Result>
  nameWithType.vb: IReadOnlyCollection(Of DataBase.Result)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of InnerLibs.DataBase.Result)
  name.vb: IReadOnlyCollection(Of DataBase.Result)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}
  commentId: T:System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DataBase.Result>
  nameWithType: IEnumerable<DataBase.Result>
  fullName: System.Collections.Generic.IEnumerable<InnerLibs.DataBase.Result>
  nameWithType.vb: IEnumerable(Of DataBase.Result)
  fullName.vb: System.Collections.Generic.IEnumerable(Of InnerLibs.DataBase.Result)
  name.vb: IEnumerable(Of DataBase.Result)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.Add(InnerLibs.DataBase.Result)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.Add(InnerLibs.DataBase.Result)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.Add(`0)
  name: Add(DataBase.Result)
  nameWithType: List<DataBase.Result>.Add(DataBase.Result)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Add(InnerLibs.DataBase.Result)
  nameWithType.vb: List(Of DataBase.Result).Add(DataBase.Result)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Add(InnerLibs.DataBase.Result)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<DataBase.Result>.Add
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of DataBase.Result).Add
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  name: IList.Add(Object)
  nameWithType: List<DataBase.Result>.IList.Add(Object)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of DataBase.Result).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<DataBase.Result>.IList.Add
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of DataBase.Result).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.AddRange(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.AddRange(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  name: AddRange(IEnumerable<DataBase.Result>)
  nameWithType: List<DataBase.Result>.AddRange(IEnumerable<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.AddRange(System.Collections.Generic.IEnumerable<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).AddRange(IEnumerable(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).AddRange(System.Collections.Generic.IEnumerable(Of InnerLibs.DataBase.Result))
  name.vb: AddRange(IEnumerable(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<DataBase.Result>.AddRange
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of DataBase.Result).AddRange
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.AsReadOnly
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.AsReadOnly
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.AsReadOnly
  name: AsReadOnly()
  nameWithType: List<DataBase.Result>.AsReadOnly()
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.AsReadOnly()
  nameWithType.vb: List(Of DataBase.Result).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<DataBase.Result>.AsReadOnly
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of DataBase.Result).AsReadOnly
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.BinarySearch(System.Int32,System.Int32,InnerLibs.DataBase.Result,System.Collections.Generic.IComparer{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.BinarySearch(System.Int32,System.Int32,InnerLibs.DataBase.Result,System.Collections.Generic.IComparer{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(Int32, Int32, DataBase.Result, IComparer<DataBase.Result>)
  nameWithType: List<DataBase.Result>.BinarySearch(Int32, Int32, DataBase.Result, IComparer<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.BinarySearch(System.Int32, System.Int32, InnerLibs.DataBase.Result, System.Collections.Generic.IComparer<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).BinarySearch(Int32, Int32, DataBase.Result, IComparer(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).BinarySearch(System.Int32, System.Int32, InnerLibs.DataBase.Result, System.Collections.Generic.IComparer(Of InnerLibs.DataBase.Result))
  name.vb: BinarySearch(Int32, Int32, DataBase.Result, IComparer(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<DataBase.Result>.BinarySearch
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of DataBase.Result).BinarySearch
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.BinarySearch(InnerLibs.DataBase.Result)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.BinarySearch(InnerLibs.DataBase.Result)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.BinarySearch(`0)
  name: BinarySearch(DataBase.Result)
  nameWithType: List<DataBase.Result>.BinarySearch(DataBase.Result)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.BinarySearch(InnerLibs.DataBase.Result)
  nameWithType.vb: List(Of DataBase.Result).BinarySearch(DataBase.Result)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).BinarySearch(InnerLibs.DataBase.Result)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<DataBase.Result>.BinarySearch
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of DataBase.Result).BinarySearch
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.BinarySearch(InnerLibs.DataBase.Result,System.Collections.Generic.IComparer{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.BinarySearch(InnerLibs.DataBase.Result,System.Collections.Generic.IComparer{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(DataBase.Result, IComparer<DataBase.Result>)
  nameWithType: List<DataBase.Result>.BinarySearch(DataBase.Result, IComparer<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.BinarySearch(InnerLibs.DataBase.Result, System.Collections.Generic.IComparer<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).BinarySearch(DataBase.Result, IComparer(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).BinarySearch(InnerLibs.DataBase.Result, System.Collections.Generic.IComparer(Of InnerLibs.DataBase.Result))
  name.vb: BinarySearch(DataBase.Result, IComparer(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<DataBase.Result>.BinarySearch
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of DataBase.Result).BinarySearch
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.Clear
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.Clear
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.Clear
  name: Clear()
  nameWithType: List<DataBase.Result>.Clear()
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Clear()
  nameWithType.vb: List(Of DataBase.Result).Clear()
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<DataBase.Result>.Clear
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of DataBase.Result).Clear
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.Contains(InnerLibs.DataBase.Result)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.Contains(InnerLibs.DataBase.Result)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.Contains(`0)
  name: Contains(DataBase.Result)
  nameWithType: List<DataBase.Result>.Contains(DataBase.Result)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Contains(InnerLibs.DataBase.Result)
  nameWithType.vb: List(Of DataBase.Result).Contains(DataBase.Result)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Contains(InnerLibs.DataBase.Result)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<DataBase.Result>.Contains
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of DataBase.Result).Contains
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  name: IList.Contains(Object)
  nameWithType: List<DataBase.Result>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of DataBase.Result).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<DataBase.Result>.IList.Contains
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of DataBase.Result).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.ConvertAll``1(System.Converter{InnerLibs.DataBase.Result,{TOutput}})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.ConvertAll``1(System.Converter{InnerLibs.DataBase.Result,``0})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  name: ConvertAll<TOutput>(Converter<DataBase.Result, TOutput>)
  nameWithType: List<DataBase.Result>.ConvertAll<TOutput>(Converter<DataBase.Result, TOutput>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.ConvertAll<TOutput>(System.Converter<InnerLibs.DataBase.Result, TOutput>)
  nameWithType.vb: List(Of DataBase.Result).ConvertAll(Of TOutput)(Converter(Of DataBase.Result, TOutput))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).ConvertAll(Of TOutput)(System.Converter(Of InnerLibs.DataBase.Result, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of DataBase.Result, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<DataBase.Result>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of DataBase.Result).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.CopyTo(InnerLibs.DataBase.Result[])
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.CopyTo(InnerLibs.DataBase.Result[])
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.CopyTo(`0[])
  name: CopyTo(DataBase.Result[])
  nameWithType: List<DataBase.Result>.CopyTo(DataBase.Result[])
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.CopyTo(InnerLibs.DataBase.Result[])
  nameWithType.vb: List(Of DataBase.Result).CopyTo(DataBase.Result())
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).CopyTo(InnerLibs.DataBase.Result())
  name.vb: CopyTo(DataBase.Result())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<DataBase.Result>.CopyTo
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of DataBase.Result).CopyTo
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<DataBase.Result>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of DataBase.Result).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<DataBase.Result>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of DataBase.Result).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.CopyTo(System.Int32,InnerLibs.DataBase.Result[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.CopyTo(System.Int32,InnerLibs.DataBase.Result[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  name: CopyTo(Int32, DataBase.Result[], Int32, Int32)
  nameWithType: List<DataBase.Result>.CopyTo(Int32, DataBase.Result[], Int32, Int32)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.CopyTo(System.Int32, InnerLibs.DataBase.Result[], System.Int32, System.Int32)
  nameWithType.vb: List(Of DataBase.Result).CopyTo(Int32, DataBase.Result(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).CopyTo(System.Int32, InnerLibs.DataBase.Result(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, DataBase.Result(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<DataBase.Result>.CopyTo
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of DataBase.Result).CopyTo
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.CopyTo(InnerLibs.DataBase.Result[],System.Int32)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.CopyTo(InnerLibs.DataBase.Result[],System.Int32)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  name: CopyTo(DataBase.Result[], Int32)
  nameWithType: List<DataBase.Result>.CopyTo(DataBase.Result[], Int32)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.CopyTo(InnerLibs.DataBase.Result[], System.Int32)
  nameWithType.vb: List(Of DataBase.Result).CopyTo(DataBase.Result(), Int32)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).CopyTo(InnerLibs.DataBase.Result(), System.Int32)
  name.vb: CopyTo(DataBase.Result(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<DataBase.Result>.CopyTo
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of DataBase.Result).CopyTo
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.Exists(System.Predicate{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.Exists(System.Predicate{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  name: Exists(Predicate<DataBase.Result>)
  nameWithType: List<DataBase.Result>.Exists(Predicate<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Exists(System.Predicate<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).Exists(Predicate(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Exists(System.Predicate(Of InnerLibs.DataBase.Result))
  name.vb: Exists(Predicate(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<DataBase.Result>.Exists
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of DataBase.Result).Exists
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.Find(System.Predicate{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.Find(System.Predicate{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  name: Find(Predicate<DataBase.Result>)
  nameWithType: List<DataBase.Result>.Find(Predicate<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Find(System.Predicate<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).Find(Predicate(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Find(System.Predicate(Of InnerLibs.DataBase.Result))
  name.vb: Find(Predicate(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<DataBase.Result>.Find
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of DataBase.Result).Find
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindAll(System.Predicate{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindAll(System.Predicate{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  name: FindAll(Predicate<DataBase.Result>)
  nameWithType: List<DataBase.Result>.FindAll(Predicate<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindAll(System.Predicate<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).FindAll(Predicate(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindAll(System.Predicate(Of InnerLibs.DataBase.Result))
  name.vb: FindAll(Predicate(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<DataBase.Result>.FindAll
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of DataBase.Result).FindAll
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindIndex(System.Predicate{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindIndex(System.Predicate{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  name: FindIndex(Predicate<DataBase.Result>)
  nameWithType: List<DataBase.Result>.FindIndex(Predicate<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindIndex(System.Predicate<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).FindIndex(Predicate(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindIndex(System.Predicate(Of InnerLibs.DataBase.Result))
  name.vb: FindIndex(Predicate(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<DataBase.Result>.FindIndex
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of DataBase.Result).FindIndex
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindIndex(System.Int32,System.Predicate{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindIndex(System.Int32,System.Predicate{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Predicate<DataBase.Result>)
  nameWithType: List<DataBase.Result>.FindIndex(Int32, Predicate<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindIndex(System.Int32, System.Predicate<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).FindIndex(Int32, Predicate(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindIndex(System.Int32, System.Predicate(Of InnerLibs.DataBase.Result))
  name.vb: FindIndex(Int32, Predicate(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<DataBase.Result>.FindIndex
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of DataBase.Result).FindIndex
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindIndex(System.Int32,System.Int32,System.Predicate{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindIndex(System.Int32,System.Int32,System.Predicate{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Int32, Predicate<DataBase.Result>)
  nameWithType: List<DataBase.Result>.FindIndex(Int32, Int32, Predicate<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindIndex(System.Int32, System.Int32, System.Predicate<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).FindIndex(Int32, Int32, Predicate(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindIndex(System.Int32, System.Int32, System.Predicate(Of InnerLibs.DataBase.Result))
  name.vb: FindIndex(Int32, Int32, Predicate(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<DataBase.Result>.FindIndex
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of DataBase.Result).FindIndex
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindLast(System.Predicate{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindLast(System.Predicate{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  name: FindLast(Predicate<DataBase.Result>)
  nameWithType: List<DataBase.Result>.FindLast(Predicate<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindLast(System.Predicate<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).FindLast(Predicate(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindLast(System.Predicate(Of InnerLibs.DataBase.Result))
  name.vb: FindLast(Predicate(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<DataBase.Result>.FindLast
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of DataBase.Result).FindLast
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindLastIndex(System.Predicate{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindLastIndex(System.Predicate{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  name: FindLastIndex(Predicate<DataBase.Result>)
  nameWithType: List<DataBase.Result>.FindLastIndex(Predicate<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindLastIndex(System.Predicate<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).FindLastIndex(Predicate(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindLastIndex(System.Predicate(Of InnerLibs.DataBase.Result))
  name.vb: FindLastIndex(Predicate(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<DataBase.Result>.FindLastIndex
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of DataBase.Result).FindLastIndex
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindLastIndex(System.Int32,System.Predicate{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindLastIndex(System.Int32,System.Predicate{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Predicate<DataBase.Result>)
  nameWithType: List<DataBase.Result>.FindLastIndex(Int32, Predicate<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindLastIndex(System.Int32, System.Predicate<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).FindLastIndex(Int32, Predicate(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindLastIndex(System.Int32, System.Predicate(Of InnerLibs.DataBase.Result))
  name.vb: FindLastIndex(Int32, Predicate(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<DataBase.Result>.FindLastIndex
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of DataBase.Result).FindLastIndex
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindLastIndex(System.Int32,System.Int32,System.Predicate{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.FindLastIndex(System.Int32,System.Int32,System.Predicate{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Int32, Predicate<DataBase.Result>)
  nameWithType: List<DataBase.Result>.FindLastIndex(Int32, Int32, Predicate<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindLastIndex(System.Int32, System.Int32, System.Predicate<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).FindLastIndex(Int32, Int32, Predicate(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of InnerLibs.DataBase.Result))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<DataBase.Result>.FindLastIndex
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of DataBase.Result).FindLastIndex
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.ForEach(System.Action{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.ForEach(System.Action{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  name: ForEach(Action<DataBase.Result>)
  nameWithType: List<DataBase.Result>.ForEach(Action<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.ForEach(System.Action<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).ForEach(Action(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).ForEach(System.Action(Of InnerLibs.DataBase.Result))
  name.vb: ForEach(Action(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<DataBase.Result>.ForEach
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of DataBase.Result).ForEach
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.GetEnumerator
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.GetEnumerator
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: List<DataBase.Result>.GetEnumerator()
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.GetEnumerator()
  nameWithType.vb: List(Of DataBase.Result).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<DataBase.Result>.GetEnumerator
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of DataBase.Result).GetEnumerator
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#Generic#IEnumerable<T>#GetEnumerator
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#Generic#IEnumerable<T>#GetEnumerator
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator
  name: IEnumerable<DataBase.Result>.GetEnumerator()
  nameWithType: List<DataBase.Result>.IEnumerable<DataBase.Result>.GetEnumerator()
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.Generic.IEnumerable<InnerLibs.DataBase.Result>.GetEnumerator()
  nameWithType.vb: List(Of DataBase.Result).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator
    name: IEnumerable<DataBase.Result>.GetEnumerator
    nameWithType: List<DataBase.Result>.IEnumerable<DataBase.Result>.GetEnumerator
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.Generic.IEnumerable<InnerLibs.DataBase.Result>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of DataBase.Result).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: List<DataBase.Result>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of DataBase.Result).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<DataBase.Result>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of DataBase.Result).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  name: GetRange(Int32, Int32)
  nameWithType: List<DataBase.Result>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of DataBase.Result).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<DataBase.Result>.GetRange
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of DataBase.Result).GetRange
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.IndexOf(InnerLibs.DataBase.Result)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.IndexOf(InnerLibs.DataBase.Result)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.IndexOf(`0)
  name: IndexOf(DataBase.Result)
  nameWithType: List<DataBase.Result>.IndexOf(DataBase.Result)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.IndexOf(InnerLibs.DataBase.Result)
  nameWithType.vb: List(Of DataBase.Result).IndexOf(DataBase.Result)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).IndexOf(InnerLibs.DataBase.Result)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<DataBase.Result>.IndexOf
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of DataBase.Result).IndexOf
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  name: IList.IndexOf(Object)
  nameWithType: List<DataBase.Result>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of DataBase.Result).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<DataBase.Result>.IList.IndexOf
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of DataBase.Result).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.IndexOf(InnerLibs.DataBase.Result,System.Int32)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.IndexOf(InnerLibs.DataBase.Result,System.Int32)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  name: IndexOf(DataBase.Result, Int32)
  nameWithType: List<DataBase.Result>.IndexOf(DataBase.Result, Int32)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.IndexOf(InnerLibs.DataBase.Result, System.Int32)
  nameWithType.vb: List(Of DataBase.Result).IndexOf(DataBase.Result, Int32)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).IndexOf(InnerLibs.DataBase.Result, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<DataBase.Result>.IndexOf
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of DataBase.Result).IndexOf
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.IndexOf(InnerLibs.DataBase.Result,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.IndexOf(InnerLibs.DataBase.Result,System.Int32,System.Int32)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  name: IndexOf(DataBase.Result, Int32, Int32)
  nameWithType: List<DataBase.Result>.IndexOf(DataBase.Result, Int32, Int32)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.IndexOf(InnerLibs.DataBase.Result, System.Int32, System.Int32)
  nameWithType.vb: List(Of DataBase.Result).IndexOf(DataBase.Result, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).IndexOf(InnerLibs.DataBase.Result, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<DataBase.Result>.IndexOf
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of DataBase.Result).IndexOf
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.Insert(System.Int32,InnerLibs.DataBase.Result)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.Insert(System.Int32,InnerLibs.DataBase.Result)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  name: Insert(Int32, DataBase.Result)
  nameWithType: List<DataBase.Result>.Insert(Int32, DataBase.Result)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Insert(System.Int32, InnerLibs.DataBase.Result)
  nameWithType.vb: List(Of DataBase.Result).Insert(Int32, DataBase.Result)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Insert(System.Int32, InnerLibs.DataBase.Result)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<DataBase.Result>.Insert
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of DataBase.Result).Insert
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  name: IList.Insert(Int32, Object)
  nameWithType: List<DataBase.Result>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of DataBase.Result).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<DataBase.Result>.IList.Insert
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of DataBase.Result).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  name: InsertRange(Int32, IEnumerable<DataBase.Result>)
  nameWithType: List<DataBase.Result>.InsertRange(Int32, IEnumerable<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).InsertRange(Int32, IEnumerable(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of InnerLibs.DataBase.Result))
  name.vb: InsertRange(Int32, IEnumerable(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<DataBase.Result>.InsertRange
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of DataBase.Result).InsertRange
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.LastIndexOf(InnerLibs.DataBase.Result)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.LastIndexOf(InnerLibs.DataBase.Result)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0)
  name: LastIndexOf(DataBase.Result)
  nameWithType: List<DataBase.Result>.LastIndexOf(DataBase.Result)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.LastIndexOf(InnerLibs.DataBase.Result)
  nameWithType.vb: List(Of DataBase.Result).LastIndexOf(DataBase.Result)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).LastIndexOf(InnerLibs.DataBase.Result)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<DataBase.Result>.LastIndexOf
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of DataBase.Result).LastIndexOf
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.LastIndexOf(InnerLibs.DataBase.Result,System.Int32)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.LastIndexOf(InnerLibs.DataBase.Result,System.Int32)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  name: LastIndexOf(DataBase.Result, Int32)
  nameWithType: List<DataBase.Result>.LastIndexOf(DataBase.Result, Int32)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.LastIndexOf(InnerLibs.DataBase.Result, System.Int32)
  nameWithType.vb: List(Of DataBase.Result).LastIndexOf(DataBase.Result, Int32)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).LastIndexOf(InnerLibs.DataBase.Result, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<DataBase.Result>.LastIndexOf
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of DataBase.Result).LastIndexOf
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.LastIndexOf(InnerLibs.DataBase.Result,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.LastIndexOf(InnerLibs.DataBase.Result,System.Int32,System.Int32)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  name: LastIndexOf(DataBase.Result, Int32, Int32)
  nameWithType: List<DataBase.Result>.LastIndexOf(DataBase.Result, Int32, Int32)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.LastIndexOf(InnerLibs.DataBase.Result, System.Int32, System.Int32)
  nameWithType.vb: List(Of DataBase.Result).LastIndexOf(DataBase.Result, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).LastIndexOf(InnerLibs.DataBase.Result, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<DataBase.Result>.LastIndexOf
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of DataBase.Result).LastIndexOf
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.Remove(InnerLibs.DataBase.Result)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.Remove(InnerLibs.DataBase.Result)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.Remove(`0)
  name: Remove(DataBase.Result)
  nameWithType: List<DataBase.Result>.Remove(DataBase.Result)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Remove(InnerLibs.DataBase.Result)
  nameWithType.vb: List(Of DataBase.Result).Remove(DataBase.Result)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Remove(InnerLibs.DataBase.Result)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<DataBase.Result>.Remove
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of DataBase.Result).Remove
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  name: IList.Remove(Object)
  nameWithType: List<DataBase.Result>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of DataBase.Result).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<DataBase.Result>.IList.Remove
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of DataBase.Result).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.RemoveAll(System.Predicate{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.RemoveAll(System.Predicate{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  name: RemoveAll(Predicate<DataBase.Result>)
  nameWithType: List<DataBase.Result>.RemoveAll(Predicate<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.RemoveAll(System.Predicate<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).RemoveAll(Predicate(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).RemoveAll(System.Predicate(Of InnerLibs.DataBase.Result))
  name.vb: RemoveAll(Predicate(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<DataBase.Result>.RemoveAll
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of DataBase.Result).RemoveAll
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: List<DataBase.Result>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of DataBase.Result).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<DataBase.Result>.RemoveAt
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of DataBase.Result).RemoveAt
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  name: RemoveRange(Int32, Int32)
  nameWithType: List<DataBase.Result>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of DataBase.Result).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<DataBase.Result>.RemoveRange
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of DataBase.Result).RemoveRange
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.Reverse
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.Reverse
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.Reverse
  name: Reverse()
  nameWithType: List<DataBase.Result>.Reverse()
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Reverse()
  nameWithType.vb: List(Of DataBase.Result).Reverse()
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<DataBase.Result>.Reverse
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of DataBase.Result).Reverse
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  name: Reverse(Int32, Int32)
  nameWithType: List<DataBase.Result>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of DataBase.Result).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<DataBase.Result>.Reverse
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of DataBase.Result).Reverse
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.Sort
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.Sort
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.Sort
  name: Sort()
  nameWithType: List<DataBase.Result>.Sort()
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Sort()
  nameWithType.vb: List(Of DataBase.Result).Sort()
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<DataBase.Result>.Sort
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of DataBase.Result).Sort
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.Sort(System.Collections.Generic.IComparer{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.Sort(System.Collections.Generic.IComparer{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  name: Sort(IComparer<DataBase.Result>)
  nameWithType: List<DataBase.Result>.Sort(IComparer<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Sort(System.Collections.Generic.IComparer<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).Sort(IComparer(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Sort(System.Collections.Generic.IComparer(Of InnerLibs.DataBase.Result))
  name.vb: Sort(IComparer(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<DataBase.Result>.Sort
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of DataBase.Result).Sort
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  name: Sort(Int32, Int32, IComparer<DataBase.Result>)
  nameWithType: List<DataBase.Result>.Sort(Int32, Int32, IComparer<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).Sort(Int32, Int32, IComparer(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of InnerLibs.DataBase.Result))
  name.vb: Sort(Int32, Int32, IComparer(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<DataBase.Result>.Sort
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of DataBase.Result).Sort
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.Sort(System.Comparison{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.Sort(System.Comparison{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  name: Sort(Comparison<DataBase.Result>)
  nameWithType: List<DataBase.Result>.Sort(Comparison<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Sort(System.Comparison<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).Sort(Comparison(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Sort(System.Comparison(Of InnerLibs.DataBase.Result))
  name.vb: Sort(Comparison(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<DataBase.Result>.Sort
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of DataBase.Result).Sort
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.ToArray
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.ToArray
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.ToArray
  name: ToArray()
  nameWithType: List<DataBase.Result>.ToArray()
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.ToArray()
  nameWithType.vb: List(Of DataBase.Result).ToArray()
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<DataBase.Result>.ToArray
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of DataBase.Result).ToArray
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.TrimExcess
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.TrimExcess
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.TrimExcess
  name: TrimExcess()
  nameWithType: List<DataBase.Result>.TrimExcess()
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.TrimExcess()
  nameWithType.vb: List(Of DataBase.Result).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<DataBase.Result>.TrimExcess
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of DataBase.Result).TrimExcess
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.TrueForAll(System.Predicate{InnerLibs.DataBase.Result})
  commentId: M:System.Collections.Generic.List{InnerLibs.DataBase.Result}.TrueForAll(System.Predicate{InnerLibs.DataBase.Result})
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  name: TrueForAll(Predicate<DataBase.Result>)
  nameWithType: List<DataBase.Result>.TrueForAll(Predicate<DataBase.Result>)
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.TrueForAll(System.Predicate<InnerLibs.DataBase.Result>)
  nameWithType.vb: List(Of DataBase.Result).TrueForAll(Predicate(Of DataBase.Result))
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).TrueForAll(System.Predicate(Of InnerLibs.DataBase.Result))
  name.vb: TrueForAll(Predicate(Of DataBase.Result))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<DataBase.Result>.TrueForAll
    fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of DataBase.Result).TrueForAll
    fullName: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.Capacity
  commentId: P:System.Collections.Generic.List{InnerLibs.DataBase.Result}.Capacity
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.Capacity
  name: Capacity
  nameWithType: List<DataBase.Result>.Capacity
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Capacity
  nameWithType.vb: List(Of DataBase.Result).Capacity
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Capacity
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.Count
  commentId: P:System.Collections.Generic.List{InnerLibs.DataBase.Result}.Count
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.Count
  name: Count
  nameWithType: List<DataBase.Result>.Count
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.Count
  nameWithType.vb: List(Of DataBase.Result).Count
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).Count
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.System.Collections.IList.IsFixedSize
  commentId: P:System.Collections.Generic.List{InnerLibs.DataBase.Result}.System.Collections.IList.IsFixedSize
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.System.Collections.IList.IsFixedSize
  name: IList.IsFixedSize
  nameWithType: List<DataBase.Result>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of DataBase.Result).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.System.Collections.Generic.ICollection<T>.IsReadOnly
  commentId: P:System.Collections.Generic.List{InnerLibs.DataBase.Result}.System.Collections.Generic.ICollection<T>.IsReadOnly
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.System.Collections.Generic.ICollection<T>.IsReadOnly
  name: ICollection<DataBase.Result>.IsReadOnly
  nameWithType: List<DataBase.Result>.ICollection<DataBase.Result>.IsReadOnly
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.Generic.ICollection<InnerLibs.DataBase.Result>.IsReadOnly
  nameWithType.vb: List(Of DataBase.Result).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.System.Collections.IList.IsReadOnly
  commentId: P:System.Collections.Generic.List{InnerLibs.DataBase.Result}.System.Collections.IList.IsReadOnly
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.System.Collections.IList.IsReadOnly
  name: IList.IsReadOnly
  nameWithType: List<DataBase.Result>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of DataBase.Result).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.Generic.List{InnerLibs.DataBase.Result}.System.Collections.ICollection.IsSynchronized
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.System.Collections.ICollection.IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: List<DataBase.Result>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of DataBase.Result).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.Generic.List{InnerLibs.DataBase.Result}.System.Collections.ICollection.SyncRoot
  parent: System.Collections.Generic.List{InnerLibs.DataBase.Result}
  definition: System.Collections.Generic.List`1.System.Collections.ICollection.SyncRoot
  name: ICollection.SyncRoot
  nameWithType: List<DataBase.Result>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<InnerLibs.DataBase.Result>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of DataBase.Result).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of InnerLibs.DataBase.Result).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Finalize
  commentId: M:System.Object.Finalize
  parent: System.Object
  isExternal: true
  name: Finalize()
  nameWithType: Object.Finalize()
  fullName: System.Object.Finalize()
  spec.csharp:
  - uid: System.Object.Finalize
    name: Finalize
    nameWithType: Object.Finalize
    fullName: System.Object.Finalize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Finalize
    name: Finalize
    nameWithType: Object.Finalize
    fullName: System.Object.Finalize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.ClassTools.ContainsAll(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Result})
  commentId: M:InnerLibs.ClassTools.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: ContainsAll(IEnumerable<DataBase.Result>, IEqualityComparer<DataBase.Result>)
  nameWithType: ClassTools.ContainsAll(IEnumerable<DataBase.Result>, IEqualityComparer<DataBase.Result>)
  fullName: InnerLibs.ClassTools.ContainsAll(System.Collections.Generic.IEnumerable<InnerLibs.DataBase.Result>, System.Collections.Generic.IEqualityComparer<InnerLibs.DataBase.Result>)
  nameWithType.vb: ClassTools.ContainsAll(IEnumerable(Of DataBase.Result), IEqualityComparer(Of DataBase.Result))
  fullName.vb: InnerLibs.ClassTools.ContainsAll(System.Collections.Generic.IEnumerable(Of InnerLibs.DataBase.Result), System.Collections.Generic.IEqualityComparer(Of InnerLibs.DataBase.Result))
  name.vb: ContainsAll(IEnumerable(Of DataBase.Result), IEqualityComparer(Of DataBase.Result))
  spec.csharp:
  - uid: InnerLibs.ClassTools.ContainsAll(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Result})
    name: ContainsAll
    nameWithType: ClassTools.ContainsAll
    fullName: InnerLibs.ClassTools.ContainsAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ContainsAll(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Result})
    name: ContainsAll
    nameWithType: ClassTools.ContainsAll
    fullName: InnerLibs.ClassTools.ContainsAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.ClassTools.ContainsAny(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Result})
  commentId: M:InnerLibs.ClassTools.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: ContainsAny(IEnumerable<DataBase.Result>, IEqualityComparer<DataBase.Result>)
  nameWithType: ClassTools.ContainsAny(IEnumerable<DataBase.Result>, IEqualityComparer<DataBase.Result>)
  fullName: InnerLibs.ClassTools.ContainsAny(System.Collections.Generic.IEnumerable<InnerLibs.DataBase.Result>, System.Collections.Generic.IEqualityComparer<InnerLibs.DataBase.Result>)
  nameWithType.vb: ClassTools.ContainsAny(IEnumerable(Of DataBase.Result), IEqualityComparer(Of DataBase.Result))
  fullName.vb: InnerLibs.ClassTools.ContainsAny(System.Collections.Generic.IEnumerable(Of InnerLibs.DataBase.Result), System.Collections.Generic.IEqualityComparer(Of InnerLibs.DataBase.Result))
  name.vb: ContainsAny(IEnumerable(Of DataBase.Result), IEqualityComparer(Of DataBase.Result))
  spec.csharp:
  - uid: InnerLibs.ClassTools.ContainsAny(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Result})
    name: ContainsAny
    nameWithType: ClassTools.ContainsAny
    fullName: InnerLibs.ClassTools.ContainsAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ContainsAny(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Result})
    name: ContainsAny
    nameWithType: ClassTools.ContainsAny
    fullName: InnerLibs.ClassTools.ContainsAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.ClassTools.CreateDictionary
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary()
  nameWithType: ClassTools.CreateDictionary()
  fullName: InnerLibs.ClassTools.CreateDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.ClassTools.DistinctCount
  commentId: M:InnerLibs.ClassTools.DistinctCount``1(System.Collections.Generic.IEnumerable{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.DistinctCount``1(System.Collections.Generic.IEnumerable{``0})
  name: DistinctCount()
  nameWithType: ClassTools.DistinctCount()
  fullName: InnerLibs.ClassTools.DistinctCount()
  spec.csharp:
  - uid: InnerLibs.ClassTools.DistinctCount
    name: DistinctCount
    nameWithType: ClassTools.DistinctCount
    fullName: InnerLibs.ClassTools.DistinctCount
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.DistinctCount
    name: DistinctCount
    nameWithType: ClassTools.DistinctCount
    fullName: InnerLibs.ClassTools.DistinctCount
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.ClassTools.FirstOr(InnerLibs.DataBase.Result)
  commentId: M:InnerLibs.ClassTools.FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  name: FirstOr(DataBase.Result)
  nameWithType: ClassTools.FirstOr(DataBase.Result)
  fullName: InnerLibs.ClassTools.FirstOr(InnerLibs.DataBase.Result)
  spec.csharp:
  - uid: InnerLibs.ClassTools.FirstOr(InnerLibs.DataBase.Result)
    name: FirstOr
    nameWithType: ClassTools.FirstOr
    fullName: InnerLibs.ClassTools.FirstOr
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.FirstOr(InnerLibs.DataBase.Result)
    name: FirstOr
    nameWithType: ClassTools.FirstOr
    fullName: InnerLibs.ClassTools.FirstOr
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  name: GetProperties(BindingFlags)
  nameWithType: ClassTools.GetProperties(BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object)
  name: GetProperties()
  nameWithType: ClassTools.GetProperties()
  fullName: InnerLibs.ClassTools.GetProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  name: GetPropertyValue(String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  name: GetPropertyValue<Type>(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  name: GetPropertyValue(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  name: HasProperty(String)
  nameWithType: ClassTools.HasProperty(String)
  fullName: InnerLibs.ClassTools.HasProperty(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsArrayOf``1
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  name: IsArrayOf<T>()
  nameWithType: ClassTools.IsArrayOf<T>()
  fullName: InnerLibs.ClassTools.IsArrayOf<T>()
  nameWithType.vb: ClassTools.IsArrayOf(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)()
  name.vb: IsArrayOf(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsDictionary
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsDictionary(System.Object)
  name: IsDictionary()
  nameWithType: ClassTools.IsDictionary()
  fullName: InnerLibs.ClassTools.IsDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Reader},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Reader})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsIn(IEnumerable<DataBase.Reader>, IEqualityComparer<DataBase.Reader>)
  nameWithType: ClassTools.IsIn(IEnumerable<DataBase.Reader>, IEqualityComparer<DataBase.Reader>)
  fullName: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable<InnerLibs.DataBase.Reader>, System.Collections.Generic.IEqualityComparer<InnerLibs.DataBase.Reader>)
  nameWithType.vb: ClassTools.IsIn(IEnumerable(Of DataBase.Reader), IEqualityComparer(Of DataBase.Reader))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable(Of InnerLibs.DataBase.Reader), System.Collections.Generic.IEqualityComparer(Of InnerLibs.DataBase.Reader))
  name.vb: IsIn(IEnumerable(Of DataBase.Reader), IEqualityComparer(Of DataBase.Reader))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Reader},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Reader})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Reader},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Reader})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Reader}[],System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Reader})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  name: IsInAny(IEnumerable<DataBase.Reader>[], IEqualityComparer<DataBase.Reader>)
  nameWithType: ClassTools.IsInAny(IEnumerable<DataBase.Reader>[], IEqualityComparer<DataBase.Reader>)
  fullName: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable<InnerLibs.DataBase.Reader>[], System.Collections.Generic.IEqualityComparer<InnerLibs.DataBase.Reader>)
  nameWithType.vb: ClassTools.IsInAny(IEnumerable(Of DataBase.Reader)(), IEqualityComparer(Of DataBase.Reader))
  fullName.vb: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable(Of InnerLibs.DataBase.Reader)(), System.Collections.Generic.IEqualityComparer(Of InnerLibs.DataBase.Reader))
  name.vb: IsInAny(IEnumerable(Of DataBase.Reader)(), IEqualityComparer(Of DataBase.Reader))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Reader}[],System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Reader})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Reader}[],System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Reader})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsList
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsList(System.Object)
  name: IsList()
  nameWithType: ClassTools.IsList()
  fullName: InnerLibs.ClassTools.IsList()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Reader},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Reader})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsNotIn(IEnumerable<DataBase.Reader>, IEqualityComparer<DataBase.Reader>)
  nameWithType: ClassTools.IsNotIn(IEnumerable<DataBase.Reader>, IEqualityComparer<DataBase.Reader>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable<InnerLibs.DataBase.Reader>, System.Collections.Generic.IEqualityComparer<InnerLibs.DataBase.Reader>)
  nameWithType.vb: ClassTools.IsNotIn(IEnumerable(Of DataBase.Reader), IEqualityComparer(Of DataBase.Reader))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable(Of InnerLibs.DataBase.Reader), System.Collections.Generic.IEqualityComparer(Of InnerLibs.DataBase.Reader))
  name.vb: IsNotIn(IEnumerable(Of DataBase.Reader), IEqualityComparer(Of DataBase.Reader))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Reader},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Reader})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Reader},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase.Reader})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsNotIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsType``1
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsType``1(System.Object)
  name: IsType<T>()
  nameWithType: ClassTools.IsType<T>()
  fullName: InnerLibs.ClassTools.IsType<T>()
  nameWithType.vb: ClassTools.IsType(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)()
  name.vb: IsType(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.ClassTools.LastOr(InnerLibs.DataBase.Result)
  commentId: M:InnerLibs.ClassTools.LastOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.LastOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  name: LastOr(DataBase.Result)
  nameWithType: ClassTools.LastOr(DataBase.Result)
  fullName: InnerLibs.ClassTools.LastOr(InnerLibs.DataBase.Result)
  spec.csharp:
  - uid: InnerLibs.ClassTools.LastOr(InnerLibs.DataBase.Result)
    name: LastOr
    nameWithType: ClassTools.LastOr
    fullName: InnerLibs.ClassTools.LastOr
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.LastOr(InnerLibs.DataBase.Result)
    name: LastOr
    nameWithType: ClassTools.LastOr
    fullName: InnerLibs.ClassTools.LastOr
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.ClassTools.NullCoalesce(InnerLibs.DataBase.Reader[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce(DataBase.Reader[])
  nameWithType: ClassTools.NullCoalesce(DataBase.Reader[])
  fullName: InnerLibs.ClassTools.NullCoalesce(InnerLibs.DataBase.Reader[])
  nameWithType.vb: ClassTools.NullCoalesce(DataBase.Reader())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(InnerLibs.DataBase.Reader())
  name.vb: NullCoalesce(DataBase.Reader())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.DataBase.Reader[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.DataBase.Reader[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.ClassTools.NullCoalesce
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(System.Collections.Generic.IEnumerable{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullCoalesce``1(System.Collections.Generic.IEnumerable{``0})
  name: NullCoalesce()
  nameWithType: ClassTools.NullCoalesce()
  fullName: InnerLibs.ClassTools.NullCoalesce()
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.ClassTools.NullifyProperties
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties()
  nameWithType: ClassTools.NullifyProperties()
  fullName: InnerLibs.ClassTools.NullifyProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  name: SetPropertyValue<Type>(String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.String, Type)
  name.vb: SetPropertyValue(Of Type)(String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  name: SetPropertyValueFromCollection<Type>(String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  name: ToFlatString(String)
  nameWithType: ClassTools.ToFlatString(String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.DataManipulation.GetDbType
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  parent: InnerLibs.DataManipulation
  definition: InnerLibs.DataManipulation.GetDbType(System.Object)
  name: GetDbType()
  nameWithType: DataManipulation.GetDbType()
  fullName: InnerLibs.DataManipulation.GetDbType()
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.Converter.DefineEmptyList
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList()
  nameWithType: Converter.DefineEmptyList()
  fullName: InnerLibs.Converter.DefineEmptyList()
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.Converter.ChangeType``1
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType>()
  nameWithType: Converter.ChangeType<ToType>()
  fullName: InnerLibs.Converter.ChangeType<ToType>()
  nameWithType.vb: Converter.ChangeType(Of ToType)()
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType)()
  name.vb: ChangeType(Of ToType)()
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType<ToType>
    nameWithType: Converter.ChangeType<ToType>
    fullName: InnerLibs.Converter.ChangeType<ToType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType(Of ToType)
    nameWithType: Converter.ChangeType(Of ToType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.JsonViewer.CreateNode
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  parent: InnerLibs.JsonViewer
  definition: InnerLibs.JsonViewer.CreateNode(System.Object)
  name: CreateNode()
  nameWithType: JsonViewer.CreateNode()
  fullName: InnerLibs.JsonViewer.CreateNode()
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Mathematic.CalculatePercent``2(System.Func{InnerLibs.DataBase.Result,{TKey}},System.Func{InnerLibs.DataBase.Result,{TValue}})
  commentId: M:InnerLibs.Mathematic.CalculatePercent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  parent: InnerLibs.Mathematic
  definition: InnerLibs.Mathematic.CalculatePercent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  name: CalculatePercent<TKey, TValue>(Func<DataBase.Result, TKey>, Func<DataBase.Result, TValue>)
  nameWithType: Mathematic.CalculatePercent<TKey, TValue>(Func<DataBase.Result, TKey>, Func<DataBase.Result, TValue>)
  fullName: InnerLibs.Mathematic.CalculatePercent<TKey, TValue>(System.Func<InnerLibs.DataBase.Result, TKey>, System.Func<InnerLibs.DataBase.Result, TValue>)
  nameWithType.vb: Mathematic.CalculatePercent(Of TKey, TValue)(Func(Of DataBase.Result, TKey), Func(Of DataBase.Result, TValue))
  fullName.vb: InnerLibs.Mathematic.CalculatePercent(Of TKey, TValue)(System.Func(Of InnerLibs.DataBase.Result, TKey), System.Func(Of InnerLibs.DataBase.Result, TValue))
  name.vb: CalculatePercent(Of TKey, TValue)(Func(Of DataBase.Result, TKey), Func(Of DataBase.Result, TValue))
  spec.csharp:
  - uid: InnerLibs.Mathematic.CalculatePercent``2(System.Func{InnerLibs.DataBase.Result,``0},System.Func{InnerLibs.DataBase.Result,``1})
    name: CalculatePercent<TKey, TValue>
    nameWithType: Mathematic.CalculatePercent<TKey, TValue>
    fullName: InnerLibs.Mathematic.CalculatePercent<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.CalculatePercent``2(System.Func{InnerLibs.DataBase.Result,``0},System.Func{InnerLibs.DataBase.Result,``1})
    name: CalculatePercent(Of TKey, TValue)
    nameWithType: Mathematic.CalculatePercent(Of TKey, TValue)
    fullName: InnerLibs.Mathematic.CalculatePercent(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Mathematic.CalculatePercent``1(System.Func{InnerLibs.DataBase.Result,{Tvalue}})
  commentId: M:InnerLibs.Mathematic.CalculatePercent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: InnerLibs.Mathematic
  definition: InnerLibs.Mathematic.CalculatePercent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: CalculatePercent<Tvalue>(Func<DataBase.Result, Tvalue>)
  nameWithType: Mathematic.CalculatePercent<Tvalue>(Func<DataBase.Result, Tvalue>)
  fullName: InnerLibs.Mathematic.CalculatePercent<Tvalue>(System.Func<InnerLibs.DataBase.Result, Tvalue>)
  nameWithType.vb: Mathematic.CalculatePercent(Of Tvalue)(Func(Of DataBase.Result, Tvalue))
  fullName.vb: InnerLibs.Mathematic.CalculatePercent(Of Tvalue)(System.Func(Of InnerLibs.DataBase.Result, Tvalue))
  name.vb: CalculatePercent(Of Tvalue)(Func(Of DataBase.Result, Tvalue))
  spec.csharp:
  - uid: InnerLibs.Mathematic.CalculatePercent``1(System.Func{InnerLibs.DataBase.Result,``0})
    name: CalculatePercent<Tvalue>
    nameWithType: Mathematic.CalculatePercent<Tvalue>
    fullName: InnerLibs.Mathematic.CalculatePercent<Tvalue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Tvalue
    nameWithType: Tvalue
    fullName: Tvalue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.CalculatePercent``1(System.Func{InnerLibs.DataBase.Result,``0})
    name: CalculatePercent(Of Tvalue)
    nameWithType: Mathematic.CalculatePercent(Of Tvalue)
    fullName: InnerLibs.Mathematic.CalculatePercent(Of Tvalue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Tvalue
    nameWithType: Tvalue
    fullName: Tvalue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  parent: InnerLibs.Mathematic
  definition: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  name: IsBetween(Object, Object)
  nameWithType: Mathematic.IsBetween(Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.InnerLibs.Text.GetRandomItem
  commentId: M:InnerLibs.Text.GetRandomItem``1(System.Collections.Generic.List{``0})
  parent: InnerLibs.Text
  definition: InnerLibs.Text.GetRandomItem``1(System.Collections.Generic.List{``0})
  name: GetRandomItem()
  nameWithType: Text.GetRandomItem()
  fullName: InnerLibs.Text.GetRandomItem()
  spec.csharp:
  - uid: InnerLibs.Text.GetRandomItem
    name: GetRandomItem
    nameWithType: Text.GetRandomItem
    fullName: InnerLibs.Text.GetRandomItem
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.GetRandomItem
    name: GetRandomItem
    nameWithType: Text.GetRandomItem
    fullName: InnerLibs.Text.GetRandomItem
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Text.Join(System.String)
  commentId: M:InnerLibs.Text.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: InnerLibs.Text
  definition: InnerLibs.Text.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)
  name: Join(String)
  nameWithType: Text.Join(String)
  fullName: InnerLibs.Text.Join(System.String)
  spec.csharp:
  - uid: InnerLibs.Text.Join(System.String)
    name: Join
    nameWithType: Text.Join
    fullName: InnerLibs.Text.Join
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.Join(System.String)
    name: Join
    nameWithType: Text.Join
    fullName: InnerLibs.Text.Join
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.InnerLibs.Text.Join(System.String)
  commentId: M:InnerLibs.Text.Join``1(System.Collections.Generic.List{``0},System.String)
  parent: InnerLibs.Text
  definition: InnerLibs.Text.Join``1(System.Collections.Generic.List{``0},System.String)
  name: Join(String)
  nameWithType: Text.Join(String)
  fullName: InnerLibs.Text.Join(System.String)
  spec.csharp:
  - uid: InnerLibs.Text.Join(System.String)
    name: Join
    nameWithType: Text.Join
    fullName: InnerLibs.Text.Join
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.Join(System.String)
    name: Join
    nameWithType: Text.Join
    fullName: InnerLibs.Text.Join
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Text.SerializeJSON(System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  parent: InnerLibs.Text
  definition: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  name: SerializeJSON(String)
  nameWithType: Text.SerializeJSON(String)
  fullName: InnerLibs.Text.SerializeJSON(System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{InnerLibs.DataBase.Result}.InnerLibs.Text.Shuffle
  commentId: M:InnerLibs.Text.Shuffle``1(System.Collections.Generic.List{``0}@)
  parent: InnerLibs.Text
  definition: InnerLibs.Text.Shuffle``1(System.Collections.Generic.List{``0}@)
  name: Shuffle()
  nameWithType: Text.Shuffle()
  fullName: InnerLibs.Text.Shuffle()
  spec.csharp:
  - uid: InnerLibs.Text.Shuffle
    name: Shuffle
    nameWithType: Text.Shuffle
    fullName: InnerLibs.Text.Shuffle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.Shuffle
    name: Shuffle
    nameWithType: Text.Shuffle
    fullName: InnerLibs.Text.Shuffle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Text.ToHtmlList(System.Boolean)
  commentId: M:InnerLibs.Text.ToHtmlList``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)
  parent: InnerLibs.Text
  definition: InnerLibs.Text.ToHtmlList``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)
  name: ToHtmlList(Boolean)
  nameWithType: Text.ToHtmlList(Boolean)
  fullName: InnerLibs.Text.ToHtmlList(System.Boolean)
  spec.csharp:
  - uid: InnerLibs.Text.ToHtmlList(System.Boolean)
    name: ToHtmlList
    nameWithType: Text.ToHtmlList
    fullName: InnerLibs.Text.ToHtmlList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.ToHtmlList(System.Boolean)
    name: ToHtmlList
    nameWithType: Text.ToHtmlList
    fullName: InnerLibs.Text.ToHtmlList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNumber
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNumber(System.Object)
  name: IsNumber()
  nameWithType: Verify.IsNumber()
  fullName: InnerLibs.Verify.IsNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNotNumber
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNotNumber(System.Object)
  name: IsNotNumber()
  nameWithType: Verify.IsNotNumber()
  fullName: InnerLibs.Verify.IsNotNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Verify.IfNoIndex(System.Int32,InnerLibs.DataBase.Result)
  commentId: M:InnerLibs.Verify.IfNoIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IfNoIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)
  name: IfNoIndex(Int32, DataBase.Result)
  nameWithType: Verify.IfNoIndex(Int32, DataBase.Result)
  fullName: InnerLibs.Verify.IfNoIndex(System.Int32, InnerLibs.DataBase.Result)
  spec.csharp:
  - uid: InnerLibs.Verify.IfNoIndex(System.Int32,InnerLibs.DataBase.Result)
    name: IfNoIndex
    nameWithType: Verify.IfNoIndex
    fullName: InnerLibs.Verify.IfNoIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfNoIndex(System.Int32,InnerLibs.DataBase.Result)
    name: IfNoIndex
    nameWithType: Verify.IfNoIndex
    fullName: InnerLibs.Verify.IfNoIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Verify.IfBlankOrNoIndex(System.Int32,InnerLibs.DataBase.Result)
  commentId: M:InnerLibs.Verify.IfBlankOrNoIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IfBlankOrNoIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)
  name: IfBlankOrNoIndex(Int32, DataBase.Result)
  nameWithType: Verify.IfBlankOrNoIndex(Int32, DataBase.Result)
  fullName: InnerLibs.Verify.IfBlankOrNoIndex(System.Int32, InnerLibs.DataBase.Result)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlankOrNoIndex(System.Int32,InnerLibs.DataBase.Result)
    name: IfBlankOrNoIndex
    nameWithType: Verify.IfBlankOrNoIndex
    fullName: InnerLibs.Verify.IfBlankOrNoIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlankOrNoIndex(System.Int32,InnerLibs.DataBase.Result)
    name: IfBlankOrNoIndex
    nameWithType: Verify.IfBlankOrNoIndex
    fullName: InnerLibs.Verify.IfBlankOrNoIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IfBlank``1({T})
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  name: IfBlank<T>(T)
  nameWithType: Verify.IfBlank<T>(T)
  fullName: InnerLibs.Verify.IfBlank<T>(T)
  nameWithType.vb: Verify.IfBlank(Of T)(T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(T)
  name.vb: IfBlank(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.Verify.NullIf(System.Func{InnerLibs.DataBase.Reader,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  name: NullIf(Func<DataBase.Reader, Boolean>)
  nameWithType: Verify.NullIf(Func<DataBase.Reader, Boolean>)
  fullName: InnerLibs.Verify.NullIf(System.Func<InnerLibs.DataBase.Reader, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Func(Of DataBase.Reader, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(System.Func(Of InnerLibs.DataBase.Reader, System.Boolean))
  name.vb: NullIf(Func(Of DataBase.Reader, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.DataBase.Reader,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.DataBase.Reader,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.Verify.NullIf(InnerLibs.DataBase.Reader)
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf(DataBase.Reader)
  nameWithType: Verify.NullIf(DataBase.Reader)
  fullName: InnerLibs.Verify.NullIf(InnerLibs.DataBase.Reader)
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.DataBase.Reader)
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.DataBase.Reader)
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Verify.IsEmpty
  commentId: M:InnerLibs.Verify.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  name: IsEmpty()
  nameWithType: Verify.IsEmpty()
  fullName: InnerLibs.Verify.IsEmpty()
  spec.csharp:
  - uid: InnerLibs.Verify.IsEmpty
    name: IsEmpty
    nameWithType: Verify.IsEmpty
    fullName: InnerLibs.Verify.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsEmpty
    name: IsEmpty
    nameWithType: Verify.IsEmpty
    fullName: InnerLibs.Verify.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  parent: InnerLibs.Web
  definition: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  name: CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax(System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.DataBase.Reader,{TextType}},System.Func{InnerLibs.DataBase.Reader,{ValueType}})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  parent: InnerLibs.Web
  definition: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  name: AsListItem<TextType, ValueType>(Func<DataBase.Reader, TextType>, Func<DataBase.Reader, ValueType>)
  nameWithType: Web.AsListItem<TextType, ValueType>(Func<DataBase.Reader, TextType>, Func<DataBase.Reader, ValueType>)
  fullName: InnerLibs.Web.AsListItem<TextType, ValueType>(System.Func<InnerLibs.DataBase.Reader, TextType>, System.Func<InnerLibs.DataBase.Reader, ValueType>)
  nameWithType.vb: Web.AsListItem(Of TextType, ValueType)(Func(Of DataBase.Reader, TextType), Func(Of DataBase.Reader, ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of TextType, ValueType)(System.Func(Of InnerLibs.DataBase.Reader, TextType), System.Func(Of InnerLibs.DataBase.Reader, ValueType))
  name.vb: AsListItem(Of TextType, ValueType)(Func(Of DataBase.Reader, TextType), Func(Of DataBase.Reader, ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.DataBase.Reader,``0},System.Func{InnerLibs.DataBase.Reader,``1})
    name: AsListItem<TextType, ValueType>
    nameWithType: Web.AsListItem<TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.DataBase.Reader,``0},System.Func{InnerLibs.DataBase.Reader,``1})
    name: AsListItem(Of TextType, ValueType)
    nameWithType: Web.AsListItem(Of TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Web.ToListItems``2(System.Func{InnerLibs.DataBase.Result,{TextType}},System.Func{InnerLibs.DataBase.Result,{ValueType}},System.Func{InnerLibs.DataBase.Result,System.Boolean})
  commentId: M:InnerLibs.Web.ToListItems``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,System.Boolean})
  parent: InnerLibs.Web
  definition: InnerLibs.Web.ToListItems``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,System.Boolean})
  name: ToListItems<TextType, ValueType>(Func<DataBase.Result, TextType>, Func<DataBase.Result, ValueType>, Func<DataBase.Result, Boolean>)
  nameWithType: Web.ToListItems<TextType, ValueType>(Func<DataBase.Result, TextType>, Func<DataBase.Result, ValueType>, Func<DataBase.Result, Boolean>)
  fullName: InnerLibs.Web.ToListItems<TextType, ValueType>(System.Func<InnerLibs.DataBase.Result, TextType>, System.Func<InnerLibs.DataBase.Result, ValueType>, System.Func<InnerLibs.DataBase.Result, System.Boolean>)
  nameWithType.vb: Web.ToListItems(Of TextType, ValueType)(Func(Of DataBase.Result, TextType), Func(Of DataBase.Result, ValueType), Func(Of DataBase.Result, Boolean))
  fullName.vb: InnerLibs.Web.ToListItems(Of TextType, ValueType)(System.Func(Of InnerLibs.DataBase.Result, TextType), System.Func(Of InnerLibs.DataBase.Result, ValueType), System.Func(Of InnerLibs.DataBase.Result, System.Boolean))
  name.vb: ToListItems(Of TextType, ValueType)(Func(Of DataBase.Result, TextType), Func(Of DataBase.Result, ValueType), Func(Of DataBase.Result, Boolean))
  spec.csharp:
  - uid: InnerLibs.Web.ToListItems``2(System.Func{InnerLibs.DataBase.Result,``0},System.Func{InnerLibs.DataBase.Result,``1},System.Func{InnerLibs.DataBase.Result,System.Boolean})
    name: ToListItems<TextType, ValueType>
    nameWithType: Web.ToListItems<TextType, ValueType>
    fullName: InnerLibs.Web.ToListItems<TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.ToListItems``2(System.Func{InnerLibs.DataBase.Result,``0},System.Func{InnerLibs.DataBase.Result,``1},System.Func{InnerLibs.DataBase.Result,System.Boolean})
    name: ToListItems(Of TextType, ValueType)
    nameWithType: Web.ToListItems(Of TextType, ValueType)
    fullName: InnerLibs.Web.ToListItems(Of TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.Web.ToListItems``2(System.Func{InnerLibs.DataBase.Result,{TextType}},System.Func{InnerLibs.DataBase.Result,{ValueType}},{ValueType}[])
  commentId: M:InnerLibs.Web.ToListItems``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},``2[])
  parent: InnerLibs.Web
  definition: InnerLibs.Web.ToListItems``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},``2[])
  name: ToListItems<TextType, ValueType>(Func<DataBase.Result, TextType>, Func<DataBase.Result, ValueType>, ValueType[])
  nameWithType: Web.ToListItems<TextType, ValueType>(Func<DataBase.Result, TextType>, Func<DataBase.Result, ValueType>, ValueType[])
  fullName: InnerLibs.Web.ToListItems<TextType, ValueType>(System.Func<InnerLibs.DataBase.Result, TextType>, System.Func<InnerLibs.DataBase.Result, ValueType>, ValueType[])
  nameWithType.vb: Web.ToListItems(Of TextType, ValueType)(Func(Of DataBase.Result, TextType), Func(Of DataBase.Result, ValueType), ValueType())
  fullName.vb: InnerLibs.Web.ToListItems(Of TextType, ValueType)(System.Func(Of InnerLibs.DataBase.Result, TextType), System.Func(Of InnerLibs.DataBase.Result, ValueType), ValueType())
  name.vb: ToListItems(Of TextType, ValueType)(Func(Of DataBase.Result, TextType), Func(Of DataBase.Result, ValueType), ValueType())
  spec.csharp:
  - uid: InnerLibs.Web.ToListItems``2(System.Func{InnerLibs.DataBase.Result,``0},System.Func{InnerLibs.DataBase.Result,``1},``1[])
    name: ToListItems<TextType, ValueType>
    nameWithType: Web.ToListItems<TextType, ValueType>
    fullName: InnerLibs.Web.ToListItems<TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.ToListItems``2(System.Func{InnerLibs.DataBase.Result,``0},System.Func{InnerLibs.DataBase.Result,``1},``1[])
    name: ToListItems(Of TextType, ValueType)
    nameWithType: Web.ToListItems(Of TextType, ValueType)
    fullName: InnerLibs.Web.ToListItems(Of TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.GetCastedValue
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.GetCastedValue(System.Object)
  name: GetCastedValue()
  nameWithType: WinForms.GetCastedValue()
  fullName: InnerLibs.WinForms.GetCastedValue()
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  name: CastValueForControl(Object)
  nameWithType: WinForms.CastValueForControl(Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  name: ApplyToControls(HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls(HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Func{InnerLibs.DataBase.Result,{TKey}},System.Func{InnerLibs.DataBase.Result,{TOrder}},System.Boolean)
  commentId: M:InnerLibs.LINQ.LINQExtensions.DistinctBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Boolean)
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.DistinctBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Boolean)
  name: DistinctBy<TKey, TOrder>(Func<DataBase.Result, TKey>, Func<DataBase.Result, TOrder>, Boolean)
  nameWithType: LINQExtensions.DistinctBy<TKey, TOrder>(Func<DataBase.Result, TKey>, Func<DataBase.Result, TOrder>, Boolean)
  fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy<TKey, TOrder>(System.Func<InnerLibs.DataBase.Result, TKey>, System.Func<InnerLibs.DataBase.Result, TOrder>, System.Boolean)
  nameWithType.vb: LINQExtensions.DistinctBy(Of TKey, TOrder)(Func(Of DataBase.Result, TKey), Func(Of DataBase.Result, TOrder), Boolean)
  fullName.vb: InnerLibs.LINQ.LINQExtensions.DistinctBy(Of TKey, TOrder)(System.Func(Of InnerLibs.DataBase.Result, TKey), System.Func(Of InnerLibs.DataBase.Result, TOrder), System.Boolean)
  name.vb: DistinctBy(Of TKey, TOrder)(Func(Of DataBase.Result, TKey), Func(Of DataBase.Result, TOrder), Boolean)
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Func{InnerLibs.DataBase.Result,``0},System.Func{InnerLibs.DataBase.Result,``1},System.Boolean)
    name: DistinctBy<TKey, TOrder>
    nameWithType: LINQExtensions.DistinctBy<TKey, TOrder>
    fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy<TKey, TOrder>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOrder
    nameWithType: TOrder
    fullName: TOrder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Func{InnerLibs.DataBase.Result,``0},System.Func{InnerLibs.DataBase.Result,``1},System.Boolean)
    name: DistinctBy(Of TKey, TOrder)
    nameWithType: LINQExtensions.DistinctBy(Of TKey, TOrder)
    fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy(Of TKey, TOrder)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOrder
    nameWithType: TOrder
    fullName: TOrder
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.DistinctBy``1(System.Func{InnerLibs.DataBase.Result,{TKey}})
  commentId: M:InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: DistinctBy<TKey>(Func<DataBase.Result, TKey>)
  nameWithType: LINQExtensions.DistinctBy<TKey>(Func<DataBase.Result, TKey>)
  fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy<TKey>(System.Func<InnerLibs.DataBase.Result, TKey>)
  nameWithType.vb: LINQExtensions.DistinctBy(Of TKey)(Func(Of DataBase.Result, TKey))
  fullName.vb: InnerLibs.LINQ.LINQExtensions.DistinctBy(Of TKey)(System.Func(Of InnerLibs.DataBase.Result, TKey))
  name.vb: DistinctBy(Of TKey)(Func(Of DataBase.Result, TKey))
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.DistinctBy``1(System.Func{InnerLibs.DataBase.Result,``0})
    name: DistinctBy<TKey>
    nameWithType: LINQExtensions.DistinctBy<TKey>
    fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy<TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.DistinctBy``1(System.Func{InnerLibs.DataBase.Result,``0})
    name: DistinctBy(Of TKey)
    nameWithType: LINQExtensions.DistinctBy(Of TKey)
    fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy(Of TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.ForEach(System.Action{InnerLibs.DataBase.Result})
  commentId: M:InnerLibs.LINQ.LINQExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  name: ForEach(Action<DataBase.Result>)
  nameWithType: LINQExtensions.ForEach(Action<DataBase.Result>)
  fullName: InnerLibs.LINQ.LINQExtensions.ForEach(System.Action<InnerLibs.DataBase.Result>)
  nameWithType.vb: LINQExtensions.ForEach(Action(Of DataBase.Result))
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ForEach(System.Action(Of InnerLibs.DataBase.Result))
  name.vb: ForEach(Action(Of DataBase.Result))
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ForEach(System.Action{InnerLibs.DataBase.Result})
    name: ForEach
    nameWithType: LINQExtensions.ForEach
    fullName: InnerLibs.LINQ.LINQExtensions.ForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ForEach(System.Action{InnerLibs.DataBase.Result})
    name: ForEach
    nameWithType: LINQExtensions.ForEach
    fullName: InnerLibs.LINQ.LINQExtensions.ForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.GroupByPage(System.Int32)
  commentId: M:InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: GroupByPage(Int32)
  nameWithType: LINQExtensions.GroupByPage(Int32)
  fullName: InnerLibs.LINQ.LINQExtensions.GroupByPage(System.Int32)
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.GroupByPage(System.Int32)
    name: GroupByPage
    nameWithType: LINQExtensions.GroupByPage
    fullName: InnerLibs.LINQ.LINQExtensions.GroupByPage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.GroupByPage(System.Int32)
    name: GroupByPage
    nameWithType: LINQExtensions.GroupByPage
    fullName: InnerLibs.LINQ.LINQExtensions.GroupByPage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.DataBase.Reader,System.Func{InnerLibs.DataBase.Reader,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  name: HasSamePropertyValues(DataBase.Reader, Func<DataBase.Reader, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues(DataBase.Reader, Func<DataBase.Reader, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.DataBase.Reader, System.Func<InnerLibs.DataBase.Reader, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(DataBase.Reader, Func(Of DataBase.Reader, Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.DataBase.Reader, System.Func(Of InnerLibs.DataBase.Reader, System.Object)())
  name.vb: HasSamePropertyValues(DataBase.Reader, Func(Of DataBase.Reader, Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.DataBase.Reader,System.Func{InnerLibs.DataBase.Reader,System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.DataBase.Reader,System.Func{InnerLibs.DataBase.Reader,System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Reader
    name: DataBase.Reader
    nameWithType: DataBase.Reader
    fullName: InnerLibs.DataBase.Reader
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.OrderByLike(System.Func{InnerLibs.DataBase.Result,System.String},System.Boolean,System.String[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.OrderByLike``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.OrderByLike``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])
  name: OrderByLike(Func<DataBase.Result, String>, Boolean, String[])
  nameWithType: LINQExtensions.OrderByLike(Func<DataBase.Result, String>, Boolean, String[])
  fullName: InnerLibs.LINQ.LINQExtensions.OrderByLike(System.Func<InnerLibs.DataBase.Result, System.String>, System.Boolean, System.String[])
  nameWithType.vb: LINQExtensions.OrderByLike(Func(Of DataBase.Result, String), Boolean, String())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.OrderByLike(System.Func(Of InnerLibs.DataBase.Result, System.String), System.Boolean, System.String())
  name.vb: OrderByLike(Func(Of DataBase.Result, String), Boolean, String())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.OrderByLike(System.Func{InnerLibs.DataBase.Result,System.String},System.Boolean,System.String[])
    name: OrderByLike
    nameWithType: LINQExtensions.OrderByLike
    fullName: InnerLibs.LINQ.LINQExtensions.OrderByLike
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.OrderByLike(System.Func{InnerLibs.DataBase.Result,System.String},System.Boolean,System.String[])
    name: OrderByLike
    nameWithType: LINQExtensions.OrderByLike
    fullName: InnerLibs.LINQ.LINQExtensions.OrderByLike
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.OrderByRandom
  commentId: M:InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Collections.Generic.IEnumerable{``0})
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Collections.Generic.IEnumerable{``0})
  name: OrderByRandom()
  nameWithType: LINQExtensions.OrderByRandom()
  fullName: InnerLibs.LINQ.LINQExtensions.OrderByRandom()
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.OrderByRandom
    name: OrderByRandom
    nameWithType: LINQExtensions.OrderByRandom
    fullName: InnerLibs.LINQ.LINQExtensions.OrderByRandom
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.OrderByRandom
    name: OrderByRandom
    nameWithType: LINQExtensions.OrderByRandom
    fullName: InnerLibs.LINQ.LINQExtensions.OrderByRandom
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.Page(System.Int32,System.Int32)
  commentId: M:InnerLibs.LINQ.LINQExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  name: Page(Int32, Int32)
  nameWithType: LINQExtensions.Page(Int32, Int32)
  fullName: InnerLibs.LINQ.LINQExtensions.Page(System.Int32, System.Int32)
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.Page(System.Int32,System.Int32)
    name: Page
    nameWithType: LINQExtensions.Page
    fullName: InnerLibs.LINQ.LINQExtensions.Page
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.Page(System.Int32,System.Int32)
    name: Page
    nameWithType: LINQExtensions.Page
    fullName: InnerLibs.LINQ.LINQExtensions.Page
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.SelectJoin(System.Func{InnerLibs.DataBase.Result,System.String},System.String)
  commentId: M:InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  name: SelectJoin(Func<DataBase.Result, String>, String)
  nameWithType: LINQExtensions.SelectJoin(Func<DataBase.Result, String>, String)
  fullName: InnerLibs.LINQ.LINQExtensions.SelectJoin(System.Func<InnerLibs.DataBase.Result, System.String>, System.String)
  nameWithType.vb: LINQExtensions.SelectJoin(Func(Of DataBase.Result, String), String)
  fullName.vb: InnerLibs.LINQ.LINQExtensions.SelectJoin(System.Func(Of InnerLibs.DataBase.Result, System.String), System.String)
  name.vb: SelectJoin(Func(Of DataBase.Result, String), String)
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.SelectJoin(System.Func{InnerLibs.DataBase.Result,System.String},System.String)
    name: SelectJoin
    nameWithType: LINQExtensions.SelectJoin
    fullName: InnerLibs.LINQ.LINQExtensions.SelectJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.SelectJoin(System.Func{InnerLibs.DataBase.Result,System.String},System.String)
    name: SelectJoin
    nameWithType: LINQExtensions.SelectJoin
    fullName: InnerLibs.LINQ.LINQExtensions.SelectJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.SelectManyJoin(System.Func{InnerLibs.DataBase.Result,System.Collections.Generic.IEnumerable{System.String}},System.String)
  commentId: M:InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)
  name: SelectManyJoin(Func<DataBase.Result, IEnumerable<String>>, String)
  nameWithType: LINQExtensions.SelectManyJoin(Func<DataBase.Result, IEnumerable<String>>, String)
  fullName: InnerLibs.LINQ.LINQExtensions.SelectManyJoin(System.Func<InnerLibs.DataBase.Result, System.Collections.Generic.IEnumerable<System.String>>, System.String)
  nameWithType.vb: LINQExtensions.SelectManyJoin(Func(Of DataBase.Result, IEnumerable(Of String)), String)
  fullName.vb: InnerLibs.LINQ.LINQExtensions.SelectManyJoin(System.Func(Of InnerLibs.DataBase.Result, System.Collections.Generic.IEnumerable(Of System.String)), System.String)
  name.vb: SelectManyJoin(Func(Of DataBase.Result, IEnumerable(Of String)), String)
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.SelectManyJoin(System.Func{InnerLibs.DataBase.Result,System.Collections.Generic.IEnumerable{System.String}},System.String)
    name: SelectManyJoin
    nameWithType: LINQExtensions.SelectManyJoin
    fullName: InnerLibs.LINQ.LINQExtensions.SelectManyJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.SelectManyJoin(System.Func{InnerLibs.DataBase.Result,System.Collections.Generic.IEnumerable{System.String}},System.String)
    name: SelectManyJoin
    nameWithType: LINQExtensions.SelectManyJoin
    fullName: InnerLibs.LINQ.LINQExtensions.SelectManyJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{InnerLibs.DataBase.Result}.InnerLibs.LINQ.LINQExtensions.TakeAndOrder``1(System.Func{InnerLibs.DataBase.Result,System.Boolean},System.Func{InnerLibs.DataBase.Result,{DefaultOrderType}})
  commentId: M:InnerLibs.LINQ.LINQExtensions.TakeAndOrder``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.TakeAndOrder``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})
  name: TakeAndOrder<DefaultOrderType>(Func<DataBase.Result, Boolean>, Func<DataBase.Result, DefaultOrderType>)
  nameWithType: LINQExtensions.TakeAndOrder<DefaultOrderType>(Func<DataBase.Result, Boolean>, Func<DataBase.Result, DefaultOrderType>)
  fullName: InnerLibs.LINQ.LINQExtensions.TakeAndOrder<DefaultOrderType>(System.Func<InnerLibs.DataBase.Result, System.Boolean>, System.Func<InnerLibs.DataBase.Result, DefaultOrderType>)
  nameWithType.vb: LINQExtensions.TakeAndOrder(Of DefaultOrderType)(Func(Of DataBase.Result, Boolean), Func(Of DataBase.Result, DefaultOrderType))
  fullName.vb: InnerLibs.LINQ.LINQExtensions.TakeAndOrder(Of DefaultOrderType)(System.Func(Of InnerLibs.DataBase.Result, System.Boolean), System.Func(Of InnerLibs.DataBase.Result, DefaultOrderType))
  name.vb: TakeAndOrder(Of DefaultOrderType)(Func(Of DataBase.Result, Boolean), Func(Of DataBase.Result, DefaultOrderType))
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.TakeAndOrder``1(System.Func{InnerLibs.DataBase.Result,System.Boolean},System.Func{InnerLibs.DataBase.Result,``0})
    name: TakeAndOrder<DefaultOrderType>
    nameWithType: LINQExtensions.TakeAndOrder<DefaultOrderType>
    fullName: InnerLibs.LINQ.LINQExtensions.TakeAndOrder<DefaultOrderType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: DefaultOrderType
    nameWithType: DefaultOrderType
    fullName: DefaultOrderType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.TakeAndOrder``1(System.Func{InnerLibs.DataBase.Result,System.Boolean},System.Func{InnerLibs.DataBase.Result,``0})
    name: TakeAndOrder(Of DefaultOrderType)
    nameWithType: LINQExtensions.TakeAndOrder(Of DefaultOrderType)
    fullName: InnerLibs.LINQ.LINQExtensions.TakeAndOrder(Of DefaultOrderType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: DefaultOrderType
    nameWithType: DefaultOrderType
    fullName: DefaultOrderType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: true
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Add(`0)
  commentId: M:System.Collections.Generic.List`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: List<T>.Add(T)
  fullName: System.Collections.Generic.List<T>.Add(T)
  nameWithType.vb: List(Of T).Add(T)
  fullName.vb: System.Collections.Generic.List(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<T>.Add
    fullName: System.Collections.Generic.List<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of T).Add
    fullName: System.Collections.Generic.List(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  isExternal: true
  name: IList.Add(Object)
  nameWithType: List<T>.IList.Add(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<T>.IList.Add
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of T).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: AddRange(IEnumerable<T>)
  nameWithType: List<T>.AddRange(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).AddRange(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<T>.AddRange
    fullName: System.Collections.Generic.List<T>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of T).AddRange
    fullName: System.Collections.Generic.List(Of T).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AsReadOnly
  commentId: M:System.Collections.Generic.List`1.AsReadOnly
  isExternal: true
  name: AsReadOnly()
  nameWithType: List<T>.AsReadOnly()
  fullName: System.Collections.Generic.List<T>.AsReadOnly()
  nameWithType.vb: List(Of T).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of T).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<T>.AsReadOnly
    fullName: System.Collections.Generic.List<T>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of T).AsReadOnly
    fullName: System.Collections.Generic.List(Of T).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(Int32, Int32, T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(Int32, Int32, T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Int32, Int32, T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0)
  isExternal: true
  name: BinarySearch(T)
  nameWithType: List<T>.BinarySearch(T)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T)
  nameWithType.vb: List(Of T).BinarySearch(T)
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Clear
  commentId: M:System.Collections.Generic.List`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: List<T>.Clear()
  fullName: System.Collections.Generic.List<T>.Clear()
  nameWithType.vb: List(Of T).Clear()
  fullName.vb: System.Collections.Generic.List(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<T>.Clear
    fullName: System.Collections.Generic.List<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of T).Clear
    fullName: System.Collections.Generic.List(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Contains(`0)
  commentId: M:System.Collections.Generic.List`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: List<T>.Contains(T)
  fullName: System.Collections.Generic.List<T>.Contains(T)
  nameWithType.vb: List(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.List(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<T>.Contains
    fullName: System.Collections.Generic.List<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of T).Contains
    fullName: System.Collections.Generic.List(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  isExternal: true
  name: IList.Contains(Object)
  nameWithType: List<T>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<T>.IList.Contains
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of T).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  commentId: M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  isExternal: true
  name: ConvertAll<TOutput>(Converter<T, TOutput>)
  nameWithType: List<T>.ConvertAll<TOutput>(Converter<T, TOutput>)
  fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>(System.Converter<T, TOutput>)
  nameWithType.vb: List(Of T).ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  fullName.vb: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)(System.Converter(Of T, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<T>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of T).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[])
  isExternal: true
  name: CopyTo(T[])
  nameWithType: List<T>.CopyTo(T[])
  fullName: System.Collections.Generic.List<T>.CopyTo(T[])
  nameWithType.vb: List(Of T).CopyTo(T())
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T())
  name.vb: CopyTo(T())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<T>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<T>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of T).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  isExternal: true
  name: CopyTo(Int32, T[], Int32, Int32)
  nameWithType: List<T>.CopyTo(Int32, T[], Int32, Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(System.Int32, T[], System.Int32, System.Int32)
  nameWithType.vb: List(Of T).CopyTo(Int32, T(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(System.Int32, T(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, T(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: List<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: List(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  isExternal: true
  name: Exists(Predicate<T>)
  nameWithType: List<T>.Exists(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Exists(System.Predicate<T>)
  nameWithType.vb: List(Of T).Exists(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Exists(System.Predicate(Of T))
  name.vb: Exists(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<T>.Exists
    fullName: System.Collections.Generic.List<T>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of T).Exists
    fullName: System.Collections.Generic.List(Of T).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  isExternal: true
  name: Find(Predicate<T>)
  nameWithType: List<T>.Find(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Find(System.Predicate<T>)
  nameWithType.vb: List(Of T).Find(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Find(System.Predicate(Of T))
  name.vb: Find(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<T>.Find
    fullName: System.Collections.Generic.List<T>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of T).Find
    fullName: System.Collections.Generic.List(Of T).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  isExternal: true
  name: FindAll(Predicate<T>)
  nameWithType: List<T>.FindAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindAll(System.Predicate(Of T))
  name.vb: FindAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<T>.FindAll
    fullName: System.Collections.Generic.List<T>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of T).FindAll
    fullName: System.Collections.Generic.List(Of T).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  isExternal: true
  name: FindIndex(Predicate<T>)
  nameWithType: List<T>.FindIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Predicate(Of T))
  name.vb: FindIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  isExternal: true
  name: FindLast(Predicate<T>)
  nameWithType: List<T>.FindLast(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLast(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLast(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLast(System.Predicate(Of T))
  name.vb: FindLast(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<T>.FindLast
    fullName: System.Collections.Generic.List<T>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of T).FindLast
    fullName: System.Collections.Generic.List(Of T).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Predicate(Of T))
  name.vb: FindLastIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  commentId: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})
  isExternal: true
  name: ForEach(Action<T>)
  nameWithType: List<T>.ForEach(Action<T>)
  fullName: System.Collections.Generic.List<T>.ForEach(System.Action<T>)
  nameWithType.vb: List(Of T).ForEach(Action(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).ForEach(System.Action(Of T))
  name.vb: ForEach(Action(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<T>.ForEach
    fullName: System.Collections.Generic.List<T>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of T).ForEach
    fullName: System.Collections.Generic.List(Of T).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetEnumerator
  commentId: M:System.Collections.Generic.List`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: List<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.GetEnumerator()
  nameWithType.vb: List(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of T).GetEnumerator
    fullName: System.Collections.Generic.List(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator
  isExternal: true
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: List<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator
    name: IEnumerable<T>.GetEnumerator
    nameWithType: List<T>.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator()
  nameWithType: List<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<T>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  isExternal: true
  name: GetRange(Int32, Int32)
  nameWithType: List<T>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<T>.GetRange
    fullName: System.Collections.Generic.List<T>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of T).GetRange
    fullName: System.Collections.Generic.List(Of T).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: List<T>.IndexOf(T)
  fullName: System.Collections.Generic.List<T>.IndexOf(T)
  nameWithType.vb: List(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  isExternal: true
  name: IList.IndexOf(Object)
  nameWithType: List<T>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<T>.IList.IndexOf
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of T).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32)
  nameWithType: List<T>.IndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32, Int32)
  nameWithType: List<T>.IndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: List<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.List<T>.Insert(System.Int32, T)
  nameWithType.vb: List(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.List(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<T>.Insert
    fullName: System.Collections.Generic.List<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of T).Insert
    fullName: System.Collections.Generic.List(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  isExternal: true
  name: IList.Insert(Int32, Object)
  nameWithType: List<T>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<T>.IList.Insert
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of T).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: List<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).InsertRange(Int32, IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of T))
  name.vb: InsertRange(Int32, IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<T>.InsertRange
    fullName: System.Collections.Generic.List<T>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of T).InsertRange
    fullName: System.Collections.Generic.List(Of T).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  isExternal: true
  name: LastIndexOf(T)
  nameWithType: List<T>.LastIndexOf(T)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)
  nameWithType.vb: List(Of T).LastIndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Remove(`0)
  commentId: M:System.Collections.Generic.List`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: List<T>.Remove(T)
  fullName: System.Collections.Generic.List<T>.Remove(T)
  nameWithType.vb: List(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.List(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<T>.Remove
    fullName: System.Collections.Generic.List<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of T).Remove
    fullName: System.Collections.Generic.List(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  isExternal: true
  name: IList.Remove(Object)
  nameWithType: List<T>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<T>.IList.Remove
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of T).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  isExternal: true
  name: RemoveAll(Predicate<T>)
  nameWithType: List<T>.RemoveAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).RemoveAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAll(System.Predicate(Of T))
  name.vb: RemoveAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<T>.RemoveAll
    fullName: System.Collections.Generic.List<T>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of T).RemoveAll
    fullName: System.Collections.Generic.List(Of T).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: List<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<T>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<T>.RemoveAt
    fullName: System.Collections.Generic.List<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of T).RemoveAt
    fullName: System.Collections.Generic.List(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  isExternal: true
  name: RemoveRange(Int32, Int32)
  nameWithType: List<T>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<T>.RemoveRange
    fullName: System.Collections.Generic.List<T>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of T).RemoveRange
    fullName: System.Collections.Generic.List(Of T).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse
  commentId: M:System.Collections.Generic.List`1.Reverse
  isExternal: true
  name: Reverse()
  nameWithType: List<T>.Reverse()
  fullName: System.Collections.Generic.List<T>.Reverse()
  nameWithType.vb: List(Of T).Reverse()
  fullName.vb: System.Collections.Generic.List(Of T).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  isExternal: true
  name: Reverse(Int32, Int32)
  nameWithType: List<T>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort
  commentId: M:System.Collections.Generic.List`1.Sort
  isExternal: true
  name: Sort()
  nameWithType: List<T>.Sort()
  fullName: System.Collections.Generic.List<T>.Sort()
  nameWithType.vb: List(Of T).Sort()
  fullName.vb: System.Collections.Generic.List(Of T).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(IComparer<T>)
  nameWithType: List<T>.Sort(IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(Int32, Int32, IComparer<T>)
  nameWithType: List<T>.Sort(Int32, Int32, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(Int32, Int32, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Int32, Int32, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  isExternal: true
  name: Sort(Comparison<T>)
  nameWithType: List<T>.Sort(Comparison<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Comparison<T>)
  nameWithType.vb: List(Of T).Sort(Comparison(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Comparison(Of T))
  name.vb: Sort(Comparison(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ToArray
  commentId: M:System.Collections.Generic.List`1.ToArray
  isExternal: true
  name: ToArray()
  nameWithType: List<T>.ToArray()
  fullName: System.Collections.Generic.List<T>.ToArray()
  nameWithType.vb: List(Of T).ToArray()
  fullName.vb: System.Collections.Generic.List(Of T).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<T>.ToArray
    fullName: System.Collections.Generic.List<T>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of T).ToArray
    fullName: System.Collections.Generic.List(Of T).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrimExcess
  commentId: M:System.Collections.Generic.List`1.TrimExcess
  isExternal: true
  name: TrimExcess()
  nameWithType: List<T>.TrimExcess()
  fullName: System.Collections.Generic.List<T>.TrimExcess()
  nameWithType.vb: List(Of T).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of T).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<T>.TrimExcess
    fullName: System.Collections.Generic.List<T>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of T).TrimExcess
    fullName: System.Collections.Generic.List(Of T).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  isExternal: true
  name: TrueForAll(Predicate<T>)
  nameWithType: List<T>.TrueForAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.TrueForAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).TrueForAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).TrueForAll(System.Predicate(Of T))
  name.vb: TrueForAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<T>.TrueForAll
    fullName: System.Collections.Generic.List<T>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of T).TrueForAll
    fullName: System.Collections.Generic.List(Of T).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Capacity
  commentId: P:System.Collections.Generic.List`1.Capacity
  isExternal: true
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: System.Collections.Generic.List<T>.Capacity
  nameWithType.vb: List(Of T).Capacity
  fullName.vb: System.Collections.Generic.List(Of T).Capacity
- uid: System.Collections.Generic.List`1.Count
  commentId: P:System.Collections.Generic.List`1.Count
  isExternal: true
  name: Count
  nameWithType: List<T>.Count
  fullName: System.Collections.Generic.List<T>.Count
  nameWithType.vb: List(Of T).Count
  fullName.vb: System.Collections.Generic.List(Of T).Count
- uid: System.Collections.Generic.List`1.System.Collections.IList.IsFixedSize
  commentId: P:System.Collections.Generic.List`1.System.Collections.IList.IsFixedSize
  isExternal: true
  name: IList.IsFixedSize
  nameWithType: List<T>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of T).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List`1.System.Collections.Generic.ICollection<T>.IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System.Collections.Generic.ICollection<T>.IsReadOnly
  isExternal: true
  name: ICollection<T>.IsReadOnly
  nameWithType: List<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List`1.System.Collections.IList.IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System.Collections.IList.IsReadOnly
  isExternal: true
  name: IList.IsReadOnly
  nameWithType: List<T>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List`1.System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.Generic.List`1.System.Collections.ICollection.IsSynchronized
  isExternal: true
  name: ICollection.IsSynchronized
  nameWithType: List<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List`1.System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.Generic.List`1.System.Collections.ICollection.SyncRoot
  isExternal: true
  name: ICollection.SyncRoot
  nameWithType: List<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: InnerLibs.ClassTools.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: ContainsAll<Type>(IEnumerable<Type>, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.ContainsAll<Type>(IEnumerable<Type>, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.ContainsAll<Type>(System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.ContainsAll(Of Type)(IEnumerable(Of Type), IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.ContainsAll(Of Type)(System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: ContainsAll(Of Type)(IEnumerable(Of Type), IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: ContainsAll<Type>
    nameWithType: ClassTools.ContainsAll<Type>
    fullName: InnerLibs.ClassTools.ContainsAll<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: ContainsAll(Of Type)
    nameWithType: ClassTools.ContainsAll(Of Type)
    fullName: InnerLibs.ClassTools.ContainsAll(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools
  commentId: T:InnerLibs.ClassTools
  parent: InnerLibs
  name: ClassTools
  nameWithType: ClassTools
  fullName: InnerLibs.ClassTools
- uid: InnerLibs.ClassTools.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: ContainsAny<Type>(IEnumerable<Type>, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.ContainsAny<Type>(IEnumerable<Type>, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.ContainsAny<Type>(System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.ContainsAny(Of Type)(IEnumerable(Of Type), IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.ContainsAny(Of Type)(System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: ContainsAny(Of Type)(IEnumerable(Of Type), IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: ContainsAny<Type>
    nameWithType: ClassTools.ContainsAny<Type>
    fullName: InnerLibs.ClassTools.ContainsAny<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: ContainsAny(Of Type)
    nameWithType: ClassTools.ContainsAny(Of Type)
    fullName: InnerLibs.ClassTools.ContainsAny(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary<Type>(Type)
  nameWithType: ClassTools.CreateDictionary<Type>(Type)
  fullName: InnerLibs.ClassTools.CreateDictionary<Type>(Type)
  nameWithType.vb: ClassTools.CreateDictionary(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.CreateDictionary(Of Type)(Type)
  name.vb: CreateDictionary(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary<Type>
    nameWithType: ClassTools.CreateDictionary<Type>
    fullName: InnerLibs.ClassTools.CreateDictionary<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary(Of Type)
    nameWithType: ClassTools.CreateDictionary(Of Type)
    fullName: InnerLibs.ClassTools.CreateDictionary(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.DistinctCount``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:InnerLibs.ClassTools.DistinctCount``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: DistinctCount<Type>(IEnumerable<Type>)
  nameWithType: ClassTools.DistinctCount<Type>(IEnumerable<Type>)
  fullName: InnerLibs.ClassTools.DistinctCount<Type>(System.Collections.Generic.IEnumerable<Type>)
  nameWithType.vb: ClassTools.DistinctCount(Of Type)(IEnumerable(Of Type))
  fullName.vb: InnerLibs.ClassTools.DistinctCount(Of Type)(System.Collections.Generic.IEnumerable(Of Type))
  name.vb: DistinctCount(Of Type)(IEnumerable(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.DistinctCount``1(System.Collections.Generic.IEnumerable{``0})
    name: DistinctCount<Type>
    nameWithType: ClassTools.DistinctCount<Type>
    fullName: InnerLibs.ClassTools.DistinctCount<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.DistinctCount``1(System.Collections.Generic.IEnumerable{``0})
    name: DistinctCount(Of Type)
    nameWithType: ClassTools.DistinctCount(Of Type)
    fullName: InnerLibs.ClassTools.DistinctCount(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:InnerLibs.ClassTools.FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExternal: true
  name: FirstOr<T>(IEnumerable<T>, T)
  nameWithType: ClassTools.FirstOr<T>(IEnumerable<T>, T)
  fullName: InnerLibs.ClassTools.FirstOr<T>(System.Collections.Generic.IEnumerable<T>, T)
  nameWithType.vb: ClassTools.FirstOr(Of T)(IEnumerable(Of T), T)
  fullName.vb: InnerLibs.ClassTools.FirstOr(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: FirstOr(Of T)(IEnumerable(Of T), T)
  spec.csharp:
  - uid: InnerLibs.ClassTools.FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: FirstOr<T>
    nameWithType: ClassTools.FirstOr<T>
    fullName: InnerLibs.ClassTools.FirstOr<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: FirstOr(Of T)
    nameWithType: ClassTools.FirstOr(Of T)
    fullName: InnerLibs.ClassTools.FirstOr(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  isExternal: true
  name: GetProperties(Object, BindingFlags)
  nameWithType: ClassTools.GetProperties(Object, BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object, System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetProperties(System.Object)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  isExternal: true
  name: GetProperties(Object)
  nameWithType: ClassTools.GetProperties(Object)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue<Type>(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.Object, System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(Object, String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.Object, System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(Object, String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  isExternal: true
  name: HasProperty(Object, String)
  nameWithType: ClassTools.HasProperty(Object, String)
  fullName: InnerLibs.ClassTools.HasProperty(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  isExternal: true
  name: IsArrayOf<T>(Object)
  nameWithType: ClassTools.IsArrayOf<T>(Object)
  fullName: InnerLibs.ClassTools.IsArrayOf<T>(System.Object)
  nameWithType.vb: ClassTools.IsArrayOf(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)(System.Object)
  name.vb: IsArrayOf(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsDictionary(System.Object)
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  isExternal: true
  name: IsDictionary(Object)
  nameWithType: ClassTools.IsDictionary(Object)
  fullName: InnerLibs.ClassTools.IsDictionary(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  nameWithType: ClassTools.IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsInAny<Type>(Type, System.Collections.Generic.IEnumerable<Type>[], System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsInAny(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type)(), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny<Type>
    nameWithType: ClassTools.IsInAny<Type>
    fullName: InnerLibs.ClassTools.IsInAny<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny(Of Type)
    nameWithType: ClassTools.IsInAny(Of Type)
    fullName: InnerLibs.ClassTools.IsInAny(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsList(System.Object)
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  isExternal: true
  name: IsList(Object)
  nameWithType: ClassTools.IsList(Object)
  fullName: InnerLibs.ClassTools.IsList(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsType``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  isExternal: true
  name: IsType<T>(Object)
  nameWithType: ClassTools.IsType<T>(Object)
  fullName: InnerLibs.ClassTools.IsType<T>(System.Object)
  nameWithType.vb: ClassTools.IsType(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)(System.Object)
  name.vb: IsType(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.LastOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:InnerLibs.ClassTools.LastOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExternal: true
  name: LastOr<T>(IEnumerable<T>, T)
  nameWithType: ClassTools.LastOr<T>(IEnumerable<T>, T)
  fullName: InnerLibs.ClassTools.LastOr<T>(System.Collections.Generic.IEnumerable<T>, T)
  nameWithType.vb: ClassTools.LastOr(Of T)(IEnumerable(Of T), T)
  fullName.vb: InnerLibs.ClassTools.LastOr(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: LastOr(Of T)(IEnumerable(Of T), T)
  spec.csharp:
  - uid: InnerLibs.ClassTools.LastOr``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: LastOr<T>
    nameWithType: ClassTools.LastOr<T>
    fullName: InnerLibs.ClassTools.LastOr<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.LastOr``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: LastOr(Of T)
    nameWithType: ClassTools.LastOr(Of T)
    fullName: InnerLibs.ClassTools.LastOr(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce<T>(T, T[])
  nameWithType: ClassTools.NullCoalesce<T>(T, T[])
  fullName: InnerLibs.ClassTools.NullCoalesce<T>(T, T[])
  nameWithType.vb: ClassTools.NullCoalesce(Of T)(T, T())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(Of T)(T, T())
  name.vb: NullCoalesce(Of T)(T, T())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce<T>
    nameWithType: ClassTools.NullCoalesce<T>
    fullName: InnerLibs.ClassTools.NullCoalesce<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce(Of T)
    nameWithType: ClassTools.NullCoalesce(Of T)
    fullName: InnerLibs.ClassTools.NullCoalesce(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullCoalesce``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: NullCoalesce<T>(IEnumerable<T>)
  nameWithType: ClassTools.NullCoalesce<T>(IEnumerable<T>)
  fullName: InnerLibs.ClassTools.NullCoalesce<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ClassTools.NullCoalesce(Of T)(IEnumerable(Of T))
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: NullCoalesce(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(System.Collections.Generic.IEnumerable{``0})
    name: NullCoalesce<T>
    nameWithType: ClassTools.NullCoalesce<T>
    fullName: InnerLibs.ClassTools.NullCoalesce<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(System.Collections.Generic.IEnumerable{``0})
    name: NullCoalesce(Of T)
    nameWithType: ClassTools.NullCoalesce(Of T)
    fullName: InnerLibs.ClassTools.NullCoalesce(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties<Type>(Type)
  nameWithType: ClassTools.NullifyProperties<Type>(Type)
  fullName: InnerLibs.ClassTools.NullifyProperties<Type>(Type)
  nameWithType.vb: ClassTools.NullifyProperties(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.NullifyProperties(Of Type)(Type)
  name.vb: NullifyProperties(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties<Type>
    nameWithType: ClassTools.NullifyProperties<Type>
    fullName: InnerLibs.ClassTools.NullifyProperties<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties(Of Type)
    nameWithType: ClassTools.NullifyProperties(Of Type)
    fullName: InnerLibs.ClassTools.NullifyProperties(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  isExternal: true
  name: SetPropertyValue<Type>(Object, String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(Object, String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.Object, System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(Object, String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.Object, System.String, Type)
  name.vb: SetPropertyValue(Of Type)(Object, String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  isExternal: true
  name: SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.Object, System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.Object, System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  isExternal: true
  name: ToFlatString(Object, String)
  nameWithType: ClassTools.ToFlatString(Object, String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation.GetDbType(System.Object)
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  isExternal: true
  name: GetDbType(Object)
  nameWithType: DataManipulation.GetDbType(Object)
  fullName: InnerLibs.DataManipulation.GetDbType(System.Object)
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation
  commentId: T:InnerLibs.DataManipulation
  parent: InnerLibs
  name: DataManipulation
  nameWithType: DataManipulation
  fullName: InnerLibs.DataManipulation
- uid: InnerLibs.Converter.DefineEmptyList``1(``0)
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList<T>(T)
  nameWithType: Converter.DefineEmptyList<T>(T)
  fullName: InnerLibs.Converter.DefineEmptyList<T>(T)
  nameWithType.vb: Converter.DefineEmptyList(Of T)(T)
  fullName.vb: InnerLibs.Converter.DefineEmptyList(Of T)(T)
  name.vb: DefineEmptyList(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList<T>
    nameWithType: Converter.DefineEmptyList<T>
    fullName: InnerLibs.Converter.DefineEmptyList<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList(Of T)
    nameWithType: Converter.DefineEmptyList(Of T)
    fullName: InnerLibs.Converter.DefineEmptyList(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Converter
  commentId: T:InnerLibs.Converter
  parent: InnerLibs
  name: Converter
  nameWithType: Converter
  fullName: InnerLibs.Converter
- uid: InnerLibs.Converter.ChangeType``2(``1)
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType, FromType>(FromType)
  nameWithType: Converter.ChangeType<ToType, FromType>(FromType)
  fullName: InnerLibs.Converter.ChangeType<ToType, FromType>(FromType)
  nameWithType.vb: Converter.ChangeType(Of ToType, FromType)(FromType)
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType, FromType)(FromType)
  name.vb: ChangeType(Of ToType, FromType)(FromType)
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType<ToType, FromType>
    nameWithType: Converter.ChangeType<ToType, FromType>
    fullName: InnerLibs.Converter.ChangeType<ToType, FromType>
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType(Of ToType, FromType)
    nameWithType: Converter.ChangeType(Of ToType, FromType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType, FromType)
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer.CreateNode(System.Object)
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  isExternal: true
  name: CreateNode(Object)
  nameWithType: JsonViewer.CreateNode(Object)
  fullName: InnerLibs.JsonViewer.CreateNode(System.Object)
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer
  commentId: T:InnerLibs.JsonViewer
  parent: InnerLibs
  name: JsonViewer
  nameWithType: JsonViewer
  fullName: InnerLibs.JsonViewer
- uid: InnerLibs.Mathematic.CalculatePercent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:InnerLibs.Mathematic.CalculatePercent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExternal: true
  name: CalculatePercent<TObject, TKey, TValue>(IEnumerable<TObject>, Func<TObject, TKey>, Func<TObject, TValue>)
  nameWithType: Mathematic.CalculatePercent<TObject, TKey, TValue>(IEnumerable<TObject>, Func<TObject, TKey>, Func<TObject, TValue>)
  fullName: InnerLibs.Mathematic.CalculatePercent<TObject, TKey, TValue>(System.Collections.Generic.IEnumerable<TObject>, System.Func<TObject, TKey>, System.Func<TObject, TValue>)
  nameWithType.vb: Mathematic.CalculatePercent(Of TObject, TKey, TValue)(IEnumerable(Of TObject), Func(Of TObject, TKey), Func(Of TObject, TValue))
  fullName.vb: InnerLibs.Mathematic.CalculatePercent(Of TObject, TKey, TValue)(System.Collections.Generic.IEnumerable(Of TObject), System.Func(Of TObject, TKey), System.Func(Of TObject, TValue))
  name.vb: CalculatePercent(Of TObject, TKey, TValue)(IEnumerable(Of TObject), Func(Of TObject, TKey), Func(Of TObject, TValue))
  spec.csharp:
  - uid: InnerLibs.Mathematic.CalculatePercent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
    name: CalculatePercent<TObject, TKey, TValue>
    nameWithType: Mathematic.CalculatePercent<TObject, TKey, TValue>
    fullName: InnerLibs.Mathematic.CalculatePercent<TObject, TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.CalculatePercent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
    name: CalculatePercent(Of TObject, TKey, TValue)
    nameWithType: Mathematic.CalculatePercent(Of TObject, TKey, TValue)
    fullName: InnerLibs.Mathematic.CalculatePercent(Of TObject, TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic
  commentId: T:InnerLibs.Mathematic
  parent: InnerLibs
  name: Mathematic
  nameWithType: Mathematic
  fullName: InnerLibs.Mathematic
- uid: InnerLibs.Mathematic.CalculatePercent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:InnerLibs.Mathematic.CalculatePercent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: CalculatePercent<Tobject, Tvalue>(IEnumerable<Tobject>, Func<Tobject, Tvalue>)
  nameWithType: Mathematic.CalculatePercent<Tobject, Tvalue>(IEnumerable<Tobject>, Func<Tobject, Tvalue>)
  fullName: InnerLibs.Mathematic.CalculatePercent<Tobject, Tvalue>(System.Collections.Generic.IEnumerable<Tobject>, System.Func<Tobject, Tvalue>)
  nameWithType.vb: Mathematic.CalculatePercent(Of Tobject, Tvalue)(IEnumerable(Of Tobject), Func(Of Tobject, Tvalue))
  fullName.vb: InnerLibs.Mathematic.CalculatePercent(Of Tobject, Tvalue)(System.Collections.Generic.IEnumerable(Of Tobject), System.Func(Of Tobject, Tvalue))
  name.vb: CalculatePercent(Of Tobject, Tvalue)(IEnumerable(Of Tobject), Func(Of Tobject, Tvalue))
  spec.csharp:
  - uid: InnerLibs.Mathematic.CalculatePercent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: CalculatePercent<Tobject, Tvalue>
    nameWithType: Mathematic.CalculatePercent<Tobject, Tvalue>
    fullName: InnerLibs.Mathematic.CalculatePercent<Tobject, Tvalue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Tobject
    nameWithType: Tobject
    fullName: Tobject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Tobject
    nameWithType: Tobject
    fullName: Tobject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Tvalue
    nameWithType: Tvalue
    fullName: Tvalue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.CalculatePercent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: CalculatePercent(Of Tobject, Tvalue)
    nameWithType: Mathematic.CalculatePercent(Of Tobject, Tvalue)
    fullName: InnerLibs.Mathematic.CalculatePercent(Of Tobject, Tvalue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Tobject
    nameWithType: Tobject
    fullName: Tobject
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Tobject
    nameWithType: Tobject
    fullName: Tobject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Tvalue
    nameWithType: Tvalue
    fullName: Tvalue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  isExternal: true
  name: IsBetween<Type>(Type, Object, Object)
  nameWithType: Mathematic.IsBetween<Type>(Type, Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween<Type>(Type, System.Object, System.Object)
  nameWithType.vb: Mathematic.IsBetween(Of Type)(Type, Object, Object)
  fullName.vb: InnerLibs.Mathematic.IsBetween(Of Type)(Type, System.Object, System.Object)
  name.vb: IsBetween(Of Type)(Type, Object, Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween<Type>
    nameWithType: Mathematic.IsBetween<Type>
    fullName: InnerLibs.Mathematic.IsBetween<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween(Of Type)
    nameWithType: Mathematic.IsBetween(Of Type)
    fullName: InnerLibs.Mathematic.IsBetween(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.GetRandomItem``1(System.Collections.Generic.List{``0})
  commentId: M:InnerLibs.Text.GetRandomItem``1(System.Collections.Generic.List{``0})
  isExternal: true
  name: GetRandomItem<Type>(List<Type>)
  nameWithType: Text.GetRandomItem<Type>(List<Type>)
  fullName: InnerLibs.Text.GetRandomItem<Type>(System.Collections.Generic.List<Type>)
  nameWithType.vb: Text.GetRandomItem(Of Type)(List(Of Type))
  fullName.vb: InnerLibs.Text.GetRandomItem(Of Type)(System.Collections.Generic.List(Of Type))
  name.vb: GetRandomItem(Of Type)(List(Of Type))
  spec.csharp:
  - uid: InnerLibs.Text.GetRandomItem``1(System.Collections.Generic.List{``0})
    name: GetRandomItem<Type>
    nameWithType: Text.GetRandomItem<Type>
    fullName: InnerLibs.Text.GetRandomItem<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.GetRandomItem``1(System.Collections.Generic.List{``0})
    name: GetRandomItem(Of Type)
    nameWithType: Text.GetRandomItem(Of Type)
    fullName: InnerLibs.Text.GetRandomItem(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text
  commentId: T:InnerLibs.Text
  parent: InnerLibs
  name: Text
  nameWithType: Text
  fullName: InnerLibs.Text
- uid: InnerLibs.Text.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:InnerLibs.Text.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)
  isExternal: true
  name: Join<Type>(IEnumerable<Type>, String)
  nameWithType: Text.Join<Type>(IEnumerable<Type>, String)
  fullName: InnerLibs.Text.Join<Type>(System.Collections.Generic.IEnumerable<Type>, System.String)
  nameWithType.vb: Text.Join(Of Type)(IEnumerable(Of Type), String)
  fullName.vb: InnerLibs.Text.Join(Of Type)(System.Collections.Generic.IEnumerable(Of Type), System.String)
  name.vb: Join(Of Type)(IEnumerable(Of Type), String)
  spec.csharp:
  - uid: InnerLibs.Text.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: Join<Type>
    nameWithType: Text.Join<Type>
    fullName: InnerLibs.Text.Join<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: Join(Of Type)
    nameWithType: Text.Join(Of Type)
    fullName: InnerLibs.Text.Join(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.Join``1(System.Collections.Generic.List{``0},System.String)
  commentId: M:InnerLibs.Text.Join``1(System.Collections.Generic.List{``0},System.String)
  isExternal: true
  name: Join<Type>(List<Type>, String)
  nameWithType: Text.Join<Type>(List<Type>, String)
  fullName: InnerLibs.Text.Join<Type>(System.Collections.Generic.List<Type>, System.String)
  nameWithType.vb: Text.Join(Of Type)(List(Of Type), String)
  fullName.vb: InnerLibs.Text.Join(Of Type)(System.Collections.Generic.List(Of Type), System.String)
  name.vb: Join(Of Type)(List(Of Type), String)
  spec.csharp:
  - uid: InnerLibs.Text.Join``1(System.Collections.Generic.List{``0},System.String)
    name: Join<Type>
    nameWithType: Text.Join<Type>
    fullName: InnerLibs.Text.Join<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.Join``1(System.Collections.Generic.List{``0},System.String)
    name: Join(Of Type)
    nameWithType: Text.Join(Of Type)
    fullName: InnerLibs.Text.Join(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  isExternal: true
  name: SerializeJSON(Object, String)
  nameWithType: Text.SerializeJSON(Object, String)
  fullName: InnerLibs.Text.SerializeJSON(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.Shuffle``1(System.Collections.Generic.List{``0}@)
  commentId: M:InnerLibs.Text.Shuffle``1(System.Collections.Generic.List{``0}@)
  isExternal: true
  name: Shuffle<Type>(List<Type>)
  nameWithType: Text.Shuffle<Type>(List<Type>)
  fullName: InnerLibs.Text.Shuffle<Type>(System.Collections.Generic.List<Type>)
  nameWithType.vb: Text.Shuffle(Of Type)(List(Of Type))
  fullName.vb: InnerLibs.Text.Shuffle(Of Type)(System.Collections.Generic.List(Of Type))
  name.vb: Shuffle(Of Type)(List(Of Type))
  spec.csharp:
  - uid: InnerLibs.Text.Shuffle``1(System.Collections.Generic.List{``0}@)
    name: Shuffle<Type>
    nameWithType: Text.Shuffle<Type>
    fullName: InnerLibs.Text.Shuffle<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.Shuffle``1(System.Collections.Generic.List{``0}@)
    name: Shuffle(Of Type)
    nameWithType: Text.Shuffle(Of Type)
    fullName: InnerLibs.Text.Shuffle(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.ToHtmlList``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)
  commentId: M:InnerLibs.Text.ToHtmlList``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)
  isExternal: true
  name: ToHtmlList<T>(IEnumerable<T>, Boolean)
  nameWithType: Text.ToHtmlList<T>(IEnumerable<T>, Boolean)
  fullName: InnerLibs.Text.ToHtmlList<T>(System.Collections.Generic.IEnumerable<T>, System.Boolean)
  nameWithType.vb: Text.ToHtmlList(Of T)(IEnumerable(Of T), Boolean)
  fullName.vb: InnerLibs.Text.ToHtmlList(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Boolean)
  name.vb: ToHtmlList(Of T)(IEnumerable(Of T), Boolean)
  spec.csharp:
  - uid: InnerLibs.Text.ToHtmlList``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)
    name: ToHtmlList<T>
    nameWithType: Text.ToHtmlList<T>
    fullName: InnerLibs.Text.ToHtmlList<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.ToHtmlList``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)
    name: ToHtmlList(Of T)
    nameWithType: Text.ToHtmlList(Of T)
    fullName: InnerLibs.Text.ToHtmlList(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.IsNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  isExternal: true
  name: IsNumber(Object)
  nameWithType: Verify.IsNumber(Object)
  fullName: InnerLibs.Verify.IsNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify
  commentId: T:InnerLibs.Verify
  parent: InnerLibs
  name: Verify
  nameWithType: Verify
  fullName: InnerLibs.Verify
- uid: InnerLibs.Verify.IsNotNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  isExternal: true
  name: IsNotNumber(Object)
  nameWithType: Verify.IsNotNumber(Object)
  fullName: InnerLibs.Verify.IsNotNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.IfNoIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)
  commentId: M:InnerLibs.Verify.IfNoIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)
  isExternal: true
  name: IfNoIndex<T>(IEnumerable<T>, Int32, T)
  nameWithType: Verify.IfNoIndex<T>(IEnumerable<T>, Int32, T)
  fullName: InnerLibs.Verify.IfNoIndex<T>(System.Collections.Generic.IEnumerable<T>, System.Int32, T)
  nameWithType.vb: Verify.IfNoIndex(Of T)(IEnumerable(Of T), Int32, T)
  fullName.vb: InnerLibs.Verify.IfNoIndex(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32, T)
  name.vb: IfNoIndex(Of T)(IEnumerable(Of T), Int32, T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfNoIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)
    name: IfNoIndex<T>
    nameWithType: Verify.IfNoIndex<T>
    fullName: InnerLibs.Verify.IfNoIndex<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfNoIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)
    name: IfNoIndex(Of T)
    nameWithType: Verify.IfNoIndex(Of T)
    fullName: InnerLibs.Verify.IfNoIndex(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.IfBlankOrNoIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)
  commentId: M:InnerLibs.Verify.IfBlankOrNoIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)
  isExternal: true
  name: IfBlankOrNoIndex<T>(IEnumerable<T>, Int32, T)
  nameWithType: Verify.IfBlankOrNoIndex<T>(IEnumerable<T>, Int32, T)
  fullName: InnerLibs.Verify.IfBlankOrNoIndex<T>(System.Collections.Generic.IEnumerable<T>, System.Int32, T)
  nameWithType.vb: Verify.IfBlankOrNoIndex(Of T)(IEnumerable(Of T), Int32, T)
  fullName.vb: InnerLibs.Verify.IfBlankOrNoIndex(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32, T)
  name.vb: IfBlankOrNoIndex(Of T)(IEnumerable(Of T), Int32, T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlankOrNoIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)
    name: IfBlankOrNoIndex<T>
    nameWithType: Verify.IfBlankOrNoIndex<T>
    fullName: InnerLibs.Verify.IfBlankOrNoIndex<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlankOrNoIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)
    name: IfBlankOrNoIndex(Of T)
    nameWithType: Verify.IfBlankOrNoIndex(Of T)
    fullName: InnerLibs.Verify.IfBlankOrNoIndex(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  isExternal: true
  name: IfBlank<T>(Object, T)
  nameWithType: Verify.IfBlank<T>(Object, T)
  fullName: InnerLibs.Verify.IfBlank<T>(System.Object, T)
  nameWithType.vb: Verify.IfBlank(Of T)(Object, T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(System.Object, T)
  name.vb: IfBlank(Of T)(Object, T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  isExternal: true
  name: NullIf<T>(T, Func<T, Boolean>)
  nameWithType: Verify.NullIf<T>(T, Func<T, Boolean>)
  fullName: InnerLibs.Verify.NullIf<T>(T, System.Func<T, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Of T)(T, Func(Of T, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, System.Func(Of T, System.Boolean))
  name.vb: NullIf(Of T)(T, Func(Of T, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,``0)
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf<T>(T, T)
  nameWithType: Verify.NullIf<T>(T, T)
  fullName: InnerLibs.Verify.NullIf<T>(T, T)
  nameWithType.vb: Verify.NullIf(Of T)(T, T)
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, T)
  name.vb: NullIf(Of T)(T, T)
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:InnerLibs.Verify.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsEmpty<T>(IEnumerable<T>)
  nameWithType: Verify.IsEmpty<T>(IEnumerable<T>)
  fullName: InnerLibs.Verify.IsEmpty<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: Verify.IsEmpty(Of T)(IEnumerable(Of T))
  fullName.vb: InnerLibs.Verify.IsEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsEmpty(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: InnerLibs.Verify.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: IsEmpty<T>
    nameWithType: Verify.IsEmpty<T>
    fullName: InnerLibs.Verify.IsEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: IsEmpty(Of T)
    nameWithType: Verify.IsEmpty(Of T)
    fullName: InnerLibs.Verify.IsEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  isExternal: true
  name: CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax<Type>(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  nameWithType.vb: Web.CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  fullName.vb: InnerLibs.Web.CreateFromAjax(Of Type)(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  name.vb: CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax<Type>
    nameWithType: Web.CreateFromAjax<Type>
    fullName: InnerLibs.Web.CreateFromAjax<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax(Of Type)
    nameWithType: Web.CreateFromAjax(Of Type)
    fullName: InnerLibs.Web.CreateFromAjax(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web
  commentId: T:InnerLibs.Web
  parent: InnerLibs
  name: Web
  nameWithType: Web
  fullName: InnerLibs.Web
- uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  isExternal: true
  name: AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  nameWithType: Web.AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>(T, System.Func<T, TextType>, System.Func<T, ValueType>)
  nameWithType.vb: Web.AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)(T, System.Func(Of T, TextType), System.Func(Of T, ValueType))
  name.vb: AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem<T, TextType, ValueType>
    nameWithType: Web.AsListItem<T, TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem(Of T, TextType, ValueType)
    nameWithType: Web.AsListItem(Of T, TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web.ToListItems``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,System.Boolean})
  commentId: M:InnerLibs.Web.ToListItems``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,System.Boolean})
  isExternal: true
  name: ToListItems<T, TextType, ValueType>(IEnumerable<T>, Func<T, TextType>, Func<T, ValueType>, Func<T, Boolean>)
  nameWithType: Web.ToListItems<T, TextType, ValueType>(IEnumerable<T>, Func<T, TextType>, Func<T, ValueType>, Func<T, Boolean>)
  fullName: InnerLibs.Web.ToListItems<T, TextType, ValueType>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TextType>, System.Func<T, ValueType>, System.Func<T, System.Boolean>)
  nameWithType.vb: Web.ToListItems(Of T, TextType, ValueType)(IEnumerable(Of T), Func(Of T, TextType), Func(Of T, ValueType), Func(Of T, Boolean))
  fullName.vb: InnerLibs.Web.ToListItems(Of T, TextType, ValueType)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TextType), System.Func(Of T, ValueType), System.Func(Of T, System.Boolean))
  name.vb: ToListItems(Of T, TextType, ValueType)(IEnumerable(Of T), Func(Of T, TextType), Func(Of T, ValueType), Func(Of T, Boolean))
  spec.csharp:
  - uid: InnerLibs.Web.ToListItems``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,System.Boolean})
    name: ToListItems<T, TextType, ValueType>
    nameWithType: Web.ToListItems<T, TextType, ValueType>
    fullName: InnerLibs.Web.ToListItems<T, TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.ToListItems``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,System.Boolean})
    name: ToListItems(Of T, TextType, ValueType)
    nameWithType: Web.ToListItems(Of T, TextType, ValueType)
    fullName: InnerLibs.Web.ToListItems(Of T, TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web.ToListItems``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},``2[])
  commentId: M:InnerLibs.Web.ToListItems``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},``2[])
  isExternal: true
  name: ToListItems<T, TextType, ValueType>(IEnumerable<T>, Func<T, TextType>, Func<T, ValueType>, ValueType[])
  nameWithType: Web.ToListItems<T, TextType, ValueType>(IEnumerable<T>, Func<T, TextType>, Func<T, ValueType>, ValueType[])
  fullName: InnerLibs.Web.ToListItems<T, TextType, ValueType>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TextType>, System.Func<T, ValueType>, ValueType[])
  nameWithType.vb: Web.ToListItems(Of T, TextType, ValueType)(IEnumerable(Of T), Func(Of T, TextType), Func(Of T, ValueType), ValueType())
  fullName.vb: InnerLibs.Web.ToListItems(Of T, TextType, ValueType)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TextType), System.Func(Of T, ValueType), ValueType())
  name.vb: ToListItems(Of T, TextType, ValueType)(IEnumerable(Of T), Func(Of T, TextType), Func(Of T, ValueType), ValueType())
  spec.csharp:
  - uid: InnerLibs.Web.ToListItems``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},``2[])
    name: ToListItems<T, TextType, ValueType>
    nameWithType: Web.ToListItems<T, TextType, ValueType>
    fullName: InnerLibs.Web.ToListItems<T, TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.ToListItems``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},``2[])
    name: ToListItems(Of T, TextType, ValueType)
    nameWithType: Web.ToListItems(Of T, TextType, ValueType)
    fullName: InnerLibs.Web.ToListItems(Of T, TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms.GetCastedValue(System.Object)
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  isExternal: true
  name: GetCastedValue(Object)
  nameWithType: WinForms.GetCastedValue(Object)
  fullName: InnerLibs.WinForms.GetCastedValue(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms
  commentId: T:InnerLibs.WinForms
  parent: InnerLibs
  name: WinForms
  nameWithType: WinForms
  fullName: InnerLibs.WinForms
- uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  isExternal: true
  name: CastValueForControl(Object, Object)
  nameWithType: WinForms.CastValueForControl(Object, Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  isExternal: true
  name: ApplyToControls<T>(T, HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls<T>(T, HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>(T, System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(Of T)(T, HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)(T, System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(Of T)(T, HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls<T>
    nameWithType: LINQExtensions.ApplyToControls<T>
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls(Of T)
    nameWithType: LINQExtensions.ApplyToControls(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions
  commentId: T:InnerLibs.LINQ.LINQExtensions
  parent: InnerLibs.LINQ
  name: LINQExtensions
  nameWithType: LINQExtensions
  fullName: InnerLibs.LINQ.LINQExtensions
- uid: InnerLibs.LINQ.LINQExtensions.DistinctBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Boolean)
  commentId: M:InnerLibs.LINQ.LINQExtensions.DistinctBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Boolean)
  isExternal: true
  name: DistinctBy<T, TKey, TOrder>(IEnumerable<T>, Func<T, TKey>, Func<T, TOrder>, Boolean)
  nameWithType: LINQExtensions.DistinctBy<T, TKey, TOrder>(IEnumerable<T>, Func<T, TKey>, Func<T, TOrder>, Boolean)
  fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy<T, TKey, TOrder>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>, System.Func<T, TOrder>, System.Boolean)
  nameWithType.vb: LINQExtensions.DistinctBy(Of T, TKey, TOrder)(IEnumerable(Of T), Func(Of T, TKey), Func(Of T, TOrder), Boolean)
  fullName.vb: InnerLibs.LINQ.LINQExtensions.DistinctBy(Of T, TKey, TOrder)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey), System.Func(Of T, TOrder), System.Boolean)
  name.vb: DistinctBy(Of T, TKey, TOrder)(IEnumerable(Of T), Func(Of T, TKey), Func(Of T, TOrder), Boolean)
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.DistinctBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Boolean)
    name: DistinctBy<T, TKey, TOrder>
    nameWithType: LINQExtensions.DistinctBy<T, TKey, TOrder>
    fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy<T, TKey, TOrder>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOrder
    nameWithType: TOrder
    fullName: TOrder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.DistinctBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Boolean)
    name: DistinctBy(Of T, TKey, TOrder)
    nameWithType: LINQExtensions.DistinctBy(Of T, TKey, TOrder)
    fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy(Of T, TKey, TOrder)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOrder
    nameWithType: TOrder
    fullName: TOrder
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  nameWithType: LINQExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>)
  nameWithType.vb: LINQExtensions.DistinctBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  fullName.vb: InnerLibs.LINQ.LINQExtensions.DistinctBy(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey))
  name.vb: DistinctBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: DistinctBy<T, TKey>
    nameWithType: LINQExtensions.DistinctBy<T, TKey>
    fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: DistinctBy(Of T, TKey)
    nameWithType: LINQExtensions.DistinctBy(Of T, TKey)
    fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  commentId: M:InnerLibs.LINQ.LINQExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  isExternal: true
  name: ForEach<T>(IEnumerable<T>, Action<T>)
  nameWithType: LINQExtensions.ForEach<T>(IEnumerable<T>, Action<T>)
  fullName: InnerLibs.LINQ.LINQExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)
  nameWithType.vb: LINQExtensions.ForEach(Of T)(IEnumerable(Of T), Action(Of T))
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ForEach(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T))
  name.vb: ForEach(Of T)(IEnumerable(Of T), Action(Of T))
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
    name: ForEach<T>
    nameWithType: LINQExtensions.ForEach<T>
    fullName: InnerLibs.LINQ.LINQExtensions.ForEach<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
    name: ForEach(Of T)
    nameWithType: LINQExtensions.ForEach(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.ForEach(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExternal: true
  name: GroupByPage<Tsource>(IEnumerable<Tsource>, Int32)
  nameWithType: LINQExtensions.GroupByPage<Tsource>(IEnumerable<Tsource>, Int32)
  fullName: InnerLibs.LINQ.LINQExtensions.GroupByPage<Tsource>(System.Collections.Generic.IEnumerable<Tsource>, System.Int32)
  nameWithType.vb: LINQExtensions.GroupByPage(Of Tsource)(IEnumerable(Of Tsource), Int32)
  fullName.vb: InnerLibs.LINQ.LINQExtensions.GroupByPage(Of Tsource)(System.Collections.Generic.IEnumerable(Of Tsource), System.Int32)
  name.vb: GroupByPage(Of Tsource)(IEnumerable(Of Tsource), Int32)
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: GroupByPage<Tsource>
    nameWithType: LINQExtensions.GroupByPage<Tsource>
    fullName: InnerLibs.LINQ.LINQExtensions.GroupByPage<Tsource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Tsource
    nameWithType: Tsource
    fullName: Tsource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: GroupByPage(Of Tsource)
    nameWithType: LINQExtensions.GroupByPage(Of Tsource)
    fullName: InnerLibs.LINQ.LINQExtensions.GroupByPage(Of Tsource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Tsource
    nameWithType: Tsource
    fullName: Tsource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  isExternal: true
  name: HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>(T, T, System.Func<T, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)(T, T, System.Func(Of T, System.Object)())
  name.vb: HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues<T>
    nameWithType: LINQExtensions.HasSamePropertyValues<T>
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues(Of T)
    nameWithType: LINQExtensions.HasSamePropertyValues(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.OrderByLike``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.OrderByLike``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])
  isExternal: true
  name: OrderByLike<T>(IEnumerable<T>, Func<T, String>, Boolean, String[])
  nameWithType: LINQExtensions.OrderByLike<T>(IEnumerable<T>, Func<T, String>, Boolean, String[])
  fullName: InnerLibs.LINQ.LINQExtensions.OrderByLike<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.String>, System.Boolean, System.String[])
  nameWithType.vb: LINQExtensions.OrderByLike(Of T)(IEnumerable(Of T), Func(Of T, String), Boolean, String())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.OrderByLike(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.String), System.Boolean, System.String())
  name.vb: OrderByLike(Of T)(IEnumerable(Of T), Func(Of T, String), Boolean, String())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.OrderByLike``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])
    name: OrderByLike<T>
    nameWithType: LINQExtensions.OrderByLike<T>
    fullName: InnerLibs.LINQ.LINQExtensions.OrderByLike<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.OrderByLike``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])
    name: OrderByLike(Of T)
    nameWithType: LINQExtensions.OrderByLike(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.OrderByLike(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: OrderByRandom<T>(IEnumerable<T>)
  nameWithType: LINQExtensions.OrderByRandom<T>(IEnumerable<T>)
  fullName: InnerLibs.LINQ.LINQExtensions.OrderByRandom<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: LINQExtensions.OrderByRandom(Of T)(IEnumerable(Of T))
  fullName.vb: InnerLibs.LINQ.LINQExtensions.OrderByRandom(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: OrderByRandom(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Collections.Generic.IEnumerable{``0})
    name: OrderByRandom<T>
    nameWithType: LINQExtensions.OrderByRandom<T>
    fullName: InnerLibs.LINQ.LINQExtensions.OrderByRandom<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Collections.Generic.IEnumerable{``0})
    name: OrderByRandom(Of T)
    nameWithType: LINQExtensions.OrderByRandom(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.OrderByRandom(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  commentId: M:InnerLibs.LINQ.LINQExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  isExternal: true
  name: Page<TSource>(IEnumerable<TSource>, Int32, Int32)
  nameWithType: LINQExtensions.Page<TSource>(IEnumerable<TSource>, Int32, Int32)
  fullName: InnerLibs.LINQ.LINQExtensions.Page<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32, System.Int32)
  nameWithType.vb: LINQExtensions.Page(Of TSource)(IEnumerable(Of TSource), Int32, Int32)
  fullName.vb: InnerLibs.LINQ.LINQExtensions.Page(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32, System.Int32)
  name.vb: Page(Of TSource)(IEnumerable(Of TSource), Int32, Int32)
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
    name: Page<TSource>
    nameWithType: LINQExtensions.Page<TSource>
    fullName: InnerLibs.LINQ.LINQExtensions.Page<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
    name: Page(Of TSource)
    nameWithType: LINQExtensions.Page(Of TSource)
    fullName: InnerLibs.LINQ.LINQExtensions.Page(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  commentId: M:InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  isExternal: true
  name: SelectJoin<TSource>(IEnumerable<TSource>, Func<TSource, String>, String)
  nameWithType: LINQExtensions.SelectJoin<TSource>(IEnumerable<TSource>, Func<TSource, String>, String)
  fullName: InnerLibs.LINQ.LINQExtensions.SelectJoin<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.String>, System.String)
  nameWithType.vb: LINQExtensions.SelectJoin(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, String), String)
  fullName.vb: InnerLibs.LINQ.LINQExtensions.SelectJoin(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.String), System.String)
  name.vb: SelectJoin(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, String), String)
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
    name: SelectJoin<TSource>
    nameWithType: LINQExtensions.SelectJoin<TSource>
    fullName: InnerLibs.LINQ.LINQExtensions.SelectJoin<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
    name: SelectJoin(Of TSource)
    nameWithType: LINQExtensions.SelectJoin(Of TSource)
    fullName: InnerLibs.LINQ.LINQExtensions.SelectJoin(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)
  commentId: M:InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)
  isExternal: true
  name: SelectManyJoin<TSource>(IEnumerable<TSource>, Func<TSource, IEnumerable<String>>, String)
  nameWithType: LINQExtensions.SelectManyJoin<TSource>(IEnumerable<TSource>, Func<TSource, IEnumerable<String>>, String)
  fullName: InnerLibs.LINQ.LINQExtensions.SelectManyJoin<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<System.String>>, System.String)
  nameWithType.vb: LINQExtensions.SelectManyJoin(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of String)), String)
  fullName.vb: InnerLibs.LINQ.LINQExtensions.SelectManyJoin(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of System.String)), System.String)
  name.vb: SelectManyJoin(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of String)), String)
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)
    name: SelectManyJoin<TSource>
    nameWithType: LINQExtensions.SelectManyJoin<TSource>
    fullName: InnerLibs.LINQ.LINQExtensions.SelectManyJoin<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)
    name: SelectManyJoin(Of TSource)
    nameWithType: LINQExtensions.SelectManyJoin(Of TSource)
    fullName: InnerLibs.LINQ.LINQExtensions.SelectManyJoin(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.TakeAndOrder``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})
  commentId: M:InnerLibs.LINQ.LINQExtensions.TakeAndOrder``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})
  isExternal: true
  name: TakeAndOrder<T, DefaultOrderType>(IEnumerable<T>, Func<T, Boolean>, Func<T, DefaultOrderType>)
  nameWithType: LINQExtensions.TakeAndOrder<T, DefaultOrderType>(IEnumerable<T>, Func<T, Boolean>, Func<T, DefaultOrderType>)
  fullName: InnerLibs.LINQ.LINQExtensions.TakeAndOrder<T, DefaultOrderType>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Boolean>, System.Func<T, DefaultOrderType>)
  nameWithType.vb: LINQExtensions.TakeAndOrder(Of T, DefaultOrderType)(IEnumerable(Of T), Func(Of T, Boolean), Func(Of T, DefaultOrderType))
  fullName.vb: InnerLibs.LINQ.LINQExtensions.TakeAndOrder(Of T, DefaultOrderType)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Boolean), System.Func(Of T, DefaultOrderType))
  name.vb: TakeAndOrder(Of T, DefaultOrderType)(IEnumerable(Of T), Func(Of T, Boolean), Func(Of T, DefaultOrderType))
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.TakeAndOrder``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})
    name: TakeAndOrder<T, DefaultOrderType>
    nameWithType: LINQExtensions.TakeAndOrder<T, DefaultOrderType>
    fullName: InnerLibs.LINQ.LINQExtensions.TakeAndOrder<T, DefaultOrderType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: DefaultOrderType
    nameWithType: DefaultOrderType
    fullName: DefaultOrderType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.TakeAndOrder``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})
    name: TakeAndOrder(Of T, DefaultOrderType)
    nameWithType: LINQExtensions.TakeAndOrder(Of T, DefaultOrderType)
    fullName: InnerLibs.LINQ.LINQExtensions.TakeAndOrder(Of T, DefaultOrderType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: DefaultOrderType
    nameWithType: DefaultOrderType
    fullName: DefaultOrderType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ
  commentId: N:InnerLibs.LINQ
  name: InnerLibs.LINQ
  nameWithType: InnerLibs.LINQ
  fullName: InnerLibs.LINQ
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.ToString*
  commentId: Overload:InnerLibs.DataBase.Reader.ToString
  name: ToString
  nameWithType: DataBase.Reader.ToString
  fullName: InnerLibs.DataBase.Reader.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: InnerLibs.DataBase.Reader.Dispose*
  commentId: Overload:InnerLibs.DataBase.Reader.Dispose
  name: IDisposable.Dispose
  nameWithType: DataBase.Reader.IDisposable.Dispose
  fullName: InnerLibs.DataBase.Reader.System.IDisposable.Dispose
  nameWithType.vb: DataBase.Reader.Dispose
  fullName.vb: InnerLibs.DataBase.Reader.Dispose
  name.vb: Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.Close*
  commentId: Overload:InnerLibs.DataBase.Reader.Close
  name: Close
  nameWithType: DataBase.Reader.Close
  fullName: InnerLibs.DataBase.Reader.Close
- uid: InnerLibs.DataBase.Reader.IsClosed*
  commentId: Overload:InnerLibs.DataBase.Reader.IsClosed
  name: IsClosed
  nameWithType: DataBase.Reader.IsClosed
  fullName: InnerLibs.DataBase.Reader.IsClosed
- uid: InnerLibs.DataBase.Reader.GetColumns*
  commentId: Overload:InnerLibs.DataBase.Reader.GetColumns
  name: GetColumns
  nameWithType: DataBase.Reader.GetColumns
  fullName: InnerLibs.DataBase.Reader.GetColumns
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.GetCurrentRowColumns*
  commentId: Overload:InnerLibs.DataBase.Reader.GetCurrentRowColumns
  name: GetCurrentRowColumns
  nameWithType: DataBase.Reader.GetCurrentRowColumns
  fullName: InnerLibs.DataBase.Reader.GetCurrentRowColumns
- uid: InnerLibs.DataBase.Reader.CountRows*
  commentId: Overload:InnerLibs.DataBase.Reader.CountRows
  name: CountRows
  nameWithType: DataBase.Reader.CountRows
  fullName: InnerLibs.DataBase.Reader.CountRows
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: InnerLibs.DataBase.Reader.Item*
  commentId: Overload:InnerLibs.DataBase.Reader.Item
  name: Item
  nameWithType: DataBase.Reader.Item
  fullName: InnerLibs.DataBase.Reader.Item
- uid: InnerLibs.DataBase.Reader.GetItem*
  commentId: Overload:InnerLibs.DataBase.Reader.GetItem
  name: GetItem
  nameWithType: DataBase.Reader.GetItem
  fullName: InnerLibs.DataBase.Reader.GetItem
- uid: '{Type}'
  commentId: '!:``0'
  definition: '``0'
  name: Type
  nameWithType: Type
  fullName: Type
- uid: '``0'
  name: T
  nameWithType: T
  fullName: T
- uid: InnerLibs.DataBase.Reader.HasRows*
  commentId: Overload:InnerLibs.DataBase.Reader.HasRows
  name: HasRows
  nameWithType: DataBase.Reader.HasRows
  fullName: InnerLibs.DataBase.Reader.HasRows
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: InnerLibs.DataBase.Reader.HasResults*
  commentId: Overload:InnerLibs.DataBase.Reader.HasResults
  name: HasResults
  nameWithType: DataBase.Reader.HasResults
  fullName: InnerLibs.DataBase.Reader.HasResults
- uid: InnerLibs.DataBase.Reader.GetResult*
  commentId: Overload:InnerLibs.DataBase.Reader.GetResult
  name: GetResult
  nameWithType: DataBase.Reader.GetResult
  fullName: InnerLibs.DataBase.Reader.GetResult
- uid: InnerLibs.DataBase.Result
  commentId: T:InnerLibs.DataBase.Result
  parent: InnerLibs
  name: DataBase.Result
  nameWithType: DataBase.Result
  fullName: InnerLibs.DataBase.Result
- uid: InnerLibs.DataBase.Reader.GetRow*
  commentId: Overload:InnerLibs.DataBase.Reader.GetRow
  name: GetRow
  nameWithType: DataBase.Reader.GetRow
  fullName: InnerLibs.DataBase.Reader.GetRow
- uid: InnerLibs.DataBase.Row
  commentId: T:InnerLibs.DataBase.Row
  parent: InnerLibs
  name: DataBase.Row
  nameWithType: DataBase.Row
  fullName: InnerLibs.DataBase.Row
- uid: InnerLibs.DataBase.Reader.GetCurrentRow*
  commentId: Overload:InnerLibs.DataBase.Reader.GetCurrentRow
  name: GetCurrentRow
  nameWithType: DataBase.Reader.GetCurrentRow
  fullName: InnerLibs.DataBase.Reader.GetCurrentRow
- uid: InnerLibs.DataBase.Reader.ToJSON*
  commentId: Overload:InnerLibs.DataBase.Reader.ToJSON
  name: ToJSON
  nameWithType: DataBase.Reader.ToJSON
  fullName: InnerLibs.DataBase.Reader.ToJSON
- uid: InnerLibs.DataBase.Reader.Search*
  commentId: Overload:InnerLibs.DataBase.Reader.Search
  name: Search
  nameWithType: DataBase.Reader.Search
  fullName: InnerLibs.DataBase.Reader.Search
- uid: InnerLibs.DataBase.Reader.#ctor*
  commentId: Overload:InnerLibs.DataBase.Reader.#ctor
  name: Reader
  nameWithType: DataBase.Reader.Reader
  fullName: InnerLibs.DataBase.Reader.Reader
- uid: InnerLibs.DataBase.Result[]
  commentId: T:InnerLibs.DataBase.Result[]
  name: DataBase.Result[]
  nameWithType: DataBase.Result[]
  fullName: InnerLibs.DataBase.Result[]
  nameWithType.vb: DataBase.Result()
  fullName.vb: InnerLibs.DataBase.Result()
  name.vb: DataBase.Result()
  spec.csharp:
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: InnerLibs.DataBase.Result
    name: DataBase.Result
    nameWithType: DataBase.Result
    fullName: InnerLibs.DataBase.Result
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}[]
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}[]
  isExternal: true
  name: IDictionary<String, Object>[]
  nameWithType: IDictionary<String, Object>[]
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>[]
  nameWithType.vb: IDictionary(Of String, Object)()
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)()
  name.vb: IDictionary(Of String, Object)()
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.DataBase.Reader.Reset
  commentId: M:InnerLibs.DataBase.Reader.Reset
  isExternal: true
- uid: InnerLibs.DataBase.Reader.StartOver*
  commentId: Overload:InnerLibs.DataBase.Reader.StartOver
  name: StartOver
  nameWithType: DataBase.Reader.StartOver
  fullName: InnerLibs.DataBase.Reader.StartOver
- uid: InnerLibs.DataBase.Reader.Reset*
  commentId: Overload:InnerLibs.DataBase.Reader.Reset
  name: Reset
  nameWithType: DataBase.Reader.Reset
  fullName: InnerLibs.DataBase.Reader.Reset
- uid: InnerLibs.DataBase.Reader.NextResult*
  commentId: Overload:InnerLibs.DataBase.Reader.NextResult
  name: NextResult
  nameWithType: DataBase.Reader.NextResult
  fullName: InnerLibs.DataBase.Reader.NextResult
- uid: InnerLibs.DataBase.Reader.PreviousResult*
  commentId: Overload:InnerLibs.DataBase.Reader.PreviousResult
  name: PreviousResult
  nameWithType: DataBase.Reader.PreviousResult
  fullName: InnerLibs.DataBase.Reader.PreviousResult
- uid: InnerLibs.DataBase.Reader.GoForward
  commentId: M:InnerLibs.DataBase.Reader.GoForward
  isExternal: true
- uid: InnerLibs.DataBase.Reader.Read*
  commentId: Overload:InnerLibs.DataBase.Reader.Read
  name: Read
  nameWithType: DataBase.Reader.Read
  fullName: InnerLibs.DataBase.Reader.Read
- uid: InnerLibs.DataBase.Reader.GoBack*
  commentId: Overload:InnerLibs.DataBase.Reader.GoBack
  name: GoBack
  nameWithType: DataBase.Reader.GoBack
  fullName: InnerLibs.DataBase.Reader.GoBack
- uid: InnerLibs.DataBase.Reader.GoForward*
  commentId: Overload:InnerLibs.DataBase.Reader.GoForward
  name: GoForward
  nameWithType: DataBase.Reader.GoForward
  fullName: InnerLibs.DataBase.Reader.GoForward
- uid: System.Web.UI.WebControls.ListItem
  commentId: T:System.Web.UI.WebControls.ListItem
  parent: System.Web.UI.WebControls
  isExternal: true
  name: ListItem
  nameWithType: ListItem
  fullName: System.Web.UI.WebControls.ListItem
- uid: InnerLibs.DataBase.Reader
  commentId: T:InnerLibs.DataBase.Reader
  parent: InnerLibs
  name: DataBase.Reader
  nameWithType: DataBase.Reader
  fullName: InnerLibs.DataBase.Reader
- uid: InnerLibs.DataBase.Reader.ToListItems*
  commentId: Overload:InnerLibs.DataBase.Reader.ToListItems
  name: ToListItems
  nameWithType: DataBase.Reader.ToListItems
  fullName: InnerLibs.DataBase.Reader.ToListItems
- uid: System.String[]
  commentId: T:System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Web.UI.WebControls.ListItem[]
  commentId: T:System.Web.UI.WebControls.ListItem[]
  isExternal: true
  name: ListItem[]
  nameWithType: ListItem[]
  fullName: System.Web.UI.WebControls.ListItem[]
  nameWithType.vb: ListItem()
  fullName.vb: System.Web.UI.WebControls.ListItem()
  name.vb: ListItem()
  spec.csharp:
  - uid: System.Web.UI.WebControls.ListItem
    name: ListItem
    nameWithType: ListItem
    fullName: System.Web.UI.WebControls.ListItem
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Web.UI.WebControls.ListItem
    name: ListItem
    nameWithType: ListItem
    fullName: System.Web.UI.WebControls.ListItem
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Web.UI.WebControls
  commentId: N:System.Web.UI.WebControls
  isExternal: true
  name: System.Web.UI.WebControls
  nameWithType: System.Web.UI.WebControls
  fullName: System.Web.UI.WebControls
- uid: System.Web.UI.HtmlControls.HtmlSelect
  commentId: T:System.Web.UI.HtmlControls.HtmlSelect
  parent: System.Web.UI.HtmlControls
  isExternal: true
  name: HtmlSelect
  nameWithType: HtmlSelect
  fullName: System.Web.UI.HtmlControls.HtmlSelect
- uid: InnerLibs.DataBase.Reader.FillSelectControl*
  commentId: Overload:InnerLibs.DataBase.Reader.FillSelectControl
  name: FillSelectControl
  nameWithType: DataBase.Reader.FillSelectControl
  fullName: InnerLibs.DataBase.Reader.FillSelectControl
- uid: System.Web.UI.HtmlControls
  commentId: N:System.Web.UI.HtmlControls
  isExternal: true
  name: System.Web.UI.HtmlControls
  nameWithType: System.Web.UI.HtmlControls
  fullName: System.Web.UI.HtmlControls
- uid: InnerLibs.DataBase.Reader.ToList*
  commentId: Overload:InnerLibs.DataBase.Reader.ToList
  name: ToList
  nameWithType: DataBase.Reader.ToList
  fullName: InnerLibs.DataBase.Reader.ToList
- uid: System.Collections.Generic.List{{TValue}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TValue>
  nameWithType: List<TValue>
  fullName: System.Collections.Generic.List<TValue>
  nameWithType.vb: List(Of TValue)
  fullName.vb: System.Collections.Generic.List(Of TValue)
  name.vb: List(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.GetValue*
  commentId: Overload:InnerLibs.DataBase.Reader.GetValue
  name: GetValue
  nameWithType: DataBase.Reader.GetValue
  fullName: InnerLibs.DataBase.Reader.GetValue
- uid: InnerLibs.DataBase.Reader.GetCurrentRowValues*
  commentId: Overload:InnerLibs.DataBase.Reader.GetCurrentRowValues
  name: GetCurrentRowValues
  nameWithType: DataBase.Reader.GetCurrentRowValues
  fullName: InnerLibs.DataBase.Reader.GetCurrentRowValues
- uid: System.Object[]
  commentId: T:System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.DataBase.Reader.GetCurrentRowAs*
  commentId: Overload:InnerLibs.DataBase.Reader.GetCurrentRowAs
  name: GetCurrentRowAs
  nameWithType: DataBase.Reader.GetCurrentRowAs
  fullName: InnerLibs.DataBase.Reader.GetCurrentRowAs
- uid: InnerLibs.DataBase.Reader.ToDictionary*
  commentId: Overload:InnerLibs.DataBase.Reader.ToDictionary
  name: ToDictionary
  nameWithType: DataBase.Reader.ToDictionary
  fullName: InnerLibs.DataBase.Reader.ToDictionary
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.Dictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.ToTextValueList*
  commentId: Overload:InnerLibs.DataBase.Reader.ToTextValueList
  name: ToTextValueList
  nameWithType: DataBase.Reader.ToTextValueList
  fullName: InnerLibs.DataBase.Reader.ToTextValueList
- uid: InnerLibs.TextValueList{{TValue}}
  commentId: T:InnerLibs.TextValueList{``0}
  parent: InnerLibs
  definition: InnerLibs.TextValueList`1
  name: TextValueList<TValue>
  nameWithType: TextValueList<TValue>
  fullName: InnerLibs.TextValueList<TValue>
  nameWithType.vb: TextValueList(Of TValue)
  fullName.vb: InnerLibs.TextValueList(Of TValue)
  name.vb: TextValueList(Of TValue)
  spec.csharp:
  - uid: InnerLibs.TextValueList`1
    name: TextValueList
    nameWithType: TextValueList
    fullName: InnerLibs.TextValueList
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: InnerLibs.TextValueList`1
    name: TextValueList
    nameWithType: TextValueList
    fullName: InnerLibs.TextValueList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.TextValueList`1
  commentId: T:InnerLibs.TextValueList`1
  name: TextValueList<ValueType>
  nameWithType: TextValueList<ValueType>
  fullName: InnerLibs.TextValueList<ValueType>
  nameWithType.vb: TextValueList(Of ValueType)
  fullName.vb: InnerLibs.TextValueList(Of ValueType)
  name.vb: TextValueList(Of ValueType)
  spec.csharp:
  - uid: InnerLibs.TextValueList`1
    name: TextValueList
    nameWithType: TextValueList
    fullName: InnerLibs.TextValueList
  - name: <
    nameWithType: <
    fullName: <
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: InnerLibs.TextValueList`1
    name: TextValueList
    nameWithType: TextValueList
    fullName: InnerLibs.TextValueList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.Reader.ToQueryString*
  commentId: Overload:InnerLibs.DataBase.Reader.ToQueryString
  name: ToQueryString
  nameWithType: DataBase.Reader.ToQueryString
  fullName: InnerLibs.DataBase.Reader.ToQueryString
- uid: InnerLibs.DataBase.Reader.ToUrl*
  commentId: Overload:InnerLibs.DataBase.Reader.ToUrl
  name: ToUrl
  nameWithType: DataBase.Reader.ToUrl
  fullName: InnerLibs.DataBase.Reader.ToUrl
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: InnerLibs.DataBase.Reader.ToDelimitedString*
  commentId: Overload:InnerLibs.DataBase.Reader.ToDelimitedString
  name: ToDelimitedString
  nameWithType: DataBase.Reader.ToDelimitedString
  fullName: InnerLibs.DataBase.Reader.ToDelimitedString
- uid: InnerLibs.DataBase.Reader.ToDataTable*
  commentId: Overload:InnerLibs.DataBase.Reader.ToDataTable
  name: ToDataTable
  nameWithType: DataBase.Reader.ToDataTable
  fullName: InnerLibs.DataBase.Reader.ToDataTable
- uid: System.Data.DataTable
  commentId: T:System.Data.DataTable
  parent: System.Data
  isExternal: true
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: InnerLibs.DataBase.Reader.ToXML*
  commentId: Overload:InnerLibs.DataBase.Reader.ToXML
  name: ToXML
  nameWithType: DataBase.Reader.ToXML
  fullName: InnerLibs.DataBase.Reader.ToXML
- uid: System.Xml.XmlDocument
  commentId: T:System.Xml.XmlDocument
  parent: System.Xml
  isExternal: true
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: InnerLibs.DataBase.Reader.ToCSV*
  commentId: Overload:InnerLibs.DataBase.Reader.ToCSV
  name: ToCSV
  nameWithType: DataBase.Reader.ToCSV
  fullName: InnerLibs.DataBase.Reader.ToCSV
- uid: InnerLibs.DataBase.Reader.ToSession*
  commentId: Overload:InnerLibs.DataBase.Reader.ToSession
  name: ToSession
  nameWithType: DataBase.Reader.ToSession
  fullName: InnerLibs.DataBase.Reader.ToSession
- uid: System.Web.SessionState.HttpSessionState
  commentId: T:System.Web.SessionState.HttpSessionState
  parent: System.Web.SessionState
  isExternal: true
  name: HttpSessionState
  nameWithType: HttpSessionState
  fullName: System.Web.SessionState.HttpSessionState
- uid: System.Web.SessionState
  commentId: N:System.Web.SessionState
  isExternal: true
  name: System.Web.SessionState
  nameWithType: System.Web.SessionState
  fullName: System.Web.SessionState
- uid: InnerLibs.DataBase.Reader.ToMarkdownTable*
  commentId: Overload:InnerLibs.DataBase.Reader.ToMarkdownTable
  name: ToMarkdownTable
  nameWithType: DataBase.Reader.ToMarkdownTable
  fullName: InnerLibs.DataBase.Reader.ToMarkdownTable
- uid: InnerLibs.DataBase.Reader.ToHTMLTable*
  commentId: Overload:InnerLibs.DataBase.Reader.ToHTMLTable
  name: ToHTMLTable
  nameWithType: DataBase.Reader.ToHTMLTable
  fullName: InnerLibs.DataBase.Reader.ToHTMLTable
- uid: InnerLibs.HtmlParser.HtmlElement
  commentId: T:InnerLibs.HtmlParser.HtmlElement
  parent: InnerLibs.HtmlParser
  name: HtmlElement
  nameWithType: HtmlElement
  fullName: InnerLibs.HtmlParser.HtmlElement
- uid: InnerLibs.HtmlParser
  commentId: N:InnerLibs.HtmlParser
  name: InnerLibs.HtmlParser
  nameWithType: InnerLibs.HtmlParser
  fullName: InnerLibs.HtmlParser
- uid: InnerLibs.DataBase.Reader.ApplyToControls*
  commentId: Overload:InnerLibs.DataBase.Reader.ApplyToControls
  name: ApplyToControls
  nameWithType: DataBase.Reader.ApplyToControls
  fullName: InnerLibs.DataBase.Reader.ApplyToControls
- uid: System.Windows.Forms.Control[]
  commentId: T:System.Windows.Forms.Control[]
  isExternal: true
  name: Control[]
  nameWithType: Control[]
  fullName: System.Windows.Forms.Control[]
  nameWithType.vb: Control()
  fullName.vb: System.Windows.Forms.Control()
  name.vb: Control()
  spec.csharp:
  - uid: System.Windows.Forms.Control
    name: Control
    nameWithType: Control
    fullName: System.Windows.Forms.Control
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Windows.Forms.Control
    name: Control
    nameWithType: Control
    fullName: System.Windows.Forms.Control
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Web.UI.HtmlControls.HtmlControl[]
  commentId: T:System.Web.UI.HtmlControls.HtmlControl[]
  isExternal: true
  name: HtmlControl[]
  nameWithType: HtmlControl[]
  fullName: System.Web.UI.HtmlControls.HtmlControl[]
  nameWithType.vb: HtmlControl()
  fullName.vb: System.Web.UI.HtmlControls.HtmlControl()
  name.vb: HtmlControl()
  spec.csharp:
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.DataBase.Reader.FillDataGridView*
  commentId: Overload:InnerLibs.DataBase.Reader.FillDataGridView
  name: FillDataGridView
  nameWithType: DataBase.Reader.FillDataGridView
  fullName: InnerLibs.DataBase.Reader.FillDataGridView
- uid: System.Windows.Forms.DataGridView
  commentId: T:System.Windows.Forms.DataGridView
  parent: System.Windows.Forms
  isExternal: true
  name: DataGridView
  nameWithType: DataGridView
  fullName: System.Windows.Forms.DataGridView
- uid: System.Windows.Forms
  commentId: N:System.Windows.Forms
  isExternal: true
  name: System.Windows.Forms
  nameWithType: System.Windows.Forms
  fullName: System.Windows.Forms
- uid: InnerLibs.DataBase.Reader.FillComboBox*
  commentId: Overload:InnerLibs.DataBase.Reader.FillComboBox
  name: FillComboBox
  nameWithType: DataBase.Reader.FillComboBox
  fullName: InnerLibs.DataBase.Reader.FillComboBox
- uid: System.Windows.Forms.ComboBox
  commentId: T:System.Windows.Forms.ComboBox
  parent: System.Windows.Forms
  isExternal: true
  name: ComboBox
  nameWithType: ComboBox
  fullName: System.Windows.Forms.ComboBox
