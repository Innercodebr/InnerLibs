### YamlMime:ManagedReference
items:
- uid: InnerLibs.Money
  commentId: T:InnerLibs.Money
  id: Money
  parent: InnerLibs
  children:
  - InnerLibs.Money.#ctor(System.Decimal)
  - InnerLibs.Money.#ctor(System.Decimal,System.Globalization.CultureInfo)
  - InnerLibs.Money.#ctor(System.Decimal,System.String,System.String)
  - InnerLibs.Money.ConvertCurrency(System.Globalization.CultureInfo)
  - InnerLibs.Money.ConvertCurrency(System.String)
  - InnerLibs.Money.CurrencySymbol
  - InnerLibs.Money.GetCultureInfosByCurrencySymbol(System.String)
  - InnerLibs.Money.ISOCurrencySymbol
  - InnerLibs.Money.MoneyString
  - InnerLibs.Money.op_Addition(InnerLibs.Money,InnerLibs.Money)
  - InnerLibs.Money.op_Addition(InnerLibs.Money,System.Decimal)
  - InnerLibs.Money.op_Addition(InnerLibs.Money,System.Double)
  - InnerLibs.Money.op_Addition(InnerLibs.Money,System.Int32)
  - InnerLibs.Money.op_Addition(InnerLibs.Money,System.String)
  - InnerLibs.Money.op_Addition(System.Decimal,InnerLibs.Money)
  - InnerLibs.Money.op_Addition(System.Double,InnerLibs.Money)
  - InnerLibs.Money.op_Addition(System.Int32,InnerLibs.Money)
  - InnerLibs.Money.op_Addition(System.Int64,InnerLibs.Money)
  - InnerLibs.Money.op_Addition(System.String,InnerLibs.Money)
  - InnerLibs.Money.op_Concatenate(InnerLibs.Money,System.String)
  - InnerLibs.Money.op_Concatenate(System.String,InnerLibs.Money)
  - InnerLibs.Money.op_Division(InnerLibs.Money,InnerLibs.Money)
  - InnerLibs.Money.op_Division(InnerLibs.Money,System.Decimal)
  - InnerLibs.Money.op_Division(InnerLibs.Money,System.Double)
  - InnerLibs.Money.op_Division(InnerLibs.Money,System.Int32)
  - InnerLibs.Money.op_Division(System.Decimal,InnerLibs.Money)
  - InnerLibs.Money.op_Division(System.Double,InnerLibs.Money)
  - InnerLibs.Money.op_Division(System.Int32,InnerLibs.Money)
  - InnerLibs.Money.op_Division(System.Int64,InnerLibs.Money)
  - InnerLibs.Money.op_Equality(InnerLibs.Money,InnerLibs.Money)
  - InnerLibs.Money.op_Equality(InnerLibs.Money,System.Decimal)
  - InnerLibs.Money.op_Equality(InnerLibs.Money,System.Double)
  - InnerLibs.Money.op_Equality(InnerLibs.Money,System.Int32)
  - InnerLibs.Money.op_Equality(System.Decimal,InnerLibs.Money)
  - InnerLibs.Money.op_Equality(System.Double,InnerLibs.Money)
  - InnerLibs.Money.op_Equality(System.Int32,InnerLibs.Money)
  - InnerLibs.Money.op_Equality(System.Int64,InnerLibs.Money)
  - InnerLibs.Money.op_GreaterThan(InnerLibs.Money,InnerLibs.Money)
  - InnerLibs.Money.op_GreaterThan(InnerLibs.Money,System.Decimal)
  - InnerLibs.Money.op_GreaterThan(InnerLibs.Money,System.Double)
  - InnerLibs.Money.op_GreaterThan(InnerLibs.Money,System.Int32)
  - InnerLibs.Money.op_GreaterThan(System.Decimal,InnerLibs.Money)
  - InnerLibs.Money.op_GreaterThan(System.Double,InnerLibs.Money)
  - InnerLibs.Money.op_GreaterThan(System.Int32,InnerLibs.Money)
  - InnerLibs.Money.op_GreaterThan(System.Int64,InnerLibs.Money)
  - InnerLibs.Money.op_GreaterThanOrEqual(InnerLibs.Money,InnerLibs.Money)
  - InnerLibs.Money.op_GreaterThanOrEqual(InnerLibs.Money,System.Decimal)
  - InnerLibs.Money.op_GreaterThanOrEqual(InnerLibs.Money,System.Double)
  - InnerLibs.Money.op_GreaterThanOrEqual(InnerLibs.Money,System.Int32)
  - InnerLibs.Money.op_GreaterThanOrEqual(System.Decimal,InnerLibs.Money)
  - InnerLibs.Money.op_GreaterThanOrEqual(System.Double,InnerLibs.Money)
  - InnerLibs.Money.op_GreaterThanOrEqual(System.Int32,InnerLibs.Money)
  - InnerLibs.Money.op_GreaterThanOrEqual(System.Int64,InnerLibs.Money)
  - InnerLibs.Money.op_Implicit(InnerLibs.Money)~System.Decimal
  - InnerLibs.Money.op_Implicit(System.Decimal)~InnerLibs.Money
  - InnerLibs.Money.op_Implicit(System.Double)~InnerLibs.Money
  - InnerLibs.Money.op_Implicit(System.Int16)~InnerLibs.Money
  - InnerLibs.Money.op_Implicit(System.Int32)~InnerLibs.Money
  - InnerLibs.Money.op_Implicit(System.Int64)~InnerLibs.Money
  - InnerLibs.Money.op_Inequality(InnerLibs.Money,InnerLibs.Money)
  - InnerLibs.Money.op_Inequality(InnerLibs.Money,System.Decimal)
  - InnerLibs.Money.op_Inequality(InnerLibs.Money,System.Double)
  - InnerLibs.Money.op_Inequality(InnerLibs.Money,System.Int32)
  - InnerLibs.Money.op_Inequality(System.Decimal,InnerLibs.Money)
  - InnerLibs.Money.op_Inequality(System.Double,InnerLibs.Money)
  - InnerLibs.Money.op_Inequality(System.Int32,InnerLibs.Money)
  - InnerLibs.Money.op_Inequality(System.Int64,InnerLibs.Money)
  - InnerLibs.Money.op_LessThan(InnerLibs.Money,InnerLibs.Money)
  - InnerLibs.Money.op_LessThan(InnerLibs.Money,System.Decimal)
  - InnerLibs.Money.op_LessThan(InnerLibs.Money,System.Double)
  - InnerLibs.Money.op_LessThan(InnerLibs.Money,System.Int32)
  - InnerLibs.Money.op_LessThan(System.Decimal,InnerLibs.Money)
  - InnerLibs.Money.op_LessThan(System.Double,InnerLibs.Money)
  - InnerLibs.Money.op_LessThan(System.Int32,InnerLibs.Money)
  - InnerLibs.Money.op_LessThan(System.Int64,InnerLibs.Money)
  - InnerLibs.Money.op_LessThanOrEqual(InnerLibs.Money,InnerLibs.Money)
  - InnerLibs.Money.op_LessThanOrEqual(InnerLibs.Money,System.Decimal)
  - InnerLibs.Money.op_LessThanOrEqual(InnerLibs.Money,System.Double)
  - InnerLibs.Money.op_LessThanOrEqual(InnerLibs.Money,System.Int32)
  - InnerLibs.Money.op_LessThanOrEqual(System.Decimal,InnerLibs.Money)
  - InnerLibs.Money.op_LessThanOrEqual(System.Double,InnerLibs.Money)
  - InnerLibs.Money.op_LessThanOrEqual(System.Int32,InnerLibs.Money)
  - InnerLibs.Money.op_LessThanOrEqual(System.Int64,InnerLibs.Money)
  - InnerLibs.Money.op_Like(InnerLibs.Money,InnerLibs.Money)
  - InnerLibs.Money.op_Multiply(InnerLibs.Money,InnerLibs.Money)
  - InnerLibs.Money.op_Multiply(InnerLibs.Money,System.Decimal)
  - InnerLibs.Money.op_Multiply(InnerLibs.Money,System.Double)
  - InnerLibs.Money.op_Multiply(InnerLibs.Money,System.Int32)
  - InnerLibs.Money.op_Multiply(System.Decimal,InnerLibs.Money)
  - InnerLibs.Money.op_Multiply(System.Double,InnerLibs.Money)
  - InnerLibs.Money.op_Multiply(System.Int32,InnerLibs.Money)
  - InnerLibs.Money.op_Multiply(System.Int64,InnerLibs.Money)
  - InnerLibs.Money.op_OnesComplement(InnerLibs.Money)
  - InnerLibs.Money.op_Subtraction(InnerLibs.Money,InnerLibs.Money)
  - InnerLibs.Money.op_Subtraction(InnerLibs.Money,System.Decimal)
  - InnerLibs.Money.op_Subtraction(InnerLibs.Money,System.Double)
  - InnerLibs.Money.op_Subtraction(InnerLibs.Money,System.Int32)
  - InnerLibs.Money.op_Subtraction(System.Decimal,InnerLibs.Money)
  - InnerLibs.Money.op_Subtraction(System.Double,InnerLibs.Money)
  - InnerLibs.Money.op_Subtraction(System.Int32,InnerLibs.Money)
  - InnerLibs.Money.op_Subtraction(System.Int64,InnerLibs.Money)
  - InnerLibs.Money.ToString
  - InnerLibs.Money.ToString(System.Int32)
  - InnerLibs.Money.Value
  langs:
  - csharp
  - vb
  name: Money
  nameWithType: Money
  fullName: InnerLibs.Money
  type: Struct
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: Money
    path: Money.vb
    startLine: 6
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nEstrutura que representa valores em dinheiro de uma determinada <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>. Utiliza uma API (http://fixer.io) para convers√£o de moedas.\n"
  example: []
  syntax:
    content: public struct Money
    content.vb: Public Structure Money
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  extensionMethods:
  - InnerLibs.Money.InnerLibs.ClassTools.CreateDictionary
  - System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  - System.Object.InnerLibs.ClassTools.GetProperties
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  - System.Object.InnerLibs.ClassTools.IsArrayOf``1
  - System.Object.InnerLibs.ClassTools.IsDictionary
  - InnerLibs.Money.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Money},System.Collections.Generic.IEqualityComparer{InnerLibs.Money})
  - InnerLibs.Money.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - InnerLibs.Money.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Money}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Money})
  - System.Object.InnerLibs.ClassTools.IsList
  - InnerLibs.Money.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Money},System.Collections.Generic.IEqualityComparer{InnerLibs.Money})
  - InnerLibs.Money.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - System.Object.InnerLibs.ClassTools.IsType``1
  - InnerLibs.Money.InnerLibs.ClassTools.NullifyProperties
  - System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  - System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  - System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  - System.Object.InnerLibs.DataManipulation.GetDbType
  - InnerLibs.Money.InnerLibs.Converter.DefineEmptyList
  - InnerLibs.Money.InnerLibs.Converter.ChangeType``1
  - System.Object.InnerLibs.JsonViewer.CreateNode
  - InnerLibs.Money.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  - System.Object.InnerLibs.Text.SerializeJSON(System.String)
  - InnerLibs.Money.InnerLibs.Text.ToExtensiveForm
  - System.Object.InnerLibs.Verify.IsNumber
  - System.Object.InnerLibs.Verify.IsNotNumber
  - System.Object.InnerLibs.Verify.IfBlank``1({T})
  - InnerLibs.Money.InnerLibs.Verify.NullIf(System.Func{InnerLibs.Money,System.Boolean})
  - InnerLibs.Money.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  - System.Object.InnerLibs.WinForms.GetCastedValue
  - System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: InnerLibs.Money.Value
  commentId: P:InnerLibs.Money.Value
  id: Value
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Money.Value
  fullName: InnerLibs.Money.Value
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: Value
    path: Money.vb
    startLine: 8
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public decimal Value { get; set; }
    parameters: []
    return:
      type: System.Decimal
    content.vb: Public Property Value As Decimal
  overload: InnerLibs.Money.Value*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: InnerLibs.Money.#ctor(System.Decimal)
  commentId: M:InnerLibs.Money.#ctor(System.Decimal)
  id: '#ctor(System.Decimal)'
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Money(Decimal)
  nameWithType: Money.Money(Decimal)
  fullName: InnerLibs.Money.Money(System.Decimal)
  type: Constructor
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: .ctor
    path: Money.vb
    startLine: 14
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria uma nova instancia de moeda\n"
  example: []
  syntax:
    content: public Money(decimal Value = 0M)
    parameters:
    - id: Value
      type: System.Decimal
      description: Valor
    content.vb: Public Sub New(Value As Decimal = 0D)
  overload: InnerLibs.Money.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.Money.#ctor(System.Decimal,System.Globalization.CultureInfo)
  commentId: M:InnerLibs.Money.#ctor(System.Decimal,System.Globalization.CultureInfo)
  id: '#ctor(System.Decimal,System.Globalization.CultureInfo)'
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Money(Decimal, CultureInfo)
  nameWithType: Money.Money(Decimal, CultureInfo)
  fullName: InnerLibs.Money.Money(System.Decimal, System.Globalization.CultureInfo)
  type: Constructor
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: .ctor
    path: Money.vb
    startLine: 23
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria uma nova instancia de moeda\n"
  example: []
  syntax:
    content: public Money(decimal Value, CultureInfo Culture)
    parameters:
    - id: Value
      type: System.Decimal
      description: Valor
    - id: Culture
      type: System.Globalization.CultureInfo
      description: Cultura
    content.vb: Public Sub New(Value As Decimal, Culture As CultureInfo)
  overload: InnerLibs.Money.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.Money.#ctor(System.Decimal,System.String,System.String)
  commentId: M:InnerLibs.Money.#ctor(System.Decimal,System.String,System.String)
  id: '#ctor(System.Decimal,System.String,System.String)'
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Money(Decimal, String, String)
  nameWithType: Money.Money(Decimal, String, String)
  fullName: InnerLibs.Money.Money(System.Decimal, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: .ctor
    path: Money.vb
    startLine: 34
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria uma nova instancia de moeda\n"
  example: []
  syntax:
    content: public Money(decimal Value, string ISOCurrencySymbol, string CurrencySymbol = "")
    parameters:
    - id: Value
      type: System.Decimal
      description: Valor
    - id: ISOCurrencySymbol
      type: System.String
      description: Simbolo de moeda, ISO ou nome da cultura
    - id: CurrencySymbol
      type: System.String
    content.vb: Public Sub New(Value As Decimal, ISOCurrencySymbol As String, CurrencySymbol As String = "")
  overload: InnerLibs.Money.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.Money.ConvertCurrency(System.String)
  commentId: M:InnerLibs.Money.ConvertCurrency(System.String)
  id: ConvertCurrency(System.String)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: ConvertCurrency(String)
  nameWithType: Money.ConvertCurrency(String)
  fullName: InnerLibs.Money.ConvertCurrency(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: ConvertCurrency
    path: Money.vb
    startLine: 53
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nConverte de uma moeda para a outra utilizando a api http://cryptonator.com\n"
  example: []
  syntax:
    content: public Money ConvertCurrency(string Symbol)
    parameters:
    - id: Symbol
      type: System.String
      description: Simbolo de moeda, ISO ou nome da cultura
    return:
      type: InnerLibs.Money
      description: ''
    content.vb: Public Function ConvertCurrency(Symbol As String) As Money
  overload: InnerLibs.Money.ConvertCurrency*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.Money.ConvertCurrency(System.Globalization.CultureInfo)
  commentId: M:InnerLibs.Money.ConvertCurrency(System.Globalization.CultureInfo)
  id: ConvertCurrency(System.Globalization.CultureInfo)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: ConvertCurrency(CultureInfo)
  nameWithType: Money.ConvertCurrency(CultureInfo)
  fullName: InnerLibs.Money.ConvertCurrency(System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: ConvertCurrency
    path: Money.vb
    startLine: 67
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nConverte de uma moeda para a outra utilizando a api http://cryptonator.com\n"
  example: []
  syntax:
    content: public Money ConvertCurrency(CultureInfo Culture)
    parameters:
    - id: Culture
      type: System.Globalization.CultureInfo
      description: Cultura
    return:
      type: InnerLibs.Money
      description: ''
    content.vb: Public Function ConvertCurrency(Culture As CultureInfo) As Money
  overload: InnerLibs.Money.ConvertCurrency*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.Money.ToString
  commentId: M:InnerLibs.Money.ToString
  id: ToString
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Money.ToString()
  fullName: InnerLibs.Money.ToString()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: ToString
    path: Money.vb
    startLine: 86
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nString do valor formatado como moeda, √© um alias para <xref href=\"InnerLibs.Money.MoneyString\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: InnerLibs.Money.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: InnerLibs.Money.MoneyString
  commentId: P:InnerLibs.Money.MoneyString
  id: MoneyString
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: MoneyString
  nameWithType: Money.MoneyString
  fullName: InnerLibs.Money.MoneyString
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: MoneyString
    path: Money.vb
    startLine: 94
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nString do valor formatado como moeda\n"
  example: []
  syntax:
    content: public string MoneyString { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property MoneyString As String
  overload: InnerLibs.Money.MoneyString*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: InnerLibs.Money.ToString(System.Int32)
  commentId: M:InnerLibs.Money.ToString(System.Int32)
  id: ToString(System.Int32)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: ToString(Int32)
  nameWithType: Money.ToString(Int32)
  fullName: InnerLibs.Money.ToString(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: ToString
    path: Money.vb
    startLine: 105
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nString do valor formatado como moeda\n"
  example: []
  syntax:
    content: public object ToString(int Precision)
    parameters:
    - id: Precision
      type: System.Int32
      description: Precisao de casas decimais
    return:
      type: System.Object
      description: ''
    content.vb: Public Function ToString(Precision As Integer) As Object
  overload: InnerLibs.Money.ToString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.Money.CurrencySymbol
  commentId: P:InnerLibs.Money.CurrencySymbol
  id: CurrencySymbol
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: CurrencySymbol
  nameWithType: Money.CurrencySymbol
  fullName: InnerLibs.Money.CurrencySymbol
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: CurrencySymbol
    path: Money.vb
    startLine: 123
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nSimbolo de moeda\n"
  example: []
  syntax:
    content: public string CurrencySymbol { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property CurrencySymbol As String
  overload: InnerLibs.Money.CurrencySymbol*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: InnerLibs.Money.ISOCurrencySymbol
  commentId: P:InnerLibs.Money.ISOCurrencySymbol
  id: ISOCurrencySymbol
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: ISOCurrencySymbol
  nameWithType: Money.ISOCurrencySymbol
  fullName: InnerLibs.Money.ISOCurrencySymbol
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: ISOCurrencySymbol
    path: Money.vb
    startLine: 130
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nSimbolo de moeda utilizada em cambio (ISO)\n"
  example: []
  syntax:
    content: public string ISOCurrencySymbol { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property ISOCurrencySymbol As String
  overload: InnerLibs.Money.ISOCurrencySymbol*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: InnerLibs.Money.GetCultureInfosByCurrencySymbol(System.String)
  commentId: M:InnerLibs.Money.GetCultureInfosByCurrencySymbol(System.String)
  id: GetCultureInfosByCurrencySymbol(System.String)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GetCultureInfosByCurrencySymbol(String)
  nameWithType: Money.GetCultureInfosByCurrencySymbol(String)
  fullName: InnerLibs.Money.GetCultureInfosByCurrencySymbol(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: GetCultureInfosByCurrencySymbol
    path: Money.vb
    startLine: 138
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTraz uma lista de <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> que utilizam uma determinada moeda de acordo com o simbolo, simbolo ISO ou\n"
  example: []
  syntax:
    content: public static List<CultureInfo> GetCultureInfosByCurrencySymbol(string Currency)
    parameters:
    - id: Currency
      type: System.String
      description: Moeda
    return:
      type: System.Collections.Generic.List{System.Globalization.CultureInfo}
      description: ''
    content.vb: Public Shared Function GetCultureInfosByCurrencySymbol(Currency As String) As List(Of CultureInfo)
  overload: InnerLibs.Money.GetCultureInfosByCurrencySymbol*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Concatenate(System.String,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Concatenate(System.String,InnerLibs.Money)
  id: op_Concatenate(System.String,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Concatenate(String, Money)
  nameWithType: Money.Concatenate(String, Money)
  fullName: InnerLibs.Money.Concatenate(System.String, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Concatenate
    path: Money.vb
    startLine: 151
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: Not supported in c#
    parameters:
    - id: Text
      type: System.String
    - id: Value
      type: InnerLibs.Money
    return:
      type: System.String
    content.vb: VB cannot support this operator.
  overload: InnerLibs.Money.op_Concatenate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Concatenate(InnerLibs.Money,System.String)
  commentId: M:InnerLibs.Money.op_Concatenate(InnerLibs.Money,System.String)
  id: op_Concatenate(InnerLibs.Money,System.String)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Concatenate(Money, String)
  nameWithType: Money.Concatenate(Money, String)
  fullName: InnerLibs.Money.Concatenate(InnerLibs.Money, System.String)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Concatenate
    path: Money.vb
    startLine: 155
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: Not supported in c#
    parameters:
    - id: Value
      type: InnerLibs.Money
    - id: Text
      type: System.String
    return:
      type: System.String
    content.vb: VB cannot support this operator.
  overload: InnerLibs.Money.op_Concatenate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_OnesComplement(InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_OnesComplement(InnerLibs.Money)
  id: op_OnesComplement(InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: OnesComplement(Money)
  nameWithType: Money.OnesComplement(Money)
  fullName: InnerLibs.Money.OnesComplement(InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_OnesComplement
    path: Money.vb
    startLine: 159
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static object operator ~(Money Value)
    parameters:
    - id: Value
      type: InnerLibs.Money
    return:
      type: System.Object
    content.vb: Public Shared Operator Not(Value As Money) As Object
  overload: InnerLibs.Money.op_OnesComplement*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Addition(System.String,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Addition(System.String,InnerLibs.Money)
  id: op_Addition(System.String,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Addition(String, Money)
  nameWithType: Money.Addition(String, Money)
  fullName: InnerLibs.Money.Addition(System.String, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Addition
    path: Money.vb
    startLine: 163
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static string operator +(string Text, Money Value)
    parameters:
    - id: Text
      type: System.String
    - id: Value
      type: InnerLibs.Money
    return:
      type: System.String
    content.vb: Public Shared Operator +(Text As String, Value As Money) As String
  overload: InnerLibs.Money.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Addition(InnerLibs.Money,System.String)
  commentId: M:InnerLibs.Money.op_Addition(InnerLibs.Money,System.String)
  id: op_Addition(InnerLibs.Money,System.String)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Addition(Money, String)
  nameWithType: Money.Addition(Money, String)
  fullName: InnerLibs.Money.Addition(InnerLibs.Money, System.String)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Addition
    path: Money.vb
    startLine: 171
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static string operator +(Money Value, string Text)
    parameters:
    - id: Value
      type: InnerLibs.Money
    - id: Text
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Operator +(Value As Money, Text As String) As String
  overload: InnerLibs.Money.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Addition(System.Double,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Addition(System.Double,InnerLibs.Money)
  id: op_Addition(System.Double,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Addition(Double, Money)
  nameWithType: Money.Addition(Double, Money)
  fullName: InnerLibs.Money.Addition(System.Double, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Addition
    path: Money.vb
    startLine: 175
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator +(double Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Double
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator +(Value1 As Double, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Addition(InnerLibs.Money,System.Double)
  commentId: M:InnerLibs.Money.op_Addition(InnerLibs.Money,System.Double)
  id: op_Addition(InnerLibs.Money,System.Double)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Addition(Money, Double)
  nameWithType: Money.Addition(Money, Double)
  fullName: InnerLibs.Money.Addition(InnerLibs.Money, System.Double)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Addition
    path: Money.vb
    startLine: 179
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator +(Money Value2, double Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Double
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator +(Value2 As Money, Value1 As Double) As Money
  overload: InnerLibs.Money.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Addition(System.Decimal,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Addition(System.Decimal,InnerLibs.Money)
  id: op_Addition(System.Decimal,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Addition(Decimal, Money)
  nameWithType: Money.Addition(Decimal, Money)
  fullName: InnerLibs.Money.Addition(System.Decimal, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Addition
    path: Money.vb
    startLine: 183
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator +(decimal Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Decimal
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator +(Value1 As Decimal, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Addition(InnerLibs.Money,System.Decimal)
  commentId: M:InnerLibs.Money.op_Addition(InnerLibs.Money,System.Decimal)
  id: op_Addition(InnerLibs.Money,System.Decimal)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Addition(Money, Decimal)
  nameWithType: Money.Addition(Money, Decimal)
  fullName: InnerLibs.Money.Addition(InnerLibs.Money, System.Decimal)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Addition
    path: Money.vb
    startLine: 187
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator +(Money Value2, decimal Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Decimal
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator +(Value2 As Money, Value1 As Decimal) As Money
  overload: InnerLibs.Money.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Addition(System.Int32,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Addition(System.Int32,InnerLibs.Money)
  id: op_Addition(System.Int32,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Addition(Int32, Money)
  nameWithType: Money.Addition(Int32, Money)
  fullName: InnerLibs.Money.Addition(System.Int32, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Addition
    path: Money.vb
    startLine: 191
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator +(int Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int32
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator +(Value1 As Integer, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Addition(InnerLibs.Money,System.Int32)
  commentId: M:InnerLibs.Money.op_Addition(InnerLibs.Money,System.Int32)
  id: op_Addition(InnerLibs.Money,System.Int32)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Addition(Money, Int32)
  nameWithType: Money.Addition(Money, Int32)
  fullName: InnerLibs.Money.Addition(InnerLibs.Money, System.Int32)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Addition
    path: Money.vb
    startLine: 195
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator +(Money Value2, int Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Int32
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator +(Value2 As Money, Value1 As Integer) As Money
  overload: InnerLibs.Money.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Addition(System.Int64,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Addition(System.Int64,InnerLibs.Money)
  id: op_Addition(System.Int64,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Addition(Int64, Money)
  nameWithType: Money.Addition(Int64, Money)
  fullName: InnerLibs.Money.Addition(System.Int64, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Addition
    path: Money.vb
    startLine: 199
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator +(long Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int64
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator +(Value1 As Long, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Addition(InnerLibs.Money,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Addition(InnerLibs.Money,InnerLibs.Money)
  id: op_Addition(InnerLibs.Money,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Addition(Money, Money)
  nameWithType: Money.Addition(Money, Money)
  fullName: InnerLibs.Money.Addition(InnerLibs.Money, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Addition
    path: Money.vb
    startLine: 203
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator +(Money Value2, Money Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator +(Value2 As Money, Value1 As Money) As Money
  overload: InnerLibs.Money.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Subtraction(System.Double,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Subtraction(System.Double,InnerLibs.Money)
  id: op_Subtraction(System.Double,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Subtraction(Double, Money)
  nameWithType: Money.Subtraction(Double, Money)
  fullName: InnerLibs.Money.Subtraction(System.Double, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Subtraction
    path: Money.vb
    startLine: 210
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator -(double Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Double
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator -(Value1 As Double, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Subtraction(InnerLibs.Money,System.Double)
  commentId: M:InnerLibs.Money.op_Subtraction(InnerLibs.Money,System.Double)
  id: op_Subtraction(InnerLibs.Money,System.Double)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Subtraction(Money, Double)
  nameWithType: Money.Subtraction(Money, Double)
  fullName: InnerLibs.Money.Subtraction(InnerLibs.Money, System.Double)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Subtraction
    path: Money.vb
    startLine: 214
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator -(Money Value2, double Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Double
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator -(Value2 As Money, Value1 As Double) As Money
  overload: InnerLibs.Money.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Subtraction(System.Decimal,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Subtraction(System.Decimal,InnerLibs.Money)
  id: op_Subtraction(System.Decimal,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Subtraction(Decimal, Money)
  nameWithType: Money.Subtraction(Decimal, Money)
  fullName: InnerLibs.Money.Subtraction(System.Decimal, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Subtraction
    path: Money.vb
    startLine: 218
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator -(decimal Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Decimal
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator -(Value1 As Decimal, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Subtraction(InnerLibs.Money,System.Decimal)
  commentId: M:InnerLibs.Money.op_Subtraction(InnerLibs.Money,System.Decimal)
  id: op_Subtraction(InnerLibs.Money,System.Decimal)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Subtraction(Money, Decimal)
  nameWithType: Money.Subtraction(Money, Decimal)
  fullName: InnerLibs.Money.Subtraction(InnerLibs.Money, System.Decimal)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Subtraction
    path: Money.vb
    startLine: 222
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator -(Money Value2, decimal Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Decimal
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator -(Value2 As Money, Value1 As Decimal) As Money
  overload: InnerLibs.Money.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Subtraction(System.Int32,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Subtraction(System.Int32,InnerLibs.Money)
  id: op_Subtraction(System.Int32,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Subtraction(Int32, Money)
  nameWithType: Money.Subtraction(Int32, Money)
  fullName: InnerLibs.Money.Subtraction(System.Int32, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Subtraction
    path: Money.vb
    startLine: 226
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator -(int Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int32
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator -(Value1 As Integer, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Subtraction(InnerLibs.Money,System.Int32)
  commentId: M:InnerLibs.Money.op_Subtraction(InnerLibs.Money,System.Int32)
  id: op_Subtraction(InnerLibs.Money,System.Int32)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Subtraction(Money, Int32)
  nameWithType: Money.Subtraction(Money, Int32)
  fullName: InnerLibs.Money.Subtraction(InnerLibs.Money, System.Int32)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Subtraction
    path: Money.vb
    startLine: 230
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator -(Money Value2, int Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Int32
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator -(Value2 As Money, Value1 As Integer) As Money
  overload: InnerLibs.Money.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Subtraction(System.Int64,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Subtraction(System.Int64,InnerLibs.Money)
  id: op_Subtraction(System.Int64,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Subtraction(Int64, Money)
  nameWithType: Money.Subtraction(Int64, Money)
  fullName: InnerLibs.Money.Subtraction(System.Int64, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Subtraction
    path: Money.vb
    startLine: 234
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator -(long Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int64
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator -(Value1 As Long, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Subtraction(InnerLibs.Money,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Subtraction(InnerLibs.Money,InnerLibs.Money)
  id: op_Subtraction(InnerLibs.Money,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Subtraction(Money, Money)
  nameWithType: Money.Subtraction(Money, Money)
  fullName: InnerLibs.Money.Subtraction(InnerLibs.Money, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Subtraction
    path: Money.vb
    startLine: 238
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator -(Money Value1, Money Value2)
    parameters:
    - id: Value1
      type: InnerLibs.Money
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator -(Value1 As Money, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Multiply(System.Double,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Multiply(System.Double,InnerLibs.Money)
  id: op_Multiply(System.Double,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Multiply(Double, Money)
  nameWithType: Money.Multiply(Double, Money)
  fullName: InnerLibs.Money.Multiply(System.Double, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Multiply
    path: Money.vb
    startLine: 242
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator *(double Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Double
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator *(Value1 As Double, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Multiply(InnerLibs.Money,System.Double)
  commentId: M:InnerLibs.Money.op_Multiply(InnerLibs.Money,System.Double)
  id: op_Multiply(InnerLibs.Money,System.Double)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Multiply(Money, Double)
  nameWithType: Money.Multiply(Money, Double)
  fullName: InnerLibs.Money.Multiply(InnerLibs.Money, System.Double)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Multiply
    path: Money.vb
    startLine: 246
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator *(Money Value2, double Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Double
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator *(Value2 As Money, Value1 As Double) As Money
  overload: InnerLibs.Money.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Multiply(System.Decimal,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Multiply(System.Decimal,InnerLibs.Money)
  id: op_Multiply(System.Decimal,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Multiply(Decimal, Money)
  nameWithType: Money.Multiply(Decimal, Money)
  fullName: InnerLibs.Money.Multiply(System.Decimal, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Multiply
    path: Money.vb
    startLine: 250
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator *(decimal Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Decimal
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator *(Value1 As Decimal, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Multiply(InnerLibs.Money,System.Decimal)
  commentId: M:InnerLibs.Money.op_Multiply(InnerLibs.Money,System.Decimal)
  id: op_Multiply(InnerLibs.Money,System.Decimal)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Multiply(Money, Decimal)
  nameWithType: Money.Multiply(Money, Decimal)
  fullName: InnerLibs.Money.Multiply(InnerLibs.Money, System.Decimal)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Multiply
    path: Money.vb
    startLine: 254
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator *(Money Value2, decimal Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Decimal
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator *(Value2 As Money, Value1 As Decimal) As Money
  overload: InnerLibs.Money.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Multiply(System.Int32,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Multiply(System.Int32,InnerLibs.Money)
  id: op_Multiply(System.Int32,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Multiply(Int32, Money)
  nameWithType: Money.Multiply(Int32, Money)
  fullName: InnerLibs.Money.Multiply(System.Int32, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Multiply
    path: Money.vb
    startLine: 258
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator *(int Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int32
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator *(Value1 As Integer, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Multiply(InnerLibs.Money,System.Int32)
  commentId: M:InnerLibs.Money.op_Multiply(InnerLibs.Money,System.Int32)
  id: op_Multiply(InnerLibs.Money,System.Int32)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Multiply(Money, Int32)
  nameWithType: Money.Multiply(Money, Int32)
  fullName: InnerLibs.Money.Multiply(InnerLibs.Money, System.Int32)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Multiply
    path: Money.vb
    startLine: 262
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator *(Money Value2, int Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Int32
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator *(Value2 As Money, Value1 As Integer) As Money
  overload: InnerLibs.Money.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Multiply(System.Int64,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Multiply(System.Int64,InnerLibs.Money)
  id: op_Multiply(System.Int64,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Multiply(Int64, Money)
  nameWithType: Money.Multiply(Int64, Money)
  fullName: InnerLibs.Money.Multiply(System.Int64, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Multiply
    path: Money.vb
    startLine: 266
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator *(long Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int64
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator *(Value1 As Long, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Multiply(InnerLibs.Money,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Multiply(InnerLibs.Money,InnerLibs.Money)
  id: op_Multiply(InnerLibs.Money,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Multiply(Money, Money)
  nameWithType: Money.Multiply(Money, Money)
  fullName: InnerLibs.Money.Multiply(InnerLibs.Money, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Multiply
    path: Money.vb
    startLine: 270
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator *(Money Value2, Money Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator *(Value2 As Money, Value1 As Money) As Money
  overload: InnerLibs.Money.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Division(System.Double,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Division(System.Double,InnerLibs.Money)
  id: op_Division(System.Double,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Division(Double, Money)
  nameWithType: Money.Division(Double, Money)
  fullName: InnerLibs.Money.Division(System.Double, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Division
    path: Money.vb
    startLine: 277
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator /(double Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Double
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator /(Value1 As Double, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Division(InnerLibs.Money,System.Double)
  commentId: M:InnerLibs.Money.op_Division(InnerLibs.Money,System.Double)
  id: op_Division(InnerLibs.Money,System.Double)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Division(Money, Double)
  nameWithType: Money.Division(Money, Double)
  fullName: InnerLibs.Money.Division(InnerLibs.Money, System.Double)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Division
    path: Money.vb
    startLine: 281
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator /(Money Value2, double Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Double
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator /(Value2 As Money, Value1 As Double) As Money
  overload: InnerLibs.Money.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Division(System.Decimal,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Division(System.Decimal,InnerLibs.Money)
  id: op_Division(System.Decimal,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Division(Decimal, Money)
  nameWithType: Money.Division(Decimal, Money)
  fullName: InnerLibs.Money.Division(System.Decimal, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Division
    path: Money.vb
    startLine: 285
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator /(decimal Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Decimal
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator /(Value1 As Decimal, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Division(InnerLibs.Money,System.Decimal)
  commentId: M:InnerLibs.Money.op_Division(InnerLibs.Money,System.Decimal)
  id: op_Division(InnerLibs.Money,System.Decimal)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Division(Money, Decimal)
  nameWithType: Money.Division(Money, Decimal)
  fullName: InnerLibs.Money.Division(InnerLibs.Money, System.Decimal)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Division
    path: Money.vb
    startLine: 289
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator /(Money Value2, decimal Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Decimal
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator /(Value2 As Money, Value1 As Decimal) As Money
  overload: InnerLibs.Money.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Division(System.Int32,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Division(System.Int32,InnerLibs.Money)
  id: op_Division(System.Int32,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Division(Int32, Money)
  nameWithType: Money.Division(Int32, Money)
  fullName: InnerLibs.Money.Division(System.Int32, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Division
    path: Money.vb
    startLine: 293
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator /(int Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int32
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator /(Value1 As Integer, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Division(InnerLibs.Money,System.Int32)
  commentId: M:InnerLibs.Money.op_Division(InnerLibs.Money,System.Int32)
  id: op_Division(InnerLibs.Money,System.Int32)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Division(Money, Int32)
  nameWithType: Money.Division(Money, Int32)
  fullName: InnerLibs.Money.Division(InnerLibs.Money, System.Int32)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Division
    path: Money.vb
    startLine: 297
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator /(Money Value2, int Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Int32
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator /(Value2 As Money, Value1 As Integer) As Money
  overload: InnerLibs.Money.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Division(System.Int64,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Division(System.Int64,InnerLibs.Money)
  id: op_Division(System.Int64,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Division(Int64, Money)
  nameWithType: Money.Division(Int64, Money)
  fullName: InnerLibs.Money.Division(System.Int64, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Division
    path: Money.vb
    startLine: 301
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator /(long Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int64
    - id: Value2
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator /(Value1 As Long, Value2 As Money) As Money
  overload: InnerLibs.Money.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Division(InnerLibs.Money,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Division(InnerLibs.Money,InnerLibs.Money)
  id: op_Division(InnerLibs.Money,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Division(Money, Money)
  nameWithType: Money.Division(Money, Money)
  fullName: InnerLibs.Money.Division(InnerLibs.Money, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Division
    path: Money.vb
    startLine: 305
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static Money operator /(Money Value2, Money Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: InnerLibs.Money
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Operator /(Value2 As Money, Value1 As Money) As Money
  overload: InnerLibs.Money.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Equality(InnerLibs.Money,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Equality(InnerLibs.Money,InnerLibs.Money)
  id: op_Equality(InnerLibs.Money,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Equality(Money, Money)
  nameWithType: Money.Equality(Money, Money)
  fullName: InnerLibs.Money.Equality(InnerLibs.Money, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Equality
    path: Money.vb
    startLine: 312
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator ==(Money Value2, Money Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(Value2 As Money, Value1 As Money) As Boolean
  overload: InnerLibs.Money.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Equality(System.Double,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Equality(System.Double,InnerLibs.Money)
  id: op_Equality(System.Double,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Equality(Double, Money)
  nameWithType: Money.Equality(Double, Money)
  fullName: InnerLibs.Money.Equality(System.Double, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Equality
    path: Money.vb
    startLine: 316
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator ==(double Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Double
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(Value1 As Double, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Equality(InnerLibs.Money,System.Double)
  commentId: M:InnerLibs.Money.op_Equality(InnerLibs.Money,System.Double)
  id: op_Equality(InnerLibs.Money,System.Double)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Equality(Money, Double)
  nameWithType: Money.Equality(Money, Double)
  fullName: InnerLibs.Money.Equality(InnerLibs.Money, System.Double)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Equality
    path: Money.vb
    startLine: 320
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator ==(Money Value2, double Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(Value2 As Money, Value1 As Double) As Boolean
  overload: InnerLibs.Money.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Equality(System.Decimal,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Equality(System.Decimal,InnerLibs.Money)
  id: op_Equality(System.Decimal,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Equality(Decimal, Money)
  nameWithType: Money.Equality(Decimal, Money)
  fullName: InnerLibs.Money.Equality(System.Decimal, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Equality
    path: Money.vb
    startLine: 325
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator ==(decimal Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Decimal
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(Value1 As Decimal, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Equality(InnerLibs.Money,System.Decimal)
  commentId: M:InnerLibs.Money.op_Equality(InnerLibs.Money,System.Decimal)
  id: op_Equality(InnerLibs.Money,System.Decimal)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Equality(Money, Decimal)
  nameWithType: Money.Equality(Money, Decimal)
  fullName: InnerLibs.Money.Equality(InnerLibs.Money, System.Decimal)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Equality
    path: Money.vb
    startLine: 330
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator ==(Money Value2, decimal Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Decimal
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(Value2 As Money, Value1 As Decimal) As Boolean
  overload: InnerLibs.Money.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Equality(System.Int32,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Equality(System.Int32,InnerLibs.Money)
  id: op_Equality(System.Int32,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Equality(Int32, Money)
  nameWithType: Money.Equality(Int32, Money)
  fullName: InnerLibs.Money.Equality(System.Int32, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Equality
    path: Money.vb
    startLine: 334
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator ==(int Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int32
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(Value1 As Integer, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Equality(InnerLibs.Money,System.Int32)
  commentId: M:InnerLibs.Money.op_Equality(InnerLibs.Money,System.Int32)
  id: op_Equality(InnerLibs.Money,System.Int32)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Equality(Money, Int32)
  nameWithType: Money.Equality(Money, Int32)
  fullName: InnerLibs.Money.Equality(InnerLibs.Money, System.Int32)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Equality
    path: Money.vb
    startLine: 339
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator ==(Money Value2, int Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(Value2 As Money, Value1 As Integer) As Boolean
  overload: InnerLibs.Money.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Equality(System.Int64,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Equality(System.Int64,InnerLibs.Money)
  id: op_Equality(System.Int64,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Equality(Int64, Money)
  nameWithType: Money.Equality(Int64, Money)
  fullName: InnerLibs.Money.Equality(System.Int64, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Equality
    path: Money.vb
    startLine: 344
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator ==(long Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int64
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(Value1 As Long, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Inequality(InnerLibs.Money,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Inequality(InnerLibs.Money,InnerLibs.Money)
  id: op_Inequality(InnerLibs.Money,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Inequality(Money, Money)
  nameWithType: Money.Inequality(Money, Money)
  fullName: InnerLibs.Money.Inequality(InnerLibs.Money, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Inequality
    path: Money.vb
    startLine: 349
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator !=(Money Value2, Money Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(Value2 As Money, Value1 As Money) As Boolean
  overload: InnerLibs.Money.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Inequality(System.Double,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Inequality(System.Double,InnerLibs.Money)
  id: op_Inequality(System.Double,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Inequality(Double, Money)
  nameWithType: Money.Inequality(Double, Money)
  fullName: InnerLibs.Money.Inequality(System.Double, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Inequality
    path: Money.vb
    startLine: 353
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator !=(double Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Double
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(Value1 As Double, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Inequality(InnerLibs.Money,System.Double)
  commentId: M:InnerLibs.Money.op_Inequality(InnerLibs.Money,System.Double)
  id: op_Inequality(InnerLibs.Money,System.Double)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Inequality(Money, Double)
  nameWithType: Money.Inequality(Money, Double)
  fullName: InnerLibs.Money.Inequality(InnerLibs.Money, System.Double)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Inequality
    path: Money.vb
    startLine: 357
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator !=(Money Value2, double Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(Value2 As Money, Value1 As Double) As Boolean
  overload: InnerLibs.Money.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Inequality(System.Decimal,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Inequality(System.Decimal,InnerLibs.Money)
  id: op_Inequality(System.Decimal,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Inequality(Decimal, Money)
  nameWithType: Money.Inequality(Decimal, Money)
  fullName: InnerLibs.Money.Inequality(System.Decimal, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Inequality
    path: Money.vb
    startLine: 361
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator !=(decimal Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Decimal
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(Value1 As Decimal, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Inequality(InnerLibs.Money,System.Decimal)
  commentId: M:InnerLibs.Money.op_Inequality(InnerLibs.Money,System.Decimal)
  id: op_Inequality(InnerLibs.Money,System.Decimal)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Inequality(Money, Decimal)
  nameWithType: Money.Inequality(Money, Decimal)
  fullName: InnerLibs.Money.Inequality(InnerLibs.Money, System.Decimal)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Inequality
    path: Money.vb
    startLine: 365
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator !=(Money Value2, decimal Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Decimal
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(Value2 As Money, Value1 As Decimal) As Boolean
  overload: InnerLibs.Money.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Inequality(System.Int32,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Inequality(System.Int32,InnerLibs.Money)
  id: op_Inequality(System.Int32,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Inequality(Int32, Money)
  nameWithType: Money.Inequality(Int32, Money)
  fullName: InnerLibs.Money.Inequality(System.Int32, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Inequality
    path: Money.vb
    startLine: 370
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator !=(int Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int32
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(Value1 As Integer, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Inequality(InnerLibs.Money,System.Int32)
  commentId: M:InnerLibs.Money.op_Inequality(InnerLibs.Money,System.Int32)
  id: op_Inequality(InnerLibs.Money,System.Int32)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Inequality(Money, Int32)
  nameWithType: Money.Inequality(Money, Int32)
  fullName: InnerLibs.Money.Inequality(InnerLibs.Money, System.Int32)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Inequality
    path: Money.vb
    startLine: 375
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator !=(Money Value2, int Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(Value2 As Money, Value1 As Integer) As Boolean
  overload: InnerLibs.Money.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Inequality(System.Int64,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Inequality(System.Int64,InnerLibs.Money)
  id: op_Inequality(System.Int64,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Inequality(Int64, Money)
  nameWithType: Money.Inequality(Int64, Money)
  fullName: InnerLibs.Money.Inequality(System.Int64, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Inequality
    path: Money.vb
    startLine: 380
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator !=(long Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int64
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(Value1 As Long, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThanOrEqual(InnerLibs.Money,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_GreaterThanOrEqual(InnerLibs.Money,InnerLibs.Money)
  id: op_GreaterThanOrEqual(InnerLibs.Money,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Money, Money)
  nameWithType: Money.GreaterThanOrEqual(Money, Money)
  fullName: InnerLibs.Money.GreaterThanOrEqual(InnerLibs.Money, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThanOrEqual
    path: Money.vb
    startLine: 384
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator >=(Money Value2, Money Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(Value2 As Money, Value1 As Money) As Boolean
  overload: InnerLibs.Money.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThanOrEqual(System.Double,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_GreaterThanOrEqual(System.Double,InnerLibs.Money)
  id: op_GreaterThanOrEqual(System.Double,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Double, Money)
  nameWithType: Money.GreaterThanOrEqual(Double, Money)
  fullName: InnerLibs.Money.GreaterThanOrEqual(System.Double, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThanOrEqual
    path: Money.vb
    startLine: 388
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator >=(double Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Double
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(Value1 As Double, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThanOrEqual(InnerLibs.Money,System.Double)
  commentId: M:InnerLibs.Money.op_GreaterThanOrEqual(InnerLibs.Money,System.Double)
  id: op_GreaterThanOrEqual(InnerLibs.Money,System.Double)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Money, Double)
  nameWithType: Money.GreaterThanOrEqual(Money, Double)
  fullName: InnerLibs.Money.GreaterThanOrEqual(InnerLibs.Money, System.Double)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThanOrEqual
    path: Money.vb
    startLine: 392
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator >=(Money Value2, double Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(Value2 As Money, Value1 As Double) As Boolean
  overload: InnerLibs.Money.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThanOrEqual(System.Decimal,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_GreaterThanOrEqual(System.Decimal,InnerLibs.Money)
  id: op_GreaterThanOrEqual(System.Decimal,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Decimal, Money)
  nameWithType: Money.GreaterThanOrEqual(Decimal, Money)
  fullName: InnerLibs.Money.GreaterThanOrEqual(System.Decimal, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThanOrEqual
    path: Money.vb
    startLine: 397
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator >=(decimal Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Decimal
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(Value1 As Decimal, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThanOrEqual(InnerLibs.Money,System.Decimal)
  commentId: M:InnerLibs.Money.op_GreaterThanOrEqual(InnerLibs.Money,System.Decimal)
  id: op_GreaterThanOrEqual(InnerLibs.Money,System.Decimal)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Money, Decimal)
  nameWithType: Money.GreaterThanOrEqual(Money, Decimal)
  fullName: InnerLibs.Money.GreaterThanOrEqual(InnerLibs.Money, System.Decimal)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThanOrEqual
    path: Money.vb
    startLine: 402
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator >=(Money Value2, decimal Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Decimal
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(Value2 As Money, Value1 As Decimal) As Boolean
  overload: InnerLibs.Money.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThanOrEqual(System.Int32,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_GreaterThanOrEqual(System.Int32,InnerLibs.Money)
  id: op_GreaterThanOrEqual(System.Int32,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Int32, Money)
  nameWithType: Money.GreaterThanOrEqual(Int32, Money)
  fullName: InnerLibs.Money.GreaterThanOrEqual(System.Int32, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThanOrEqual
    path: Money.vb
    startLine: 406
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator >=(int Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int32
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(Value1 As Integer, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThanOrEqual(InnerLibs.Money,System.Int32)
  commentId: M:InnerLibs.Money.op_GreaterThanOrEqual(InnerLibs.Money,System.Int32)
  id: op_GreaterThanOrEqual(InnerLibs.Money,System.Int32)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Money, Int32)
  nameWithType: Money.GreaterThanOrEqual(Money, Int32)
  fullName: InnerLibs.Money.GreaterThanOrEqual(InnerLibs.Money, System.Int32)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThanOrEqual
    path: Money.vb
    startLine: 411
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator >=(Money Value2, int Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(Value2 As Money, Value1 As Integer) As Boolean
  overload: InnerLibs.Money.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThanOrEqual(System.Int64,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_GreaterThanOrEqual(System.Int64,InnerLibs.Money)
  id: op_GreaterThanOrEqual(System.Int64,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Int64, Money)
  nameWithType: Money.GreaterThanOrEqual(Int64, Money)
  fullName: InnerLibs.Money.GreaterThanOrEqual(System.Int64, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThanOrEqual
    path: Money.vb
    startLine: 416
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator >=(long Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int64
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(Value1 As Long, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThanOrEqual(InnerLibs.Money,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_LessThanOrEqual(InnerLibs.Money,InnerLibs.Money)
  id: op_LessThanOrEqual(InnerLibs.Money,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Money, Money)
  nameWithType: Money.LessThanOrEqual(Money, Money)
  fullName: InnerLibs.Money.LessThanOrEqual(InnerLibs.Money, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThanOrEqual
    path: Money.vb
    startLine: 421
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <=(Money Value2, Money Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(Value2 As Money, Value1 As Money) As Boolean
  overload: InnerLibs.Money.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThanOrEqual(System.Double,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_LessThanOrEqual(System.Double,InnerLibs.Money)
  id: op_LessThanOrEqual(System.Double,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Double, Money)
  nameWithType: Money.LessThanOrEqual(Double, Money)
  fullName: InnerLibs.Money.LessThanOrEqual(System.Double, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThanOrEqual
    path: Money.vb
    startLine: 425
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <=(double Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Double
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(Value1 As Double, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThanOrEqual(InnerLibs.Money,System.Double)
  commentId: M:InnerLibs.Money.op_LessThanOrEqual(InnerLibs.Money,System.Double)
  id: op_LessThanOrEqual(InnerLibs.Money,System.Double)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Money, Double)
  nameWithType: Money.LessThanOrEqual(Money, Double)
  fullName: InnerLibs.Money.LessThanOrEqual(InnerLibs.Money, System.Double)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThanOrEqual
    path: Money.vb
    startLine: 429
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <=(Money Value2, double Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(Value2 As Money, Value1 As Double) As Boolean
  overload: InnerLibs.Money.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThanOrEqual(System.Decimal,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_LessThanOrEqual(System.Decimal,InnerLibs.Money)
  id: op_LessThanOrEqual(System.Decimal,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Decimal, Money)
  nameWithType: Money.LessThanOrEqual(Decimal, Money)
  fullName: InnerLibs.Money.LessThanOrEqual(System.Decimal, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThanOrEqual
    path: Money.vb
    startLine: 434
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <=(decimal Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Decimal
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(Value1 As Decimal, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThanOrEqual(InnerLibs.Money,System.Decimal)
  commentId: M:InnerLibs.Money.op_LessThanOrEqual(InnerLibs.Money,System.Decimal)
  id: op_LessThanOrEqual(InnerLibs.Money,System.Decimal)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Money, Decimal)
  nameWithType: Money.LessThanOrEqual(Money, Decimal)
  fullName: InnerLibs.Money.LessThanOrEqual(InnerLibs.Money, System.Decimal)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThanOrEqual
    path: Money.vb
    startLine: 439
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <=(Money Value2, decimal Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Decimal
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(Value2 As Money, Value1 As Decimal) As Boolean
  overload: InnerLibs.Money.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThanOrEqual(System.Int32,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_LessThanOrEqual(System.Int32,InnerLibs.Money)
  id: op_LessThanOrEqual(System.Int32,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Int32, Money)
  nameWithType: Money.LessThanOrEqual(Int32, Money)
  fullName: InnerLibs.Money.LessThanOrEqual(System.Int32, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThanOrEqual
    path: Money.vb
    startLine: 443
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <=(int Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int32
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(Value1 As Integer, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThanOrEqual(InnerLibs.Money,System.Int32)
  commentId: M:InnerLibs.Money.op_LessThanOrEqual(InnerLibs.Money,System.Int32)
  id: op_LessThanOrEqual(InnerLibs.Money,System.Int32)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Money, Int32)
  nameWithType: Money.LessThanOrEqual(Money, Int32)
  fullName: InnerLibs.Money.LessThanOrEqual(InnerLibs.Money, System.Int32)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThanOrEqual
    path: Money.vb
    startLine: 448
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <=(Money Value2, int Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(Value2 As Money, Value1 As Integer) As Boolean
  overload: InnerLibs.Money.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThanOrEqual(System.Int64,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_LessThanOrEqual(System.Int64,InnerLibs.Money)
  id: op_LessThanOrEqual(System.Int64,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Int64, Money)
  nameWithType: Money.LessThanOrEqual(Int64, Money)
  fullName: InnerLibs.Money.LessThanOrEqual(System.Int64, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThanOrEqual
    path: Money.vb
    startLine: 453
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <=(long Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int64
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(Value1 As Long, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThan(InnerLibs.Money,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_GreaterThan(InnerLibs.Money,InnerLibs.Money)
  id: op_GreaterThan(InnerLibs.Money,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThan(Money, Money)
  nameWithType: Money.GreaterThan(Money, Money)
  fullName: InnerLibs.Money.GreaterThan(InnerLibs.Money, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThan
    path: Money.vb
    startLine: 458
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator>(Money Value2, Money Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(Value2 As Money, Value1 As Money) As Boolean
  overload: InnerLibs.Money.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThan(System.Double,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_GreaterThan(System.Double,InnerLibs.Money)
  id: op_GreaterThan(System.Double,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThan(Double, Money)
  nameWithType: Money.GreaterThan(Double, Money)
  fullName: InnerLibs.Money.GreaterThan(System.Double, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThan
    path: Money.vb
    startLine: 462
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator>(double Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Double
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(Value1 As Double, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThan(InnerLibs.Money,System.Double)
  commentId: M:InnerLibs.Money.op_GreaterThan(InnerLibs.Money,System.Double)
  id: op_GreaterThan(InnerLibs.Money,System.Double)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThan(Money, Double)
  nameWithType: Money.GreaterThan(Money, Double)
  fullName: InnerLibs.Money.GreaterThan(InnerLibs.Money, System.Double)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThan
    path: Money.vb
    startLine: 466
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator>(Money Value2, double Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(Value2 As Money, Value1 As Double) As Boolean
  overload: InnerLibs.Money.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThan(System.Decimal,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_GreaterThan(System.Decimal,InnerLibs.Money)
  id: op_GreaterThan(System.Decimal,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThan(Decimal, Money)
  nameWithType: Money.GreaterThan(Decimal, Money)
  fullName: InnerLibs.Money.GreaterThan(System.Decimal, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThan
    path: Money.vb
    startLine: 471
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator>(decimal Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Decimal
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(Value1 As Decimal, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThan(InnerLibs.Money,System.Decimal)
  commentId: M:InnerLibs.Money.op_GreaterThan(InnerLibs.Money,System.Decimal)
  id: op_GreaterThan(InnerLibs.Money,System.Decimal)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThan(Money, Decimal)
  nameWithType: Money.GreaterThan(Money, Decimal)
  fullName: InnerLibs.Money.GreaterThan(InnerLibs.Money, System.Decimal)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThan
    path: Money.vb
    startLine: 476
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator>(Money Value2, decimal Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Decimal
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(Value2 As Money, Value1 As Decimal) As Boolean
  overload: InnerLibs.Money.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThan(System.Int32,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_GreaterThan(System.Int32,InnerLibs.Money)
  id: op_GreaterThan(System.Int32,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThan(Int32, Money)
  nameWithType: Money.GreaterThan(Int32, Money)
  fullName: InnerLibs.Money.GreaterThan(System.Int32, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThan
    path: Money.vb
    startLine: 480
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator>(int Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int32
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(Value1 As Integer, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThan(InnerLibs.Money,System.Int32)
  commentId: M:InnerLibs.Money.op_GreaterThan(InnerLibs.Money,System.Int32)
  id: op_GreaterThan(InnerLibs.Money,System.Int32)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThan(Money, Int32)
  nameWithType: Money.GreaterThan(Money, Int32)
  fullName: InnerLibs.Money.GreaterThan(InnerLibs.Money, System.Int32)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThan
    path: Money.vb
    startLine: 485
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator>(Money Value2, int Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(Value2 As Money, Value1 As Integer) As Boolean
  overload: InnerLibs.Money.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_GreaterThan(System.Int64,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_GreaterThan(System.Int64,InnerLibs.Money)
  id: op_GreaterThan(System.Int64,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: GreaterThan(Int64, Money)
  nameWithType: Money.GreaterThan(Int64, Money)
  fullName: InnerLibs.Money.GreaterThan(System.Int64, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_GreaterThan
    path: Money.vb
    startLine: 490
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator>(long Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int64
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(Value1 As Long, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThan(InnerLibs.Money,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_LessThan(InnerLibs.Money,InnerLibs.Money)
  id: op_LessThan(InnerLibs.Money,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThan(Money, Money)
  nameWithType: Money.LessThan(Money, Money)
  fullName: InnerLibs.Money.LessThan(InnerLibs.Money, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThan
    path: Money.vb
    startLine: 495
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <(Money Value2, Money Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(Value2 As Money, Value1 As Money) As Boolean
  overload: InnerLibs.Money.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThan(System.Double,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_LessThan(System.Double,InnerLibs.Money)
  id: op_LessThan(System.Double,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThan(Double, Money)
  nameWithType: Money.LessThan(Double, Money)
  fullName: InnerLibs.Money.LessThan(System.Double, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThan
    path: Money.vb
    startLine: 499
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <(double Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Double
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(Value1 As Double, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThan(InnerLibs.Money,System.Double)
  commentId: M:InnerLibs.Money.op_LessThan(InnerLibs.Money,System.Double)
  id: op_LessThan(InnerLibs.Money,System.Double)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThan(Money, Double)
  nameWithType: Money.LessThan(Money, Double)
  fullName: InnerLibs.Money.LessThan(InnerLibs.Money, System.Double)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThan
    path: Money.vb
    startLine: 503
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <(Money Value2, double Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(Value2 As Money, Value1 As Double) As Boolean
  overload: InnerLibs.Money.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThan(System.Decimal,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_LessThan(System.Decimal,InnerLibs.Money)
  id: op_LessThan(System.Decimal,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThan(Decimal, Money)
  nameWithType: Money.LessThan(Decimal, Money)
  fullName: InnerLibs.Money.LessThan(System.Decimal, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThan
    path: Money.vb
    startLine: 508
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <(decimal Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Decimal
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(Value1 As Decimal, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThan(InnerLibs.Money,System.Decimal)
  commentId: M:InnerLibs.Money.op_LessThan(InnerLibs.Money,System.Decimal)
  id: op_LessThan(InnerLibs.Money,System.Decimal)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThan(Money, Decimal)
  nameWithType: Money.LessThan(Money, Decimal)
  fullName: InnerLibs.Money.LessThan(InnerLibs.Money, System.Decimal)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThan
    path: Money.vb
    startLine: 513
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <(Money Value2, decimal Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Decimal
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(Value2 As Money, Value1 As Decimal) As Boolean
  overload: InnerLibs.Money.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThan(System.Int32,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_LessThan(System.Int32,InnerLibs.Money)
  id: op_LessThan(System.Int32,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThan(Int32, Money)
  nameWithType: Money.LessThan(Int32, Money)
  fullName: InnerLibs.Money.LessThan(System.Int32, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThan
    path: Money.vb
    startLine: 517
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <(int Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int32
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(Value1 As Integer, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThan(InnerLibs.Money,System.Int32)
  commentId: M:InnerLibs.Money.op_LessThan(InnerLibs.Money,System.Int32)
  id: op_LessThan(InnerLibs.Money,System.Int32)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThan(Money, Int32)
  nameWithType: Money.LessThan(Money, Int32)
  fullName: InnerLibs.Money.LessThan(InnerLibs.Money, System.Int32)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThan
    path: Money.vb
    startLine: 522
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <(Money Value2, int Value1)
    parameters:
    - id: Value2
      type: InnerLibs.Money
    - id: Value1
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(Value2 As Money, Value1 As Integer) As Boolean
  overload: InnerLibs.Money.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_LessThan(System.Int64,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_LessThan(System.Int64,InnerLibs.Money)
  id: op_LessThan(System.Int64,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: LessThan(Int64, Money)
  nameWithType: Money.LessThan(Int64, Money)
  fullName: InnerLibs.Money.LessThan(System.Int64, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_LessThan
    path: Money.vb
    startLine: 527
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static bool operator <(long Value1, Money Value2)
    parameters:
    - id: Value1
      type: System.Int64
    - id: Value2
      type: InnerLibs.Money
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(Value1 As Long, Value2 As Money) As Boolean
  overload: InnerLibs.Money.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Like(InnerLibs.Money,InnerLibs.Money)
  commentId: M:InnerLibs.Money.op_Like(InnerLibs.Money,InnerLibs.Money)
  id: op_Like(InnerLibs.Money,InnerLibs.Money)
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Like(Money, Money)
  nameWithType: Money.Like(Money, Money)
  fullName: InnerLibs.Money.Like(InnerLibs.Money, InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Like
    path: Money.vb
    startLine: 537
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se 2 valores sao da mesma moeda\n"
  example: []
  syntax:
    content: Not supported in c#
    parameters:
    - id: Value1
      type: InnerLibs.Money
      description: ''
    - id: Value2
      type: InnerLibs.Money
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: VB cannot support this operator.
  overload: InnerLibs.Money.op_Like*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Money.op_Implicit(InnerLibs.Money)~System.Decimal
  commentId: M:InnerLibs.Money.op_Implicit(InnerLibs.Money)~System.Decimal
  id: op_Implicit(InnerLibs.Money)~System.Decimal
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Implicit(Money to Decimal)
  nameWithType: Money.Implicit(Money to Decimal)
  fullName: InnerLibs.Money.Implicit(InnerLibs.Money to System.Decimal)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Implicit
    path: Money.vb
    startLine: 541
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static implicit operator decimal (Money v)
    parameters:
    - id: v
      type: InnerLibs.Money
    return:
      type: System.Decimal
    content.vb: Public Shared Widening Operator CType(v As Money) As Decimal
  overload: InnerLibs.Money.op_Implicit*
  nameWithType.vb: Money.Widening(Money to Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Money.Widening(InnerLibs.Money to System.Decimal)
  name.vb: Widening(Money to Decimal)
- uid: InnerLibs.Money.op_Implicit(System.Decimal)~InnerLibs.Money
  commentId: M:InnerLibs.Money.op_Implicit(System.Decimal)~InnerLibs.Money
  id: op_Implicit(System.Decimal)~InnerLibs.Money
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Implicit(Decimal to Money)
  nameWithType: Money.Implicit(Decimal to Money)
  fullName: InnerLibs.Money.Implicit(System.Decimal to InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Implicit
    path: Money.vb
    startLine: 545
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static implicit operator Money(decimal v)
    parameters:
    - id: v
      type: System.Decimal
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Widening Operator CType(v As Decimal) As Money
  overload: InnerLibs.Money.op_Implicit*
  nameWithType.vb: Money.Widening(Decimal to Money)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Money.Widening(System.Decimal to InnerLibs.Money)
  name.vb: Widening(Decimal to Money)
- uid: InnerLibs.Money.op_Implicit(System.Int32)~InnerLibs.Money
  commentId: M:InnerLibs.Money.op_Implicit(System.Int32)~InnerLibs.Money
  id: op_Implicit(System.Int32)~InnerLibs.Money
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Implicit(Int32 to Money)
  nameWithType: Money.Implicit(Int32 to Money)
  fullName: InnerLibs.Money.Implicit(System.Int32 to InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Implicit
    path: Money.vb
    startLine: 548
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static implicit operator Money(int v)
    parameters:
    - id: v
      type: System.Int32
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Widening Operator CType(v As Integer) As Money
  overload: InnerLibs.Money.op_Implicit*
  nameWithType.vb: Money.Widening(Int32 to Money)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Money.Widening(System.Int32 to InnerLibs.Money)
  name.vb: Widening(Int32 to Money)
- uid: InnerLibs.Money.op_Implicit(System.Int16)~InnerLibs.Money
  commentId: M:InnerLibs.Money.op_Implicit(System.Int16)~InnerLibs.Money
  id: op_Implicit(System.Int16)~InnerLibs.Money
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Implicit(Int16 to Money)
  nameWithType: Money.Implicit(Int16 to Money)
  fullName: InnerLibs.Money.Implicit(System.Int16 to InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Implicit
    path: Money.vb
    startLine: 551
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static implicit operator Money(short v)
    parameters:
    - id: v
      type: System.Int16
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Widening Operator CType(v As Short) As Money
  overload: InnerLibs.Money.op_Implicit*
  nameWithType.vb: Money.Widening(Int16 to Money)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Money.Widening(System.Int16 to InnerLibs.Money)
  name.vb: Widening(Int16 to Money)
- uid: InnerLibs.Money.op_Implicit(System.Int64)~InnerLibs.Money
  commentId: M:InnerLibs.Money.op_Implicit(System.Int64)~InnerLibs.Money
  id: op_Implicit(System.Int64)~InnerLibs.Money
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Implicit(Int64 to Money)
  nameWithType: Money.Implicit(Int64 to Money)
  fullName: InnerLibs.Money.Implicit(System.Int64 to InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Implicit
    path: Money.vb
    startLine: 554
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static implicit operator Money(long v)
    parameters:
    - id: v
      type: System.Int64
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Widening Operator CType(v As Long) As Money
  overload: InnerLibs.Money.op_Implicit*
  nameWithType.vb: Money.Widening(Int64 to Money)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Money.Widening(System.Int64 to InnerLibs.Money)
  name.vb: Widening(Int64 to Money)
- uid: InnerLibs.Money.op_Implicit(System.Double)~InnerLibs.Money
  commentId: M:InnerLibs.Money.op_Implicit(System.Double)~InnerLibs.Money
  id: op_Implicit(System.Double)~InnerLibs.Money
  parent: InnerLibs.Money
  langs:
  - csharp
  - vb
  name: Implicit(Double to Money)
  nameWithType: Money.Implicit(Double to Money)
  fullName: InnerLibs.Money.Implicit(System.Double to InnerLibs.Money)
  type: Operator
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Money.vb
    id: op_Implicit
    path: Money.vb
    startLine: 557
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static implicit operator Money(double v)
    parameters:
    - id: v
      type: System.Double
    return:
      type: InnerLibs.Money
    content.vb: Public Shared Widening Operator CType(v As Double) As Money
  overload: InnerLibs.Money.op_Implicit*
  nameWithType.vb: Money.Widening(Double to Money)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Money.Widening(System.Double to InnerLibs.Money)
  name.vb: Widening(Double to Money)
references:
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: InnerLibs
  commentId: N:InnerLibs
  name: InnerLibs
  nameWithType: InnerLibs
  fullName: InnerLibs
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Money.InnerLibs.ClassTools.CreateDictionary
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary()
  nameWithType: ClassTools.CreateDictionary()
  fullName: InnerLibs.ClassTools.CreateDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  name: GetProperties(BindingFlags)
  nameWithType: ClassTools.GetProperties(BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object)
  name: GetProperties()
  nameWithType: ClassTools.GetProperties()
  fullName: InnerLibs.ClassTools.GetProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  name: GetPropertyValue(String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  name: GetPropertyValue<Type>(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  name: GetPropertyValue(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  name: HasProperty(String)
  nameWithType: ClassTools.HasProperty(String)
  fullName: InnerLibs.ClassTools.HasProperty(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsArrayOf``1
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  name: IsArrayOf<T>()
  nameWithType: ClassTools.IsArrayOf<T>()
  fullName: InnerLibs.ClassTools.IsArrayOf<T>()
  nameWithType.vb: ClassTools.IsArrayOf(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)()
  name.vb: IsArrayOf(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsDictionary
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsDictionary(System.Object)
  name: IsDictionary()
  nameWithType: ClassTools.IsDictionary()
  fullName: InnerLibs.ClassTools.IsDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Money.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Money},System.Collections.Generic.IEqualityComparer{InnerLibs.Money})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsIn(IEnumerable<Money>, IEqualityComparer<Money>)
  nameWithType: ClassTools.IsIn(IEnumerable<Money>, IEqualityComparer<Money>)
  fullName: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable<InnerLibs.Money>, System.Collections.Generic.IEqualityComparer<InnerLibs.Money>)
  nameWithType.vb: ClassTools.IsIn(IEnumerable(Of Money), IEqualityComparer(Of Money))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable(Of InnerLibs.Money), System.Collections.Generic.IEqualityComparer(Of InnerLibs.Money))
  name.vb: IsIn(IEnumerable(Of Money), IEqualityComparer(Of Money))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Money},System.Collections.Generic.IEqualityComparer{InnerLibs.Money})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Money},System.Collections.Generic.IEqualityComparer{InnerLibs.Money})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Money.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Money.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Money}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Money})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  name: IsInAny(IEnumerable<Money>[], IEqualityComparer<Money>)
  nameWithType: ClassTools.IsInAny(IEnumerable<Money>[], IEqualityComparer<Money>)
  fullName: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable<InnerLibs.Money>[], System.Collections.Generic.IEqualityComparer<InnerLibs.Money>)
  nameWithType.vb: ClassTools.IsInAny(IEnumerable(Of Money)(), IEqualityComparer(Of Money))
  fullName.vb: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable(Of InnerLibs.Money)(), System.Collections.Generic.IEqualityComparer(Of InnerLibs.Money))
  name.vb: IsInAny(IEnumerable(Of Money)(), IEqualityComparer(Of Money))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Money}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Money})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Money}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Money})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsList
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsList(System.Object)
  name: IsList()
  nameWithType: ClassTools.IsList()
  fullName: InnerLibs.ClassTools.IsList()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Money.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Money},System.Collections.Generic.IEqualityComparer{InnerLibs.Money})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsNotIn(IEnumerable<Money>, IEqualityComparer<Money>)
  nameWithType: ClassTools.IsNotIn(IEnumerable<Money>, IEqualityComparer<Money>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable<InnerLibs.Money>, System.Collections.Generic.IEqualityComparer<InnerLibs.Money>)
  nameWithType.vb: ClassTools.IsNotIn(IEnumerable(Of Money), IEqualityComparer(Of Money))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable(Of InnerLibs.Money), System.Collections.Generic.IEqualityComparer(Of InnerLibs.Money))
  name.vb: IsNotIn(IEnumerable(Of Money), IEqualityComparer(Of Money))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Money},System.Collections.Generic.IEqualityComparer{InnerLibs.Money})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Money},System.Collections.Generic.IEqualityComparer{InnerLibs.Money})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Money.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsNotIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsType``1
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsType``1(System.Object)
  name: IsType<T>()
  nameWithType: ClassTools.IsType<T>()
  fullName: InnerLibs.ClassTools.IsType<T>()
  nameWithType.vb: ClassTools.IsType(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)()
  name.vb: IsType(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Money.InnerLibs.ClassTools.NullifyProperties
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties()
  nameWithType: ClassTools.NullifyProperties()
  fullName: InnerLibs.ClassTools.NullifyProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  name: SetPropertyValue<Type>(String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.String, Type)
  name.vb: SetPropertyValue(Of Type)(String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  name: SetPropertyValueFromCollection<Type>(String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  name: ToFlatString(String)
  nameWithType: ClassTools.ToFlatString(String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.DataManipulation.GetDbType
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  parent: InnerLibs.DataManipulation
  definition: InnerLibs.DataManipulation.GetDbType(System.Object)
  name: GetDbType()
  nameWithType: DataManipulation.GetDbType()
  fullName: InnerLibs.DataManipulation.GetDbType()
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Money.InnerLibs.Converter.DefineEmptyList
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList()
  nameWithType: Converter.DefineEmptyList()
  fullName: InnerLibs.Converter.DefineEmptyList()
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Money.InnerLibs.Converter.ChangeType``1
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType>()
  nameWithType: Converter.ChangeType<ToType>()
  fullName: InnerLibs.Converter.ChangeType<ToType>()
  nameWithType.vb: Converter.ChangeType(Of ToType)()
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType)()
  name.vb: ChangeType(Of ToType)()
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType<ToType>
    nameWithType: Converter.ChangeType<ToType>
    fullName: InnerLibs.Converter.ChangeType<ToType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType(Of ToType)
    nameWithType: Converter.ChangeType(Of ToType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.JsonViewer.CreateNode
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  parent: InnerLibs.JsonViewer
  definition: InnerLibs.JsonViewer.CreateNode(System.Object)
  name: CreateNode()
  nameWithType: JsonViewer.CreateNode()
  fullName: InnerLibs.JsonViewer.CreateNode()
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Money.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  parent: InnerLibs.Mathematic
  definition: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  name: IsBetween(Object, Object)
  nameWithType: Mathematic.IsBetween(Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Text.SerializeJSON(System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  parent: InnerLibs.Text
  definition: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  name: SerializeJSON(String)
  nameWithType: Text.SerializeJSON(String)
  fullName: InnerLibs.Text.SerializeJSON(System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Money.InnerLibs.Text.ToExtensiveForm
  commentId: M:InnerLibs.Text.ToExtensiveForm(InnerLibs.Money)
  parent: InnerLibs.Text
  definition: InnerLibs.Text.ToExtensiveForm(InnerLibs.Money)
  name: ToExtensiveForm()
  nameWithType: Text.ToExtensiveForm()
  fullName: InnerLibs.Text.ToExtensiveForm()
  spec.csharp:
  - uid: InnerLibs.Text.ToExtensiveForm
    name: ToExtensiveForm
    nameWithType: Text.ToExtensiveForm
    fullName: InnerLibs.Text.ToExtensiveForm
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.ToExtensiveForm
    name: ToExtensiveForm
    nameWithType: Text.ToExtensiveForm
    fullName: InnerLibs.Text.ToExtensiveForm
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNumber
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNumber(System.Object)
  name: IsNumber()
  nameWithType: Verify.IsNumber()
  fullName: InnerLibs.Verify.IsNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNotNumber
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNotNumber(System.Object)
  name: IsNotNumber()
  nameWithType: Verify.IsNotNumber()
  fullName: InnerLibs.Verify.IsNotNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IfBlank``1({T})
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  name: IfBlank<T>(T)
  nameWithType: Verify.IfBlank<T>(T)
  fullName: InnerLibs.Verify.IfBlank<T>(T)
  nameWithType.vb: Verify.IfBlank(Of T)(T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(T)
  name.vb: IfBlank(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Money.InnerLibs.Verify.NullIf(System.Func{InnerLibs.Money,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  name: NullIf(Func<Money, Boolean>)
  nameWithType: Verify.NullIf(Func<Money, Boolean>)
  fullName: InnerLibs.Verify.NullIf(System.Func<InnerLibs.Money, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Func(Of Money, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(System.Func(Of InnerLibs.Money, System.Boolean))
  name.vb: NullIf(Func(Of Money, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.Money,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.Money,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Money.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  parent: InnerLibs.Web
  definition: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  name: CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax(System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.GetCastedValue
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.GetCastedValue(System.Object)
  name: GetCastedValue()
  nameWithType: WinForms.GetCastedValue()
  fullName: InnerLibs.WinForms.GetCastedValue()
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  name: CastValueForControl(Object)
  nameWithType: WinForms.CastValueForControl(Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary<Type>(Type)
  nameWithType: ClassTools.CreateDictionary<Type>(Type)
  fullName: InnerLibs.ClassTools.CreateDictionary<Type>(Type)
  nameWithType.vb: ClassTools.CreateDictionary(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.CreateDictionary(Of Type)(Type)
  name.vb: CreateDictionary(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary<Type>
    nameWithType: ClassTools.CreateDictionary<Type>
    fullName: InnerLibs.ClassTools.CreateDictionary<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary(Of Type)
    nameWithType: ClassTools.CreateDictionary(Of Type)
    fullName: InnerLibs.ClassTools.CreateDictionary(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools
  commentId: T:InnerLibs.ClassTools
  parent: InnerLibs
  name: ClassTools
  nameWithType: ClassTools
  fullName: InnerLibs.ClassTools
- uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  isExternal: true
  name: GetProperties(Object, BindingFlags)
  nameWithType: ClassTools.GetProperties(Object, BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object, System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetProperties(System.Object)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  isExternal: true
  name: GetProperties(Object)
  nameWithType: ClassTools.GetProperties(Object)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue<Type>(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.Object, System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(Object, String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.Object, System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(Object, String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  isExternal: true
  name: HasProperty(Object, String)
  nameWithType: ClassTools.HasProperty(Object, String)
  fullName: InnerLibs.ClassTools.HasProperty(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  isExternal: true
  name: IsArrayOf<T>(Object)
  nameWithType: ClassTools.IsArrayOf<T>(Object)
  fullName: InnerLibs.ClassTools.IsArrayOf<T>(System.Object)
  nameWithType.vb: ClassTools.IsArrayOf(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)(System.Object)
  name.vb: IsArrayOf(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsDictionary(System.Object)
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  isExternal: true
  name: IsDictionary(Object)
  nameWithType: ClassTools.IsDictionary(Object)
  fullName: InnerLibs.ClassTools.IsDictionary(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  nameWithType: ClassTools.IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsInAny<Type>(Type, System.Collections.Generic.IEnumerable<Type>[], System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsInAny(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type)(), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny<Type>
    nameWithType: ClassTools.IsInAny<Type>
    fullName: InnerLibs.ClassTools.IsInAny<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny(Of Type)
    nameWithType: ClassTools.IsInAny(Of Type)
    fullName: InnerLibs.ClassTools.IsInAny(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsList(System.Object)
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  isExternal: true
  name: IsList(Object)
  nameWithType: ClassTools.IsList(Object)
  fullName: InnerLibs.ClassTools.IsList(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsType``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  isExternal: true
  name: IsType<T>(Object)
  nameWithType: ClassTools.IsType<T>(Object)
  fullName: InnerLibs.ClassTools.IsType<T>(System.Object)
  nameWithType.vb: ClassTools.IsType(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)(System.Object)
  name.vb: IsType(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties<Type>(Type)
  nameWithType: ClassTools.NullifyProperties<Type>(Type)
  fullName: InnerLibs.ClassTools.NullifyProperties<Type>(Type)
  nameWithType.vb: ClassTools.NullifyProperties(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.NullifyProperties(Of Type)(Type)
  name.vb: NullifyProperties(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties<Type>
    nameWithType: ClassTools.NullifyProperties<Type>
    fullName: InnerLibs.ClassTools.NullifyProperties<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties(Of Type)
    nameWithType: ClassTools.NullifyProperties(Of Type)
    fullName: InnerLibs.ClassTools.NullifyProperties(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  isExternal: true
  name: SetPropertyValue<Type>(Object, String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(Object, String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.Object, System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(Object, String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.Object, System.String, Type)
  name.vb: SetPropertyValue(Of Type)(Object, String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  isExternal: true
  name: SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.Object, System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.Object, System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  isExternal: true
  name: ToFlatString(Object, String)
  nameWithType: ClassTools.ToFlatString(Object, String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation.GetDbType(System.Object)
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  isExternal: true
  name: GetDbType(Object)
  nameWithType: DataManipulation.GetDbType(Object)
  fullName: InnerLibs.DataManipulation.GetDbType(System.Object)
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation
  commentId: T:InnerLibs.DataManipulation
  parent: InnerLibs
  name: DataManipulation
  nameWithType: DataManipulation
  fullName: InnerLibs.DataManipulation
- uid: InnerLibs.Converter.DefineEmptyList``1(``0)
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList<T>(T)
  nameWithType: Converter.DefineEmptyList<T>(T)
  fullName: InnerLibs.Converter.DefineEmptyList<T>(T)
  nameWithType.vb: Converter.DefineEmptyList(Of T)(T)
  fullName.vb: InnerLibs.Converter.DefineEmptyList(Of T)(T)
  name.vb: DefineEmptyList(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList<T>
    nameWithType: Converter.DefineEmptyList<T>
    fullName: InnerLibs.Converter.DefineEmptyList<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList(Of T)
    nameWithType: Converter.DefineEmptyList(Of T)
    fullName: InnerLibs.Converter.DefineEmptyList(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Converter
  commentId: T:InnerLibs.Converter
  parent: InnerLibs
  name: Converter
  nameWithType: Converter
  fullName: InnerLibs.Converter
- uid: InnerLibs.Converter.ChangeType``2(``1)
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType, FromType>(FromType)
  nameWithType: Converter.ChangeType<ToType, FromType>(FromType)
  fullName: InnerLibs.Converter.ChangeType<ToType, FromType>(FromType)
  nameWithType.vb: Converter.ChangeType(Of ToType, FromType)(FromType)
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType, FromType)(FromType)
  name.vb: ChangeType(Of ToType, FromType)(FromType)
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType<ToType, FromType>
    nameWithType: Converter.ChangeType<ToType, FromType>
    fullName: InnerLibs.Converter.ChangeType<ToType, FromType>
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType(Of ToType, FromType)
    nameWithType: Converter.ChangeType(Of ToType, FromType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType, FromType)
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer.CreateNode(System.Object)
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  isExternal: true
  name: CreateNode(Object)
  nameWithType: JsonViewer.CreateNode(Object)
  fullName: InnerLibs.JsonViewer.CreateNode(System.Object)
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer
  commentId: T:InnerLibs.JsonViewer
  parent: InnerLibs
  name: JsonViewer
  nameWithType: JsonViewer
  fullName: InnerLibs.JsonViewer
- uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  isExternal: true
  name: IsBetween<Type>(Type, Object, Object)
  nameWithType: Mathematic.IsBetween<Type>(Type, Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween<Type>(Type, System.Object, System.Object)
  nameWithType.vb: Mathematic.IsBetween(Of Type)(Type, Object, Object)
  fullName.vb: InnerLibs.Mathematic.IsBetween(Of Type)(Type, System.Object, System.Object)
  name.vb: IsBetween(Of Type)(Type, Object, Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween<Type>
    nameWithType: Mathematic.IsBetween<Type>
    fullName: InnerLibs.Mathematic.IsBetween<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween(Of Type)
    nameWithType: Mathematic.IsBetween(Of Type)
    fullName: InnerLibs.Mathematic.IsBetween(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic
  commentId: T:InnerLibs.Mathematic
  parent: InnerLibs
  name: Mathematic
  nameWithType: Mathematic
  fullName: InnerLibs.Mathematic
- uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  isExternal: true
  name: SerializeJSON(Object, String)
  nameWithType: Text.SerializeJSON(Object, String)
  fullName: InnerLibs.Text.SerializeJSON(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text
  commentId: T:InnerLibs.Text
  parent: InnerLibs
  name: Text
  nameWithType: Text
  fullName: InnerLibs.Text
- uid: InnerLibs.Text.ToExtensiveForm(InnerLibs.Money)
  commentId: M:InnerLibs.Text.ToExtensiveForm(InnerLibs.Money)
  name: ToExtensiveForm(Money)
  nameWithType: Text.ToExtensiveForm(Money)
  fullName: InnerLibs.Text.ToExtensiveForm(InnerLibs.Money)
  spec.csharp:
  - uid: InnerLibs.Text.ToExtensiveForm(InnerLibs.Money)
    name: ToExtensiveForm
    nameWithType: Text.ToExtensiveForm
    fullName: InnerLibs.Text.ToExtensiveForm
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.ToExtensiveForm(InnerLibs.Money)
    name: ToExtensiveForm
    nameWithType: Text.ToExtensiveForm
    fullName: InnerLibs.Text.ToExtensiveForm
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Money
    name: Money
    nameWithType: Money
    fullName: InnerLibs.Money
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.IsNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  isExternal: true
  name: IsNumber(Object)
  nameWithType: Verify.IsNumber(Object)
  fullName: InnerLibs.Verify.IsNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify
  commentId: T:InnerLibs.Verify
  parent: InnerLibs
  name: Verify
  nameWithType: Verify
  fullName: InnerLibs.Verify
- uid: InnerLibs.Verify.IsNotNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  isExternal: true
  name: IsNotNumber(Object)
  nameWithType: Verify.IsNotNumber(Object)
  fullName: InnerLibs.Verify.IsNotNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  isExternal: true
  name: IfBlank<T>(Object, T)
  nameWithType: Verify.IfBlank<T>(Object, T)
  fullName: InnerLibs.Verify.IfBlank<T>(System.Object, T)
  nameWithType.vb: Verify.IfBlank(Of T)(Object, T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(System.Object, T)
  name.vb: IfBlank(Of T)(Object, T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  isExternal: true
  name: NullIf<T>(T, Func<T, Boolean>)
  nameWithType: Verify.NullIf<T>(T, Func<T, Boolean>)
  fullName: InnerLibs.Verify.NullIf<T>(T, System.Func<T, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Of T)(T, Func(Of T, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, System.Func(Of T, System.Boolean))
  name.vb: NullIf(Of T)(T, Func(Of T, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  isExternal: true
  name: CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax<Type>(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  nameWithType.vb: Web.CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  fullName.vb: InnerLibs.Web.CreateFromAjax(Of Type)(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  name.vb: CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax<Type>
    nameWithType: Web.CreateFromAjax<Type>
    fullName: InnerLibs.Web.CreateFromAjax<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax(Of Type)
    nameWithType: Web.CreateFromAjax(Of Type)
    fullName: InnerLibs.Web.CreateFromAjax(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web
  commentId: T:InnerLibs.Web
  parent: InnerLibs
  name: Web
  nameWithType: Web
  fullName: InnerLibs.Web
- uid: InnerLibs.WinForms.GetCastedValue(System.Object)
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  isExternal: true
  name: GetCastedValue(Object)
  nameWithType: WinForms.GetCastedValue(Object)
  fullName: InnerLibs.WinForms.GetCastedValue(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms
  commentId: T:InnerLibs.WinForms
  parent: InnerLibs
  name: WinForms
  nameWithType: WinForms
  fullName: InnerLibs.WinForms
- uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  isExternal: true
  name: CastValueForControl(Object, Object)
  nameWithType: WinForms.CastValueForControl(Object, Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: InnerLibs.Money.Value*
  commentId: Overload:InnerLibs.Money.Value
  name: Value
  nameWithType: Money.Value
  fullName: InnerLibs.Money.Value
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: InnerLibs.Money.#ctor*
  commentId: Overload:InnerLibs.Money.#ctor
  name: Money
  nameWithType: Money.Money
  fullName: InnerLibs.Money.Money
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: InnerLibs.Money.ConvertCurrency*
  commentId: Overload:InnerLibs.Money.ConvertCurrency
  name: ConvertCurrency
  nameWithType: Money.ConvertCurrency
  fullName: InnerLibs.Money.ConvertCurrency
- uid: InnerLibs.Money
  commentId: T:InnerLibs.Money
  parent: InnerLibs
  name: Money
  nameWithType: Money
  fullName: InnerLibs.Money
- uid: InnerLibs.Money.MoneyString
  commentId: P:InnerLibs.Money.MoneyString
  isExternal: true
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Money.ToString*
  commentId: Overload:InnerLibs.Money.ToString
  name: ToString
  nameWithType: Money.ToString
  fullName: InnerLibs.Money.ToString
- uid: InnerLibs.Money.MoneyString*
  commentId: Overload:InnerLibs.Money.MoneyString
  name: MoneyString
  nameWithType: Money.MoneyString
  fullName: InnerLibs.Money.MoneyString
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: InnerLibs.Money.CurrencySymbol*
  commentId: Overload:InnerLibs.Money.CurrencySymbol
  name: CurrencySymbol
  nameWithType: Money.CurrencySymbol
  fullName: InnerLibs.Money.CurrencySymbol
- uid: InnerLibs.Money.ISOCurrencySymbol*
  commentId: Overload:InnerLibs.Money.ISOCurrencySymbol
  name: ISOCurrencySymbol
  nameWithType: Money.ISOCurrencySymbol
  fullName: InnerLibs.Money.ISOCurrencySymbol
- uid: InnerLibs.Money.GetCultureInfosByCurrencySymbol*
  commentId: Overload:InnerLibs.Money.GetCultureInfosByCurrencySymbol
  name: GetCultureInfosByCurrencySymbol
  nameWithType: Money.GetCultureInfosByCurrencySymbol
  fullName: InnerLibs.Money.GetCultureInfosByCurrencySymbol
- uid: System.Collections.Generic.List{System.Globalization.CultureInfo}
  commentId: T:System.Collections.Generic.List{System.Globalization.CultureInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<CultureInfo>
  nameWithType: List<CultureInfo>
  fullName: System.Collections.Generic.List<System.Globalization.CultureInfo>
  nameWithType.vb: List(Of CultureInfo)
  fullName.vb: System.Collections.Generic.List(Of System.Globalization.CultureInfo)
  name.vb: List(Of CultureInfo)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: InnerLibs.Money.op_Concatenate*
  commentId: Overload:InnerLibs.Money.op_Concatenate
  name: Concatenate
  nameWithType: Money.Concatenate
  fullName: InnerLibs.Money.Concatenate
- uid: InnerLibs.Money.op_OnesComplement*
  commentId: Overload:InnerLibs.Money.op_OnesComplement
  name: OnesComplement
  nameWithType: Money.OnesComplement
  fullName: InnerLibs.Money.OnesComplement
- uid: InnerLibs.Money.op_Addition*
  commentId: Overload:InnerLibs.Money.op_Addition
  name: Addition
  nameWithType: Money.Addition
  fullName: InnerLibs.Money.Addition
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: InnerLibs.Money.op_Subtraction*
  commentId: Overload:InnerLibs.Money.op_Subtraction
  name: Subtraction
  nameWithType: Money.Subtraction
  fullName: InnerLibs.Money.Subtraction
- uid: InnerLibs.Money.op_Multiply*
  commentId: Overload:InnerLibs.Money.op_Multiply
  name: Multiply
  nameWithType: Money.Multiply
  fullName: InnerLibs.Money.Multiply
- uid: InnerLibs.Money.op_Division*
  commentId: Overload:InnerLibs.Money.op_Division
  name: Division
  nameWithType: Money.Division
  fullName: InnerLibs.Money.Division
- uid: InnerLibs.Money.op_Equality*
  commentId: Overload:InnerLibs.Money.op_Equality
  name: Equality
  nameWithType: Money.Equality
  fullName: InnerLibs.Money.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: InnerLibs.Money.op_Inequality*
  commentId: Overload:InnerLibs.Money.op_Inequality
  name: Inequality
  nameWithType: Money.Inequality
  fullName: InnerLibs.Money.Inequality
- uid: InnerLibs.Money.op_GreaterThanOrEqual*
  commentId: Overload:InnerLibs.Money.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: Money.GreaterThanOrEqual
  fullName: InnerLibs.Money.GreaterThanOrEqual
- uid: InnerLibs.Money.op_LessThanOrEqual*
  commentId: Overload:InnerLibs.Money.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: Money.LessThanOrEqual
  fullName: InnerLibs.Money.LessThanOrEqual
- uid: InnerLibs.Money.op_GreaterThan*
  commentId: Overload:InnerLibs.Money.op_GreaterThan
  name: GreaterThan
  nameWithType: Money.GreaterThan
  fullName: InnerLibs.Money.GreaterThan
- uid: InnerLibs.Money.op_LessThan*
  commentId: Overload:InnerLibs.Money.op_LessThan
  name: LessThan
  nameWithType: Money.LessThan
  fullName: InnerLibs.Money.LessThan
- uid: InnerLibs.Money.op_Like*
  commentId: Overload:InnerLibs.Money.op_Like
  name: Like
  nameWithType: Money.Like
  fullName: InnerLibs.Money.Like
- uid: InnerLibs.Money.op_Implicit*
  commentId: Overload:InnerLibs.Money.op_Implicit
  name: Implicit
  nameWithType: Money.Implicit
  fullName: InnerLibs.Money.Implicit
  nameWithType.vb: Money.Widening
  fullName.vb: InnerLibs.Money.Widening
  name.vb: Widening
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
