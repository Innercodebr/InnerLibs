### YamlMime:ManagedReference
items:
- uid: InnerLibs.DataBase
  commentId: T:InnerLibs.DataBase
  id: DataBase
  parent: InnerLibs
  children:
  - InnerLibs.DataBase.#ctor(System.Type,System.String)
  - InnerLibs.DataBase.#ctor(System.Type,System.String,System.IO.DirectoryInfo)
  - InnerLibs.DataBase.#ctor(System.Type,System.String,System.Reflection.Assembly)
  - InnerLibs.DataBase.ApplicationAssembly
  - InnerLibs.DataBase.CommandDirectory
  - InnerLibs.DataBase.ConnectionString
  - InnerLibs.DataBase.ConnectionType
  - InnerLibs.DataBase.Create``1(System.String)
  - InnerLibs.DataBase.Create``1(System.String,System.IO.DirectoryInfo)
  - InnerLibs.DataBase.Create``1(System.String,System.Reflection.Assembly)
  - InnerLibs.DataBase.CreateCommandFromClass``1(System.String,``0)
  - InnerLibs.DataBase.CreateCommandFromDictionary(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  - InnerLibs.DataBase.CreateCommandFromRequest(System.Web.HttpRequest,System.String,System.Data.Common.DbParameter[])
  - InnerLibs.DataBase.CreateInsertCommand(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  - InnerLibs.DataBase.CreateInsertCommandText(System.String,System.String[])
  - InnerLibs.DataBase.CreateParameter(System.String,System.Object)
  - InnerLibs.DataBase.CreateParameter``1(System.String,System.Object)
  - InnerLibs.DataBase.CreateUpdateCommand(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  - InnerLibs.DataBase.CreateUpdateCommandText(System.String,System.String,System.String[])
  - InnerLibs.DataBase.DELETE(System.String,System.String,System.Boolean)
  - InnerLibs.DataBase.GetCommand(System.String)
  - InnerLibs.DataBase.GetSqlFilesList
  - InnerLibs.DataBase.INSERT(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  - InnerLibs.DataBase.INSERTorUPDATE(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  - InnerLibs.DataBase.INSERTorUPDATE(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  - InnerLibs.DataBase.INSERTorUPDATE(System.Web.HttpRequest,System.String,System.String,System.String[])
  - InnerLibs.DataBase.LogFile
  - InnerLibs.DataBase.OpenFile(System.String,System.Data.Common.DbParameter[])
  - InnerLibs.DataBase.RunProcedureForEach(System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String[])
  - InnerLibs.DataBase.RunSQL(System.Data.Common.DbCommand)
  - InnerLibs.DataBase.RunSQL(System.IO.FileInfo)
  - InnerLibs.DataBase.RunSQL(System.String)
  - InnerLibs.DataBase.RunSQL(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  - InnerLibs.DataBase.RunSQL(System.String,System.Data.Common.DbParameter[])
  - InnerLibs.DataBase.RunSQL(System.String,System.String,System.Byte[])
  - InnerLibs.DataBase.RunSQL(System.String,System.String,System.IO.FileInfo)
  - InnerLibs.DataBase.RunSQL(System.String,System.String,System.Web.HttpPostedFile)
  - InnerLibs.DataBase.RunSQL(System.Web.HttpPostedFile)
  - InnerLibs.DataBase.SELECT(System.String,System.String,System.String[])
  - InnerLibs.DataBase.SelectAndFill(System.String,System.String,System.Web.UI.HtmlControls.HtmlControl[])
  - InnerLibs.DataBase.SelectAndFill(System.String,System.String,System.Windows.Forms.Control[])
  - InnerLibs.DataBase.UPDATE(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  langs:
  - csharp
  - vb
  name: DataBase
  nameWithType: DataBase
  fullName: InnerLibs.DataBase
  type: Class
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: DataBase
    path: Databases.vb
    startLine: 13
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public sealed class DataBase
    content.vb: Public NotInheritable Class DataBase
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.Finalize
  - System.Object.MemberwiseClone
  extensionMethods:
  - InnerLibs.DataBase.InnerLibs.ClassTools.CreateDictionary
  - System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  - System.Object.InnerLibs.ClassTools.GetProperties
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  - System.Object.InnerLibs.ClassTools.IsArrayOf``1
  - System.Object.InnerLibs.ClassTools.IsDictionary
  - InnerLibs.DataBase.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase})
  - InnerLibs.DataBase.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - InnerLibs.DataBase.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.DataBase}[],System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase})
  - System.Object.InnerLibs.ClassTools.IsList
  - InnerLibs.DataBase.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase})
  - InnerLibs.DataBase.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - System.Object.InnerLibs.ClassTools.IsType``1
  - InnerLibs.DataBase.InnerLibs.ClassTools.NullCoalesce(InnerLibs.DataBase[])
  - InnerLibs.DataBase.InnerLibs.ClassTools.NullifyProperties
  - System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  - System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  - System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  - System.Object.InnerLibs.DataManipulation.GetDbType
  - InnerLibs.DataBase.InnerLibs.Converter.DefineEmptyList
  - InnerLibs.DataBase.InnerLibs.Converter.ChangeType``1
  - System.Object.InnerLibs.JsonViewer.CreateNode
  - InnerLibs.DataBase.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  - System.Object.InnerLibs.Text.SerializeJSON(System.String)
  - System.Object.InnerLibs.Verify.IsNumber
  - System.Object.InnerLibs.Verify.IsNotNumber
  - System.Object.InnerLibs.Verify.IfBlank``1({T})
  - InnerLibs.DataBase.InnerLibs.Verify.NullIf(System.Func{InnerLibs.DataBase,System.Boolean})
  - InnerLibs.DataBase.InnerLibs.Verify.NullIf(InnerLibs.DataBase)
  - InnerLibs.DataBase.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  - InnerLibs.DataBase.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.DataBase,{TextType}},System.Func{InnerLibs.DataBase,{ValueType}})
  - System.Object.InnerLibs.WinForms.GetCastedValue
  - System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  - InnerLibs.DataBase.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  - InnerLibs.DataBase.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.DataBase,System.Func{InnerLibs.DataBase,System.Object}[])
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: InnerLibs.DataBase.CreateParameter``1(System.String,System.Object)
  commentId: M:InnerLibs.DataBase.CreateParameter``1(System.String,System.Object)
  id: CreateParameter``1(System.String,System.Object)
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: CreateParameter<Type>(String, Object)
  nameWithType: DataBase.CreateParameter<Type>(String, Object)
  fullName: InnerLibs.DataBase.CreateParameter<Type>(System.String, System.Object)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: CreateParameter
    path: Databases.vb
    startLine: 22
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um parametro de Query SQL a partir de uma variavel convertida para um tipo especifico\n"
  example: []
  syntax:
    content: public DbParameter CreateParameter<Type>(string Name, object Value)
    parameters:
    - id: Name
      type: System.String
      description: Nome do Parametro
    - id: Value
      type: System.Object
      description: Valor do Parametro
    typeParameters:
    - id: Type
      description: Tipo
    return:
      type: System.Data.Common.DbParameter
      description: ''
    content.vb: Public Function CreateParameter(Of Type)(Name As String, Value As Object) As DbParameter
  overload: InnerLibs.DataBase.CreateParameter*
  nameWithType.vb: DataBase.CreateParameter(Of Type)(String, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.CreateParameter(Of Type)(System.String, System.Object)
  name.vb: CreateParameter(Of Type)(String, Object)
- uid: InnerLibs.DataBase.CreateInsertCommand(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:InnerLibs.DataBase.CreateInsertCommand(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: CreateInsertCommand(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: CreateInsertCommand(String, IDictionary<String, Object>)
  nameWithType: DataBase.CreateInsertCommand(String, IDictionary<String, Object>)
  fullName: InnerLibs.DataBase.CreateInsertCommand(System.String, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: CreateInsertCommand
    path: Databases.vb
    startLine: 32
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um comando de INSERT baseado em um <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public DbCommand CreateInsertCommand(string TableName, IDictionary<string, object> Dic)
    parameters:
    - id: TableName
      type: System.String
      description: Nome da Tabela
    - id: Dic
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: Dicionario contendo os Valores
    return:
      type: System.Data.Common.DbCommand
      description: ''
    content.vb: Public Function CreateInsertCommand(TableName As String, Dic As IDictionary(Of String, Object)) As DbCommand
  overload: InnerLibs.DataBase.CreateInsertCommand*
  nameWithType.vb: DataBase.CreateInsertCommand(String, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.CreateInsertCommand(System.String, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: CreateInsertCommand(String, IDictionary(Of String, Object))
- uid: InnerLibs.DataBase.CreateInsertCommandText(System.String,System.String[])
  commentId: M:InnerLibs.DataBase.CreateInsertCommandText(System.String,System.String[])
  id: CreateInsertCommandText(System.String,System.String[])
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: CreateInsertCommandText(String, String[])
  nameWithType: DataBase.CreateInsertCommandText(String, String[])
  fullName: InnerLibs.DataBase.CreateInsertCommandText(System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: CreateInsertCommandText
    path: Databases.vb
    startLine: 42
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um comando de INSERT\n"
  example: []
  syntax:
    content: public string CreateInsertCommandText(string TableName, params string[] Columns)
    parameters:
    - id: TableName
      type: System.String
      description: Nome da Tabela
    - id: Columns
      type: System.String[]
      description: Colunas do INSERT
    return:
      type: System.String
      description: ''
    content.vb: Public Function CreateInsertCommandText(TableName As String, ParamArray Columns As String()) As String
  overload: InnerLibs.DataBase.CreateInsertCommandText*
  nameWithType.vb: DataBase.CreateInsertCommandText(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.CreateInsertCommandText(System.String, System.String())
  name.vb: CreateInsertCommandText(String, String())
- uid: InnerLibs.DataBase.CreateUpdateCommand(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:InnerLibs.DataBase.CreateUpdateCommand(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: CreateUpdateCommand(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: CreateUpdateCommand(String, String, IDictionary<String, Object>)
  nameWithType: DataBase.CreateUpdateCommand(String, String, IDictionary<String, Object>)
  fullName: InnerLibs.DataBase.CreateUpdateCommand(System.String, System.String, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: CreateUpdateCommand
    path: Databases.vb
    startLine: 52
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um comando de UPDATE baseado em um <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public DbCommand CreateUpdateCommand(string TableName, string WhereClausule, IDictionary<string, object> Dic)
    parameters:
    - id: TableName
      type: System.String
      description: Nome da Tabela
    - id: WhereClausule
      type: System.String
    - id: Dic
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: Dicionario contendo os Valores
    return:
      type: System.Data.Common.DbCommand
      description: ''
    content.vb: Public Function CreateUpdateCommand(TableName As String, WhereClausule As String, Dic As IDictionary(Of String, Object)) As DbCommand
  overload: InnerLibs.DataBase.CreateUpdateCommand*
  nameWithType.vb: DataBase.CreateUpdateCommand(String, String, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.CreateUpdateCommand(System.String, System.String, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: CreateUpdateCommand(String, String, IDictionary(Of String, Object))
- uid: InnerLibs.DataBase.CreateUpdateCommandText(System.String,System.String,System.String[])
  commentId: M:InnerLibs.DataBase.CreateUpdateCommandText(System.String,System.String,System.String[])
  id: CreateUpdateCommandText(System.String,System.String,System.String[])
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: CreateUpdateCommandText(String, String, String[])
  nameWithType: DataBase.CreateUpdateCommandText(String, String, String[])
  fullName: InnerLibs.DataBase.CreateUpdateCommandText(System.String, System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: CreateUpdateCommandText
    path: Databases.vb
    startLine: 62
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um comando de UPDATE\n"
  example: []
  syntax:
    content: public string CreateUpdateCommandText(string TableName, string WhereClausule, params string[] Columns)
    parameters:
    - id: TableName
      type: System.String
      description: Nome da Tabela
    - id: WhereClausule
      type: System.String
    - id: Columns
      type: System.String[]
      description: Colunas do INSERT
    return:
      type: System.String
      description: ''
    content.vb: Public Function CreateUpdateCommandText(TableName As String, WhereClausule As String, ParamArray Columns As String()) As String
  overload: InnerLibs.DataBase.CreateUpdateCommandText*
  nameWithType.vb: DataBase.CreateUpdateCommandText(String, String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.CreateUpdateCommandText(System.String, System.String, System.String())
  name.vb: CreateUpdateCommandText(String, String, String())
- uid: InnerLibs.DataBase.INSERTorUPDATE(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:InnerLibs.DataBase.INSERTorUPDATE(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: INSERTorUPDATE(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: INSERTorUPDATE(String, String, IDictionary<String, Object>)
  nameWithType: DataBase.INSERTorUPDATE(String, String, IDictionary<String, Object>)
  fullName: InnerLibs.DataBase.INSERTorUPDATE(System.String, System.String, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: INSERTorUPDATE
    path: Databases.vb
    startLine: 78
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nFaz um INSERT out UPDATE no banco de dados de acordo com o valor da coluna de chave primária especificado em um <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public string INSERTorUPDATE(string TableName, string PrimaryKeyColumn, IDictionary<string, object> Dic)
    parameters:
    - id: TableName
      type: System.String
      description: Nome da Tabela
    - id: PrimaryKeyColumn
      type: System.String
      description: 'Nome da coluna de chave primária (Ela deve estar dentro do <xref href="System.Collections.IDictionary" data-throw-if-not-resolved="false"></xref> especificado no parametro <code data-dev-comment-type="paramref" class="paramref">Dic</code>, caso contrário será processado como INSERT '
    - id: Dic
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: Dicionário contendo os valores
    return:
      type: System.String
      description: ''
    content.vb: Public Function INSERTorUPDATE(TableName As String, PrimaryKeyColumn As String, Dic As IDictionary(Of String, Object)) As String
  overload: InnerLibs.DataBase.INSERTorUPDATE*
  nameWithType.vb: DataBase.INSERTorUPDATE(String, String, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.INSERTorUPDATE(System.String, System.String, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: INSERTorUPDATE(String, String, IDictionary(Of String, Object))
- uid: InnerLibs.DataBase.INSERTorUPDATE(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  commentId: M:InnerLibs.DataBase.INSERTorUPDATE(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  id: INSERTorUPDATE(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: INSERTorUPDATE(String, String, NameValueCollection)
  nameWithType: DataBase.INSERTorUPDATE(String, String, NameValueCollection)
  fullName: InnerLibs.DataBase.INSERTorUPDATE(System.String, System.String, System.Collections.Specialized.NameValueCollection)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: INSERTorUPDATE
    path: Databases.vb
    startLine: 90
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nFaz um INSERT out UPDATE no banco de dados de acordo com o valor da coluna de chave primária especificado em um <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public string INSERTorUPDATE(string TableName, string PrimaryKeyColumn, NameValueCollection Columns)
    parameters:
    - id: TableName
      type: System.String
    - id: PrimaryKeyColumn
      type: System.String
    - id: Columns
      type: System.Collections.Specialized.NameValueCollection
    return:
      type: System.String
    content.vb: Public Function INSERTorUPDATE(TableName As String, PrimaryKeyColumn As String, Columns As NameValueCollection) As String
  overload: InnerLibs.DataBase.INSERTorUPDATE*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.INSERTorUPDATE(System.Web.HttpRequest,System.String,System.String,System.String[])
  commentId: M:InnerLibs.DataBase.INSERTorUPDATE(System.Web.HttpRequest,System.String,System.String,System.String[])
  id: INSERTorUPDATE(System.Web.HttpRequest,System.String,System.String,System.String[])
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: INSERTorUPDATE(HttpRequest, String, String, String[])
  nameWithType: DataBase.INSERTorUPDATE(HttpRequest, String, String, String[])
  fullName: InnerLibs.DataBase.INSERTorUPDATE(System.Web.HttpRequest, System.String, System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: INSERTorUPDATE
    path: Databases.vb
    startLine: 96
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nFaz um INSERT out UPDATE no banco de dados de acordo com o valor da coluna de chave primária especificado em um <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public string INSERTorUPDATE(HttpRequest Request, string TableName, string PrimaryKeyColumn, params string[] Columns)
    parameters:
    - id: Request
      type: System.Web.HttpRequest
    - id: TableName
      type: System.String
    - id: PrimaryKeyColumn
      type: System.String
    - id: Columns
      type: System.String[]
    return:
      type: System.String
    content.vb: Public Function INSERTorUPDATE(Request As HttpRequest, TableName As String, PrimaryKeyColumn As String, ParamArray Columns As String()) As String
  overload: InnerLibs.DataBase.INSERTorUPDATE*
  nameWithType.vb: DataBase.INSERTorUPDATE(HttpRequest, String, String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.INSERTorUPDATE(System.Web.HttpRequest, System.String, System.String, System.String())
  name.vb: INSERTorUPDATE(HttpRequest, String, String, String())
- uid: InnerLibs.DataBase.UPDATE(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:InnerLibs.DataBase.UPDATE(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: UPDATE(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: UPDATE(String, String, IDictionary<String, Object>)
  nameWithType: DataBase.UPDATE(String, String, IDictionary<String, Object>)
  fullName: InnerLibs.DataBase.UPDATE(System.String, System.String, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: UPDATE
    path: Databases.vb
    startLine: 112
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nFaz um UPDATE no banco de dados de acordo com um <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public DataBase.Reader UPDATE(string TableName, string WhereClausule, IDictionary<string, object> Dic)
    parameters:
    - id: TableName
      type: System.String
      description: Nome da Tabela
    - id: WhereClausule
      type: System.String
      description: Clausula WHERE, condiçoes para realizar o UPDATE
    - id: Dic
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: Dicionário contendo os valores
    return:
      type: InnerLibs.DataBase.Reader
      description: ''
    content.vb: Public Function UPDATE(TableName As String, WhereClausule As String, Dic As IDictionary(Of String, Object)) As DataBase.Reader
  overload: InnerLibs.DataBase.UPDATE*
  nameWithType.vb: DataBase.UPDATE(String, String, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.UPDATE(System.String, System.String, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: UPDATE(String, String, IDictionary(Of String, Object))
- uid: InnerLibs.DataBase.INSERT(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:InnerLibs.DataBase.INSERT(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: INSERT(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: INSERT(String, IDictionary<String, Object>)
  nameWithType: DataBase.INSERT(String, IDictionary<String, Object>)
  fullName: InnerLibs.DataBase.INSERT(System.String, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: INSERT
    path: Databases.vb
    startLine: 122
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nFaz um INSERT no banco de dados de acordo com um  <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public DataBase.Reader INSERT(string TableName, IDictionary<string, object> Dic)
    parameters:
    - id: TableName
      type: System.String
      description: Nome da Tabela
    - id: Dic
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: Dicionário contendo os valores
    return:
      type: InnerLibs.DataBase.Reader
      description: ''
    content.vb: Public Function INSERT(TableName As String, Dic As IDictionary(Of String, Object)) As DataBase.Reader
  overload: InnerLibs.DataBase.INSERT*
  nameWithType.vb: DataBase.INSERT(String, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.INSERT(System.String, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: INSERT(String, IDictionary(Of String, Object))
- uid: InnerLibs.DataBase.CreateParameter(System.String,System.Object)
  commentId: M:InnerLibs.DataBase.CreateParameter(System.String,System.Object)
  id: CreateParameter(System.String,System.Object)
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: CreateParameter(String, Object)
  nameWithType: DataBase.CreateParameter(String, Object)
  fullName: InnerLibs.DataBase.CreateParameter(System.String, System.Object)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: CreateParameter
    path: Databases.vb
    startLine: 132
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um parametro de Query SQL a partir de uma variavel\n"
  example: []
  syntax:
    content: public DbParameter CreateParameter(string Name, object Value)
    parameters:
    - id: Name
      type: System.String
      description: Nome do Parametro
    - id: Value
      type: System.Object
      description: Valor do Parametro
    return:
      type: System.Data.Common.DbParameter
      description: ''
    content.vb: Public Function CreateParameter(Name As String, Value As Object) As DbParameter
  overload: InnerLibs.DataBase.CreateParameter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.GetSqlFilesList
  commentId: M:InnerLibs.DataBase.GetSqlFilesList
  id: GetSqlFilesList
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: GetSqlFilesList()
  nameWithType: DataBase.GetSqlFilesList()
  fullName: InnerLibs.DataBase.GetSqlFilesList()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: GetSqlFilesList
    path: Databases.vb
    startLine: 190
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna a lista de arquivos SQL disponiveis\n"
  example: []
  syntax:
    content: public List<string> GetSqlFilesList()
    return:
      type: System.Collections.Generic.List{System.String}
      description: ''
    content.vb: Public Function GetSqlFilesList As List(Of String)
  overload: InnerLibs.DataBase.GetSqlFilesList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.GetCommand(System.String)
  commentId: M:InnerLibs.DataBase.GetCommand(System.String)
  id: GetCommand(System.String)
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: GetCommand(String)
  nameWithType: DataBase.GetCommand(String)
  fullName: InnerLibs.DataBase.GetCommand(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: GetCommand
    path: Databases.vb
    startLine: 214
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nPega o comando SQL de um arquivo ou resource\n"
  example: []
  syntax:
    content: public string GetCommand(string CommandFile)
    parameters:
    - id: CommandFile
      type: System.String
      description: Nome do arquivo ou resource
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetCommand(CommandFile As String) As String
  overload: InnerLibs.DataBase.GetCommand*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.OpenFile(System.String,System.Data.Common.DbParameter[])
  commentId: M:InnerLibs.DataBase.OpenFile(System.String,System.Data.Common.DbParameter[])
  id: OpenFile(System.String,System.Data.Common.DbParameter[])
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: OpenFile(String, DbParameter[])
  nameWithType: DataBase.OpenFile(String, DbParameter[])
  fullName: InnerLibs.DataBase.OpenFile(System.String, System.Data.Common.DbParameter[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: OpenFile
    path: Databases.vb
    startLine: 240
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nExecuta o comando de um arquivo SQL configurado\n"
  example: []
  syntax:
    content: public DataBase.Reader OpenFile(string CommandFile, params DbParameter[] Parameters)
    parameters:
    - id: CommandFile
      type: System.String
      description: Nome do arquivo SQL
    - id: Parameters
      type: System.Data.Common.DbParameter[]
      description: Parametros do comando SQL
    return:
      type: InnerLibs.DataBase.Reader
      description: ''
    content.vb: Public Function OpenFile(CommandFile As String, ParamArray Parameters As DbParameter()) As DataBase.Reader
  overload: InnerLibs.DataBase.OpenFile*
  nameWithType.vb: DataBase.OpenFile(String, DbParameter())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.OpenFile(System.String, System.Data.Common.DbParameter())
  name.vb: OpenFile(String, DbParameter())
- uid: InnerLibs.DataBase.ApplicationAssembly
  commentId: P:InnerLibs.DataBase.ApplicationAssembly
  id: ApplicationAssembly
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: ApplicationAssembly
  nameWithType: DataBase.ApplicationAssembly
  fullName: InnerLibs.DataBase.ApplicationAssembly
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: ApplicationAssembly
    path: Databases.vb
    startLine: 248
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAssembly da aplicação que contém os arquivos SQL\n"
  example: []
  syntax:
    content: public Assembly ApplicationAssembly { get; set; }
    parameters: []
    return:
      type: System.Reflection.Assembly
      description: ''
    content.vb: Public Property ApplicationAssembly As Assembly
  overload: InnerLibs.DataBase.ApplicationAssembly*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.CommandDirectory
  commentId: P:InnerLibs.DataBase.CommandDirectory
  id: CommandDirectory
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: CommandDirectory
  nameWithType: DataBase.CommandDirectory
  fullName: InnerLibs.DataBase.CommandDirectory
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: CommandDirectory
    path: Databases.vb
    startLine: 254
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nDiretório que contém os arquivos SQL\n"
  example: []
  syntax:
    content: public DirectoryInfo CommandDirectory { get; set; }
    parameters: []
    return:
      type: System.IO.DirectoryInfo
      description: ''
    content.vb: Public Property CommandDirectory As DirectoryInfo
  overload: InnerLibs.DataBase.CommandDirectory*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.ConnectionString
  commentId: P:InnerLibs.DataBase.ConnectionString
  id: ConnectionString
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: ConnectionString
  nameWithType: DataBase.ConnectionString
  fullName: InnerLibs.DataBase.ConnectionString
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: ConnectionString
    path: Databases.vb
    startLine: 260
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nConexão genérica (Oracle, MySQL, SQLServer etc.)\n"
  example: []
  syntax:
    content: public string ConnectionString { get; set; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public Property ConnectionString As String
  overload: InnerLibs.DataBase.ConnectionString*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.ConnectionType
  commentId: P:InnerLibs.DataBase.ConnectionType
  id: ConnectionType
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: ConnectionType
  nameWithType: DataBase.ConnectionType
  fullName: InnerLibs.DataBase.ConnectionType
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: ConnectionType
    path: Databases.vb
    startLine: 266
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTipo da conexão\n"
  example: []
  syntax:
    content: public Type ConnectionType { get; set; }
    parameters: []
    return:
      type: System.Type
      description: ''
    content.vb: Public Property ConnectionType As Type
  overload: InnerLibs.DataBase.ConnectionType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.LogFile
  commentId: P:InnerLibs.DataBase.LogFile
  id: LogFile
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: LogFile
  nameWithType: DataBase.LogFile
  fullName: InnerLibs.DataBase.LogFile
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: LogFile
    path: Databases.vb
    startLine: 272
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nArquivo onde serão salvos os logs\n"
  example: []
  syntax:
    content: public FileInfo LogFile { get; set; }
    parameters: []
    return:
      type: System.IO.FileInfo
      description: ''
    content.vb: Public Property LogFile As FileInfo
  overload: InnerLibs.DataBase.LogFile*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.#ctor(System.Type,System.String)
  commentId: M:InnerLibs.DataBase.#ctor(System.Type,System.String)
  id: '#ctor(System.Type,System.String)'
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: DataBase(Type, String)
  nameWithType: DataBase.DataBase(Type, String)
  fullName: InnerLibs.DataBase.DataBase(System.Type, System.String)
  type: Constructor
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: .ctor
    path: Databases.vb
    startLine: 292
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria uma nova instancia de Banco de Dados baseada em uma ConnectionString e em um Tipo de Conexão\n"
  example: []
  syntax:
    content: public DataBase(Type Type, string ConnectionString)
    parameters:
    - id: Type
      type: System.Type
      description: Tipo de conexão com o banco
    - id: ConnectionString
      type: System.String
      description: String de conexão com o banco
    content.vb: Public Sub New(Type As Type, ConnectionString As String)
  overload: InnerLibs.DataBase.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.#ctor(System.Type,System.String,System.IO.DirectoryInfo)
  commentId: M:InnerLibs.DataBase.#ctor(System.Type,System.String,System.IO.DirectoryInfo)
  id: '#ctor(System.Type,System.String,System.IO.DirectoryInfo)'
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: DataBase(Type, String, DirectoryInfo)
  nameWithType: DataBase.DataBase(Type, String, DirectoryInfo)
  fullName: InnerLibs.DataBase.DataBase(System.Type, System.String, System.IO.DirectoryInfo)
  type: Constructor
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: .ctor
    path: Databases.vb
    startLine: 304
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria uma nova instancia de Banco de Dados baseada em uma ConnectionString, um diretório de\narquivos SQL e em um Tipo de Conexão\n"
  example: []
  syntax:
    content: public DataBase(Type Type, string ConnectionString, DirectoryInfo CommandDirectory)
    parameters:
    - id: Type
      type: System.Type
      description: Tipo de Conexão
    - id: ConnectionString
      type: System.String
      description: String de conexão com o banco
    - id: CommandDirectory
      type: System.IO.DirectoryInfo
      description: Diretorio de arquivos SQL
    content.vb: Public Sub New(Type As Type, ConnectionString As String, CommandDirectory As DirectoryInfo)
  overload: InnerLibs.DataBase.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.#ctor(System.Type,System.String,System.Reflection.Assembly)
  commentId: M:InnerLibs.DataBase.#ctor(System.Type,System.String,System.Reflection.Assembly)
  id: '#ctor(System.Type,System.String,System.Reflection.Assembly)'
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: DataBase(Type, String, Assembly)
  nameWithType: DataBase.DataBase(Type, String, Assembly)
  fullName: InnerLibs.DataBase.DataBase(System.Type, System.String, System.Reflection.Assembly)
  type: Constructor
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: .ctor
    path: Databases.vb
    startLine: 317
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria uma nova instancia de Banco de Dados baseada em uma ConnectionString, Resources de\narquivos SQL e em um Tipo de Conexão\n"
  example: []
  syntax:
    content: public DataBase(Type Type, string ConnectionString, Assembly ApplicationAssembly)
    parameters:
    - id: Type
      type: System.Type
      description: Tipo de Conexão
    - id: ConnectionString
      type: System.String
      description: String de conexão com o banco
    - id: ApplicationAssembly
      type: System.Reflection.Assembly
      description: Assembly contendo os arquivos SQL
    content.vb: Public Sub New(Type As Type, ConnectionString As String, ApplicationAssembly As Assembly)
  overload: InnerLibs.DataBase.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.Create``1(System.String)
  commentId: M:InnerLibs.DataBase.Create``1(System.String)
  id: Create``1(System.String)
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: Create<Connectiontype>(String)
  nameWithType: DataBase.Create<Connectiontype>(String)
  fullName: InnerLibs.DataBase.Create<Connectiontype>(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: Create
    path: Databases.vb
    startLine: 334
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria uma nova instancia de Banco de Dados baseada em uma ConnectionString e em um Tipo de Conexão\n"
  example: []
  syntax:
    content: >-
      public static DataBase Create<Connectiontype>(string ConnectionString)
          where Connectiontype : DbConnection
    parameters:
    - id: ConnectionString
      type: System.String
      description: String de conexão com o banco
    typeParameters:
    - id: Connectiontype
    return:
      type: InnerLibs.DataBase
    content.vb: Public Shared Function Create(Of Connectiontype As DbConnection)(ConnectionString As String) As DataBase
  overload: InnerLibs.DataBase.Create*
  nameWithType.vb: DataBase.Create(Of Connectiontype)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.DataBase.Create(Of Connectiontype)(System.String)
  name.vb: Create(Of Connectiontype)(String)
- uid: InnerLibs.DataBase.Create``1(System.String,System.IO.DirectoryInfo)
  commentId: M:InnerLibs.DataBase.Create``1(System.String,System.IO.DirectoryInfo)
  id: Create``1(System.String,System.IO.DirectoryInfo)
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: Create<Connectiontype>(String, DirectoryInfo)
  nameWithType: DataBase.Create<Connectiontype>(String, DirectoryInfo)
  fullName: InnerLibs.DataBase.Create<Connectiontype>(System.String, System.IO.DirectoryInfo)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: Create
    path: Databases.vb
    startLine: 345
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria uma nova instancia de Banco de Dados baseada em uma ConnectionString, um diretório de\narquivos SQL e em um Tipo de Conexão\n"
  example: []
  syntax:
    content: >-
      public static DataBase Create<Connectiontype>(string ConnectionString, DirectoryInfo CommandDirectory)
          where Connectiontype : DbConnection
    parameters:
    - id: ConnectionString
      type: System.String
      description: String de conexão com o banco
    - id: CommandDirectory
      type: System.IO.DirectoryInfo
      description: Diretório onde estão guardados os arquivos SQL
    typeParameters:
    - id: Connectiontype
    return:
      type: InnerLibs.DataBase
    content.vb: Public Shared Function Create(Of Connectiontype As DbConnection)(ConnectionString As String, CommandDirectory As DirectoryInfo) As DataBase
  overload: InnerLibs.DataBase.Create*
  nameWithType.vb: DataBase.Create(Of Connectiontype)(String, DirectoryInfo)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.DataBase.Create(Of Connectiontype)(System.String, System.IO.DirectoryInfo)
  name.vb: Create(Of Connectiontype)(String, DirectoryInfo)
- uid: InnerLibs.DataBase.Create``1(System.String,System.Reflection.Assembly)
  commentId: M:InnerLibs.DataBase.Create``1(System.String,System.Reflection.Assembly)
  id: Create``1(System.String,System.Reflection.Assembly)
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: Create<Connectiontype>(String, Assembly)
  nameWithType: DataBase.Create<Connectiontype>(String, Assembly)
  fullName: InnerLibs.DataBase.Create<Connectiontype>(System.String, System.Reflection.Assembly)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: Create
    path: Databases.vb
    startLine: 356
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria uma nova instancia de Banco de Dados baseada em uma ConnectionString, Resources de\narquivos SQL e em um Tipo de Conexão\n"
  example: []
  syntax:
    content: >-
      public static DataBase Create<Connectiontype>(string ConnectionString, Assembly ApplicationAssembly)
          where Connectiontype : DbConnection
    parameters:
    - id: ConnectionString
      type: System.String
      description: String de conexão com o banco
    - id: ApplicationAssembly
      type: System.Reflection.Assembly
      description: Diretório onde estão guardados os arquivos SQL
    typeParameters:
    - id: Connectiontype
    return:
      type: InnerLibs.DataBase
    content.vb: Public Shared Function Create(Of Connectiontype As DbConnection)(ConnectionString As String, ApplicationAssembly As Assembly) As DataBase
  overload: InnerLibs.DataBase.Create*
  nameWithType.vb: DataBase.Create(Of Connectiontype)(String, Assembly)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.DataBase.Create(Of Connectiontype)(System.String, System.Reflection.Assembly)
  name.vb: Create(Of Connectiontype)(String, Assembly)
- uid: InnerLibs.DataBase.RunSQL(System.String)
  commentId: M:InnerLibs.DataBase.RunSQL(System.String)
  id: RunSQL(System.String)
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: RunSQL(String)
  nameWithType: DataBase.RunSQL(String)
  fullName: InnerLibs.DataBase.RunSQL(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: RunSQL
    path: Databases.vb
    startLine: 366
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nExecuta uma Query no banco. Recomenda-se o uso de procedures.\n"
  example: []
  syntax:
    content: public DataBase.Reader RunSQL(string SQLQuery)
    parameters:
    - id: SQLQuery
      type: System.String
      description: Comando SQL a ser executado
    return:
      type: InnerLibs.DataBase.Reader
      description: Um <xref href="InnerLibs.DataBase.Reader" data-throw-if-not-resolved="false"></xref> com as informações da consulta
    content.vb: Public Function RunSQL(SQLQuery As String) As DataBase.Reader
  overload: InnerLibs.DataBase.RunSQL*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.RunSQL(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:InnerLibs.DataBase.RunSQL(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: RunSQL(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: RunSQL(String, IDictionary<String, Object>)
  nameWithType: DataBase.RunSQL(String, IDictionary<String, Object>)
  fullName: InnerLibs.DataBase.RunSQL(System.String, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: RunSQL
    path: Databases.vb
    startLine: 386
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nExecuta uma Query no banco criando um comando a partir de um <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public DataBase.Reader RunSQL(string SQLQuery, IDictionary<string, object> Values)
    parameters:
    - id: SQLQuery
      type: System.String
      description: Comando SQL
    - id: Values
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: Dicionario contendo os valores
    return:
      type: InnerLibs.DataBase.Reader
      description: ''
    content.vb: Public Function RunSQL(SQLQuery As String, Values As IDictionary(Of String, Object)) As DataBase.Reader
  overload: InnerLibs.DataBase.RunSQL*
  nameWithType.vb: DataBase.RunSQL(String, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.RunSQL(System.String, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: RunSQL(String, IDictionary(Of String, Object))
- uid: InnerLibs.DataBase.RunSQL(System.IO.FileInfo)
  commentId: M:InnerLibs.DataBase.RunSQL(System.IO.FileInfo)
  id: RunSQL(System.IO.FileInfo)
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: RunSQL(FileInfo)
  nameWithType: DataBase.RunSQL(FileInfo)
  fullName: InnerLibs.DataBase.RunSQL(System.IO.FileInfo)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: RunSQL
    path: Databases.vb
    startLine: 395
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nExecuta uma Query no banco partir de um Arquivo.\n"
  example: []
  syntax:
    content: public DataBase.Reader RunSQL(FileInfo File)
    parameters:
    - id: File
      type: System.IO.FileInfo
      description: Arquivo com o comando SQL a ser executado
    return:
      type: InnerLibs.DataBase.Reader
      description: Um <xref href="InnerLibs.DataBase.Reader" data-throw-if-not-resolved="false"></xref> com as informações da consulta
    content.vb: Public Function RunSQL(File As FileInfo) As DataBase.Reader
  overload: InnerLibs.DataBase.RunSQL*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.RunSQL(System.Web.HttpPostedFile)
  commentId: M:InnerLibs.DataBase.RunSQL(System.Web.HttpPostedFile)
  id: RunSQL(System.Web.HttpPostedFile)
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: RunSQL(HttpPostedFile)
  nameWithType: DataBase.RunSQL(HttpPostedFile)
  fullName: InnerLibs.DataBase.RunSQL(System.Web.HttpPostedFile)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: RunSQL
    path: Databases.vb
    startLine: 406
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nExecuta uma Query no banco partir de um Arquivo.\n"
  example: []
  syntax:
    content: public DataBase.Reader RunSQL(HttpPostedFile File)
    parameters:
    - id: File
      type: System.Web.HttpPostedFile
      description: Arquivo com o comando SQL a ser executado
    return:
      type: InnerLibs.DataBase.Reader
      description: Um <xref href="InnerLibs.DataBase.Reader" data-throw-if-not-resolved="false"></xref> com as informações da consulta
    content.vb: Public Function RunSQL(File As HttpPostedFile) As DataBase.Reader
  overload: InnerLibs.DataBase.RunSQL*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.RunSQL(System.String,System.String,System.Byte[])
  commentId: M:InnerLibs.DataBase.RunSQL(System.String,System.String,System.Byte[])
  id: RunSQL(System.String,System.String,System.Byte[])
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: RunSQL(String, String, Byte[])
  nameWithType: DataBase.RunSQL(String, String, Byte[])
  fullName: InnerLibs.DataBase.RunSQL(System.String, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: RunSQL
    path: Databases.vb
    startLine: 419
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nExecuta uma Query no banco com upload de arquivos.\n"
  example: []
  syntax:
    content: public DataBase.Reader RunSQL(string SQLQuery, string FileParameter, byte[] File)
    parameters:
    - id: SQLQuery
      type: System.String
      description: Comando SQL a ser executado
    - id: FileParameter
      type: System.String
      description: Nome do parâmetro que guarda o arquivo
    - id: File
      type: System.Byte[]
      description: Arquivo
    return:
      type: InnerLibs.DataBase.Reader
      description: Um <xref href="InnerLibs.DataBase.Reader" data-throw-if-not-resolved="false"></xref> com as informações da consulta
    content.vb: Public Function RunSQL(SQLQuery As String, FileParameter As String, File As Byte()) As DataBase.Reader
  overload: InnerLibs.DataBase.RunSQL*
  nameWithType.vb: DataBase.RunSQL(String, String, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.RunSQL(System.String, System.String, System.Byte())
  name.vb: RunSQL(String, String, Byte())
- uid: InnerLibs.DataBase.RunSQL(System.String,System.String,System.Web.HttpPostedFile)
  commentId: M:InnerLibs.DataBase.RunSQL(System.String,System.String,System.Web.HttpPostedFile)
  id: RunSQL(System.String,System.String,System.Web.HttpPostedFile)
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: RunSQL(String, String, HttpPostedFile)
  nameWithType: DataBase.RunSQL(String, String, HttpPostedFile)
  fullName: InnerLibs.DataBase.RunSQL(System.String, System.String, System.Web.HttpPostedFile)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: RunSQL
    path: Databases.vb
    startLine: 438
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nExecuta uma Query no banco com upload de arquivos.\n"
  example: []
  syntax:
    content: public DataBase.Reader RunSQL(string SQLQuery, string FileParameter, HttpPostedFile File)
    parameters:
    - id: SQLQuery
      type: System.String
      description: Comando SQL a ser executado
    - id: FileParameter
      type: System.String
      description: Nome do parâmetro que guarda o arquivo
    - id: File
      type: System.Web.HttpPostedFile
      description: Arquivo postado
    return:
      type: InnerLibs.DataBase.Reader
      description: Um <xref href="InnerLibs.DataBase.Reader" data-throw-if-not-resolved="false"></xref> com as informações da consulta
    content.vb: Public Function RunSQL(SQLQuery As String, FileParameter As String, File As HttpPostedFile) As DataBase.Reader
  overload: InnerLibs.DataBase.RunSQL*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.RunSQL(System.String,System.String,System.IO.FileInfo)
  commentId: M:InnerLibs.DataBase.RunSQL(System.String,System.String,System.IO.FileInfo)
  id: RunSQL(System.String,System.String,System.IO.FileInfo)
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: RunSQL(String, String, FileInfo)
  nameWithType: DataBase.RunSQL(String, String, FileInfo)
  fullName: InnerLibs.DataBase.RunSQL(System.String, System.String, System.IO.FileInfo)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: RunSQL
    path: Databases.vb
    startLine: 457
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nExecuta uma Query no banco com upload de arquivos.\n"
  example: []
  syntax:
    content: public DataBase.Reader RunSQL(string SQLQuery, string FileParameter, FileInfo File)
    parameters:
    - id: SQLQuery
      type: System.String
      description: Comando SQL a ser executado
    - id: FileParameter
      type: System.String
      description: Nome do parâmetro que guarda o arquivo
    - id: File
      type: System.IO.FileInfo
      description: Arquivo
    return:
      type: InnerLibs.DataBase.Reader
      description: Um <xref href="InnerLibs.DataBase.Reader" data-throw-if-not-resolved="false"></xref> com as informações da consulta
    content.vb: Public Function RunSQL(SQLQuery As String, FileParameter As String, File As FileInfo) As DataBase.Reader
  overload: InnerLibs.DataBase.RunSQL*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.RunSQL(System.Data.Common.DbCommand)
  commentId: M:InnerLibs.DataBase.RunSQL(System.Data.Common.DbCommand)
  id: RunSQL(System.Data.Common.DbCommand)
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: RunSQL(DbCommand)
  nameWithType: DataBase.RunSQL(DbCommand)
  fullName: InnerLibs.DataBase.RunSQL(System.Data.Common.DbCommand)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: RunSQL
    path: Databases.vb
    startLine: 474
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nExecuta uma Query no banco. Recomenda-se o uso de procedures.\n"
  example: []
  syntax:
    content: public DataBase.Reader RunSQL(DbCommand Command)
    parameters:
    - id: Command
      type: System.Data.Common.DbCommand
      description: Commando de banco de dados pre-pronto
    return:
      type: InnerLibs.DataBase.Reader
      description: ''
    content.vb: Public Function RunSQL(Command As DbCommand) As DataBase.Reader
  overload: InnerLibs.DataBase.RunSQL*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.RunSQL(System.String,System.Data.Common.DbParameter[])
  commentId: M:InnerLibs.DataBase.RunSQL(System.String,System.Data.Common.DbParameter[])
  id: RunSQL(System.String,System.Data.Common.DbParameter[])
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: RunSQL(String, DbParameter[])
  nameWithType: DataBase.RunSQL(String, DbParameter[])
  fullName: InnerLibs.DataBase.RunSQL(System.String, System.Data.Common.DbParameter[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: RunSQL
    path: Databases.vb
    startLine: 490
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nExecuta uma Query no banco. Recomenda-se o uso de procedures.\n"
  example: []
  syntax:
    content: public DataBase.Reader RunSQL(string SQLQuery, params DbParameter[] Parameters)
    parameters:
    - id: SQLQuery
      type: System.String
      description: Comando SQL parametrizado a ser executado
    - id: Parameters
      type: System.Data.Common.DbParameter[]
      description: Parametros que serão adicionados ao comando
    return:
      type: InnerLibs.DataBase.Reader
      description: Um <xref href="InnerLibs.DataBase.Reader" data-throw-if-not-resolved="false"></xref> com as informações da consulta
    content.vb: Public Function RunSQL(SQLQuery As String, ParamArray Parameters As DbParameter()) As DataBase.Reader
  overload: InnerLibs.DataBase.RunSQL*
  nameWithType.vb: DataBase.RunSQL(String, DbParameter())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.RunSQL(System.String, System.Data.Common.DbParameter())
  name.vb: RunSQL(String, DbParameter())
- uid: InnerLibs.DataBase.CreateCommandFromClass``1(System.String,``0)
  commentId: M:InnerLibs.DataBase.CreateCommandFromClass``1(System.String,``0)
  id: CreateCommandFromClass``1(System.String,``0)
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: CreateCommandFromClass<Type>(String, Type)
  nameWithType: DataBase.CreateCommandFromClass<Type>(String, Type)
  fullName: InnerLibs.DataBase.CreateCommandFromClass<Type>(System.String, Type)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: CreateCommandFromClass
    path: Databases.vb
    startLine: 511
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um comando usando como base as propriedades de uma classe\n"
  example: []
  syntax:
    content: public DbCommand CreateCommandFromClass<Type>(string SQLQuery, Type Object)
    parameters:
    - id: SQLQuery
      type: System.String
      description: Comando SQL parametrizado a ser executado
    - id: Object
      type: '{Type}'
    typeParameters:
    - id: Type
      description: Tipo da Classe
    return:
      type: System.Data.Common.DbCommand
      description: ''
    content.vb: Public Function CreateCommandFromClass(Of Type)(SQLQuery As String, Object As Type) As DbCommand
  overload: InnerLibs.DataBase.CreateCommandFromClass*
  nameWithType.vb: DataBase.CreateCommandFromClass(Of Type)(String, Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.CreateCommandFromClass(Of Type)(System.String, Type)
  name.vb: CreateCommandFromClass(Of Type)(String, Type)
- uid: InnerLibs.DataBase.CreateCommandFromRequest(System.Web.HttpRequest,System.String,System.Data.Common.DbParameter[])
  commentId: M:InnerLibs.DataBase.CreateCommandFromRequest(System.Web.HttpRequest,System.String,System.Data.Common.DbParameter[])
  id: CreateCommandFromRequest(System.Web.HttpRequest,System.String,System.Data.Common.DbParameter[])
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: CreateCommandFromRequest(HttpRequest, String, DbParameter[])
  nameWithType: DataBase.CreateCommandFromRequest(HttpRequest, String, DbParameter[])
  fullName: InnerLibs.DataBase.CreateCommandFromRequest(System.Web.HttpRequest, System.String, System.Data.Common.DbParameter[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: CreateCommandFromRequest
    path: Databases.vb
    startLine: 533
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um comando SQL utilizando as key e os valores de um <xref href=\"System.Web.HttpRequest\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public DbCommand CreateCommandFromRequest(HttpRequest Request, string SQLQuery, params DbParameter[] CustomParameters)
    parameters:
    - id: Request
      type: System.Web.HttpRequest
      description: Request de onde serão extraidos os valores
    - id: SQLQuery
      type: System.String
      description: Comando SQL
    - id: CustomParameters
      type: System.Data.Common.DbParameter[]
    return:
      type: System.Data.Common.DbCommand
      description: ''
    content.vb: Public Function CreateCommandFromRequest(Request As HttpRequest, SQLQuery As String, ParamArray CustomParameters As DbParameter()) As DbCommand
  overload: InnerLibs.DataBase.CreateCommandFromRequest*
  nameWithType.vb: DataBase.CreateCommandFromRequest(HttpRequest, String, DbParameter())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.CreateCommandFromRequest(System.Web.HttpRequest, System.String, System.Data.Common.DbParameter())
  name.vb: CreateCommandFromRequest(HttpRequest, String, DbParameter())
- uid: InnerLibs.DataBase.CreateCommandFromDictionary(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:InnerLibs.DataBase.CreateCommandFromDictionary(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: CreateCommandFromDictionary(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: CreateCommandFromDictionary(String, IDictionary<String, Object>)
  nameWithType: DataBase.CreateCommandFromDictionary(String, IDictionary<String, Object>)
  fullName: InnerLibs.DataBase.CreateCommandFromDictionary(System.String, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: CreateCommandFromDictionary
    path: Databases.vb
    startLine: 585
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um comando SQL utilizando as key e os valores de um <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public DbCommand CreateCommandFromDictionary(string SQLQuery, IDictionary<string, object> Parameters)
    parameters:
    - id: SQLQuery
      type: System.String
      description: Comando SQL
    - id: Parameters
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: Dicionario com os parametros e seus valores
    return:
      type: System.Data.Common.DbCommand
      description: ''
    content.vb: Public Function CreateCommandFromDictionary(SQLQuery As String, Parameters As IDictionary(Of String, Object)) As DbCommand
  overload: InnerLibs.DataBase.CreateCommandFromDictionary*
  nameWithType.vb: DataBase.CreateCommandFromDictionary(String, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.CreateCommandFromDictionary(System.String, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: CreateCommandFromDictionary(String, IDictionary(Of String, Object))
- uid: InnerLibs.DataBase.RunProcedureForEach(System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String[])
  commentId: M:InnerLibs.DataBase.RunProcedureForEach(System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String[])
  id: RunProcedureForEach(System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String[])
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: RunProcedureForEach(String, String, String, NameValueCollection, String[])
  nameWithType: DataBase.RunProcedureForEach(String, String, String, NameValueCollection, String[])
  fullName: InnerLibs.DataBase.RunProcedureForEach(System.String, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: RunProcedureForEach
    path: Databases.vb
    startLine: 613
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nExecuta uma procedure para cada item dentro de uma coleção\n"
  example: []
  syntax:
    content: public void RunProcedureForEach(string Procedure, string ForeignKey, string ForeignValue, NameValueCollection Items, params string[] Keys)
    parameters:
    - id: Procedure
      type: System.String
      description: Nome da procedure
    - id: ForeignKey
      type: System.String
      description: Coluna que representa a chave estrangeira da tabela
    - id: ForeignValue
      type: System.String
      description: Valor que será guardado como chave estrangeira
    - id: Items
      type: System.Collections.Specialized.NameValueCollection
      description: Coleçao de valores que serão inseridos em cada iteraçao
    - id: Keys
      type: System.String[]
      description: as chaves de cada item
    content.vb: Public Sub RunProcedureForEach(Procedure As String, ForeignKey As String, ForeignValue As String, Items As NameValueCollection, ParamArray Keys As String())
  overload: InnerLibs.DataBase.RunProcedureForEach*
  nameWithType.vb: DataBase.RunProcedureForEach(String, String, String, NameValueCollection, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.RunProcedureForEach(System.String, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String())
  name.vb: RunProcedureForEach(String, String, String, NameValueCollection, String())
- uid: InnerLibs.DataBase.SELECT(System.String,System.String,System.String[])
  commentId: P:InnerLibs.DataBase.SELECT(System.String,System.String,System.String[])
  id: SELECT(System.String,System.String,System.String[])
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: SELECT[String, String, String[]]
  nameWithType: DataBase.SELECT[String, String, String[]]
  fullName: InnerLibs.DataBase.SELECT[System.String, System.String, System.String[]]
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: SELECT
    path: Databases.vb
    startLine: 637
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nInsere um objeto em uma tabela a partir de suas propriedades e valores\n"
  example: []
  syntax:
    content: public DataBase.Reader this[string TableName, string WhereConditions = "", string[] Columns = null ] { get; }
    parameters:
    - id: TableName
      type: System.String
      description: Nome da tabela
    - id: WhereConditions
      type: System.String
      description: Condições após a clausula WHERE
    - id: Columns
      type: System.String[]
    return:
      type: InnerLibs.DataBase.Reader
    content.vb: Public ReadOnly Property SELECT(TableName As String, WhereConditions As String = "", Columns As String() = Nothing) As DataBase.Reader
  overload: InnerLibs.DataBase.SELECT*
  nameWithType.vb: DataBase.SELECT(String, String, String())
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: InnerLibs.DataBase.SELECT(System.String, System.String, System.String())
  name.vb: SELECT(String, String, String())
- uid: InnerLibs.DataBase.DELETE(System.String,System.String,System.Boolean)
  commentId: M:InnerLibs.DataBase.DELETE(System.String,System.String,System.Boolean)
  id: DELETE(System.String,System.String,System.Boolean)
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: DELETE(String, String, Boolean)
  nameWithType: DataBase.DELETE(String, String, Boolean)
  fullName: InnerLibs.DataBase.DELETE(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: DELETE
    path: Databases.vb
    startLine: 653
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nDeleta um registro de uma tabela\n"
  example: []
  syntax:
    content: public void DELETE(string TableName, string WhereConditions, bool SafeMode = true)
    parameters:
    - id: TableName
      type: System.String
      description: Nome da Tabela
    - id: WhereConditions
      type: System.String
      description: Condições após a clausula WHERE
    - id: SafeMode
      type: System.Boolean
      description: se False, indica se a operação pode ser realizada sem uma clausula WHERE
    content.vb: Public Sub DELETE(TableName As String, WhereConditions As String, SafeMode As Boolean = True)
  overload: InnerLibs.DataBase.DELETE*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InnerLibs.DataBase.SelectAndFill(System.String,System.String,System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.DataBase.SelectAndFill(System.String,System.String,System.Web.UI.HtmlControls.HtmlControl[])
  id: SelectAndFill(System.String,System.String,System.Web.UI.HtmlControls.HtmlControl[])
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: SelectAndFill(String, String, HtmlControl[])
  nameWithType: DataBase.SelectAndFill(String, String, HtmlControl[])
  fullName: InnerLibs.DataBase.SelectAndFill(System.String, System.String, System.Web.UI.HtmlControls.HtmlControl[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: SelectAndFill
    path: Databases.vb
    startLine: 669
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nSeleciona a primeira linha de um resultset e aplica no <xref href=\"System.Web.UI.HtmlControls.HtmlControl\" data-throw-if-not-resolved=\"false\"></xref> equivalente ao nome da coluna\n"
  example: []
  syntax:
    content: public DataBase.Reader SelectAndFill(string TableName, string WhereConditions, params HtmlControl[] Controls)
    parameters:
    - id: TableName
      type: System.String
    - id: WhereConditions
      type: System.String
    - id: Controls
      type: System.Web.UI.HtmlControls.HtmlControl[]
      description: ''
    return:
      type: InnerLibs.DataBase.Reader
    content.vb: Public Function SelectAndFill(TableName As String, WhereConditions As String, ParamArray Controls As HtmlControl()) As DataBase.Reader
  overload: InnerLibs.DataBase.SelectAndFill*
  nameWithType.vb: DataBase.SelectAndFill(String, String, HtmlControl())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.SelectAndFill(System.String, System.String, System.Web.UI.HtmlControls.HtmlControl())
  name.vb: SelectAndFill(String, String, HtmlControl())
- uid: InnerLibs.DataBase.SelectAndFill(System.String,System.String,System.Windows.Forms.Control[])
  commentId: M:InnerLibs.DataBase.SelectAndFill(System.String,System.String,System.Windows.Forms.Control[])
  id: SelectAndFill(System.String,System.String,System.Windows.Forms.Control[])
  parent: InnerLibs.DataBase
  langs:
  - csharp
  - vb
  name: SelectAndFill(String, String, Control[])
  nameWithType: DataBase.SelectAndFill(String, String, Control[])
  fullName: InnerLibs.DataBase.SelectAndFill(System.String, System.String, System.Windows.Forms.Control[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Databases.vb
    id: SelectAndFill
    path: Databases.vb
    startLine: 680
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nSeleciona a primeira linha de um result e aplica no <xref href=\"System.Windows.Forms.Control\" data-throw-if-not-resolved=\"false\"></xref> equivalente ao nome da coluna\n"
  example: []
  syntax:
    content: public DataBase.Reader SelectAndFill(string TableName, string WhereConditions, params Control[] Controls)
    parameters:
    - id: TableName
      type: System.String
    - id: WhereConditions
      type: System.String
    - id: Controls
      type: System.Windows.Forms.Control[]
      description: ''
    return:
      type: InnerLibs.DataBase.Reader
    content.vb: Public Function SelectAndFill(TableName As String, WhereConditions As String, ParamArray Controls As Control()) As DataBase.Reader
  overload: InnerLibs.DataBase.SelectAndFill*
  nameWithType.vb: DataBase.SelectAndFill(String, String, Control())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.DataBase.SelectAndFill(System.String, System.String, System.Windows.Forms.Control())
  name.vb: SelectAndFill(String, String, Control())
references:
- uid: InnerLibs
  commentId: N:InnerLibs
  name: InnerLibs
  nameWithType: InnerLibs
  fullName: InnerLibs
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Finalize
  commentId: M:System.Object.Finalize
  parent: System.Object
  isExternal: true
  name: Finalize()
  nameWithType: Object.Finalize()
  fullName: System.Object.Finalize()
  spec.csharp:
  - uid: System.Object.Finalize
    name: Finalize
    nameWithType: Object.Finalize
    fullName: System.Object.Finalize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Finalize
    name: Finalize
    nameWithType: Object.Finalize
    fullName: System.Object.Finalize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.ClassTools.CreateDictionary
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary()
  nameWithType: ClassTools.CreateDictionary()
  fullName: InnerLibs.ClassTools.CreateDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  name: GetProperties(BindingFlags)
  nameWithType: ClassTools.GetProperties(BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object)
  name: GetProperties()
  nameWithType: ClassTools.GetProperties()
  fullName: InnerLibs.ClassTools.GetProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  name: GetPropertyValue(String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  name: GetPropertyValue<Type>(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  name: GetPropertyValue(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  name: HasProperty(String)
  nameWithType: ClassTools.HasProperty(String)
  fullName: InnerLibs.ClassTools.HasProperty(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsArrayOf``1
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  name: IsArrayOf<T>()
  nameWithType: ClassTools.IsArrayOf<T>()
  fullName: InnerLibs.ClassTools.IsArrayOf<T>()
  nameWithType.vb: ClassTools.IsArrayOf(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)()
  name.vb: IsArrayOf(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsDictionary
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsDictionary(System.Object)
  name: IsDictionary()
  nameWithType: ClassTools.IsDictionary()
  fullName: InnerLibs.ClassTools.IsDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsIn(IEnumerable<DataBase>, IEqualityComparer<DataBase>)
  nameWithType: ClassTools.IsIn(IEnumerable<DataBase>, IEqualityComparer<DataBase>)
  fullName: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable<InnerLibs.DataBase>, System.Collections.Generic.IEqualityComparer<InnerLibs.DataBase>)
  nameWithType.vb: ClassTools.IsIn(IEnumerable(Of DataBase), IEqualityComparer(Of DataBase))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable(Of InnerLibs.DataBase), System.Collections.Generic.IEqualityComparer(Of InnerLibs.DataBase))
  name.vb: IsIn(IEnumerable(Of DataBase), IEqualityComparer(Of DataBase))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.DataBase}[],System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  name: IsInAny(IEnumerable<DataBase>[], IEqualityComparer<DataBase>)
  nameWithType: ClassTools.IsInAny(IEnumerable<DataBase>[], IEqualityComparer<DataBase>)
  fullName: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable<InnerLibs.DataBase>[], System.Collections.Generic.IEqualityComparer<InnerLibs.DataBase>)
  nameWithType.vb: ClassTools.IsInAny(IEnumerable(Of DataBase)(), IEqualityComparer(Of DataBase))
  fullName.vb: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable(Of InnerLibs.DataBase)(), System.Collections.Generic.IEqualityComparer(Of InnerLibs.DataBase))
  name.vb: IsInAny(IEnumerable(Of DataBase)(), IEqualityComparer(Of DataBase))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.DataBase}[],System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.DataBase}[],System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsList
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsList(System.Object)
  name: IsList()
  nameWithType: ClassTools.IsList()
  fullName: InnerLibs.ClassTools.IsList()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsNotIn(IEnumerable<DataBase>, IEqualityComparer<DataBase>)
  nameWithType: ClassTools.IsNotIn(IEnumerable<DataBase>, IEqualityComparer<DataBase>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable<InnerLibs.DataBase>, System.Collections.Generic.IEqualityComparer<InnerLibs.DataBase>)
  nameWithType.vb: ClassTools.IsNotIn(IEnumerable(Of DataBase), IEqualityComparer(Of DataBase))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable(Of InnerLibs.DataBase), System.Collections.Generic.IEqualityComparer(Of InnerLibs.DataBase))
  name.vb: IsNotIn(IEnumerable(Of DataBase), IEqualityComparer(Of DataBase))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.DataBase},System.Collections.Generic.IEqualityComparer{InnerLibs.DataBase})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsNotIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsType``1
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsType``1(System.Object)
  name: IsType<T>()
  nameWithType: ClassTools.IsType<T>()
  fullName: InnerLibs.ClassTools.IsType<T>()
  nameWithType.vb: ClassTools.IsType(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)()
  name.vb: IsType(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.ClassTools.NullCoalesce(InnerLibs.DataBase[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce(DataBase[])
  nameWithType: ClassTools.NullCoalesce(DataBase[])
  fullName: InnerLibs.ClassTools.NullCoalesce(InnerLibs.DataBase[])
  nameWithType.vb: ClassTools.NullCoalesce(DataBase())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(InnerLibs.DataBase())
  name.vb: NullCoalesce(DataBase())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.DataBase[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.DataBase[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.ClassTools.NullifyProperties
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties()
  nameWithType: ClassTools.NullifyProperties()
  fullName: InnerLibs.ClassTools.NullifyProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  name: SetPropertyValue<Type>(String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.String, Type)
  name.vb: SetPropertyValue(Of Type)(String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  name: SetPropertyValueFromCollection<Type>(String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  name: ToFlatString(String)
  nameWithType: ClassTools.ToFlatString(String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.DataManipulation.GetDbType
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  parent: InnerLibs.DataManipulation
  definition: InnerLibs.DataManipulation.GetDbType(System.Object)
  name: GetDbType()
  nameWithType: DataManipulation.GetDbType()
  fullName: InnerLibs.DataManipulation.GetDbType()
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.Converter.DefineEmptyList
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList()
  nameWithType: Converter.DefineEmptyList()
  fullName: InnerLibs.Converter.DefineEmptyList()
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.Converter.ChangeType``1
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType>()
  nameWithType: Converter.ChangeType<ToType>()
  fullName: InnerLibs.Converter.ChangeType<ToType>()
  nameWithType.vb: Converter.ChangeType(Of ToType)()
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType)()
  name.vb: ChangeType(Of ToType)()
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType<ToType>
    nameWithType: Converter.ChangeType<ToType>
    fullName: InnerLibs.Converter.ChangeType<ToType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType(Of ToType)
    nameWithType: Converter.ChangeType(Of ToType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.JsonViewer.CreateNode
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  parent: InnerLibs.JsonViewer
  definition: InnerLibs.JsonViewer.CreateNode(System.Object)
  name: CreateNode()
  nameWithType: JsonViewer.CreateNode()
  fullName: InnerLibs.JsonViewer.CreateNode()
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  parent: InnerLibs.Mathematic
  definition: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  name: IsBetween(Object, Object)
  nameWithType: Mathematic.IsBetween(Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Text.SerializeJSON(System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  parent: InnerLibs.Text
  definition: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  name: SerializeJSON(String)
  nameWithType: Text.SerializeJSON(String)
  fullName: InnerLibs.Text.SerializeJSON(System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNumber
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNumber(System.Object)
  name: IsNumber()
  nameWithType: Verify.IsNumber()
  fullName: InnerLibs.Verify.IsNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNotNumber
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNotNumber(System.Object)
  name: IsNotNumber()
  nameWithType: Verify.IsNotNumber()
  fullName: InnerLibs.Verify.IsNotNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IfBlank``1({T})
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  name: IfBlank<T>(T)
  nameWithType: Verify.IfBlank<T>(T)
  fullName: InnerLibs.Verify.IfBlank<T>(T)
  nameWithType.vb: Verify.IfBlank(Of T)(T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(T)
  name.vb: IfBlank(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.Verify.NullIf(System.Func{InnerLibs.DataBase,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  name: NullIf(Func<DataBase, Boolean>)
  nameWithType: Verify.NullIf(Func<DataBase, Boolean>)
  fullName: InnerLibs.Verify.NullIf(System.Func<InnerLibs.DataBase, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Func(Of DataBase, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(System.Func(Of InnerLibs.DataBase, System.Boolean))
  name.vb: NullIf(Func(Of DataBase, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.DataBase,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.DataBase,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.Verify.NullIf(InnerLibs.DataBase)
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf(DataBase)
  nameWithType: Verify.NullIf(DataBase)
  fullName: InnerLibs.Verify.NullIf(InnerLibs.DataBase)
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.DataBase)
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.DataBase)
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  parent: InnerLibs.Web
  definition: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  name: CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax(System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.DataBase,{TextType}},System.Func{InnerLibs.DataBase,{ValueType}})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  parent: InnerLibs.Web
  definition: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  name: AsListItem<TextType, ValueType>(Func<DataBase, TextType>, Func<DataBase, ValueType>)
  nameWithType: Web.AsListItem<TextType, ValueType>(Func<DataBase, TextType>, Func<DataBase, ValueType>)
  fullName: InnerLibs.Web.AsListItem<TextType, ValueType>(System.Func<InnerLibs.DataBase, TextType>, System.Func<InnerLibs.DataBase, ValueType>)
  nameWithType.vb: Web.AsListItem(Of TextType, ValueType)(Func(Of DataBase, TextType), Func(Of DataBase, ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of TextType, ValueType)(System.Func(Of InnerLibs.DataBase, TextType), System.Func(Of InnerLibs.DataBase, ValueType))
  name.vb: AsListItem(Of TextType, ValueType)(Func(Of DataBase, TextType), Func(Of DataBase, ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.DataBase,``0},System.Func{InnerLibs.DataBase,``1})
    name: AsListItem<TextType, ValueType>
    nameWithType: Web.AsListItem<TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.DataBase,``0},System.Func{InnerLibs.DataBase,``1})
    name: AsListItem(Of TextType, ValueType)
    nameWithType: Web.AsListItem(Of TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.GetCastedValue
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.GetCastedValue(System.Object)
  name: GetCastedValue()
  nameWithType: WinForms.GetCastedValue()
  fullName: InnerLibs.WinForms.GetCastedValue()
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  name: CastValueForControl(Object)
  nameWithType: WinForms.CastValueForControl(Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  name: ApplyToControls(HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls(HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.DataBase,System.Func{InnerLibs.DataBase,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  name: HasSamePropertyValues(DataBase, Func<DataBase, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues(DataBase, Func<DataBase, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.DataBase, System.Func<InnerLibs.DataBase, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(DataBase, Func(Of DataBase, Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.DataBase, System.Func(Of InnerLibs.DataBase, System.Object)())
  name.vb: HasSamePropertyValues(DataBase, Func(Of DataBase, Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.DataBase,System.Func{InnerLibs.DataBase,System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.DataBase,System.Func{InnerLibs.DataBase,System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.DataBase
    name: DataBase
    nameWithType: DataBase
    fullName: InnerLibs.DataBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary<Type>(Type)
  nameWithType: ClassTools.CreateDictionary<Type>(Type)
  fullName: InnerLibs.ClassTools.CreateDictionary<Type>(Type)
  nameWithType.vb: ClassTools.CreateDictionary(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.CreateDictionary(Of Type)(Type)
  name.vb: CreateDictionary(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary<Type>
    nameWithType: ClassTools.CreateDictionary<Type>
    fullName: InnerLibs.ClassTools.CreateDictionary<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary(Of Type)
    nameWithType: ClassTools.CreateDictionary(Of Type)
    fullName: InnerLibs.ClassTools.CreateDictionary(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools
  commentId: T:InnerLibs.ClassTools
  parent: InnerLibs
  name: ClassTools
  nameWithType: ClassTools
  fullName: InnerLibs.ClassTools
- uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  isExternal: true
  name: GetProperties(Object, BindingFlags)
  nameWithType: ClassTools.GetProperties(Object, BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object, System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetProperties(System.Object)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  isExternal: true
  name: GetProperties(Object)
  nameWithType: ClassTools.GetProperties(Object)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue<Type>(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.Object, System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(Object, String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.Object, System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(Object, String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  isExternal: true
  name: HasProperty(Object, String)
  nameWithType: ClassTools.HasProperty(Object, String)
  fullName: InnerLibs.ClassTools.HasProperty(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  isExternal: true
  name: IsArrayOf<T>(Object)
  nameWithType: ClassTools.IsArrayOf<T>(Object)
  fullName: InnerLibs.ClassTools.IsArrayOf<T>(System.Object)
  nameWithType.vb: ClassTools.IsArrayOf(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)(System.Object)
  name.vb: IsArrayOf(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsDictionary(System.Object)
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  isExternal: true
  name: IsDictionary(Object)
  nameWithType: ClassTools.IsDictionary(Object)
  fullName: InnerLibs.ClassTools.IsDictionary(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  nameWithType: ClassTools.IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsInAny<Type>(Type, System.Collections.Generic.IEnumerable<Type>[], System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsInAny(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type)(), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny<Type>
    nameWithType: ClassTools.IsInAny<Type>
    fullName: InnerLibs.ClassTools.IsInAny<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny(Of Type)
    nameWithType: ClassTools.IsInAny(Of Type)
    fullName: InnerLibs.ClassTools.IsInAny(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsList(System.Object)
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  isExternal: true
  name: IsList(Object)
  nameWithType: ClassTools.IsList(Object)
  fullName: InnerLibs.ClassTools.IsList(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsType``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  isExternal: true
  name: IsType<T>(Object)
  nameWithType: ClassTools.IsType<T>(Object)
  fullName: InnerLibs.ClassTools.IsType<T>(System.Object)
  nameWithType.vb: ClassTools.IsType(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)(System.Object)
  name.vb: IsType(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce<T>(T, T[])
  nameWithType: ClassTools.NullCoalesce<T>(T, T[])
  fullName: InnerLibs.ClassTools.NullCoalesce<T>(T, T[])
  nameWithType.vb: ClassTools.NullCoalesce(Of T)(T, T())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(Of T)(T, T())
  name.vb: NullCoalesce(Of T)(T, T())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce<T>
    nameWithType: ClassTools.NullCoalesce<T>
    fullName: InnerLibs.ClassTools.NullCoalesce<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce(Of T)
    nameWithType: ClassTools.NullCoalesce(Of T)
    fullName: InnerLibs.ClassTools.NullCoalesce(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties<Type>(Type)
  nameWithType: ClassTools.NullifyProperties<Type>(Type)
  fullName: InnerLibs.ClassTools.NullifyProperties<Type>(Type)
  nameWithType.vb: ClassTools.NullifyProperties(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.NullifyProperties(Of Type)(Type)
  name.vb: NullifyProperties(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties<Type>
    nameWithType: ClassTools.NullifyProperties<Type>
    fullName: InnerLibs.ClassTools.NullifyProperties<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties(Of Type)
    nameWithType: ClassTools.NullifyProperties(Of Type)
    fullName: InnerLibs.ClassTools.NullifyProperties(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  isExternal: true
  name: SetPropertyValue<Type>(Object, String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(Object, String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.Object, System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(Object, String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.Object, System.String, Type)
  name.vb: SetPropertyValue(Of Type)(Object, String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  isExternal: true
  name: SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.Object, System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.Object, System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  isExternal: true
  name: ToFlatString(Object, String)
  nameWithType: ClassTools.ToFlatString(Object, String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation.GetDbType(System.Object)
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  isExternal: true
  name: GetDbType(Object)
  nameWithType: DataManipulation.GetDbType(Object)
  fullName: InnerLibs.DataManipulation.GetDbType(System.Object)
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation
  commentId: T:InnerLibs.DataManipulation
  parent: InnerLibs
  name: DataManipulation
  nameWithType: DataManipulation
  fullName: InnerLibs.DataManipulation
- uid: InnerLibs.Converter.DefineEmptyList``1(``0)
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList<T>(T)
  nameWithType: Converter.DefineEmptyList<T>(T)
  fullName: InnerLibs.Converter.DefineEmptyList<T>(T)
  nameWithType.vb: Converter.DefineEmptyList(Of T)(T)
  fullName.vb: InnerLibs.Converter.DefineEmptyList(Of T)(T)
  name.vb: DefineEmptyList(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList<T>
    nameWithType: Converter.DefineEmptyList<T>
    fullName: InnerLibs.Converter.DefineEmptyList<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList(Of T)
    nameWithType: Converter.DefineEmptyList(Of T)
    fullName: InnerLibs.Converter.DefineEmptyList(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Converter
  commentId: T:InnerLibs.Converter
  parent: InnerLibs
  name: Converter
  nameWithType: Converter
  fullName: InnerLibs.Converter
- uid: InnerLibs.Converter.ChangeType``2(``1)
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType, FromType>(FromType)
  nameWithType: Converter.ChangeType<ToType, FromType>(FromType)
  fullName: InnerLibs.Converter.ChangeType<ToType, FromType>(FromType)
  nameWithType.vb: Converter.ChangeType(Of ToType, FromType)(FromType)
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType, FromType)(FromType)
  name.vb: ChangeType(Of ToType, FromType)(FromType)
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType<ToType, FromType>
    nameWithType: Converter.ChangeType<ToType, FromType>
    fullName: InnerLibs.Converter.ChangeType<ToType, FromType>
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType(Of ToType, FromType)
    nameWithType: Converter.ChangeType(Of ToType, FromType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType, FromType)
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer.CreateNode(System.Object)
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  isExternal: true
  name: CreateNode(Object)
  nameWithType: JsonViewer.CreateNode(Object)
  fullName: InnerLibs.JsonViewer.CreateNode(System.Object)
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer
  commentId: T:InnerLibs.JsonViewer
  parent: InnerLibs
  name: JsonViewer
  nameWithType: JsonViewer
  fullName: InnerLibs.JsonViewer
- uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  isExternal: true
  name: IsBetween<Type>(Type, Object, Object)
  nameWithType: Mathematic.IsBetween<Type>(Type, Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween<Type>(Type, System.Object, System.Object)
  nameWithType.vb: Mathematic.IsBetween(Of Type)(Type, Object, Object)
  fullName.vb: InnerLibs.Mathematic.IsBetween(Of Type)(Type, System.Object, System.Object)
  name.vb: IsBetween(Of Type)(Type, Object, Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween<Type>
    nameWithType: Mathematic.IsBetween<Type>
    fullName: InnerLibs.Mathematic.IsBetween<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween(Of Type)
    nameWithType: Mathematic.IsBetween(Of Type)
    fullName: InnerLibs.Mathematic.IsBetween(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic
  commentId: T:InnerLibs.Mathematic
  parent: InnerLibs
  name: Mathematic
  nameWithType: Mathematic
  fullName: InnerLibs.Mathematic
- uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  isExternal: true
  name: SerializeJSON(Object, String)
  nameWithType: Text.SerializeJSON(Object, String)
  fullName: InnerLibs.Text.SerializeJSON(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text
  commentId: T:InnerLibs.Text
  parent: InnerLibs
  name: Text
  nameWithType: Text
  fullName: InnerLibs.Text
- uid: InnerLibs.Verify.IsNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  isExternal: true
  name: IsNumber(Object)
  nameWithType: Verify.IsNumber(Object)
  fullName: InnerLibs.Verify.IsNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify
  commentId: T:InnerLibs.Verify
  parent: InnerLibs
  name: Verify
  nameWithType: Verify
  fullName: InnerLibs.Verify
- uid: InnerLibs.Verify.IsNotNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  isExternal: true
  name: IsNotNumber(Object)
  nameWithType: Verify.IsNotNumber(Object)
  fullName: InnerLibs.Verify.IsNotNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  isExternal: true
  name: IfBlank<T>(Object, T)
  nameWithType: Verify.IfBlank<T>(Object, T)
  fullName: InnerLibs.Verify.IfBlank<T>(System.Object, T)
  nameWithType.vb: Verify.IfBlank(Of T)(Object, T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(System.Object, T)
  name.vb: IfBlank(Of T)(Object, T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  isExternal: true
  name: NullIf<T>(T, Func<T, Boolean>)
  nameWithType: Verify.NullIf<T>(T, Func<T, Boolean>)
  fullName: InnerLibs.Verify.NullIf<T>(T, System.Func<T, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Of T)(T, Func(Of T, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, System.Func(Of T, System.Boolean))
  name.vb: NullIf(Of T)(T, Func(Of T, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,``0)
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf<T>(T, T)
  nameWithType: Verify.NullIf<T>(T, T)
  fullName: InnerLibs.Verify.NullIf<T>(T, T)
  nameWithType.vb: Verify.NullIf(Of T)(T, T)
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, T)
  name.vb: NullIf(Of T)(T, T)
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  isExternal: true
  name: CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax<Type>(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  nameWithType.vb: Web.CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  fullName.vb: InnerLibs.Web.CreateFromAjax(Of Type)(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  name.vb: CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax<Type>
    nameWithType: Web.CreateFromAjax<Type>
    fullName: InnerLibs.Web.CreateFromAjax<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax(Of Type)
    nameWithType: Web.CreateFromAjax(Of Type)
    fullName: InnerLibs.Web.CreateFromAjax(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web
  commentId: T:InnerLibs.Web
  parent: InnerLibs
  name: Web
  nameWithType: Web
  fullName: InnerLibs.Web
- uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  isExternal: true
  name: AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  nameWithType: Web.AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>(T, System.Func<T, TextType>, System.Func<T, ValueType>)
  nameWithType.vb: Web.AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)(T, System.Func(Of T, TextType), System.Func(Of T, ValueType))
  name.vb: AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem<T, TextType, ValueType>
    nameWithType: Web.AsListItem<T, TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem(Of T, TextType, ValueType)
    nameWithType: Web.AsListItem(Of T, TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms.GetCastedValue(System.Object)
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  isExternal: true
  name: GetCastedValue(Object)
  nameWithType: WinForms.GetCastedValue(Object)
  fullName: InnerLibs.WinForms.GetCastedValue(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms
  commentId: T:InnerLibs.WinForms
  parent: InnerLibs
  name: WinForms
  nameWithType: WinForms
  fullName: InnerLibs.WinForms
- uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  isExternal: true
  name: CastValueForControl(Object, Object)
  nameWithType: WinForms.CastValueForControl(Object, Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  isExternal: true
  name: ApplyToControls<T>(T, HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls<T>(T, HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>(T, System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(Of T)(T, HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)(T, System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(Of T)(T, HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls<T>
    nameWithType: LINQExtensions.ApplyToControls<T>
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls(Of T)
    nameWithType: LINQExtensions.ApplyToControls(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions
  commentId: T:InnerLibs.LINQ.LINQExtensions
  parent: InnerLibs.LINQ
  name: LINQExtensions
  nameWithType: LINQExtensions
  fullName: InnerLibs.LINQ.LINQExtensions
- uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  isExternal: true
  name: HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>(T, T, System.Func<T, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)(T, T, System.Func(Of T, System.Object)())
  name.vb: HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues<T>
    nameWithType: LINQExtensions.HasSamePropertyValues<T>
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues(Of T)
    nameWithType: LINQExtensions.HasSamePropertyValues(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ
  commentId: N:InnerLibs.LINQ
  name: InnerLibs.LINQ
  nameWithType: InnerLibs.LINQ
  fullName: InnerLibs.LINQ
- uid: InnerLibs.DataBase.CreateParameter*
  commentId: Overload:InnerLibs.DataBase.CreateParameter
  name: CreateParameter
  nameWithType: DataBase.CreateParameter
  fullName: InnerLibs.DataBase.CreateParameter
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DbParameter
  commentId: T:System.Data.Common.DbParameter
  parent: System.Data.Common
  isExternal: true
  name: DbParameter
  nameWithType: DbParameter
  fullName: System.Data.Common.DbParameter
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: true
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.CreateInsertCommand*
  commentId: Overload:InnerLibs.DataBase.CreateInsertCommand
  name: CreateInsertCommand
  nameWithType: DataBase.CreateInsertCommand
  fullName: InnerLibs.DataBase.CreateInsertCommand
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common.DbCommand
  commentId: T:System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: true
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: InnerLibs.DataBase.CreateInsertCommandText*
  commentId: Overload:InnerLibs.DataBase.CreateInsertCommandText
  name: CreateInsertCommandText
  nameWithType: DataBase.CreateInsertCommandText
  fullName: InnerLibs.DataBase.CreateInsertCommandText
- uid: System.String[]
  commentId: T:System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.DataBase.CreateUpdateCommand*
  commentId: Overload:InnerLibs.DataBase.CreateUpdateCommand
  name: CreateUpdateCommand
  nameWithType: DataBase.CreateUpdateCommand
  fullName: InnerLibs.DataBase.CreateUpdateCommand
- uid: InnerLibs.DataBase.CreateUpdateCommandText*
  commentId: Overload:InnerLibs.DataBase.CreateUpdateCommandText
  name: CreateUpdateCommandText
  nameWithType: DataBase.CreateUpdateCommandText
  fullName: InnerLibs.DataBase.CreateUpdateCommandText
- uid: System.Collections.IDictionary
  commentId: T:System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: InnerLibs.DataBase.INSERTorUPDATE*
  commentId: Overload:InnerLibs.DataBase.INSERTorUPDATE
  name: INSERTorUPDATE
  nameWithType: DataBase.INSERTorUPDATE
  fullName: InnerLibs.DataBase.INSERTorUPDATE
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Specialized.NameValueCollection
  commentId: T:System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: true
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.Web.HttpRequest
  commentId: T:System.Web.HttpRequest
  parent: System.Web
  isExternal: true
  name: HttpRequest
  nameWithType: HttpRequest
  fullName: System.Web.HttpRequest
- uid: System.Web
  commentId: N:System.Web
  isExternal: true
  name: System.Web
  nameWithType: System.Web
  fullName: System.Web
- uid: InnerLibs.DataBase.UPDATE*
  commentId: Overload:InnerLibs.DataBase.UPDATE
  name: UPDATE
  nameWithType: DataBase.UPDATE
  fullName: InnerLibs.DataBase.UPDATE
- uid: InnerLibs.DataBase.Reader
  commentId: T:InnerLibs.DataBase.Reader
  parent: InnerLibs
  name: DataBase.Reader
  nameWithType: DataBase.Reader
  fullName: InnerLibs.DataBase.Reader
- uid: InnerLibs.DataBase.INSERT*
  commentId: Overload:InnerLibs.DataBase.INSERT
  name: INSERT
  nameWithType: DataBase.INSERT
  fullName: InnerLibs.DataBase.INSERT
- uid: InnerLibs.DataBase.GetSqlFilesList*
  commentId: Overload:InnerLibs.DataBase.GetSqlFilesList
  name: GetSqlFilesList
  nameWithType: DataBase.GetSqlFilesList
  fullName: InnerLibs.DataBase.GetSqlFilesList
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataBase.GetCommand*
  commentId: Overload:InnerLibs.DataBase.GetCommand
  name: GetCommand
  nameWithType: DataBase.GetCommand
  fullName: InnerLibs.DataBase.GetCommand
- uid: InnerLibs.DataBase.OpenFile*
  commentId: Overload:InnerLibs.DataBase.OpenFile
  name: OpenFile
  nameWithType: DataBase.OpenFile
  fullName: InnerLibs.DataBase.OpenFile
- uid: System.Data.Common.DbParameter[]
  commentId: T:System.Data.Common.DbParameter[]
  isExternal: true
  name: DbParameter[]
  nameWithType: DbParameter[]
  fullName: System.Data.Common.DbParameter[]
  nameWithType.vb: DbParameter()
  fullName.vb: System.Data.Common.DbParameter()
  name.vb: DbParameter()
  spec.csharp:
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.DataBase.ApplicationAssembly*
  commentId: Overload:InnerLibs.DataBase.ApplicationAssembly
  name: ApplicationAssembly
  nameWithType: DataBase.ApplicationAssembly
  fullName: InnerLibs.DataBase.ApplicationAssembly
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: InnerLibs.DataBase.CommandDirectory*
  commentId: Overload:InnerLibs.DataBase.CommandDirectory
  name: CommandDirectory
  nameWithType: DataBase.CommandDirectory
  fullName: InnerLibs.DataBase.CommandDirectory
- uid: System.IO.DirectoryInfo
  commentId: T:System.IO.DirectoryInfo
  parent: System.IO
  isExternal: true
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: InnerLibs.DataBase.ConnectionString*
  commentId: Overload:InnerLibs.DataBase.ConnectionString
  name: ConnectionString
  nameWithType: DataBase.ConnectionString
  fullName: InnerLibs.DataBase.ConnectionString
- uid: InnerLibs.DataBase.ConnectionType*
  commentId: Overload:InnerLibs.DataBase.ConnectionType
  name: ConnectionType
  nameWithType: DataBase.ConnectionType
  fullName: InnerLibs.DataBase.ConnectionType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: InnerLibs.DataBase.LogFile*
  commentId: Overload:InnerLibs.DataBase.LogFile
  name: LogFile
  nameWithType: DataBase.LogFile
  fullName: InnerLibs.DataBase.LogFile
- uid: System.IO.FileInfo
  commentId: T:System.IO.FileInfo
  parent: System.IO
  isExternal: true
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo
- uid: InnerLibs.DataBase.#ctor*
  commentId: Overload:InnerLibs.DataBase.#ctor
  name: DataBase
  nameWithType: DataBase.DataBase
  fullName: InnerLibs.DataBase.DataBase
- uid: InnerLibs.DataBase.Create*
  commentId: Overload:InnerLibs.DataBase.Create
  name: Create
  nameWithType: DataBase.Create
  fullName: InnerLibs.DataBase.Create
- uid: InnerLibs.DataBase
  commentId: T:InnerLibs.DataBase
  parent: InnerLibs
  name: DataBase
  nameWithType: DataBase
  fullName: InnerLibs.DataBase
- uid: InnerLibs.DataBase.RunSQL*
  commentId: Overload:InnerLibs.DataBase.RunSQL
  name: RunSQL
  nameWithType: DataBase.RunSQL
  fullName: InnerLibs.DataBase.RunSQL
- uid: System.Web.HttpPostedFile
  commentId: T:System.Web.HttpPostedFile
  parent: System.Web
  isExternal: true
  name: HttpPostedFile
  nameWithType: HttpPostedFile
  fullName: System.Web.HttpPostedFile
- uid: System.Byte[]
  commentId: T:System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.DataBase.CreateCommandFromClass*
  commentId: Overload:InnerLibs.DataBase.CreateCommandFromClass
  name: CreateCommandFromClass
  nameWithType: DataBase.CreateCommandFromClass
  fullName: InnerLibs.DataBase.CreateCommandFromClass
- uid: '{Type}'
  commentId: '!:``0'
  definition: '``0'
  name: Type
  nameWithType: Type
  fullName: Type
- uid: '``0'
  name: T
  nameWithType: T
  fullName: T
- uid: InnerLibs.DataBase.CreateCommandFromRequest*
  commentId: Overload:InnerLibs.DataBase.CreateCommandFromRequest
  name: CreateCommandFromRequest
  nameWithType: DataBase.CreateCommandFromRequest
  fullName: InnerLibs.DataBase.CreateCommandFromRequest
- uid: InnerLibs.DataBase.CreateCommandFromDictionary*
  commentId: Overload:InnerLibs.DataBase.CreateCommandFromDictionary
  name: CreateCommandFromDictionary
  nameWithType: DataBase.CreateCommandFromDictionary
  fullName: InnerLibs.DataBase.CreateCommandFromDictionary
- uid: InnerLibs.DataBase.RunProcedureForEach*
  commentId: Overload:InnerLibs.DataBase.RunProcedureForEach
  name: RunProcedureForEach
  nameWithType: DataBase.RunProcedureForEach
  fullName: InnerLibs.DataBase.RunProcedureForEach
- uid: InnerLibs.DataBase.SELECT*
  commentId: Overload:InnerLibs.DataBase.SELECT
  name: SELECT
  nameWithType: DataBase.SELECT
  fullName: InnerLibs.DataBase.SELECT
- uid: InnerLibs.DataBase.DELETE*
  commentId: Overload:InnerLibs.DataBase.DELETE
  name: DELETE
  nameWithType: DataBase.DELETE
  fullName: InnerLibs.DataBase.DELETE
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.HtmlControls.HtmlControl
  commentId: T:System.Web.UI.HtmlControls.HtmlControl
  isExternal: true
- uid: InnerLibs.DataBase.SelectAndFill*
  commentId: Overload:InnerLibs.DataBase.SelectAndFill
  name: SelectAndFill
  nameWithType: DataBase.SelectAndFill
  fullName: InnerLibs.DataBase.SelectAndFill
- uid: System.Web.UI.HtmlControls.HtmlControl[]
  commentId: T:System.Web.UI.HtmlControls.HtmlControl[]
  isExternal: true
  name: HtmlControl[]
  nameWithType: HtmlControl[]
  fullName: System.Web.UI.HtmlControls.HtmlControl[]
  nameWithType.vb: HtmlControl()
  fullName.vb: System.Web.UI.HtmlControls.HtmlControl()
  name.vb: HtmlControl()
  spec.csharp:
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Windows.Forms.Control
  commentId: T:System.Windows.Forms.Control
  parent: System.Windows.Forms
  isExternal: true
  name: Control
  nameWithType: Control
  fullName: System.Windows.Forms.Control
- uid: System.Windows.Forms.Control[]
  commentId: T:System.Windows.Forms.Control[]
  isExternal: true
  name: Control[]
  nameWithType: Control[]
  fullName: System.Windows.Forms.Control[]
  nameWithType.vb: Control()
  fullName.vb: System.Windows.Forms.Control()
  name.vb: Control()
  spec.csharp:
  - uid: System.Windows.Forms.Control
    name: Control
    nameWithType: Control
    fullName: System.Windows.Forms.Control
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Windows.Forms.Control
    name: Control
    nameWithType: Control
    fullName: System.Windows.Forms.Control
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Windows.Forms
  commentId: N:System.Windows.Forms
  isExternal: true
  name: System.Windows.Forms
  nameWithType: System.Windows.Forms
  fullName: System.Windows.Forms
