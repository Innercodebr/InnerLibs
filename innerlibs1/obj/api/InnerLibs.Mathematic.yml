### YamlMime:ManagedReference
items:
- uid: InnerLibs.Mathematic
  commentId: T:InnerLibs.Mathematic
  id: Mathematic
  parent: InnerLibs
  children:
  - InnerLibs.Mathematic.ArithmeticProgression(System.Int32,System.Int32,System.Int32)
  - InnerLibs.Mathematic.Average(System.Decimal[])
  - InnerLibs.Mathematic.Average(System.Double[])
  - InnerLibs.Mathematic.Average(System.Int32[])
  - InnerLibs.Mathematic.Average(System.Int64[])
  - InnerLibs.Mathematic.CalculateDistance(InnerLibs.Location,InnerLibs.Location)
  - InnerLibs.Mathematic.CalculateDistance(InnerLibs.Location[])
  - InnerLibs.Mathematic.CalculatePercent(System.Decimal,System.Decimal)
  - InnerLibs.Mathematic.CalculatePercent``1(System.Collections.Generic.IEnumerable{``0})
  - InnerLibs.Mathematic.CalculatePercent``2(System.Collections.Generic.Dictionary{``0,``1})
  - InnerLibs.Mathematic.CalculatePercent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - InnerLibs.Mathematic.CalculatePercent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - InnerLibs.Mathematic.CalculateValueFromPercent(System.String,System.Decimal)
  - InnerLibs.Mathematic.CartesianProduct``1(``0[][])
  - InnerLibs.Mathematic.Ceil(System.Decimal)
  - InnerLibs.Mathematic.Ceil(System.Double)
  - InnerLibs.Mathematic.EvaluateExpression(System.String,System.Boolean)
  - InnerLibs.Mathematic.EvaluateExpression``1(System.String,System.Boolean)
  - InnerLibs.Mathematic.Factorial(System.Int32)
  - InnerLibs.Mathematic.Fibonacci(System.Int32)
  - InnerLibs.Mathematic.Floor(System.Decimal)
  - InnerLibs.Mathematic.Floor(System.Double)
  - InnerLibs.Mathematic.GeometricProgression(System.Int32,System.Int32,System.Int32)
  - InnerLibs.Mathematic.GetDecimalPlaces(System.Decimal,System.Int32,System.Globalization.CultureInfo)
  - InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  - InnerLibs.Mathematic.Lerp(System.Single,System.Single,System.Single)
  - InnerLibs.Mathematic.LimitIndex``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  - InnerLibs.Mathematic.LimitIndex``1(System.Int64,System.Collections.Generic.IEnumerable{``0})
  - InnerLibs.Mathematic.LimitRange``1(``0,System.Object,System.Object)
  - InnerLibs.Mathematic.Round(System.Decimal)
  - InnerLibs.Mathematic.Round(System.Decimal,System.Int32,System.Globalization.CultureInfo)
  - InnerLibs.Mathematic.SetMaxValue``1(``0,``0)
  - InnerLibs.Mathematic.SetMinValue``1(``0,``0)
  - InnerLibs.Mathematic.Slice(System.Decimal,System.Int32)
  - InnerLibs.Mathematic.Sum(System.Decimal[])
  - InnerLibs.Mathematic.Sum(System.Double[])
  - InnerLibs.Mathematic.Sum(System.Int32[])
  - InnerLibs.Mathematic.Sum(System.Int64[])
  - InnerLibs.Mathematic.ToOrdinalNumber(System.Decimal)
  - InnerLibs.Mathematic.ToOrdinalNumber(System.Double)
  - InnerLibs.Mathematic.ToOrdinalNumber(System.Int16)
  - InnerLibs.Mathematic.ToOrdinalNumber(System.Int32,System.Boolean)
  - InnerLibs.Mathematic.ToOrdinalNumber(System.Int64,System.Boolean)
  - InnerLibs.Mathematic.ToRadians(System.Double)
  langs:
  - csharp
  - vb
  name: Mathematic
  nameWithType: Mathematic
  fullName: InnerLibs.Mathematic
  type: Class
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Mathematic
    path: Maths.vb
    startLine: 7
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nMódulo para calculos\n"
  remarks: ''
  example: []
  syntax:
    content: public class Mathematic
    content.vb: Public Module Mathematic
  extensionMethods:
  - InnerLibs.Mathematic.InnerLibs.ClassTools.CreateDictionary
  - System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  - System.Object.InnerLibs.ClassTools.GetProperties
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  - System.Object.InnerLibs.ClassTools.IsArrayOf``1
  - System.Object.InnerLibs.ClassTools.IsDictionary
  - InnerLibs.Mathematic.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Mathematic},System.Collections.Generic.IEqualityComparer{InnerLibs.Mathematic})
  - InnerLibs.Mathematic.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - InnerLibs.Mathematic.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Mathematic}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Mathematic})
  - System.Object.InnerLibs.ClassTools.IsList
  - InnerLibs.Mathematic.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Mathematic},System.Collections.Generic.IEqualityComparer{InnerLibs.Mathematic})
  - InnerLibs.Mathematic.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - System.Object.InnerLibs.ClassTools.IsType``1
  - InnerLibs.Mathematic.InnerLibs.ClassTools.NullCoalesce(InnerLibs.Mathematic[])
  - InnerLibs.Mathematic.InnerLibs.ClassTools.NullifyProperties
  - System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  - System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  - System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  - System.Object.InnerLibs.DataManipulation.GetDbType
  - InnerLibs.Mathematic.InnerLibs.Converter.DefineEmptyList
  - InnerLibs.Mathematic.InnerLibs.Converter.ChangeType``1
  - System.Object.InnerLibs.JsonViewer.CreateNode
  - InnerLibs.Mathematic.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  - System.Object.InnerLibs.Text.SerializeJSON(System.String)
  - System.Object.InnerLibs.Verify.IsNumber
  - System.Object.InnerLibs.Verify.IsNotNumber
  - System.Object.InnerLibs.Verify.IfBlank``1({T})
  - InnerLibs.Mathematic.InnerLibs.Verify.NullIf(System.Func{InnerLibs.Mathematic,System.Boolean})
  - InnerLibs.Mathematic.InnerLibs.Verify.NullIf(InnerLibs.Mathematic)
  - InnerLibs.Mathematic.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  - InnerLibs.Mathematic.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Mathematic,{TextType}},System.Func{InnerLibs.Mathematic,{ValueType}})
  - System.Object.InnerLibs.WinForms.GetCastedValue
  - System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  - InnerLibs.Mathematic.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  - InnerLibs.Mathematic.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Mathematic,System.Func{InnerLibs.Mathematic,System.Object}[])
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Module
- uid: InnerLibs.Mathematic.ToOrdinalNumber(System.Int32,System.Boolean)
  commentId: M:InnerLibs.Mathematic.ToOrdinalNumber(System.Int32,System.Boolean)
  id: ToOrdinalNumber(System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: ToOrdinalNumber(Int32, Boolean)
  nameWithType: Mathematic.ToOrdinalNumber(Int32, Boolean)
  fullName: InnerLibs.Mathematic.ToOrdinalNumber(System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: ToOrdinalNumber
    path: Maths.vb
    startLine: 14
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nretorna o numeor em sua forma ordinal (inglês)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToOrdinalNumber(this int Number, bool ExcludeNumber = false)
    parameters:
    - id: Number
      type: System.Int32
      description: Numero
    - id: ExcludeNumber
      type: System.Boolean
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToOrdinalNumber(Number As Integer, ExcludeNumber As Boolean = False) As String
  overload: InnerLibs.Mathematic.ToOrdinalNumber*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.ToOrdinalNumber(System.Int64,System.Boolean)
  commentId: M:InnerLibs.Mathematic.ToOrdinalNumber(System.Int64,System.Boolean)
  id: ToOrdinalNumber(System.Int64,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: ToOrdinalNumber(Int64, Boolean)
  nameWithType: Mathematic.ToOrdinalNumber(Int64, Boolean)
  fullName: InnerLibs.Mathematic.ToOrdinalNumber(System.Int64, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: ToOrdinalNumber
    path: Maths.vb
    startLine: 24
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nretorna o numeor em sua forma ordinal (inglês)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToOrdinalNumber(this long Number, bool ExcludeNumber = false)
    parameters:
    - id: Number
      type: System.Int64
      description: Numero
    - id: ExcludeNumber
      type: System.Boolean
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToOrdinalNumber(Number As Long, ExcludeNumber As Boolean = False) As String
  overload: InnerLibs.Mathematic.ToOrdinalNumber*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.ToOrdinalNumber(System.Int16)
  commentId: M:InnerLibs.Mathematic.ToOrdinalNumber(System.Int16)
  id: ToOrdinalNumber(System.Int16)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: ToOrdinalNumber(Int16)
  nameWithType: Mathematic.ToOrdinalNumber(Int16)
  fullName: InnerLibs.Mathematic.ToOrdinalNumber(System.Int16)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: ToOrdinalNumber
    path: Maths.vb
    startLine: 45
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nretorna o numeor em sua forma ordinal (inglês)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToOrdinalNumber(this short Number)
    parameters:
    - id: Number
      type: System.Int16
      description: Numero
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToOrdinalNumber(Number As Short) As String
  overload: InnerLibs.Mathematic.ToOrdinalNumber*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.ToOrdinalNumber(System.Double)
  commentId: M:InnerLibs.Mathematic.ToOrdinalNumber(System.Double)
  id: ToOrdinalNumber(System.Double)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: ToOrdinalNumber(Double)
  nameWithType: Mathematic.ToOrdinalNumber(Double)
  fullName: InnerLibs.Mathematic.ToOrdinalNumber(System.Double)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: ToOrdinalNumber
    path: Maths.vb
    startLine: 55
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nretorna o numeor em sua forma ordinal (inglês)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToOrdinalNumber(this double Number)
    parameters:
    - id: Number
      type: System.Double
      description: Numero
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToOrdinalNumber(Number As Double) As String
  overload: InnerLibs.Mathematic.ToOrdinalNumber*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.ToOrdinalNumber(System.Decimal)
  commentId: M:InnerLibs.Mathematic.ToOrdinalNumber(System.Decimal)
  id: ToOrdinalNumber(System.Decimal)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: ToOrdinalNumber(Decimal)
  nameWithType: Mathematic.ToOrdinalNumber(Decimal)
  fullName: InnerLibs.Mathematic.ToOrdinalNumber(System.Decimal)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: ToOrdinalNumber
    path: Maths.vb
    startLine: 65
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nretorna o numeor em sua forma ordinal (inglês)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToOrdinalNumber(this decimal Number)
    parameters:
    - id: Number
      type: System.Decimal
      description: Numero
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToOrdinalNumber(Number As Decimal) As String
  overload: InnerLibs.Mathematic.ToOrdinalNumber*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.EvaluateExpression(System.String,System.Boolean)
  commentId: M:InnerLibs.Mathematic.EvaluateExpression(System.String,System.Boolean)
  id: EvaluateExpression(System.String,System.Boolean)
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: EvaluateExpression(String, Boolean)
  nameWithType: Mathematic.EvaluateExpression(String, Boolean)
  fullName: InnerLibs.Mathematic.EvaluateExpression(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: EvaluateExpression
    path: Maths.vb
    startLine: 74
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nExecuta uma Expressão matematica/lógica simples\n"
  example: []
  syntax:
    content: public static object EvaluateExpression(string Formula, bool Exception = false)
    parameters:
    - id: Formula
      type: System.String
      description: Expressão matematica
    - id: Exception
      type: System.Boolean
    return:
      type: System.Object
      description: ''
    content.vb: Public Shared Function EvaluateExpression(Formula As String, Exception As Boolean = False) As Object
  overload: InnerLibs.Mathematic.EvaluateExpression*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.EvaluateExpression``1(System.String,System.Boolean)
  commentId: M:InnerLibs.Mathematic.EvaluateExpression``1(System.String,System.Boolean)
  id: EvaluateExpression``1(System.String,System.Boolean)
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: EvaluateExpression<T>(String, Boolean)
  nameWithType: Mathematic.EvaluateExpression<T>(String, Boolean)
  fullName: InnerLibs.Mathematic.EvaluateExpression<T>(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: EvaluateExpression
    path: Maths.vb
    startLine: 89
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nExecuta uma Expressão matematica/lógica simples\n"
  example: []
  syntax:
    content: >-
      public static T EvaluateExpression<T>(string Formula, bool Exception = false)
          where T : struct
    parameters:
    - id: Formula
      type: System.String
      description: Expressão matematica
    - id: Exception
      type: System.Boolean
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: ''
    content.vb: Public Shared Function EvaluateExpression(Of T As Structure)(Formula As String, Exception As Boolean = False) As T
  overload: InnerLibs.Mathematic.EvaluateExpression*
  nameWithType.vb: Mathematic.EvaluateExpression(Of T)(String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.EvaluateExpression(Of T)(System.String, System.Boolean)
  name.vb: EvaluateExpression(Of T)(String, Boolean)
- uid: InnerLibs.Mathematic.ArithmeticProgression(System.Int32,System.Int32,System.Int32)
  commentId: M:InnerLibs.Mathematic.ArithmeticProgression(System.Int32,System.Int32,System.Int32)
  id: ArithmeticProgression(System.Int32,System.Int32,System.Int32)
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: ArithmeticProgression(Int32, Int32, Int32)
  nameWithType: Mathematic.ArithmeticProgression(Int32, Int32, Int32)
  fullName: InnerLibs.Mathematic.ArithmeticProgression(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: ArithmeticProgression
    path: Maths.vb
    startLine: 100
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma progressão Aritmética com N numeros\n"
  example: []
  syntax:
    content: public static List<int> ArithmeticProgression(int FirstNumber, int Constant, int Length)
    parameters:
    - id: FirstNumber
      type: System.Int32
      description: ''
    - id: Constant
      type: System.Int32
    - id: Length
      type: System.Int32
      description: ''
    return:
      type: System.Collections.Generic.List{System.Int32}
      description: ''
    content.vb: Public Shared Function ArithmeticProgression(FirstNumber As Integer, Constant As Integer, Length As Integer) As List(Of Integer)
  overload: InnerLibs.Mathematic.ArithmeticProgression*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.GeometricProgression(System.Int32,System.Int32,System.Int32)
  commentId: M:InnerLibs.Mathematic.GeometricProgression(System.Int32,System.Int32,System.Int32)
  id: GeometricProgression(System.Int32,System.Int32,System.Int32)
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: GeometricProgression(Int32, Int32, Int32)
  nameWithType: Mathematic.GeometricProgression(Int32, Int32, Int32)
  fullName: InnerLibs.Mathematic.GeometricProgression(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: GeometricProgression
    path: Maths.vb
    startLine: 116
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma Progressão Gemoétrica com N numeros\n"
  example: []
  syntax:
    content: public static List<int> GeometricProgression(int FirstNumber, int Constant, int Length)
    parameters:
    - id: FirstNumber
      type: System.Int32
      description: ''
    - id: Constant
      type: System.Int32
    - id: Length
      type: System.Int32
      description: ''
    return:
      type: System.Collections.Generic.List{System.Int32}
      description: ''
    content.vb: Public Shared Function GeometricProgression(FirstNumber As Integer, Constant As Integer, Length As Integer) As List(Of Integer)
  overload: InnerLibs.Mathematic.GeometricProgression*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.CartesianProduct``1(``0[][])
  commentId: M:InnerLibs.Mathematic.CartesianProduct``1(``0[][])
  id: CartesianProduct``1(``0[][])
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: CartesianProduct<T>(T[][])
  nameWithType: Mathematic.CartesianProduct<T>(T[][])
  fullName: InnerLibs.Mathematic.CartesianProduct<T>(T[][])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: CartesianProduct
    path: Maths.vb
    startLine: 130
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna todas as possiveis combinações de Arrays do mesmo tipo (Produto Cartesiano)\n"
  example: []
  syntax:
    content: public static List<T[]> CartesianProduct<T>(params T[][] Sets)
    parameters:
    - id: Sets
      type: '{T}[][]'
      description: Lista de Arrays para combinar
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{{T}[]}
      description: Plano Cartesiano
    content.vb: Public Shared Function CartesianProduct(Of T)(ParamArray Sets As T()()) As List(Of T())
  overload: InnerLibs.Mathematic.CartesianProduct*
  nameWithType.vb: Mathematic.CartesianProduct(Of T)(T()())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.CartesianProduct(Of T)(T()())
  name.vb: CartesianProduct(Of T)(T()())
- uid: InnerLibs.Mathematic.Fibonacci(System.Int32)
  commentId: M:InnerLibs.Mathematic.Fibonacci(System.Int32)
  id: Fibonacci(System.Int32)
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Fibonacci(Int32)
  nameWithType: Mathematic.Fibonacci(Int32)
  fullName: InnerLibs.Mathematic.Fibonacci(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Fibonacci
    path: Maths.vb
    startLine: 149
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma sequencia Fibonacci de N numeros\n"
  example: []
  syntax:
    content: public static List<int> Fibonacci(int Length)
    parameters:
    - id: Length
      type: System.Int32
      description: Quantidade de numeros da sequencia
    return:
      type: System.Collections.Generic.List{System.Int32}
      description: Lista com a sequencia Fibonacci
    content.vb: Public Shared Function Fibonacci(Length As Integer) As List(Of Integer)
  overload: InnerLibs.Mathematic.Fibonacci*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.Factorial(System.Int32)
  commentId: M:InnerLibs.Mathematic.Factorial(System.Int32)
  id: Factorial(System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Factorial(Int32)
  nameWithType: Mathematic.Factorial(Int32)
  fullName: InnerLibs.Mathematic.Factorial(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Factorial
    path: Maths.vb
    startLine: 163
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCalcula o fatorial de um numero\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static int Factorial(this int Number)
    parameters:
    - id: Number
      type: System.Int32
      description: Numero inteiro positivo maior que zero
    return:
      type: System.Int32
      description: fatorial do numero inteiro
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Factorial(Number As Integer) As Integer
  overload: InnerLibs.Mathematic.Factorial*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.CalculatePercent``2(System.Collections.Generic.Dictionary{``0,``1})
  commentId: M:InnerLibs.Mathematic.CalculatePercent``2(System.Collections.Generic.Dictionary{``0,``1})
  id: CalculatePercent``2(System.Collections.Generic.Dictionary{``0,``1})
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: CalculatePercent<TKey, TValue>(Dictionary<TKey, TValue>)
  nameWithType: Mathematic.CalculatePercent<TKey, TValue>(Dictionary<TKey, TValue>)
  fullName: InnerLibs.Mathematic.CalculatePercent<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: CalculatePercent
    path: Maths.vb
    startLine: 186
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCalcula a porcentagem de cada valor em um dicionario em relação a sua totalidade\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Dictionary<TKey, decimal> CalculatePercent<TKey, TValue>(this Dictionary<TKey, TValue> Dic)
          where TValue : struct
    parameters:
    - id: Dic
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: System.Collections.Generic.Dictionary{{TKey},System.Decimal}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function CalculatePercent(Of TKey, TValue As Structure)(Dic As Dictionary(Of TKey, TValue)) As Dictionary(Of TKey, Decimal)
  overload: InnerLibs.Mathematic.CalculatePercent*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Mathematic.CalculatePercent(Of TKey, TValue)(Dictionary(Of TKey, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.CalculatePercent(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue))
  name.vb: CalculatePercent(Of TKey, TValue)(Dictionary(Of TKey, TValue))
- uid: InnerLibs.Mathematic.CalculatePercent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:InnerLibs.Mathematic.CalculatePercent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: CalculatePercent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: CalculatePercent<TObject, TKey, TValue>(IEnumerable<TObject>, Func<TObject, TKey>, Func<TObject, TValue>)
  nameWithType: Mathematic.CalculatePercent<TObject, TKey, TValue>(IEnumerable<TObject>, Func<TObject, TKey>, Func<TObject, TValue>)
  fullName: InnerLibs.Mathematic.CalculatePercent<TObject, TKey, TValue>(System.Collections.Generic.IEnumerable<TObject>, System.Func<TObject, TKey>, System.Func<TObject, TValue>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: CalculatePercent
    path: Maths.vb
    startLine: 199
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCalcula a porcentagem de cada valor de uma classe em relação a sua totalidade em uma lista\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Dictionary<TKey, decimal> CalculatePercent<TObject, TKey, TValue>(this IEnumerable<TObject> Obj, Func<TObject, TKey> KeySelector, Func<TObject, TValue> ValueSelector)
          where TValue : struct
    parameters:
    - id: Obj
      type: System.Collections.Generic.IEnumerable{{TObject}}
      description: ''
    - id: KeySelector
      type: System.Func{{TObject},{TKey}}
    - id: ValueSelector
      type: System.Func{{TObject},{TValue}}
    typeParameters:
    - id: TObject
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: System.Collections.Generic.Dictionary{{TKey},System.Decimal}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function CalculatePercent(Of TObject, TKey, TValue As Structure)(Obj As IEnumerable(Of TObject), KeySelector As Func(Of TObject, TKey), ValueSelector As Func(Of TObject, TValue)) As Dictionary(Of TKey, Decimal)
  overload: InnerLibs.Mathematic.CalculatePercent*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Mathematic.CalculatePercent(Of TObject, TKey, TValue)(IEnumerable(Of TObject), Func(Of TObject, TKey), Func(Of TObject, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.CalculatePercent(Of TObject, TKey, TValue)(System.Collections.Generic.IEnumerable(Of TObject), System.Func(Of TObject, TKey), System.Func(Of TObject, TValue))
  name.vb: CalculatePercent(Of TObject, TKey, TValue)(IEnumerable(Of TObject), Func(Of TObject, TKey), Func(Of TObject, TValue))
- uid: InnerLibs.Mathematic.CalculatePercent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:InnerLibs.Mathematic.CalculatePercent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: CalculatePercent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: CalculatePercent<Tobject, Tvalue>(IEnumerable<Tobject>, Func<Tobject, Tvalue>)
  nameWithType: Mathematic.CalculatePercent<Tobject, Tvalue>(IEnumerable<Tobject>, Func<Tobject, Tvalue>)
  fullName: InnerLibs.Mathematic.CalculatePercent<Tobject, Tvalue>(System.Collections.Generic.IEnumerable<Tobject>, System.Func<Tobject, Tvalue>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: CalculatePercent
    path: Maths.vb
    startLine: 206
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCalcula a porcentagem de cada valor de uma classe em relação a sua totalidade em uma lista\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Dictionary<Tobject, decimal> CalculatePercent<Tobject, Tvalue>(this IEnumerable<Tobject> Obj, Func<Tobject, Tvalue> ValueSelector)
          where Tvalue : struct
    parameters:
    - id: Obj
      type: System.Collections.Generic.IEnumerable{{Tobject}}
    - id: ValueSelector
      type: System.Func{{Tobject},{Tvalue}}
    typeParameters:
    - id: Tobject
    - id: Tvalue
    return:
      type: System.Collections.Generic.Dictionary{{Tobject},System.Decimal}
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function CalculatePercent(Of Tobject, Tvalue As Structure)(Obj As IEnumerable(Of Tobject), ValueSelector As Func(Of Tobject, Tvalue)) As Dictionary(Of Tobject, Decimal)
  overload: InnerLibs.Mathematic.CalculatePercent*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Mathematic.CalculatePercent(Of Tobject, Tvalue)(IEnumerable(Of Tobject), Func(Of Tobject, Tvalue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.CalculatePercent(Of Tobject, Tvalue)(System.Collections.Generic.IEnumerable(Of Tobject), System.Func(Of Tobject, Tvalue))
  name.vb: CalculatePercent(Of Tobject, Tvalue)(IEnumerable(Of Tobject), Func(Of Tobject, Tvalue))
- uid: InnerLibs.Mathematic.CalculatePercent``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:InnerLibs.Mathematic.CalculatePercent``1(System.Collections.Generic.IEnumerable{``0})
  id: CalculatePercent``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: CalculatePercent<TValue>(IEnumerable<TValue>)
  nameWithType: Mathematic.CalculatePercent<TValue>(IEnumerable<TValue>)
  fullName: InnerLibs.Mathematic.CalculatePercent<TValue>(System.Collections.Generic.IEnumerable<TValue>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: CalculatePercent
    path: Maths.vb
    startLine: 213
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCalcula a porcentagem de cada valor de uma classe em relação a sua totalidade em uma lista\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Dictionary<TValue, decimal> CalculatePercent<TValue>(this IEnumerable<TValue> Obj)
          where TValue : struct
    parameters:
    - id: Obj
      type: System.Collections.Generic.IEnumerable{{TValue}}
    typeParameters:
    - id: TValue
    return:
      type: System.Collections.Generic.Dictionary{{TValue},System.Decimal}
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function CalculatePercent(Of TValue As Structure)(Obj As IEnumerable(Of TValue)) As Dictionary(Of TValue, Decimal)
  overload: InnerLibs.Mathematic.CalculatePercent*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Mathematic.CalculatePercent(Of TValue)(IEnumerable(Of TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.CalculatePercent(Of TValue)(System.Collections.Generic.IEnumerable(Of TValue))
  name.vb: CalculatePercent(Of TValue)(IEnumerable(Of TValue))
- uid: InnerLibs.Mathematic.CalculatePercent(System.Decimal,System.Decimal)
  commentId: M:InnerLibs.Mathematic.CalculatePercent(System.Decimal,System.Decimal)
  id: CalculatePercent(System.Decimal,System.Decimal)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: CalculatePercent(Decimal, Decimal)
  nameWithType: Mathematic.CalculatePercent(Decimal, Decimal)
  fullName: InnerLibs.Mathematic.CalculatePercent(System.Decimal, System.Decimal)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: CalculatePercent
    path: Maths.vb
    startLine: 224
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o percentual de um valor\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static decimal CalculatePercent(this decimal Value, decimal Total)
    parameters:
    - id: Value
      type: System.Decimal
      description: Valor a ser calculado
    - id: Total
      type: System.Decimal
      description: Valor Total (Representa 100%)
    return:
      type: System.Decimal
      description: Um numero decimal contendo a porcentagem
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function CalculatePercent(Value As Decimal, Total As Decimal) As Decimal
  overload: InnerLibs.Mathematic.CalculatePercent*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.CalculateValueFromPercent(System.String,System.Decimal)
  commentId: M:InnerLibs.Mathematic.CalculateValueFromPercent(System.String,System.Decimal)
  id: CalculateValueFromPercent(System.String,System.Decimal)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: CalculateValueFromPercent(String, Decimal)
  nameWithType: Mathematic.CalculateValueFromPercent(String, Decimal)
  fullName: InnerLibs.Mathematic.CalculateValueFromPercent(System.String, System.Decimal)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: CalculateValueFromPercent
    path: Maths.vb
    startLine: 238
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o valor de um determinado percentual de um valor total\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static decimal CalculateValueFromPercent(this string Percent, decimal Total)
    parameters:
    - id: Percent
      type: System.String
      description: "\nPorcentagem, pode ser um numero ou uma string com o sinal de porcento. Ex.: 15 ou 15%\n"
    - id: Total
      type: System.Decimal
      description: Valor Total (Representa 100%)
    return:
      type: System.Decimal
      description: Um numero decimal contendo o valor relativo a porcentagem
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function CalculateValueFromPercent(Percent As String, Total As Decimal) As Decimal
  overload: InnerLibs.Mathematic.CalculateValueFromPercent*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.Slice(System.Decimal,System.Int32)
  commentId: M:InnerLibs.Mathematic.Slice(System.Decimal,System.Int32)
  id: Slice(System.Decimal,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Slice(Decimal, Int32)
  nameWithType: Mathematic.Slice(Decimal, Int32)
  fullName: InnerLibs.Mathematic.Slice(System.Decimal, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Slice
    path: Maths.vb
    startLine: 249
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCorta um numero decimal com a quantidade de casas especiicadas\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static decimal Slice(this decimal Value, int Places = 2)
    parameters:
    - id: Value
      type: System.Decimal
      description: Numero
    - id: Places
      type: System.Int32
      description: Numero de casas apos a virgula
    return:
      type: System.Decimal
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Slice(Value As Decimal, Places As Integer = 2) As Decimal
  overload: InnerLibs.Mathematic.Slice*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.GetDecimalPlaces(System.Decimal,System.Int32,System.Globalization.CultureInfo)
  commentId: M:InnerLibs.Mathematic.GetDecimalPlaces(System.Decimal,System.Int32,System.Globalization.CultureInfo)
  id: GetDecimalPlaces(System.Decimal,System.Int32,System.Globalization.CultureInfo)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: GetDecimalPlaces(Decimal, Int32, CultureInfo)
  nameWithType: Mathematic.GetDecimalPlaces(Decimal, Int32, CultureInfo)
  fullName: InnerLibs.Mathematic.GetDecimalPlaces(System.Decimal, System.Int32, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: GetDecimalPlaces
    path: Maths.vb
    startLine: 269
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um numero inteiro representando a parte decimal de um numero decimal\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static long GetDecimalPlaces(this decimal Value, int DecimalPlaces = 0, CultureInfo Culture = null)
    parameters:
    - id: Value
      type: System.Decimal
      description: Valor decimal
    - id: DecimalPlaces
      type: System.Int32
    - id: Culture
      type: System.Globalization.CultureInfo
    return:
      type: System.Int64
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetDecimalPlaces(Value As Decimal, DecimalPlaces As Integer = 0, Culture As CultureInfo = Nothing) As Long
  overload: InnerLibs.Mathematic.GetDecimalPlaces*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.Ceil(System.Decimal)
  commentId: M:InnerLibs.Mathematic.Ceil(System.Decimal)
  id: Ceil(System.Decimal)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Ceil(Decimal)
  nameWithType: Mathematic.Ceil(Decimal)
  fullName: InnerLibs.Mathematic.Ceil(System.Decimal)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Ceil
    path: Maths.vb
    startLine: 286
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nArredonda um numero para cima. Ex.: 4,5 -> 5\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static long Ceil(this decimal Number)
    parameters:
    - id: Number
      type: System.Decimal
      description: Numero a ser arredondado
    return:
      type: System.Int64
      description: Um numero inteiro (Integer ou Int)
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Ceil(Number As Decimal) As Long
  overload: InnerLibs.Mathematic.Ceil*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.Ceil(System.Double)
  commentId: M:InnerLibs.Mathematic.Ceil(System.Double)
  id: Ceil(System.Double)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Ceil(Double)
  nameWithType: Mathematic.Ceil(Double)
  fullName: InnerLibs.Mathematic.Ceil(System.Double)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Ceil
    path: Maths.vb
    startLine: 301
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nArredonda um numero para cima. Ex.: 4,5 -> 5\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static long Ceil(this double Number)
    parameters:
    - id: Number
      type: System.Double
      description: Numero a ser arredondado
    return:
      type: System.Int64
      description: Um numero inteiro (Integer ou Int)
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Ceil(Number As Double) As Long
  overload: InnerLibs.Mathematic.Ceil*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.Floor(System.Decimal)
  commentId: M:InnerLibs.Mathematic.Floor(System.Decimal)
  id: Floor(System.Decimal)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Floor(Decimal)
  nameWithType: Mathematic.Floor(Decimal)
  fullName: InnerLibs.Mathematic.Floor(System.Decimal)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Floor
    path: Maths.vb
    startLine: 315
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nArredonda um numero para baixo. Ex.: 4,5 -> 4\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static long Floor(this decimal Number)
    parameters:
    - id: Number
      type: System.Decimal
      description: Numero a ser arredondado
    return:
      type: System.Int64
      description: Um numero inteiro (Integer ou Int)
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Floor(Number As Decimal) As Long
  overload: InnerLibs.Mathematic.Floor*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.Floor(System.Double)
  commentId: M:InnerLibs.Mathematic.Floor(System.Double)
  id: Floor(System.Double)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Floor(Double)
  nameWithType: Mathematic.Floor(Double)
  fullName: InnerLibs.Mathematic.Floor(System.Double)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Floor
    path: Maths.vb
    startLine: 329
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nArredonda um numero para baixo. Ex.: 4,5 -> 4\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static long Floor(this double Number)
    parameters:
    - id: Number
      type: System.Double
      description: Numero a ser arredondado
    return:
      type: System.Int64
      description: Um numero inteiro (Integer ou Int)
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Floor(Number As Double) As Long
  overload: InnerLibs.Mathematic.Floor*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.SetMaxValue``1(``0,``0)
  commentId: M:InnerLibs.Mathematic.SetMaxValue``1(``0,``0)
  id: SetMaxValue``1(``0,``0)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: SetMaxValue<Type>(Type, Type)
  nameWithType: Mathematic.SetMaxValue<Type>(Type, Type)
  fullName: InnerLibs.Mathematic.SetMaxValue<Type>(Type, Type)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: SetMaxValue
    path: Maths.vb
    startLine: 344
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nLimita o valor Maximo de um numero\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Type SetMaxValue<Type>(this Type Number, Type MaxValue)
          where Type : IConvertible
    parameters:
    - id: Number
      type: '{Type}'
      description: Numero
    - id: MaxValue
      type: '{Type}'
      description: Valor Maximo
    typeParameters:
    - id: Type
    return:
      type: '{Type}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function SetMaxValue(Of Type As IConvertible)(Number As Type, MaxValue As Type) As Type
  overload: InnerLibs.Mathematic.SetMaxValue*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Mathematic.SetMaxValue(Of Type)(Type, Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.SetMaxValue(Of Type)(Type, Type)
  name.vb: SetMaxValue(Of Type)(Type, Type)
- uid: InnerLibs.Mathematic.SetMinValue``1(``0,``0)
  commentId: M:InnerLibs.Mathematic.SetMinValue``1(``0,``0)
  id: SetMinValue``1(``0,``0)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: SetMinValue<Type>(Type, Type)
  nameWithType: Mathematic.SetMinValue<Type>(Type, Type)
  fullName: InnerLibs.Mathematic.SetMinValue<Type>(Type, Type)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: SetMinValue
    path: Maths.vb
    startLine: 355
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nLimita o valor minimo de um numero\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Type SetMinValue<Type>(this Type Number, Type MinValue)
          where Type : IConvertible
    parameters:
    - id: Number
      type: '{Type}'
      description: Numero
    - id: MinValue
      type: '{Type}'
      description: Valor Maximo
    typeParameters:
    - id: Type
    return:
      type: '{Type}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function SetMinValue(Of Type As IConvertible)(Number As Type, MinValue As Type) As Type
  overload: InnerLibs.Mathematic.SetMinValue*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Mathematic.SetMinValue(Of Type)(Type, Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.SetMinValue(Of Type)(Type, Type)
  name.vb: SetMinValue(Of Type)(Type, Type)
- uid: InnerLibs.Mathematic.LimitRange``1(``0,System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.LimitRange``1(``0,System.Object,System.Object)
  id: LimitRange``1(``0,System.Object,System.Object)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: LimitRange<Type>(Type, Object, Object)
  nameWithType: Mathematic.LimitRange<Type>(Type, Object, Object)
  fullName: InnerLibs.Mathematic.LimitRange<Type>(Type, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: LimitRange
    path: Maths.vb
    startLine: 367
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nLimita um range para um numero\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Type LimitRange<Type>(this Type Number, object MinValue = null, object MaxValue = null)
          where Type : IConvertible
    parameters:
    - id: Number
      type: '{Type}'
      description: Numero
    - id: MinValue
      type: System.Object
      description: Valor Minimo para o numero
    - id: MaxValue
      type: System.Object
      description: Valor máximo para o numero
    typeParameters:
    - id: Type
    return:
      type: '{Type}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function LimitRange(Of Type As IConvertible)(Number As Type, MinValue As Object = Nothing, MaxValue As Object = Nothing) As Type
  overload: InnerLibs.Mathematic.LimitRange*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Mathematic.LimitRange(Of Type)(Type, Object, Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.LimitRange(Of Type)(Type, System.Object, System.Object)
  name.vb: LimitRange(Of Type)(Type, Object, Object)
- uid: InnerLibs.Mathematic.LimitIndex``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  commentId: M:InnerLibs.Mathematic.LimitIndex``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  id: LimitIndex``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: LimitIndex<AnyType>(Int32, IEnumerable<AnyType>)
  nameWithType: Mathematic.LimitIndex<AnyType>(Int32, IEnumerable<AnyType>)
  fullName: InnerLibs.Mathematic.LimitIndex<AnyType>(System.Int32, System.Collections.Generic.IEnumerable<AnyType>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: LimitIndex
    path: Maths.vb
    startLine: 385
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: >-
      [Extension]

      public static int LimitIndex<AnyType>(this int Int, IEnumerable<AnyType> Collection)
    parameters:
    - id: Int
      type: System.Int32
    - id: Collection
      type: System.Collections.Generic.IEnumerable{{AnyType}}
    typeParameters:
    - id: AnyType
    return:
      type: System.Int32
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function LimitIndex(Of AnyType)(Int As Integer, Collection As IEnumerable(Of AnyType)) As Integer
  overload: InnerLibs.Mathematic.LimitIndex*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Mathematic.LimitIndex(Of AnyType)(Int32, IEnumerable(Of AnyType))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.LimitIndex(Of AnyType)(System.Int32, System.Collections.Generic.IEnumerable(Of AnyType))
  name.vb: LimitIndex(Of AnyType)(Int32, IEnumerable(Of AnyType))
- uid: InnerLibs.Mathematic.LimitIndex``1(System.Int64,System.Collections.Generic.IEnumerable{``0})
  commentId: M:InnerLibs.Mathematic.LimitIndex``1(System.Int64,System.Collections.Generic.IEnumerable{``0})
  id: LimitIndex``1(System.Int64,System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: LimitIndex<AnyType>(Int64, IEnumerable<AnyType>)
  nameWithType: Mathematic.LimitIndex<AnyType>(Int64, IEnumerable<AnyType>)
  fullName: InnerLibs.Mathematic.LimitIndex<AnyType>(System.Int64, System.Collections.Generic.IEnumerable<AnyType>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: LimitIndex
    path: Maths.vb
    startLine: 389
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: >-
      [Extension]

      public static long LimitIndex<AnyType>(this long Lng, IEnumerable<AnyType> Collection)
    parameters:
    - id: Lng
      type: System.Int64
    - id: Collection
      type: System.Collections.Generic.IEnumerable{{AnyType}}
    typeParameters:
    - id: AnyType
    return:
      type: System.Int64
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function LimitIndex(Of AnyType)(Lng As Long, Collection As IEnumerable(Of AnyType)) As Long
  overload: InnerLibs.Mathematic.LimitIndex*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Mathematic.LimitIndex(Of AnyType)(Int64, IEnumerable(Of AnyType))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.LimitIndex(Of AnyType)(System.Int64, System.Collections.Generic.IEnumerable(Of AnyType))
  name.vb: LimitIndex(Of AnyType)(Int64, IEnumerable(Of AnyType))
- uid: InnerLibs.Mathematic.Round(System.Decimal,System.Int32,System.Globalization.CultureInfo)
  commentId: M:InnerLibs.Mathematic.Round(System.Decimal,System.Int32,System.Globalization.CultureInfo)
  id: Round(System.Decimal,System.Int32,System.Globalization.CultureInfo)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Round(Decimal, Int32, CultureInfo)
  nameWithType: Mathematic.Round(Decimal, Int32, CultureInfo)
  fullName: InnerLibs.Mathematic.Round(System.Decimal, System.Int32, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Round
    path: Maths.vb
    startLine: 399
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nArredonda um numero para baixo ou para cima de acordo com outro numero\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static int Round(this decimal Number, int MiddleNumber = 5, CultureInfo Culture = null)
    parameters:
    - id: Number
      type: System.Decimal
      description: Numero
    - id: MiddleNumber
      type: System.Int32
      description: Numero Médio
    - id: Culture
      type: System.Globalization.CultureInfo
    return:
      type: System.Int32
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Round(Number As Decimal, MiddleNumber As Integer = 5, Culture As CultureInfo = Nothing) As Integer
  overload: InnerLibs.Mathematic.Round*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.Round(System.Decimal)
  commentId: M:InnerLibs.Mathematic.Round(System.Decimal)
  id: Round(System.Decimal)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Round(Decimal)
  nameWithType: Mathematic.Round(Decimal)
  fullName: InnerLibs.Mathematic.Round(System.Decimal)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Round
    path: Maths.vb
    startLine: 414
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nArredonda um numero para o valor inteiro mais próximo\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static int Round(this decimal Number)
    parameters:
    - id: Number
      type: System.Decimal
      description: Numero
    return:
      type: System.Int32
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Round(Number As Decimal) As Integer
  overload: InnerLibs.Mathematic.Round*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.Lerp(System.Single,System.Single,System.Single)
  commentId: M:InnerLibs.Mathematic.Lerp(System.Single,System.Single,System.Single)
  id: Lerp(System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Lerp(Single, Single, Single)
  nameWithType: Mathematic.Lerp(Single, Single, Single)
  fullName: InnerLibs.Mathematic.Lerp(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Lerp
    path: Maths.vb
    startLine: 425
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRealiza um calculo de interpolação Linear\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static float Lerp(this float Start, float End, float Amount)
    parameters:
    - id: Start
      type: System.Single
      description: ''
    - id: End
      type: System.Single
    - id: Amount
      type: System.Single
      description: ''
    return:
      type: System.Single
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Lerp(Start As Single, End As Single, Amount As Single) As Single
  overload: InnerLibs.Mathematic.Lerp*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.Sum(System.Double[])
  commentId: M:InnerLibs.Mathematic.Sum(System.Double[])
  id: Sum(System.Double[])
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Sum(Double[])
  nameWithType: Mathematic.Sum(Double[])
  fullName: InnerLibs.Mathematic.Sum(System.Double[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Sum
    path: Maths.vb
    startLine: 437
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nSoma todos os números de um array\n"
  example: []
  syntax:
    content: public static double Sum(params double[] Values)
    parameters:
    - id: Values
      type: System.Double[]
      description: Array de números
    return:
      type: System.Double
      description: Decimal contendo a soma de todos os valores
    content.vb: Public Shared Function Sum(ParamArray Values As Double()) As Double
  overload: InnerLibs.Mathematic.Sum*
  nameWithType.vb: Mathematic.Sum(Double())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.Sum(System.Double())
  name.vb: Sum(Double())
- uid: InnerLibs.Mathematic.Sum(System.Int64[])
  commentId: M:InnerLibs.Mathematic.Sum(System.Int64[])
  id: Sum(System.Int64[])
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Sum(Int64[])
  nameWithType: Mathematic.Sum(Int64[])
  fullName: InnerLibs.Mathematic.Sum(System.Int64[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Sum
    path: Maths.vb
    startLine: 446
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nSoma todos os números de um array\n"
  example: []
  syntax:
    content: public static long Sum(params long[] Values)
    parameters:
    - id: Values
      type: System.Int64[]
      description: Array de números
    return:
      type: System.Int64
      description: Decimal contendo a soma de todos os valores
    content.vb: Public Shared Function Sum(ParamArray Values As Long()) As Long
  overload: InnerLibs.Mathematic.Sum*
  nameWithType.vb: Mathematic.Sum(Int64())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.Sum(System.Int64())
  name.vb: Sum(Int64())
- uid: InnerLibs.Mathematic.Sum(System.Int32[])
  commentId: M:InnerLibs.Mathematic.Sum(System.Int32[])
  id: Sum(System.Int32[])
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Sum(Int32[])
  nameWithType: Mathematic.Sum(Int32[])
  fullName: InnerLibs.Mathematic.Sum(System.Int32[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Sum
    path: Maths.vb
    startLine: 455
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nSoma todos os números de um array\n"
  example: []
  syntax:
    content: public static int Sum(params int[] Values)
    parameters:
    - id: Values
      type: System.Int32[]
      description: Array de números
    return:
      type: System.Int32
      description: Decimal contendo a soma de todos os valores
    content.vb: Public Shared Function Sum(ParamArray Values As Integer()) As Integer
  overload: InnerLibs.Mathematic.Sum*
  nameWithType.vb: Mathematic.Sum(Int32())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.Sum(System.Int32())
  name.vb: Sum(Int32())
- uid: InnerLibs.Mathematic.Sum(System.Decimal[])
  commentId: M:InnerLibs.Mathematic.Sum(System.Decimal[])
  id: Sum(System.Decimal[])
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Sum(Decimal[])
  nameWithType: Mathematic.Sum(Decimal[])
  fullName: InnerLibs.Mathematic.Sum(System.Decimal[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Sum
    path: Maths.vb
    startLine: 464
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nSoma todos os números de um array\n"
  example: []
  syntax:
    content: public static decimal Sum(params decimal[] Values)
    parameters:
    - id: Values
      type: System.Decimal[]
      description: Array de números
    return:
      type: System.Decimal
      description: Decimal contendo a soma de todos os valores
    content.vb: Public Shared Function Sum(ParamArray Values As Decimal()) As Decimal
  overload: InnerLibs.Mathematic.Sum*
  nameWithType.vb: Mathematic.Sum(Decimal())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.Sum(System.Decimal())
  name.vb: Sum(Decimal())
- uid: InnerLibs.Mathematic.Average(System.Decimal[])
  commentId: M:InnerLibs.Mathematic.Average(System.Decimal[])
  id: Average(System.Decimal[])
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Average(Decimal[])
  nameWithType: Mathematic.Average(Decimal[])
  fullName: InnerLibs.Mathematic.Average(System.Decimal[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Average
    path: Maths.vb
    startLine: 473
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTira a média de todos os números de um Array\n"
  example: []
  syntax:
    content: public static decimal Average(params decimal[] Values)
    parameters:
    - id: Values
      type: System.Decimal[]
      description: Array de números
    return:
      type: System.Decimal
      description: Decimal contendo
    content.vb: Public Shared Function Average(ParamArray Values As Decimal()) As Decimal
  overload: InnerLibs.Mathematic.Average*
  nameWithType.vb: Mathematic.Average(Decimal())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.Average(System.Decimal())
  name.vb: Average(Decimal())
- uid: InnerLibs.Mathematic.Average(System.Double[])
  commentId: M:InnerLibs.Mathematic.Average(System.Double[])
  id: Average(System.Double[])
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Average(Double[])
  nameWithType: Mathematic.Average(Double[])
  fullName: InnerLibs.Mathematic.Average(System.Double[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Average
    path: Maths.vb
    startLine: 482
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTira a média de todos os números de um Array\n"
  example: []
  syntax:
    content: public static double Average(params double[] Values)
    parameters:
    - id: Values
      type: System.Double[]
      description: Array de números
    return:
      type: System.Double
      description: Decimal contendo
    content.vb: Public Shared Function Average(ParamArray Values As Double()) As Double
  overload: InnerLibs.Mathematic.Average*
  nameWithType.vb: Mathematic.Average(Double())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.Average(System.Double())
  name.vb: Average(Double())
- uid: InnerLibs.Mathematic.Average(System.Int32[])
  commentId: M:InnerLibs.Mathematic.Average(System.Int32[])
  id: Average(System.Int32[])
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Average(Int32[])
  nameWithType: Mathematic.Average(Int32[])
  fullName: InnerLibs.Mathematic.Average(System.Int32[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Average
    path: Maths.vb
    startLine: 491
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTira a média de todos os números de um Array\n"
  example: []
  syntax:
    content: public static int Average(params int[] Values)
    parameters:
    - id: Values
      type: System.Int32[]
      description: Array de números
    return:
      type: System.Int32
      description: Decimal contendo
    content.vb: Public Shared Function Average(ParamArray Values As Integer()) As Integer
  overload: InnerLibs.Mathematic.Average*
  nameWithType.vb: Mathematic.Average(Int32())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.Average(System.Int32())
  name.vb: Average(Int32())
- uid: InnerLibs.Mathematic.Average(System.Int64[])
  commentId: M:InnerLibs.Mathematic.Average(System.Int64[])
  id: Average(System.Int64[])
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: Average(Int64[])
  nameWithType: Mathematic.Average(Int64[])
  fullName: InnerLibs.Mathematic.Average(System.Int64[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: Average
    path: Maths.vb
    startLine: 500
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTira a média de todos os números de um Array\n"
  example: []
  syntax:
    content: public static long Average(params long[] Values)
    parameters:
    - id: Values
      type: System.Int64[]
      description: Array de números
    return:
      type: System.Int64
      description: Decimal contendo
    content.vb: Public Shared Function Average(ParamArray Values As Long()) As Long
  overload: InnerLibs.Mathematic.Average*
  nameWithType.vb: Mathematic.Average(Int64())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.Average(System.Int64())
  name.vb: Average(Int64())
- uid: InnerLibs.Mathematic.ToRadians(System.Double)
  commentId: M:InnerLibs.Mathematic.ToRadians(System.Double)
  id: ToRadians(System.Double)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: ToRadians(Double)
  nameWithType: Mathematic.ToRadians(Double)
  fullName: InnerLibs.Mathematic.ToRadians(System.Double)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: ToRadians
    path: Maths.vb
    startLine: 509
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCOnverte graus para radianos\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static double ToRadians(this double Degrees)
    parameters:
    - id: Degrees
      type: System.Double
      description: ''
    return:
      type: System.Double
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToRadians(Degrees As Double) As Double
  overload: InnerLibs.Mathematic.ToRadians*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.CalculateDistance(InnerLibs.Location,InnerLibs.Location)
  commentId: M:InnerLibs.Mathematic.CalculateDistance(InnerLibs.Location,InnerLibs.Location)
  id: CalculateDistance(InnerLibs.Location,InnerLibs.Location)
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: CalculateDistance(Location, Location)
  nameWithType: Mathematic.CalculateDistance(Location, Location)
  fullName: InnerLibs.Mathematic.CalculateDistance(InnerLibs.Location, InnerLibs.Location)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: CalculateDistance
    path: Maths.vb
    startLine: 520
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCalcula a distancia entre 2 locais\n"
  example: []
  syntax:
    content: public static double CalculateDistance(Location FirstLocation, Location SecondLocation)
    parameters:
    - id: FirstLocation
      type: InnerLibs.Location
      description: Primeiro Local
    - id: SecondLocation
      type: InnerLibs.Location
      description: Segundo Local
    return:
      type: System.Double
      description: A distancia em kilometros
    content.vb: Public Shared Function CalculateDistance(FirstLocation As Location, SecondLocation As Location) As Double
  overload: InnerLibs.Mathematic.CalculateDistance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Mathematic.CalculateDistance(InnerLibs.Location[])
  commentId: M:InnerLibs.Mathematic.CalculateDistance(InnerLibs.Location[])
  id: CalculateDistance(InnerLibs.Location[])
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: CalculateDistance(Location[])
  nameWithType: Mathematic.CalculateDistance(Location[])
  fullName: InnerLibs.Mathematic.CalculateDistance(InnerLibs.Location[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: CalculateDistance
    path: Maths.vb
    startLine: 549
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCalcula a distancia passando por todos os pontos\n"
  example: []
  syntax:
    content: public static double CalculateDistance(params Location[] Locations)
    parameters:
    - id: Locations
      type: InnerLibs.Location[]
      description: Localizacoes
    return:
      type: System.Double
      description: ''
    content.vb: Public Shared Function CalculateDistance(ParamArray Locations As Location()) As Double
  overload: InnerLibs.Mathematic.CalculateDistance*
  nameWithType.vb: Mathematic.CalculateDistance(Location())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.CalculateDistance(InnerLibs.Location())
  name.vb: CalculateDistance(Location())
- uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  id: IsBetween``1(``0,System.Object,System.Object)
  isExtensionMethod: true
  parent: InnerLibs.Mathematic
  langs:
  - csharp
  - vb
  name: IsBetween<Type>(Type, Object, Object)
  nameWithType: Mathematic.IsBetween<Type>(Type, Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween<Type>(Type, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Maths.vb
    id: IsBetween
    path: Maths.vb
    startLine: 569
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se um numero está entre outros 2 números\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsBetween<Type>(this Type Number, object FirstNumber, object SecondNumber)
    parameters:
    - id: Number
      type: '{Type}'
      description: Numero
    - id: FirstNumber
      type: System.Object
      description: Primeiro numero comparador
    - id: SecondNumber
      type: System.Object
      description: Segundo numero comparador
    typeParameters:
    - id: Type
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsBetween(Of Type)(Number As Type, FirstNumber As Object, SecondNumber As Object) As Boolean
  overload: InnerLibs.Mathematic.IsBetween*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Mathematic.IsBetween(Of Type)(Type, Object, Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Mathematic.IsBetween(Of Type)(Type, System.Object, System.Object)
  name.vb: IsBetween(Of Type)(Type, Object, Object)
references:
- uid: InnerLibs
  commentId: N:InnerLibs
  name: InnerLibs
  nameWithType: InnerLibs
  fullName: InnerLibs
- uid: InnerLibs.Mathematic.InnerLibs.ClassTools.CreateDictionary
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary()
  nameWithType: ClassTools.CreateDictionary()
  fullName: InnerLibs.ClassTools.CreateDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  name: GetProperties(BindingFlags)
  nameWithType: ClassTools.GetProperties(BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object)
  name: GetProperties()
  nameWithType: ClassTools.GetProperties()
  fullName: InnerLibs.ClassTools.GetProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  name: GetPropertyValue(String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  name: GetPropertyValue<Type>(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  name: GetPropertyValue(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  name: HasProperty(String)
  nameWithType: ClassTools.HasProperty(String)
  fullName: InnerLibs.ClassTools.HasProperty(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsArrayOf``1
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  name: IsArrayOf<T>()
  nameWithType: ClassTools.IsArrayOf<T>()
  fullName: InnerLibs.ClassTools.IsArrayOf<T>()
  nameWithType.vb: ClassTools.IsArrayOf(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)()
  name.vb: IsArrayOf(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsDictionary
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsDictionary(System.Object)
  name: IsDictionary()
  nameWithType: ClassTools.IsDictionary()
  fullName: InnerLibs.ClassTools.IsDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Mathematic},System.Collections.Generic.IEqualityComparer{InnerLibs.Mathematic})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsIn(IEnumerable<Mathematic>, IEqualityComparer<Mathematic>)
  nameWithType: ClassTools.IsIn(IEnumerable<Mathematic>, IEqualityComparer<Mathematic>)
  fullName: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable<InnerLibs.Mathematic>, System.Collections.Generic.IEqualityComparer<InnerLibs.Mathematic>)
  nameWithType.vb: ClassTools.IsIn(IEnumerable(Of Mathematic), IEqualityComparer(Of Mathematic))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable(Of InnerLibs.Mathematic), System.Collections.Generic.IEqualityComparer(Of InnerLibs.Mathematic))
  name.vb: IsIn(IEnumerable(Of Mathematic), IEqualityComparer(Of Mathematic))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Mathematic},System.Collections.Generic.IEqualityComparer{InnerLibs.Mathematic})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Mathematic},System.Collections.Generic.IEqualityComparer{InnerLibs.Mathematic})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Mathematic}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Mathematic})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  name: IsInAny(IEnumerable<Mathematic>[], IEqualityComparer<Mathematic>)
  nameWithType: ClassTools.IsInAny(IEnumerable<Mathematic>[], IEqualityComparer<Mathematic>)
  fullName: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable<InnerLibs.Mathematic>[], System.Collections.Generic.IEqualityComparer<InnerLibs.Mathematic>)
  nameWithType.vb: ClassTools.IsInAny(IEnumerable(Of Mathematic)(), IEqualityComparer(Of Mathematic))
  fullName.vb: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable(Of InnerLibs.Mathematic)(), System.Collections.Generic.IEqualityComparer(Of InnerLibs.Mathematic))
  name.vb: IsInAny(IEnumerable(Of Mathematic)(), IEqualityComparer(Of Mathematic))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Mathematic}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Mathematic})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Mathematic}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Mathematic})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsList
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsList(System.Object)
  name: IsList()
  nameWithType: ClassTools.IsList()
  fullName: InnerLibs.ClassTools.IsList()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Mathematic},System.Collections.Generic.IEqualityComparer{InnerLibs.Mathematic})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsNotIn(IEnumerable<Mathematic>, IEqualityComparer<Mathematic>)
  nameWithType: ClassTools.IsNotIn(IEnumerable<Mathematic>, IEqualityComparer<Mathematic>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable<InnerLibs.Mathematic>, System.Collections.Generic.IEqualityComparer<InnerLibs.Mathematic>)
  nameWithType.vb: ClassTools.IsNotIn(IEnumerable(Of Mathematic), IEqualityComparer(Of Mathematic))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable(Of InnerLibs.Mathematic), System.Collections.Generic.IEqualityComparer(Of InnerLibs.Mathematic))
  name.vb: IsNotIn(IEnumerable(Of Mathematic), IEqualityComparer(Of Mathematic))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Mathematic},System.Collections.Generic.IEqualityComparer{InnerLibs.Mathematic})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Mathematic},System.Collections.Generic.IEqualityComparer{InnerLibs.Mathematic})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsNotIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsType``1
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsType``1(System.Object)
  name: IsType<T>()
  nameWithType: ClassTools.IsType<T>()
  fullName: InnerLibs.ClassTools.IsType<T>()
  nameWithType.vb: ClassTools.IsType(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)()
  name.vb: IsType(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.ClassTools.NullCoalesce(InnerLibs.Mathematic[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce(Mathematic[])
  nameWithType: ClassTools.NullCoalesce(Mathematic[])
  fullName: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Mathematic[])
  nameWithType.vb: ClassTools.NullCoalesce(Mathematic())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Mathematic())
  name.vb: NullCoalesce(Mathematic())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Mathematic[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Mathematic[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.ClassTools.NullifyProperties
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties()
  nameWithType: ClassTools.NullifyProperties()
  fullName: InnerLibs.ClassTools.NullifyProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  name: SetPropertyValue<Type>(String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.String, Type)
  name.vb: SetPropertyValue(Of Type)(String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  name: SetPropertyValueFromCollection<Type>(String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  name: ToFlatString(String)
  nameWithType: ClassTools.ToFlatString(String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.DataManipulation.GetDbType
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  parent: InnerLibs.DataManipulation
  definition: InnerLibs.DataManipulation.GetDbType(System.Object)
  name: GetDbType()
  nameWithType: DataManipulation.GetDbType()
  fullName: InnerLibs.DataManipulation.GetDbType()
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.Converter.DefineEmptyList
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList()
  nameWithType: Converter.DefineEmptyList()
  fullName: InnerLibs.Converter.DefineEmptyList()
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.Converter.ChangeType``1
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType>()
  nameWithType: Converter.ChangeType<ToType>()
  fullName: InnerLibs.Converter.ChangeType<ToType>()
  nameWithType.vb: Converter.ChangeType(Of ToType)()
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType)()
  name.vb: ChangeType(Of ToType)()
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType<ToType>
    nameWithType: Converter.ChangeType<ToType>
    fullName: InnerLibs.Converter.ChangeType<ToType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType(Of ToType)
    nameWithType: Converter.ChangeType(Of ToType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.JsonViewer.CreateNode
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  parent: InnerLibs.JsonViewer
  definition: InnerLibs.JsonViewer.CreateNode(System.Object)
  name: CreateNode()
  nameWithType: JsonViewer.CreateNode()
  fullName: InnerLibs.JsonViewer.CreateNode()
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  parent: InnerLibs.Mathematic
  definition: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  name: IsBetween(Object, Object)
  nameWithType: Mathematic.IsBetween(Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Text.SerializeJSON(System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  parent: InnerLibs.Text
  definition: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  name: SerializeJSON(String)
  nameWithType: Text.SerializeJSON(String)
  fullName: InnerLibs.Text.SerializeJSON(System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNumber
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNumber(System.Object)
  name: IsNumber()
  nameWithType: Verify.IsNumber()
  fullName: InnerLibs.Verify.IsNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNotNumber
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNotNumber(System.Object)
  name: IsNotNumber()
  nameWithType: Verify.IsNotNumber()
  fullName: InnerLibs.Verify.IsNotNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IfBlank``1({T})
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  name: IfBlank<T>(T)
  nameWithType: Verify.IfBlank<T>(T)
  fullName: InnerLibs.Verify.IfBlank<T>(T)
  nameWithType.vb: Verify.IfBlank(Of T)(T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(T)
  name.vb: IfBlank(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.Verify.NullIf(System.Func{InnerLibs.Mathematic,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  name: NullIf(Func<Mathematic, Boolean>)
  nameWithType: Verify.NullIf(Func<Mathematic, Boolean>)
  fullName: InnerLibs.Verify.NullIf(System.Func<InnerLibs.Mathematic, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Func(Of Mathematic, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(System.Func(Of InnerLibs.Mathematic, System.Boolean))
  name.vb: NullIf(Func(Of Mathematic, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.Mathematic,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.Mathematic,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.Verify.NullIf(InnerLibs.Mathematic)
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf(Mathematic)
  nameWithType: Verify.NullIf(Mathematic)
  fullName: InnerLibs.Verify.NullIf(InnerLibs.Mathematic)
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.Mathematic)
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.Mathematic)
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  parent: InnerLibs.Web
  definition: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  name: CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax(System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Mathematic,{TextType}},System.Func{InnerLibs.Mathematic,{ValueType}})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  parent: InnerLibs.Web
  definition: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  name: AsListItem<TextType, ValueType>(Func<Mathematic, TextType>, Func<Mathematic, ValueType>)
  nameWithType: Web.AsListItem<TextType, ValueType>(Func<Mathematic, TextType>, Func<Mathematic, ValueType>)
  fullName: InnerLibs.Web.AsListItem<TextType, ValueType>(System.Func<InnerLibs.Mathematic, TextType>, System.Func<InnerLibs.Mathematic, ValueType>)
  nameWithType.vb: Web.AsListItem(Of TextType, ValueType)(Func(Of Mathematic, TextType), Func(Of Mathematic, ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of TextType, ValueType)(System.Func(Of InnerLibs.Mathematic, TextType), System.Func(Of InnerLibs.Mathematic, ValueType))
  name.vb: AsListItem(Of TextType, ValueType)(Func(Of Mathematic, TextType), Func(Of Mathematic, ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Mathematic,``0},System.Func{InnerLibs.Mathematic,``1})
    name: AsListItem<TextType, ValueType>
    nameWithType: Web.AsListItem<TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Mathematic,``0},System.Func{InnerLibs.Mathematic,``1})
    name: AsListItem(Of TextType, ValueType)
    nameWithType: Web.AsListItem(Of TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.GetCastedValue
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.GetCastedValue(System.Object)
  name: GetCastedValue()
  nameWithType: WinForms.GetCastedValue()
  fullName: InnerLibs.WinForms.GetCastedValue()
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  name: CastValueForControl(Object)
  nameWithType: WinForms.CastValueForControl(Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  name: ApplyToControls(HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls(HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Mathematic,System.Func{InnerLibs.Mathematic,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  name: HasSamePropertyValues(Mathematic, Func<Mathematic, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues(Mathematic, Func<Mathematic, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Mathematic, System.Func<InnerLibs.Mathematic, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(Mathematic, Func(Of Mathematic, Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Mathematic, System.Func(Of InnerLibs.Mathematic, System.Object)())
  name.vb: HasSamePropertyValues(Mathematic, Func(Of Mathematic, Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Mathematic,System.Func{InnerLibs.Mathematic,System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Mathematic,System.Func{InnerLibs.Mathematic,System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Mathematic
    name: Mathematic
    nameWithType: Mathematic
    fullName: InnerLibs.Mathematic
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary<Type>(Type)
  nameWithType: ClassTools.CreateDictionary<Type>(Type)
  fullName: InnerLibs.ClassTools.CreateDictionary<Type>(Type)
  nameWithType.vb: ClassTools.CreateDictionary(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.CreateDictionary(Of Type)(Type)
  name.vb: CreateDictionary(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary<Type>
    nameWithType: ClassTools.CreateDictionary<Type>
    fullName: InnerLibs.ClassTools.CreateDictionary<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary(Of Type)
    nameWithType: ClassTools.CreateDictionary(Of Type)
    fullName: InnerLibs.ClassTools.CreateDictionary(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools
  commentId: T:InnerLibs.ClassTools
  parent: InnerLibs
  name: ClassTools
  nameWithType: ClassTools
  fullName: InnerLibs.ClassTools
- uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  isExternal: true
  name: GetProperties(Object, BindingFlags)
  nameWithType: ClassTools.GetProperties(Object, BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object, System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetProperties(System.Object)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  isExternal: true
  name: GetProperties(Object)
  nameWithType: ClassTools.GetProperties(Object)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue<Type>(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.Object, System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(Object, String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.Object, System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(Object, String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  isExternal: true
  name: HasProperty(Object, String)
  nameWithType: ClassTools.HasProperty(Object, String)
  fullName: InnerLibs.ClassTools.HasProperty(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  isExternal: true
  name: IsArrayOf<T>(Object)
  nameWithType: ClassTools.IsArrayOf<T>(Object)
  fullName: InnerLibs.ClassTools.IsArrayOf<T>(System.Object)
  nameWithType.vb: ClassTools.IsArrayOf(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)(System.Object)
  name.vb: IsArrayOf(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsDictionary(System.Object)
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  isExternal: true
  name: IsDictionary(Object)
  nameWithType: ClassTools.IsDictionary(Object)
  fullName: InnerLibs.ClassTools.IsDictionary(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  nameWithType: ClassTools.IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsInAny<Type>(Type, System.Collections.Generic.IEnumerable<Type>[], System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsInAny(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type)(), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny<Type>
    nameWithType: ClassTools.IsInAny<Type>
    fullName: InnerLibs.ClassTools.IsInAny<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny(Of Type)
    nameWithType: ClassTools.IsInAny(Of Type)
    fullName: InnerLibs.ClassTools.IsInAny(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsList(System.Object)
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  isExternal: true
  name: IsList(Object)
  nameWithType: ClassTools.IsList(Object)
  fullName: InnerLibs.ClassTools.IsList(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsType``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  isExternal: true
  name: IsType<T>(Object)
  nameWithType: ClassTools.IsType<T>(Object)
  fullName: InnerLibs.ClassTools.IsType<T>(System.Object)
  nameWithType.vb: ClassTools.IsType(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)(System.Object)
  name.vb: IsType(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce<T>(T, T[])
  nameWithType: ClassTools.NullCoalesce<T>(T, T[])
  fullName: InnerLibs.ClassTools.NullCoalesce<T>(T, T[])
  nameWithType.vb: ClassTools.NullCoalesce(Of T)(T, T())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(Of T)(T, T())
  name.vb: NullCoalesce(Of T)(T, T())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce<T>
    nameWithType: ClassTools.NullCoalesce<T>
    fullName: InnerLibs.ClassTools.NullCoalesce<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce(Of T)
    nameWithType: ClassTools.NullCoalesce(Of T)
    fullName: InnerLibs.ClassTools.NullCoalesce(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties<Type>(Type)
  nameWithType: ClassTools.NullifyProperties<Type>(Type)
  fullName: InnerLibs.ClassTools.NullifyProperties<Type>(Type)
  nameWithType.vb: ClassTools.NullifyProperties(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.NullifyProperties(Of Type)(Type)
  name.vb: NullifyProperties(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties<Type>
    nameWithType: ClassTools.NullifyProperties<Type>
    fullName: InnerLibs.ClassTools.NullifyProperties<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties(Of Type)
    nameWithType: ClassTools.NullifyProperties(Of Type)
    fullName: InnerLibs.ClassTools.NullifyProperties(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  isExternal: true
  name: SetPropertyValue<Type>(Object, String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(Object, String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.Object, System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(Object, String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.Object, System.String, Type)
  name.vb: SetPropertyValue(Of Type)(Object, String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  isExternal: true
  name: SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.Object, System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.Object, System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  isExternal: true
  name: ToFlatString(Object, String)
  nameWithType: ClassTools.ToFlatString(Object, String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation.GetDbType(System.Object)
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  isExternal: true
  name: GetDbType(Object)
  nameWithType: DataManipulation.GetDbType(Object)
  fullName: InnerLibs.DataManipulation.GetDbType(System.Object)
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation
  commentId: T:InnerLibs.DataManipulation
  parent: InnerLibs
  name: DataManipulation
  nameWithType: DataManipulation
  fullName: InnerLibs.DataManipulation
- uid: InnerLibs.Converter.DefineEmptyList``1(``0)
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList<T>(T)
  nameWithType: Converter.DefineEmptyList<T>(T)
  fullName: InnerLibs.Converter.DefineEmptyList<T>(T)
  nameWithType.vb: Converter.DefineEmptyList(Of T)(T)
  fullName.vb: InnerLibs.Converter.DefineEmptyList(Of T)(T)
  name.vb: DefineEmptyList(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList<T>
    nameWithType: Converter.DefineEmptyList<T>
    fullName: InnerLibs.Converter.DefineEmptyList<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList(Of T)
    nameWithType: Converter.DefineEmptyList(Of T)
    fullName: InnerLibs.Converter.DefineEmptyList(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Converter
  commentId: T:InnerLibs.Converter
  parent: InnerLibs
  name: Converter
  nameWithType: Converter
  fullName: InnerLibs.Converter
- uid: InnerLibs.Converter.ChangeType``2(``1)
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType, FromType>(FromType)
  nameWithType: Converter.ChangeType<ToType, FromType>(FromType)
  fullName: InnerLibs.Converter.ChangeType<ToType, FromType>(FromType)
  nameWithType.vb: Converter.ChangeType(Of ToType, FromType)(FromType)
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType, FromType)(FromType)
  name.vb: ChangeType(Of ToType, FromType)(FromType)
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType<ToType, FromType>
    nameWithType: Converter.ChangeType<ToType, FromType>
    fullName: InnerLibs.Converter.ChangeType<ToType, FromType>
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType(Of ToType, FromType)
    nameWithType: Converter.ChangeType(Of ToType, FromType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType, FromType)
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer.CreateNode(System.Object)
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  isExternal: true
  name: CreateNode(Object)
  nameWithType: JsonViewer.CreateNode(Object)
  fullName: InnerLibs.JsonViewer.CreateNode(System.Object)
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer
  commentId: T:InnerLibs.JsonViewer
  parent: InnerLibs
  name: JsonViewer
  nameWithType: JsonViewer
  fullName: InnerLibs.JsonViewer
- uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  isExternal: true
  name: IsBetween<Type>(Type, Object, Object)
  nameWithType: Mathematic.IsBetween<Type>(Type, Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween<Type>(Type, System.Object, System.Object)
  nameWithType.vb: Mathematic.IsBetween(Of Type)(Type, Object, Object)
  fullName.vb: InnerLibs.Mathematic.IsBetween(Of Type)(Type, System.Object, System.Object)
  name.vb: IsBetween(Of Type)(Type, Object, Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween<Type>
    nameWithType: Mathematic.IsBetween<Type>
    fullName: InnerLibs.Mathematic.IsBetween<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween(Of Type)
    nameWithType: Mathematic.IsBetween(Of Type)
    fullName: InnerLibs.Mathematic.IsBetween(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic
  commentId: T:InnerLibs.Mathematic
  parent: InnerLibs
  name: Mathematic
  nameWithType: Mathematic
  fullName: InnerLibs.Mathematic
- uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  isExternal: true
  name: SerializeJSON(Object, String)
  nameWithType: Text.SerializeJSON(Object, String)
  fullName: InnerLibs.Text.SerializeJSON(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text
  commentId: T:InnerLibs.Text
  parent: InnerLibs
  name: Text
  nameWithType: Text
  fullName: InnerLibs.Text
- uid: InnerLibs.Verify.IsNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  isExternal: true
  name: IsNumber(Object)
  nameWithType: Verify.IsNumber(Object)
  fullName: InnerLibs.Verify.IsNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify
  commentId: T:InnerLibs.Verify
  parent: InnerLibs
  name: Verify
  nameWithType: Verify
  fullName: InnerLibs.Verify
- uid: InnerLibs.Verify.IsNotNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  isExternal: true
  name: IsNotNumber(Object)
  nameWithType: Verify.IsNotNumber(Object)
  fullName: InnerLibs.Verify.IsNotNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  isExternal: true
  name: IfBlank<T>(Object, T)
  nameWithType: Verify.IfBlank<T>(Object, T)
  fullName: InnerLibs.Verify.IfBlank<T>(System.Object, T)
  nameWithType.vb: Verify.IfBlank(Of T)(Object, T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(System.Object, T)
  name.vb: IfBlank(Of T)(Object, T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  isExternal: true
  name: NullIf<T>(T, Func<T, Boolean>)
  nameWithType: Verify.NullIf<T>(T, Func<T, Boolean>)
  fullName: InnerLibs.Verify.NullIf<T>(T, System.Func<T, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Of T)(T, Func(Of T, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, System.Func(Of T, System.Boolean))
  name.vb: NullIf(Of T)(T, Func(Of T, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,``0)
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf<T>(T, T)
  nameWithType: Verify.NullIf<T>(T, T)
  fullName: InnerLibs.Verify.NullIf<T>(T, T)
  nameWithType.vb: Verify.NullIf(Of T)(T, T)
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, T)
  name.vb: NullIf(Of T)(T, T)
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  isExternal: true
  name: CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax<Type>(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  nameWithType.vb: Web.CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  fullName.vb: InnerLibs.Web.CreateFromAjax(Of Type)(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  name.vb: CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax<Type>
    nameWithType: Web.CreateFromAjax<Type>
    fullName: InnerLibs.Web.CreateFromAjax<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax(Of Type)
    nameWithType: Web.CreateFromAjax(Of Type)
    fullName: InnerLibs.Web.CreateFromAjax(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web
  commentId: T:InnerLibs.Web
  parent: InnerLibs
  name: Web
  nameWithType: Web
  fullName: InnerLibs.Web
- uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  isExternal: true
  name: AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  nameWithType: Web.AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>(T, System.Func<T, TextType>, System.Func<T, ValueType>)
  nameWithType.vb: Web.AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)(T, System.Func(Of T, TextType), System.Func(Of T, ValueType))
  name.vb: AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem<T, TextType, ValueType>
    nameWithType: Web.AsListItem<T, TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem(Of T, TextType, ValueType)
    nameWithType: Web.AsListItem(Of T, TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms.GetCastedValue(System.Object)
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  isExternal: true
  name: GetCastedValue(Object)
  nameWithType: WinForms.GetCastedValue(Object)
  fullName: InnerLibs.WinForms.GetCastedValue(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms
  commentId: T:InnerLibs.WinForms
  parent: InnerLibs
  name: WinForms
  nameWithType: WinForms
  fullName: InnerLibs.WinForms
- uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  isExternal: true
  name: CastValueForControl(Object, Object)
  nameWithType: WinForms.CastValueForControl(Object, Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  isExternal: true
  name: ApplyToControls<T>(T, HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls<T>(T, HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>(T, System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(Of T)(T, HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)(T, System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(Of T)(T, HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls<T>
    nameWithType: LINQExtensions.ApplyToControls<T>
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls(Of T)
    nameWithType: LINQExtensions.ApplyToControls(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions
  commentId: T:InnerLibs.LINQ.LINQExtensions
  parent: InnerLibs.LINQ
  name: LINQExtensions
  nameWithType: LINQExtensions
  fullName: InnerLibs.LINQ.LINQExtensions
- uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  isExternal: true
  name: HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>(T, T, System.Func<T, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)(T, T, System.Func(Of T, System.Object)())
  name.vb: HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues<T>
    nameWithType: LINQExtensions.HasSamePropertyValues<T>
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues(Of T)
    nameWithType: LINQExtensions.HasSamePropertyValues(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ
  commentId: N:InnerLibs.LINQ
  name: InnerLibs.LINQ
  nameWithType: InnerLibs.LINQ
  fullName: InnerLibs.LINQ
- uid: InnerLibs.Mathematic.ToOrdinalNumber*
  commentId: Overload:InnerLibs.Mathematic.ToOrdinalNumber
  name: ToOrdinalNumber
  nameWithType: Mathematic.ToOrdinalNumber
  fullName: InnerLibs.Mathematic.ToOrdinalNumber
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: InnerLibs.Mathematic.EvaluateExpression*
  commentId: Overload:InnerLibs.Mathematic.EvaluateExpression
  name: EvaluateExpression
  nameWithType: Mathematic.EvaluateExpression
  fullName: InnerLibs.Mathematic.EvaluateExpression
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: '{T}'
  commentId: '!:``0'
  definition: '``0'
  name: T
  nameWithType: T
  fullName: T
- uid: '``0'
  name: T
  nameWithType: T
  fullName: T
- uid: InnerLibs.Mathematic.ArithmeticProgression*
  commentId: Overload:InnerLibs.Mathematic.ArithmeticProgression
  name: ArithmeticProgression
  nameWithType: Mathematic.ArithmeticProgression
  fullName: InnerLibs.Mathematic.ArithmeticProgression
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: InnerLibs.Mathematic.GeometricProgression*
  commentId: Overload:InnerLibs.Mathematic.GeometricProgression
  name: GeometricProgression
  nameWithType: Mathematic.GeometricProgression
  fullName: InnerLibs.Mathematic.GeometricProgression
- uid: InnerLibs.Mathematic.CartesianProduct*
  commentId: Overload:InnerLibs.Mathematic.CartesianProduct
  name: CartesianProduct
  nameWithType: Mathematic.CartesianProduct
  fullName: InnerLibs.Mathematic.CartesianProduct
- uid: '{T}[][]'
  commentId: T:``0[][]
  definition: '``0[][]'
  name: T[][]
  nameWithType: T[][]
  fullName: T[][]
  nameWithType.vb: T()()
  fullName.vb: T()()
  name.vb: T()()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List{{T}[]}
  commentId: T:System.Collections.Generic.List{``0[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T[]>
  nameWithType: List<T[]>
  fullName: System.Collections.Generic.List<T[]>
  nameWithType.vb: List(Of T())
  fullName.vb: System.Collections.Generic.List(Of T())
  name.vb: List(Of T())
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: '``0[][]'
  commentId: T:``0[][]
  name: T[][]
  nameWithType: T[][]
  fullName: T[][]
  nameWithType.vb: T()()
  fullName.vb: T()()
  name.vb: T()()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.Mathematic.Fibonacci*
  commentId: Overload:InnerLibs.Mathematic.Fibonacci
  name: Fibonacci
  nameWithType: Mathematic.Fibonacci
  fullName: InnerLibs.Mathematic.Fibonacci
- uid: InnerLibs.Mathematic.Factorial*
  commentId: Overload:InnerLibs.Mathematic.Factorial
  name: Factorial
  nameWithType: Mathematic.Factorial
  fullName: InnerLibs.Mathematic.Factorial
- uid: InnerLibs.Mathematic.CalculatePercent*
  commentId: Overload:InnerLibs.Mathematic.CalculatePercent
  name: CalculatePercent
  nameWithType: Mathematic.CalculatePercent
  fullName: InnerLibs.Mathematic.CalculatePercent
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.Dictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{TKey},System.Decimal}
  commentId: T:System.Collections.Generic.Dictionary{``0,System.Decimal}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, Decimal>
  nameWithType: Dictionary<TKey, Decimal>
  fullName: System.Collections.Generic.Dictionary<TKey, System.Decimal>
  nameWithType.vb: Dictionary(Of TKey, Decimal)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, System.Decimal)
  name.vb: Dictionary(Of TKey, Decimal)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TObject}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TObject>
  nameWithType: IEnumerable<TObject>
  fullName: System.Collections.Generic.IEnumerable<TObject>
  nameWithType.vb: IEnumerable(Of TObject)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TObject)
  name.vb: IEnumerable(Of TObject)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TObject},{TKey}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TObject, TKey>
  nameWithType: Func<TObject, TKey>
  fullName: System.Func<TObject, TKey>
  nameWithType.vb: Func(Of TObject, TKey)
  fullName.vb: System.Func(Of TObject, TKey)
  name.vb: Func(Of TObject, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TObject},{TValue}}
  commentId: T:System.Func{``0,``2}
  parent: System
  definition: System.Func`2
  name: Func<TObject, TValue>
  nameWithType: Func<TObject, TValue>
  fullName: System.Func<TObject, TValue>
  nameWithType.vb: Func(Of TObject, TValue)
  fullName.vb: System.Func(Of TObject, TValue)
  name.vb: Func(Of TObject, TValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{Tobject}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Tobject>
  nameWithType: IEnumerable<Tobject>
  fullName: System.Collections.Generic.IEnumerable<Tobject>
  nameWithType.vb: IEnumerable(Of Tobject)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Tobject)
  name.vb: IEnumerable(Of Tobject)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Tobject
    nameWithType: Tobject
    fullName: Tobject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Tobject
    nameWithType: Tobject
    fullName: Tobject
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{Tobject},{Tvalue}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<Tobject, Tvalue>
  nameWithType: Func<Tobject, Tvalue>
  fullName: System.Func<Tobject, Tvalue>
  nameWithType.vb: Func(Of Tobject, Tvalue)
  fullName.vb: System.Func(Of Tobject, Tvalue)
  name.vb: Func(Of Tobject, Tvalue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Tobject
    nameWithType: Tobject
    fullName: Tobject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Tvalue
    nameWithType: Tvalue
    fullName: Tvalue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Tobject
    nameWithType: Tobject
    fullName: Tobject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Tvalue
    nameWithType: Tvalue
    fullName: Tvalue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{Tobject},System.Decimal}
  commentId: T:System.Collections.Generic.Dictionary{``0,System.Decimal}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Tobject, Decimal>
  nameWithType: Dictionary<Tobject, Decimal>
  fullName: System.Collections.Generic.Dictionary<Tobject, System.Decimal>
  nameWithType.vb: Dictionary(Of Tobject, Decimal)
  fullName.vb: System.Collections.Generic.Dictionary(Of Tobject, System.Decimal)
  name.vb: Dictionary(Of Tobject, Decimal)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Tobject
    nameWithType: Tobject
    fullName: Tobject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Tobject
    nameWithType: Tobject
    fullName: Tobject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TValue}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TValue>
  nameWithType: IEnumerable<TValue>
  fullName: System.Collections.Generic.IEnumerable<TValue>
  nameWithType.vb: IEnumerable(Of TValue)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TValue)
  name.vb: IEnumerable(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{TValue},System.Decimal}
  commentId: T:System.Collections.Generic.Dictionary{``0,System.Decimal}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TValue, Decimal>
  nameWithType: Dictionary<TValue, Decimal>
  fullName: System.Collections.Generic.Dictionary<TValue, System.Decimal>
  nameWithType.vb: Dictionary(Of TValue, Decimal)
  fullName.vb: System.Collections.Generic.Dictionary(Of TValue, System.Decimal)
  name.vb: Dictionary(Of TValue, Decimal)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.CalculateValueFromPercent*
  commentId: Overload:InnerLibs.Mathematic.CalculateValueFromPercent
  name: CalculateValueFromPercent
  nameWithType: Mathematic.CalculateValueFromPercent
  fullName: InnerLibs.Mathematic.CalculateValueFromPercent
- uid: InnerLibs.Mathematic.Slice*
  commentId: Overload:InnerLibs.Mathematic.Slice
  name: Slice
  nameWithType: Mathematic.Slice
  fullName: InnerLibs.Mathematic.Slice
- uid: InnerLibs.Mathematic.GetDecimalPlaces*
  commentId: Overload:InnerLibs.Mathematic.GetDecimalPlaces
  name: GetDecimalPlaces
  nameWithType: Mathematic.GetDecimalPlaces
  fullName: InnerLibs.Mathematic.GetDecimalPlaces
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: InnerLibs.Mathematic.Ceil*
  commentId: Overload:InnerLibs.Mathematic.Ceil
  name: Ceil
  nameWithType: Mathematic.Ceil
  fullName: InnerLibs.Mathematic.Ceil
- uid: InnerLibs.Mathematic.Floor*
  commentId: Overload:InnerLibs.Mathematic.Floor
  name: Floor
  nameWithType: Mathematic.Floor
  fullName: InnerLibs.Mathematic.Floor
- uid: InnerLibs.Mathematic.SetMaxValue*
  commentId: Overload:InnerLibs.Mathematic.SetMaxValue
  name: SetMaxValue
  nameWithType: Mathematic.SetMaxValue
  fullName: InnerLibs.Mathematic.SetMaxValue
- uid: '{Type}'
  commentId: '!:``0'
  definition: '``0'
  name: Type
  nameWithType: Type
  fullName: Type
- uid: InnerLibs.Mathematic.SetMinValue*
  commentId: Overload:InnerLibs.Mathematic.SetMinValue
  name: SetMinValue
  nameWithType: Mathematic.SetMinValue
  fullName: InnerLibs.Mathematic.SetMinValue
- uid: InnerLibs.Mathematic.LimitRange*
  commentId: Overload:InnerLibs.Mathematic.LimitRange
  name: LimitRange
  nameWithType: Mathematic.LimitRange
  fullName: InnerLibs.Mathematic.LimitRange
- uid: InnerLibs.Mathematic.LimitIndex*
  commentId: Overload:InnerLibs.Mathematic.LimitIndex
  name: LimitIndex
  nameWithType: Mathematic.LimitIndex
  fullName: InnerLibs.Mathematic.LimitIndex
- uid: System.Collections.Generic.IEnumerable{{AnyType}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<AnyType>
  nameWithType: IEnumerable<AnyType>
  fullName: System.Collections.Generic.IEnumerable<AnyType>
  nameWithType.vb: IEnumerable(Of AnyType)
  fullName.vb: System.Collections.Generic.IEnumerable(Of AnyType)
  name.vb: IEnumerable(Of AnyType)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: AnyType
    nameWithType: AnyType
    fullName: AnyType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: AnyType
    nameWithType: AnyType
    fullName: AnyType
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic.Round*
  commentId: Overload:InnerLibs.Mathematic.Round
  name: Round
  nameWithType: Mathematic.Round
  fullName: InnerLibs.Mathematic.Round
- uid: InnerLibs.Mathematic.Lerp*
  commentId: Overload:InnerLibs.Mathematic.Lerp
  name: Lerp
  nameWithType: Mathematic.Lerp
  fullName: InnerLibs.Mathematic.Lerp
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: InnerLibs.Mathematic.Sum*
  commentId: Overload:InnerLibs.Mathematic.Sum
  name: Sum
  nameWithType: Mathematic.Sum
  fullName: InnerLibs.Mathematic.Sum
- uid: System.Double[]
  commentId: T:System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int64[]
  commentId: T:System.Int64[]
  isExternal: true
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  nameWithType.vb: Int64()
  fullName.vb: System.Int64()
  name.vb: Int64()
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32[]
  commentId: T:System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Decimal[]
  commentId: T:System.Decimal[]
  isExternal: true
  name: Decimal[]
  nameWithType: Decimal[]
  fullName: System.Decimal[]
  nameWithType.vb: Decimal()
  fullName.vb: System.Decimal()
  name.vb: Decimal()
  spec.csharp:
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.Mathematic.Average*
  commentId: Overload:InnerLibs.Mathematic.Average
  name: Average
  nameWithType: Mathematic.Average
  fullName: InnerLibs.Mathematic.Average
- uid: InnerLibs.Mathematic.ToRadians*
  commentId: Overload:InnerLibs.Mathematic.ToRadians
  name: ToRadians
  nameWithType: Mathematic.ToRadians
  fullName: InnerLibs.Mathematic.ToRadians
- uid: InnerLibs.Mathematic.CalculateDistance*
  commentId: Overload:InnerLibs.Mathematic.CalculateDistance
  name: CalculateDistance
  nameWithType: Mathematic.CalculateDistance
  fullName: InnerLibs.Mathematic.CalculateDistance
- uid: InnerLibs.Location
  commentId: T:InnerLibs.Location
  parent: InnerLibs
  name: Location
  nameWithType: Location
  fullName: InnerLibs.Location
- uid: InnerLibs.Location[]
  commentId: T:InnerLibs.Location[]
  name: Location[]
  nameWithType: Location[]
  fullName: InnerLibs.Location[]
  nameWithType.vb: Location()
  fullName.vb: InnerLibs.Location()
  name.vb: Location()
  spec.csharp:
  - uid: InnerLibs.Location
    name: Location
    nameWithType: Location
    fullName: InnerLibs.Location
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: InnerLibs.Location
    name: Location
    nameWithType: Location
    fullName: InnerLibs.Location
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.Mathematic.IsBetween*
  commentId: Overload:InnerLibs.Mathematic.IsBetween
  name: IsBetween
  nameWithType: Mathematic.IsBetween
  fullName: InnerLibs.Mathematic.IsBetween
