### YamlMime:ManagedReference
items:
- uid: InnerLibs.Calendars
  commentId: T:InnerLibs.Calendars
  id: Calendars
  parent: InnerLibs
  children:
  - InnerLibs.Calendars.CalculatePercent(System.DateTime,System.DateTime,System.DateTime)
  - InnerLibs.Calendars.ClearTime(System.Collections.Generic.List{System.DateTime})
  - InnerLibs.Calendars.DateRange(System.DateTime,System.DateTime,System.TimeSpan)
  - InnerLibs.Calendars.Farewell(System.String)
  - InnerLibs.Calendars.FillWith(System.Web.UI.HtmlControls.HtmlSelect,InnerLibs.Calendars.CalendarType,InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)
  - InnerLibs.Calendars.FixDateOrder(System.DateTime@,System.DateTime@)
  - InnerLibs.Calendars.GetBetween(System.DateTime,System.DateTime,System.DayOfWeek[])
  - InnerLibs.Calendars.GetDifference(System.DateTime,System.DateTime)
  - InnerLibs.Calendars.GetFirstDateOfWeek(System.DateTime,System.DayOfWeek)
  - InnerLibs.Calendars.GetFirstDayOfFortnight(System.DateTime)
  - InnerLibs.Calendars.GetFirstDayOfMonth(System.DateTime)
  - InnerLibs.Calendars.GetLastDateOfWeek(System.DateTime,System.DayOfWeek)
  - InnerLibs.Calendars.GetLastDayOfFortnight(System.DateTime)
  - InnerLibs.Calendars.GetLastDayOfMonth(System.DateTime)
  - InnerLibs.Calendars.GetWeek(System.DateTime,System.DayOfWeek)
  - InnerLibs.Calendars.GetWeekOfYear(System.DateTime,System.Globalization.CultureInfo,System.DayOfWeek)
  - InnerLibs.Calendars.Greeting(System.String)
  - InnerLibs.Calendars.IsAnniversary(System.DateTime,System.Nullable{System.DateTime})
  - InnerLibs.Calendars.IsBetween(System.DateTime,System.DateTime,System.DateTime,System.Boolean)
  - InnerLibs.Calendars.IsOverlap(System.DateTime,System.DateTime,System.DateTime,System.DateTime)
  - InnerLibs.Calendars.IsSameMonth(System.DateTime,System.DateTime)
  - InnerLibs.Calendars.IsWeekend(System.DateTime)
  - InnerLibs.Calendars.LastDay(System.DayOfWeek,System.Nullable{System.DateTime})
  - InnerLibs.Calendars.LastSunday(System.Nullable{System.DateTime})
  - InnerLibs.Calendars.Months(InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)
  - InnerLibs.Calendars.NextDay(System.DayOfWeek,System.Nullable{System.DateTime})
  - InnerLibs.Calendars.NextFortnight(System.DateTime,System.Int32)
  - InnerLibs.Calendars.NextSunday(System.Nullable{System.DateTime})
  - InnerLibs.Calendars.ToFarewell(System.DateTime,System.String)
  - InnerLibs.Calendars.ToGreeting(System.DateTime,System.String)
  - InnerLibs.Calendars.ToLongDayOfWeekName(System.Int32)
  - InnerLibs.Calendars.ToLongMonthName(System.DateTime)
  - InnerLibs.Calendars.ToLongMonthName(System.Int32)
  - InnerLibs.Calendars.Tomorrow
  - InnerLibs.Calendars.ToShortDayOfWeekName(System.Int32)
  - InnerLibs.Calendars.ToShortMonthName(System.Int32)
  - InnerLibs.Calendars.ToSQLDateString(System.DateTime)
  - InnerLibs.Calendars.ToSQLDateString(System.String,System.String)
  - InnerLibs.Calendars.ToTimeElapsedString(System.TimeSpan,System.String,System.String,System.String,System.String)
  - InnerLibs.Calendars.WaitUntil(System.DateTime)
  - InnerLibs.Calendars.WeekDays(InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)
  - InnerLibs.Calendars.Yesterday
  langs:
  - csharp
  - vb
  name: Calendars
  nameWithType: Calendars
  fullName: InnerLibs.Calendars
  type: Class
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: Calendars
    path: Calendars.vb
    startLine: 150
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nModulo para manipulação de calendário\n"
  remarks: ''
  example: []
  syntax:
    content: public class Calendars
    content.vb: Public Module Calendars
  extensionMethods:
  - InnerLibs.Calendars.InnerLibs.ClassTools.CreateDictionary
  - System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  - System.Object.InnerLibs.ClassTools.GetProperties
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  - System.Object.InnerLibs.ClassTools.IsArrayOf``1
  - System.Object.InnerLibs.ClassTools.IsDictionary
  - InnerLibs.Calendars.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Calendars},System.Collections.Generic.IEqualityComparer{InnerLibs.Calendars})
  - InnerLibs.Calendars.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - InnerLibs.Calendars.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Calendars}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Calendars})
  - System.Object.InnerLibs.ClassTools.IsList
  - InnerLibs.Calendars.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Calendars},System.Collections.Generic.IEqualityComparer{InnerLibs.Calendars})
  - InnerLibs.Calendars.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - System.Object.InnerLibs.ClassTools.IsType``1
  - InnerLibs.Calendars.InnerLibs.ClassTools.NullCoalesce(InnerLibs.Calendars[])
  - InnerLibs.Calendars.InnerLibs.ClassTools.NullifyProperties
  - System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  - System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  - System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  - System.Object.InnerLibs.DataManipulation.GetDbType
  - InnerLibs.Calendars.InnerLibs.Converter.DefineEmptyList
  - InnerLibs.Calendars.InnerLibs.Converter.ChangeType``1
  - System.Object.InnerLibs.JsonViewer.CreateNode
  - InnerLibs.Calendars.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  - System.Object.InnerLibs.Text.SerializeJSON(System.String)
  - System.Object.InnerLibs.Verify.IsNumber
  - System.Object.InnerLibs.Verify.IsNotNumber
  - System.Object.InnerLibs.Verify.IfBlank``1({T})
  - InnerLibs.Calendars.InnerLibs.Verify.NullIf(System.Func{InnerLibs.Calendars,System.Boolean})
  - InnerLibs.Calendars.InnerLibs.Verify.NullIf(InnerLibs.Calendars)
  - InnerLibs.Calendars.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  - InnerLibs.Calendars.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Calendars,{TextType}},System.Func{InnerLibs.Calendars,{ValueType}})
  - System.Object.InnerLibs.WinForms.GetCastedValue
  - System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  - InnerLibs.Calendars.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  - InnerLibs.Calendars.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Calendars,System.Func{InnerLibs.Calendars,System.Object}[])
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Module
- uid: InnerLibs.Calendars.NextFortnight(System.DateTime,System.Int32)
  commentId: M:InnerLibs.Calendars.NextFortnight(System.DateTime,System.Int32)
  id: NextFortnight(System.DateTime,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: NextFortnight(DateTime, Int32)
  nameWithType: Calendars.NextFortnight(DateTime, Int32)
  fullName: InnerLibs.Calendars.NextFortnight(System.DateTime, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: NextFortnight
    path: Calendars.vb
    startLine: 158
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nPula para a data inicial da proxima quinzena\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static DateTime NextFortnight(this DateTime FromDate, int Num = 1)
    parameters:
    - id: FromDate
      type: System.DateTime
      description: Data de partida
    - id: Num
      type: System.Int32
      description: Numero de quinzenas para adiantar
    return:
      type: System.DateTime
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function NextFortnight(FromDate As Date, Num As Integer = 1) As Date
  overload: InnerLibs.Calendars.NextFortnight*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.WaitUntil(System.DateTime)
  commentId: M:InnerLibs.Calendars.WaitUntil(System.DateTime)
  id: WaitUntil(System.DateTime)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: WaitUntil(DateTime)
  nameWithType: Calendars.WaitUntil(DateTime)
  fullName: InnerLibs.Calendars.WaitUntil(System.DateTime)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: WaitUntil
    path: Calendars.vb
    startLine: 166
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAtrasa qualquer passo seguinte até a data especificada\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static void WaitUntil(this DateTime DateTime)
    parameters:
    - id: DateTime
      type: System.DateTime
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Sub WaitUntil(DateTime As Date)
  overload: InnerLibs.Calendars.WaitUntil*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.IsOverlap(System.DateTime,System.DateTime,System.DateTime,System.DateTime)
  commentId: M:InnerLibs.Calendars.IsOverlap(System.DateTime,System.DateTime,System.DateTime,System.DateTime)
  id: IsOverlap(System.DateTime,System.DateTime,System.DateTime,System.DateTime)
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: IsOverlap(DateTime, DateTime, DateTime, DateTime)
  nameWithType: Calendars.IsOverlap(DateTime, DateTime, DateTime, DateTime)
  fullName: InnerLibs.Calendars.IsOverlap(System.DateTime, System.DateTime, System.DateTime, System.DateTime)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: IsOverlap
    path: Calendars.vb
    startLine: 180
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVeirifica se existe intersecção entre dois periodos\n"
  example: []
  syntax:
    content: public static bool IsOverlap(DateTime StartDate1, DateTime EndDate1, DateTime StartDate2, DateTime EndDate2)
    parameters:
    - id: StartDate1
      type: System.DateTime
      description: Data inicial do primeiro periodo
    - id: EndDate1
      type: System.DateTime
      description: Data Final do primeiro periodo
    - id: StartDate2
      type: System.DateTime
      description: Data inicial do segundo periodo
    - id: EndDate2
      type: System.DateTime
      description: Data Final do primeiro periodo
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsOverlap(StartDate1 As Date, EndDate1 As Date, StartDate2 As Date, EndDate2 As Date) As Boolean
  overload: InnerLibs.Calendars.IsOverlap*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.DateRange(System.DateTime,System.DateTime,System.TimeSpan)
  commentId: M:InnerLibs.Calendars.DateRange(System.DateTime,System.DateTime,System.TimeSpan)
  id: DateRange(System.DateTime,System.DateTime,System.TimeSpan)
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: DateRange(DateTime, DateTime, TimeSpan)
  nameWithType: Calendars.DateRange(DateTime, DateTime, TimeSpan)
  fullName: InnerLibs.Calendars.DateRange(System.DateTime, System.DateTime, System.TimeSpan)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: DateRange
    path: Calendars.vb
    startLine: 193
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um Array de <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> contendo todas as datas entre 2 datas\n"
  example: []
  syntax:
    content: public static DateTime[] DateRange(DateTime StartDate, DateTime EndDate, TimeSpan Increment = default(TimeSpan))
    parameters:
    - id: StartDate
      type: System.DateTime
      description: Data Inicial
    - id: EndDate
      type: System.DateTime
      description: Data Final
    - id: Increment
      type: System.TimeSpan
      description: Valor a ser incrementado (padrão 1 dia)
    return:
      type: System.DateTime[]
      description: ''
    content.vb: Public Shared Function DateRange(StartDate As Date, EndDate As Date, Increment As TimeSpan = Nothing) As Date()
  overload: InnerLibs.Calendars.DateRange*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.GetFirstDateOfWeek(System.DateTime,System.DayOfWeek)
  commentId: M:InnerLibs.Calendars.GetFirstDateOfWeek(System.DateTime,System.DayOfWeek)
  id: GetFirstDateOfWeek(System.DateTime,System.DayOfWeek)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: GetFirstDateOfWeek(DateTime, DayOfWeek)
  nameWithType: Calendars.GetFirstDateOfWeek(DateTime, DayOfWeek)
  fullName: InnerLibs.Calendars.GetFirstDateOfWeek(System.DateTime, System.DayOfWeek)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: GetFirstDateOfWeek
    path: Calendars.vb
    startLine: 211
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o primeiro dia da semana da data especificada\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static DateTime GetFirstDateOfWeek(this DateTime Date, DayOfWeek FirstDayOfWeek = DayOfWeek.Sunday)
    parameters:
    - id: Date
      type: System.DateTime
    - id: FirstDayOfWeek
      type: System.DayOfWeek
      description: Primeiro dia da semana (DEFAULT é Domingo)
    return:
      type: System.DateTime
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetFirstDateOfWeek(Date As Date, FirstDayOfWeek As DayOfWeek = DayOfWeek.Sunday) As Date
  overload: InnerLibs.Calendars.GetFirstDateOfWeek*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.GetLastDateOfWeek(System.DateTime,System.DayOfWeek)
  commentId: M:InnerLibs.Calendars.GetLastDateOfWeek(System.DateTime,System.DayOfWeek)
  id: GetLastDateOfWeek(System.DateTime,System.DayOfWeek)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: GetLastDateOfWeek(DateTime, DayOfWeek)
  nameWithType: Calendars.GetLastDateOfWeek(DateTime, DayOfWeek)
  fullName: InnerLibs.Calendars.GetLastDateOfWeek(System.DateTime, System.DayOfWeek)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: GetLastDateOfWeek
    path: Calendars.vb
    startLine: 225
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o primeiro dia da semana da data especificada\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static DateTime GetLastDateOfWeek(this DateTime Date, DayOfWeek FirstDayOfWeek = DayOfWeek.Sunday)
    parameters:
    - id: Date
      type: System.DateTime
    - id: FirstDayOfWeek
      type: System.DayOfWeek
      description: Primeiro dia da semana (DEFAULT é Domingo)
    return:
      type: System.DateTime
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetLastDateOfWeek(Date As Date, FirstDayOfWeek As DayOfWeek = DayOfWeek.Sunday) As Date
  overload: InnerLibs.Calendars.GetLastDateOfWeek*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.GetWeek(System.DateTime,System.DayOfWeek)
  commentId: M:InnerLibs.Calendars.GetWeek(System.DateTime,System.DayOfWeek)
  id: GetWeek(System.DateTime,System.DayOfWeek)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: GetWeek(DateTime, DayOfWeek)
  nameWithType: Calendars.GetWeek(DateTime, DayOfWeek)
  fullName: InnerLibs.Calendars.GetWeek(System.DateTime, System.DayOfWeek)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: GetWeek
    path: Calendars.vb
    startLine: 236
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um DateRange equivalente a semana de uma data especifica\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static DateRange GetWeek(this DateTime Date, DayOfWeek FirstDayOfWeek = DayOfWeek.Sunday)
    parameters:
    - id: Date
      type: System.DateTime
    - id: FirstDayOfWeek
      type: System.DayOfWeek
      description: Primeiro dia da semana (DEFAULT é domingo)
    return:
      type: InnerLibs.DateRange
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetWeek(Date As Date, FirstDayOfWeek As DayOfWeek = DayOfWeek.Sunday) As DateRange
  overload: InnerLibs.Calendars.GetWeek*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.GetLastDayOfMonth(System.DateTime)
  commentId: M:InnerLibs.Calendars.GetLastDayOfMonth(System.DateTime)
  id: GetLastDayOfMonth(System.DateTime)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: GetLastDayOfMonth(DateTime)
  nameWithType: Calendars.GetLastDayOfMonth(DateTime)
  fullName: InnerLibs.Calendars.GetLastDayOfMonth(System.DateTime)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: GetLastDayOfMonth
    path: Calendars.vb
    startLine: 246
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna a ultima data do mes a partir de uma outra data\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static DateTime GetLastDayOfMonth(this DateTime Date)
    parameters:
    - id: Date
      type: System.DateTime
    return:
      type: System.DateTime
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetLastDayOfMonth(Date As Date) As Date
  overload: InnerLibs.Calendars.GetLastDayOfMonth*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.GetFirstDayOfMonth(System.DateTime)
  commentId: M:InnerLibs.Calendars.GetFirstDayOfMonth(System.DateTime)
  id: GetFirstDayOfMonth(System.DateTime)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: GetFirstDayOfMonth(DateTime)
  nameWithType: Calendars.GetFirstDayOfMonth(DateTime)
  fullName: InnerLibs.Calendars.GetFirstDayOfMonth(System.DateTime)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: GetFirstDayOfMonth
    path: Calendars.vb
    startLine: 256
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna a primeira data do mes a partir de uma outra data\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static DateTime GetFirstDayOfMonth(this DateTime Date)
    parameters:
    - id: Date
      type: System.DateTime
    return:
      type: System.DateTime
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetFirstDayOfMonth(Date As Date) As Date
  overload: InnerLibs.Calendars.GetFirstDayOfMonth*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.GetFirstDayOfFortnight(System.DateTime)
  commentId: M:InnerLibs.Calendars.GetFirstDayOfFortnight(System.DateTime)
  id: GetFirstDayOfFortnight(System.DateTime)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: GetFirstDayOfFortnight(DateTime)
  nameWithType: Calendars.GetFirstDayOfFortnight(DateTime)
  fullName: InnerLibs.Calendars.GetFirstDayOfFortnight(System.DateTime)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: GetFirstDayOfFortnight
    path: Calendars.vb
    startLine: 267
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna a primeira data da quinzena a partir de uma outra data\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static DateTime GetFirstDayOfFortnight(this DateTime Date)
    parameters:
    - id: Date
      type: System.DateTime
    return:
      type: System.DateTime
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetFirstDayOfFortnight(Date As Date) As Date
  overload: InnerLibs.Calendars.GetFirstDayOfFortnight*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.GetLastDayOfFortnight(System.DateTime)
  commentId: M:InnerLibs.Calendars.GetLastDayOfFortnight(System.DateTime)
  id: GetLastDayOfFortnight(System.DateTime)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: GetLastDayOfFortnight(DateTime)
  nameWithType: Calendars.GetLastDayOfFortnight(DateTime)
  fullName: InnerLibs.Calendars.GetLastDayOfFortnight(System.DateTime)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: GetLastDayOfFortnight
    path: Calendars.vb
    startLine: 277
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna a ultima data da quinzena a partir de uma outra data\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static DateTime GetLastDayOfFortnight(this DateTime Date)
    parameters:
    - id: Date
      type: System.DateTime
    return:
      type: System.DateTime
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetLastDayOfFortnight(Date As Date) As Date
  overload: InnerLibs.Calendars.GetLastDayOfFortnight*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.GetWeekOfYear(System.DateTime,System.Globalization.CultureInfo,System.DayOfWeek)
  commentId: M:InnerLibs.Calendars.GetWeekOfYear(System.DateTime,System.Globalization.CultureInfo,System.DayOfWeek)
  id: GetWeekOfYear(System.DateTime,System.Globalization.CultureInfo,System.DayOfWeek)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: GetWeekOfYear(DateTime, CultureInfo, DayOfWeek)
  nameWithType: Calendars.GetWeekOfYear(DateTime, CultureInfo, DayOfWeek)
  fullName: InnerLibs.Calendars.GetWeekOfYear(System.DateTime, System.Globalization.CultureInfo, System.DayOfWeek)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: GetWeekOfYear
    path: Calendars.vb
    startLine: 289
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o numero da semana relativa ao ano\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static int GetWeekOfYear(this DateTime Date, CultureInfo Culture = null, DayOfWeek FirstDayOfWeek = DayOfWeek.Sunday)
    parameters:
    - id: Date
      type: System.DateTime
    - id: Culture
      type: System.Globalization.CultureInfo
      description: ''
    - id: FirstDayOfWeek
      type: System.DayOfWeek
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetWeekOfYear(Date As Date, Culture As CultureInfo = Nothing, FirstDayOfWeek As DayOfWeek = DayOfWeek.Sunday) As Integer
  overload: InnerLibs.Calendars.GetWeekOfYear*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.IsSameMonth(System.DateTime,System.DateTime)
  commentId: M:InnerLibs.Calendars.IsSameMonth(System.DateTime,System.DateTime)
  id: IsSameMonth(System.DateTime,System.DateTime)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: IsSameMonth(DateTime, DateTime)
  nameWithType: Calendars.IsSameMonth(DateTime, DateTime)
  fullName: InnerLibs.Calendars.IsSameMonth(System.DateTime, System.DateTime)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: IsSameMonth
    path: Calendars.vb
    startLine: 301
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se uma data é do mesmo mês e ano que outra data\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsSameMonth(this DateTime Date, DateTime AnotherDate)
    parameters:
    - id: Date
      type: System.DateTime
    - id: AnotherDate
      type: System.DateTime
      description: Segunda data
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsSameMonth(Date As Date, AnotherDate As Date) As Boolean
  overload: InnerLibs.Calendars.IsSameMonth*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.IsAnniversary(System.DateTime,System.Nullable{System.DateTime})
  commentId: M:InnerLibs.Calendars.IsAnniversary(System.DateTime,System.Nullable{System.DateTime})
  id: IsAnniversary(System.DateTime,System.Nullable{System.DateTime})
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: IsAnniversary(DateTime, Nullable<DateTime>)
  nameWithType: Calendars.IsAnniversary(DateTime, Nullable<DateTime>)
  fullName: InnerLibs.Calendars.IsAnniversary(System.DateTime, System.Nullable<System.DateTime>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: IsAnniversary
    path: Calendars.vb
    startLine: 310
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se a Data de hoje é um aniversário\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsAnniversary(this DateTime BirthDate, DateTime? CompareWith = default(DateTime? ))
    parameters:
    - id: BirthDate
      type: System.DateTime
      description: Data de nascimento
    - id: CompareWith
      type: System.Nullable{System.DateTime}
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsAnniversary(BirthDate As Date, CompareWith As Date? = Nothing) As Boolean
  overload: InnerLibs.Calendars.IsAnniversary*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Calendars.IsAnniversary(DateTime, Nullable(Of DateTime))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Calendars.IsAnniversary(System.DateTime, System.Nullable(Of System.DateTime))
  name.vb: IsAnniversary(DateTime, Nullable(Of DateTime))
- uid: InnerLibs.Calendars.ToSQLDateString(System.DateTime)
  commentId: M:InnerLibs.Calendars.ToSQLDateString(System.DateTime)
  id: ToSQLDateString(System.DateTime)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: ToSQLDateString(DateTime)
  nameWithType: Calendars.ToSQLDateString(DateTime)
  fullName: InnerLibs.Calendars.ToSQLDateString(System.DateTime)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: ToSQLDateString
    path: Calendars.vb
    startLine: 321
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCOnverte um datetime para o formato de string do SQL server ou Mysql\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToSQLDateString(this DateTime Date)
    parameters:
    - id: Date
      type: System.DateTime
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToSQLDateString(Date As Date) As String
  overload: InnerLibs.Calendars.ToSQLDateString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.ToSQLDateString(System.String,System.String)
  commentId: M:InnerLibs.Calendars.ToSQLDateString(System.String,System.String)
  id: ToSQLDateString(System.String,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: ToSQLDateString(String, String)
  nameWithType: Calendars.ToSQLDateString(String, String)
  fullName: InnerLibs.Calendars.ToSQLDateString(System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: ToSQLDateString
    path: Calendars.vb
    startLine: 331
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nConverte uma string dd/mm/aaaa hh:mm:ss.llll para o formato de string do SQL server ou Mysql\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToSQLDateString(this string Date, string FromCulture = "pt-BR")
    parameters:
    - id: Date
      type: System.String
    - id: FromCulture
      type: System.String
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToSQLDateString(Date As String, FromCulture As String = "pt-BR") As String
  overload: InnerLibs.Calendars.ToSQLDateString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.GetDifference(System.DateTime,System.DateTime)
  commentId: M:InnerLibs.Calendars.GetDifference(System.DateTime,System.DateTime)
  id: GetDifference(System.DateTime,System.DateTime)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: GetDifference(DateTime, DateTime)
  nameWithType: Calendars.GetDifference(DateTime, DateTime)
  fullName: InnerLibs.Calendars.GetDifference(System.DateTime, System.DateTime)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: GetDifference
    path: Calendars.vb
    startLine: 342
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma <xref href=\"InnerLibs.TimeMachine.TimeFlow\" data-throw-if-not-resolved=\"false\"></xref> com a diferença entre 2 Datas\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static TimeFlow GetDifference(this DateTime InitialDate, DateTime SecondDate)
    parameters:
    - id: InitialDate
      type: System.DateTime
      description: ''
    - id: SecondDate
      type: System.DateTime
      description: ''
    return:
      type: InnerLibs.TimeMachine.TimeFlow
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetDifference(InitialDate As Date, SecondDate As Date) As TimeFlow
  overload: InnerLibs.Calendars.GetDifference*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.FixDateOrder(System.DateTime@,System.DateTime@)
  commentId: M:InnerLibs.Calendars.FixDateOrder(System.DateTime@,System.DateTime@)
  id: FixDateOrder(System.DateTime@,System.DateTime@)
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: FixDateOrder(ref DateTime, ref DateTime)
  nameWithType: Calendars.FixDateOrder(ref DateTime, ref DateTime)
  fullName: InnerLibs.Calendars.FixDateOrder(ref System.DateTime, ref System.DateTime)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: FixDateOrder
    path: Calendars.vb
    startLine: 355
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTroca ou não a ordem das variaveis de inicio e fim de um periodo fazendo com que a StartDate\nsempre seja uma data menor que a EndDate, prevenindo que o calculo entre 2 datas resulte em um\n<xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> negativo\n"
  example: []
  syntax:
    content: public static void FixDateOrder(ref DateTime StartDate, ref DateTime EndDate)
    parameters:
    - id: StartDate
      type: System.DateTime
      description: Data Inicial
    - id: EndDate
      type: System.DateTime
      description: Data Final
    content.vb: Public Shared Sub FixDateOrder(ByRef StartDate As Date, ByRef EndDate As Date)
  overload: InnerLibs.Calendars.FixDateOrder*
  nameWithType.vb: Calendars.FixDateOrder(ByRef DateTime, ByRef DateTime)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Calendars.FixDateOrder(ByRef System.DateTime, ByRef System.DateTime)
  name.vb: FixDateOrder(ByRef DateTime, ByRef DateTime)
- uid: InnerLibs.Calendars.IsBetween(System.DateTime,System.DateTime,System.DateTime,System.Boolean)
  commentId: M:InnerLibs.Calendars.IsBetween(System.DateTime,System.DateTime,System.DateTime,System.Boolean)
  id: IsBetween(System.DateTime,System.DateTime,System.DateTime,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: IsBetween(DateTime, DateTime, DateTime, Boolean)
  nameWithType: Calendars.IsBetween(DateTime, DateTime, DateTime, Boolean)
  fullName: InnerLibs.Calendars.IsBetween(System.DateTime, System.DateTime, System.DateTime, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: IsBetween
    path: Calendars.vb
    startLine: 371
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se uma data se encontra entre 2 datas\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsBetween(this DateTime MidDate, DateTime StartDate, DateTime EndDate, bool IgnoreTime = false)
    parameters:
    - id: MidDate
      type: System.DateTime
      description: Data
    - id: StartDate
      type: System.DateTime
      description: Data Inicial
    - id: EndDate
      type: System.DateTime
      description: Data final
    - id: IgnoreTime
      type: System.Boolean
      description: Indica se o tempo deve ser ignorado na comparação
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsBetween(MidDate As Date, StartDate As Date, EndDate As Date, IgnoreTime As Boolean = False) As Boolean
  overload: InnerLibs.Calendars.IsBetween*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.GetBetween(System.DateTime,System.DateTime,System.DayOfWeek[])
  commentId: M:InnerLibs.Calendars.GetBetween(System.DateTime,System.DateTime,System.DayOfWeek[])
  id: GetBetween(System.DateTime,System.DateTime,System.DayOfWeek[])
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: GetBetween(DateTime, DateTime, DayOfWeek[])
  nameWithType: Calendars.GetBetween(DateTime, DateTime, DayOfWeek[])
  fullName: InnerLibs.Calendars.GetBetween(System.DateTime, System.DateTime, System.DayOfWeek[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: GetBetween
    path: Calendars.vb
    startLine: 387
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma lista com as datas de dias especificos da semana entre 2 datas\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static List<DateTime> GetBetween(this DateTime StartDate, DateTime EndDate, params DayOfWeek[] Days)
    parameters:
    - id: StartDate
      type: System.DateTime
      description: Data inicial
    - id: EndDate
      type: System.DateTime
      description: data Final
    - id: Days
      type: System.DayOfWeek[]
      description: Dias da semana
    return:
      type: System.Collections.Generic.List{System.DateTime}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetBetween(StartDate As Date, EndDate As Date, ParamArray Days As DayOfWeek()) As List(Of Date)
  overload: InnerLibs.Calendars.GetBetween*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Calendars.GetBetween(DateTime, DateTime, DayOfWeek())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Calendars.GetBetween(System.DateTime, System.DateTime, System.DayOfWeek())
  name.vb: GetBetween(DateTime, DateTime, DayOfWeek())
- uid: InnerLibs.Calendars.ClearTime(System.Collections.Generic.List{System.DateTime})
  commentId: M:InnerLibs.Calendars.ClearTime(System.Collections.Generic.List{System.DateTime})
  id: ClearTime(System.Collections.Generic.List{System.DateTime})
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: ClearTime(List<DateTime>)
  nameWithType: Calendars.ClearTime(List<DateTime>)
  fullName: InnerLibs.Calendars.ClearTime(System.Collections.Generic.List<System.DateTime>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: ClearTime
    path: Calendars.vb
    startLine: 400
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove o tempo de todas as datas de uma lista e retorna uma nova lista\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static List<DateTime> ClearTime(this List<DateTime> List)
    parameters:
    - id: List
      type: System.Collections.Generic.List{System.DateTime}
      description: Lista que será alterada
    return:
      type: System.Collections.Generic.List{System.DateTime}
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ClearTime(List As List(Of Date)) As List(Of Date)
  overload: InnerLibs.Calendars.ClearTime*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Calendars.ClearTime(List(Of DateTime))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Calendars.ClearTime(System.Collections.Generic.List(Of System.DateTime))
  name.vb: ClearTime(List(Of DateTime))
- uid: InnerLibs.Calendars.ToTimeElapsedString(System.TimeSpan,System.String,System.String,System.String,System.String)
  commentId: M:InnerLibs.Calendars.ToTimeElapsedString(System.TimeSpan,System.String,System.String,System.String,System.String)
  id: ToTimeElapsedString(System.TimeSpan,System.String,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: ToTimeElapsedString(TimeSpan, String, String, String, String)
  nameWithType: Calendars.ToTimeElapsedString(TimeSpan, String, String, String, String)
  fullName: InnerLibs.Calendars.ToTimeElapsedString(System.TimeSpan, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: ToTimeElapsedString
    path: Calendars.vb
    startLine: 409
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma String no formato &quot;W dias, X horas, Y minutos e Z segundos&quot;\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToTimeElapsedString(this TimeSpan TimeElapsed, string DayWord = "dia", string HourWord = "hora", string MinuteWord = "minuto", string SecondWord = "segundo")
    parameters:
    - id: TimeElapsed
      type: System.TimeSpan
      description: TimeSpan com o intervalo
    - id: DayWord
      type: System.String
    - id: HourWord
      type: System.String
    - id: MinuteWord
      type: System.String
    - id: SecondWord
      type: System.String
    return:
      type: System.String
      description: string
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToTimeElapsedString(TimeElapsed As TimeSpan, DayWord As String = "dia", HourWord As String = "hora", MinuteWord As String = "minuto", SecondWord As String = "segundo") As String
  overload: InnerLibs.Calendars.ToTimeElapsedString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.ToLongMonthName(System.Int32)
  commentId: M:InnerLibs.Calendars.ToLongMonthName(System.Int32)
  id: ToLongMonthName(System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: ToLongMonthName(Int32)
  nameWithType: Calendars.ToLongMonthName(Int32)
  fullName: InnerLibs.Calendars.ToLongMonthName(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: ToLongMonthName
    path: Calendars.vb
    startLine: 433
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma String baseado no numero do Mês Ex.: 1 -> Janeiro\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToLongMonthName(this int MonthNumber)
    parameters:
    - id: MonthNumber
      type: System.Int32
      description: Numero do Mês
    return:
      type: System.String
      description: String com nome do Mês
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToLongMonthName(MonthNumber As Integer) As String
  overload: InnerLibs.Calendars.ToLongMonthName*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.ToLongMonthName(System.DateTime)
  commentId: M:InnerLibs.Calendars.ToLongMonthName(System.DateTime)
  id: ToLongMonthName(System.DateTime)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: TolongMonthName(DateTime)
  nameWithType: Calendars.TolongMonthName(DateTime)
  fullName: InnerLibs.Calendars.TolongMonthName(System.DateTime)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: TolongMonthName
    path: Calendars.vb
    startLine: 443
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma String com o nome do mes baseado na data\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string TolongMonthName(this DateTime DateTime)
    parameters:
    - id: DateTime
      type: System.DateTime
      description: Data
    return:
      type: System.String
      description: String com nome do Mês
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function TolongMonthName(DateTime As Date) As String
  overload: InnerLibs.Calendars.ToLongMonthName*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.ToShortMonthName(System.Int32)
  commentId: M:InnerLibs.Calendars.ToShortMonthName(System.Int32)
  id: ToShortMonthName(System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: ToShortMonthName(Int32)
  nameWithType: Calendars.ToShortMonthName(Int32)
  fullName: InnerLibs.Calendars.ToShortMonthName(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: ToShortMonthName
    path: Calendars.vb
    startLine: 454
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma String curta baseado no numero do Mês Ex.: 1 -> Jan\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToShortMonthName(this int MonthNumber)
    parameters:
    - id: MonthNumber
      type: System.Int32
      description: Numero do Mês
    return:
      type: System.String
      description: String com nome curto do Mês
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToShortMonthName(MonthNumber As Integer) As String
  overload: InnerLibs.Calendars.ToShortMonthName*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.ToLongDayOfWeekName(System.Int32)
  commentId: M:InnerLibs.Calendars.ToLongDayOfWeekName(System.Int32)
  id: ToLongDayOfWeekName(System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: ToLongDayOfWeekName(Int32)
  nameWithType: Calendars.ToLongDayOfWeekName(Int32)
  fullName: InnerLibs.Calendars.ToLongDayOfWeekName(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: ToLongDayOfWeekName
    path: Calendars.vb
    startLine: 465
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma String baseado no numero do Dia da Semana Ex.: 2 -> Segunda-Feira\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToLongDayOfWeekName(this int DayNumber)
    parameters:
    - id: DayNumber
      type: System.Int32
      description: Numero do Dia
    return:
      type: System.String
      description: String com nome do Dia
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToLongDayOfWeekName(DayNumber As Integer) As String
  overload: InnerLibs.Calendars.ToLongDayOfWeekName*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.ToShortDayOfWeekName(System.Int32)
  commentId: M:InnerLibs.Calendars.ToShortDayOfWeekName(System.Int32)
  id: ToShortDayOfWeekName(System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: ToShortDayOfWeekName(Int32)
  nameWithType: Calendars.ToShortDayOfWeekName(Int32)
  fullName: InnerLibs.Calendars.ToShortDayOfWeekName(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: ToShortDayOfWeekName
    path: Calendars.vb
    startLine: 476
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma String baseado no numero do Dia da Semana Ex.: 2 -> Seg\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToShortDayOfWeekName(this int DayNumber)
    parameters:
    - id: DayNumber
      type: System.Int32
      description: Numero do Dia
    return:
      type: System.String
      description: String com nome curto do Dia
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToShortDayOfWeekName(DayNumber As Integer) As String
  overload: InnerLibs.Calendars.ToShortDayOfWeekName*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.Tomorrow
  commentId: P:InnerLibs.Calendars.Tomorrow
  id: Tomorrow
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: Tomorrow
  nameWithType: Calendars.Tomorrow
  fullName: InnerLibs.Calendars.Tomorrow
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: Tomorrow
    path: Calendars.vb
    startLine: 486
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna a data de amanhã\n"
  example: []
  syntax:
    content: public static DateTime Tomorrow { get; }
    parameters: []
    return:
      type: System.DateTime
      description: Data de amanhã
    content.vb: Public Shared ReadOnly Property Tomorrow As Date
  overload: InnerLibs.Calendars.Tomorrow*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InnerLibs.Calendars.Yesterday
  commentId: P:InnerLibs.Calendars.Yesterday
  id: Yesterday
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: Yesterday
  nameWithType: Calendars.Yesterday
  fullName: InnerLibs.Calendars.Yesterday
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: Yesterday
    path: Calendars.vb
    startLine: 497
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna a data de ontem\n"
  example: []
  syntax:
    content: public static DateTime Yesterday { get; }
    parameters: []
    return:
      type: System.DateTime
      description: Data de ontem
    content.vb: Public Shared ReadOnly Property Yesterday As Date
  overload: InnerLibs.Calendars.Yesterday*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InnerLibs.Calendars.LastSunday(System.Nullable{System.DateTime})
  commentId: P:InnerLibs.Calendars.LastSunday(System.Nullable{System.DateTime})
  id: LastSunday(System.Nullable{System.DateTime})
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: LastSunday[Nullable<DateTime>]
  nameWithType: Calendars.LastSunday[Nullable<DateTime>]
  fullName: InnerLibs.Calendars.LastSunday[System.Nullable<System.DateTime>]
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: LastSunday
    path: Calendars.vb
    startLine: 507
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o ultimo domingo\n"
  example: []
  syntax:
    content: public static object LastSunday { get; }
    parameters:
    - id: FromDate
      type: System.Nullable{System.DateTime}
    return:
      type: System.Object
      description: ''
    content.vb: Public Shared ReadOnly Property LastSunday(FromDate As Date? = Nothing) As Object
  overload: InnerLibs.Calendars.LastSunday*
  nameWithType.vb: Calendars.LastSunday(Nullable(Of DateTime))
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: InnerLibs.Calendars.LastSunday(System.Nullable(Of System.DateTime))
  name.vb: LastSunday(Nullable(Of DateTime))
- uid: InnerLibs.Calendars.NextSunday(System.Nullable{System.DateTime})
  commentId: P:InnerLibs.Calendars.NextSunday(System.Nullable{System.DateTime})
  id: NextSunday(System.Nullable{System.DateTime})
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: NextSunday[Nullable<DateTime>]
  nameWithType: Calendars.NextSunday[Nullable<DateTime>]
  fullName: InnerLibs.Calendars.NextSunday[System.Nullable<System.DateTime>]
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: NextSunday
    path: Calendars.vb
    startLine: 517
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o proximo domingo\n"
  example: []
  syntax:
    content: public static DateTime NextSunday { get; }
    parameters:
    - id: FromDate
      type: System.Nullable{System.DateTime}
    return:
      type: System.DateTime
      description: ''
    content.vb: Public Shared ReadOnly Property NextSunday(FromDate As Date? = Nothing) As Date
  overload: InnerLibs.Calendars.NextSunday*
  nameWithType.vb: Calendars.NextSunday(Nullable(Of DateTime))
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: InnerLibs.Calendars.NextSunday(System.Nullable(Of System.DateTime))
  name.vb: NextSunday(Nullable(Of DateTime))
- uid: InnerLibs.Calendars.LastDay(System.DayOfWeek,System.Nullable{System.DateTime})
  commentId: P:InnerLibs.Calendars.LastDay(System.DayOfWeek,System.Nullable{System.DateTime})
  id: LastDay(System.DayOfWeek,System.Nullable{System.DateTime})
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: LastDay[DayOfWeek, Nullable<DateTime>]
  nameWithType: Calendars.LastDay[DayOfWeek, Nullable<DateTime>]
  fullName: InnerLibs.Calendars.LastDay[System.DayOfWeek, System.Nullable<System.DateTime>]
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: LastDay
    path: Calendars.vb
    startLine: 523
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static DateTime LastDay { get; }
    parameters:
    - id: DayOfWeek
      type: System.DayOfWeek
    - id: FromDate
      type: System.Nullable{System.DateTime}
    return:
      type: System.DateTime
    content.vb: Public Shared ReadOnly Property LastDay(DayOfWeek As DayOfWeek, FromDate As Date? = Nothing) As Date
  overload: InnerLibs.Calendars.LastDay*
  nameWithType.vb: Calendars.LastDay(DayOfWeek, Nullable(Of DateTime))
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: InnerLibs.Calendars.LastDay(System.DayOfWeek, System.Nullable(Of System.DateTime))
  name.vb: LastDay(DayOfWeek, Nullable(Of DateTime))
- uid: InnerLibs.Calendars.NextDay(System.DayOfWeek,System.Nullable{System.DateTime})
  commentId: P:InnerLibs.Calendars.NextDay(System.DayOfWeek,System.Nullable{System.DateTime})
  id: NextDay(System.DayOfWeek,System.Nullable{System.DateTime})
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: NextDay[DayOfWeek, Nullable<DateTime>]
  nameWithType: Calendars.NextDay[DayOfWeek, Nullable<DateTime>]
  fullName: InnerLibs.Calendars.NextDay[System.DayOfWeek, System.Nullable<System.DateTime>]
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: NextDay
    path: Calendars.vb
    startLine: 533
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static DateTime NextDay { get; }
    parameters:
    - id: DayOfWeek
      type: System.DayOfWeek
    - id: FromDate
      type: System.Nullable{System.DateTime}
    return:
      type: System.DateTime
    content.vb: Public Shared ReadOnly Property NextDay(DayOfWeek As DayOfWeek, FromDate As Date? = Nothing) As Date
  overload: InnerLibs.Calendars.NextDay*
  nameWithType.vb: Calendars.NextDay(DayOfWeek, Nullable(Of DateTime))
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: InnerLibs.Calendars.NextDay(System.DayOfWeek, System.Nullable(Of System.DateTime))
  name.vb: NextDay(DayOfWeek, Nullable(Of DateTime))
- uid: InnerLibs.Calendars.IsWeekend(System.DateTime)
  commentId: M:InnerLibs.Calendars.IsWeekend(System.DateTime)
  id: IsWeekend(System.DateTime)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: IsWeekend(DateTime)
  nameWithType: Calendars.IsWeekend(DateTime)
  fullName: InnerLibs.Calendars.IsWeekend(System.DateTime)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: IsWeekend
    path: Calendars.vb
    startLine: 551
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se o dia se encontra no fim de semana\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsWeekend(this DateTime YourDate)
    parameters:
    - id: YourDate
      type: System.DateTime
      description: Uma data qualquer
    return:
      type: System.Boolean
      description: TRUE se for sabado ou domingo, caso contrario FALSE
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsWeekend(YourDate As Date) As Boolean
  overload: InnerLibs.Calendars.IsWeekend*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.ToFarewell(System.DateTime,System.String)
  commentId: M:InnerLibs.Calendars.ToFarewell(System.DateTime,System.String)
  id: ToFarewell(System.DateTime,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: ToFarewell(DateTime, String)
  nameWithType: Calendars.ToFarewell(DateTime, String)
  fullName: InnerLibs.Calendars.ToFarewell(System.DateTime, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: ToFarewell
    path: Calendars.vb
    startLine: 600
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma um DateTime em uma despedida (Bom dia, Boa tarde, Boa noite)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToFarewell(this DateTime Time, string Language = "pt")
    parameters:
    - id: Time
      type: System.DateTime
      description: Horario
    - id: Language
      type: System.String
      description: Idioma da saudação (pt, en, es)
    return:
      type: System.String
      description: Uma string com a despedida
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToFarewell(Time As Date, Language As String = "pt") As String
  overload: InnerLibs.Calendars.ToFarewell*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.ToGreeting(System.DateTime,System.String)
  commentId: M:InnerLibs.Calendars.ToGreeting(System.DateTime,System.String)
  id: ToGreeting(System.DateTime,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: ToGreeting(DateTime, String)
  nameWithType: Calendars.ToGreeting(DateTime, String)
  fullName: InnerLibs.Calendars.ToGreeting(System.DateTime, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: ToGreeting
    path: Calendars.vb
    startLine: 611
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma um DateTime em uma saudação (Bom dia, Boa tarde, Boa noite)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToGreeting(this DateTime Time, string Language = "pt")
    parameters:
    - id: Time
      type: System.DateTime
      description: Horario
    - id: Language
      type: System.String
      description: Idioma da saudação (pt, en, es)
    return:
      type: System.String
      description: Uma string com a despedida
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToGreeting(Time As Date, Language As String = "pt") As String
  overload: InnerLibs.Calendars.ToGreeting*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.Greeting(System.String)
  commentId: P:InnerLibs.Calendars.Greeting(System.String)
  id: Greeting(System.String)
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: Greeting[String]
  nameWithType: Calendars.Greeting[String]
  fullName: InnerLibs.Calendars.Greeting[System.String]
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: Greeting
    path: Calendars.vb
    startLine: 621
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma saudação\n"
  example: []
  syntax:
    content: public static string Greeting { get; }
    parameters:
    - id: Language
      type: System.String
      description: Idioma da saudação (pt, en, es)
    return:
      type: System.String
      description: Uma string com a saudação
    content.vb: Public Shared ReadOnly Property Greeting(Language As String = "pt") As String
  overload: InnerLibs.Calendars.Greeting*
  nameWithType.vb: Calendars.Greeting(String)
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: InnerLibs.Calendars.Greeting(System.String)
  name.vb: Greeting(String)
- uid: InnerLibs.Calendars.Farewell(System.String)
  commentId: P:InnerLibs.Calendars.Farewell(System.String)
  id: Farewell(System.String)
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: Farewell[String]
  nameWithType: Calendars.Farewell[String]
  fullName: InnerLibs.Calendars.Farewell[System.String]
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: Farewell
    path: Calendars.vb
    startLine: 632
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma despedida\n"
  example: []
  syntax:
    content: public static string Farewell { get; }
    parameters:
    - id: Language
      type: System.String
      description: Idioma da despedida (pt, en, es)
    return:
      type: System.String
      description: Uma string com a despedida
    content.vb: Public Shared ReadOnly Property Farewell(Language As String = "pt") As String
  overload: InnerLibs.Calendars.Farewell*
  nameWithType.vb: Calendars.Farewell(String)
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: InnerLibs.Calendars.Farewell(System.String)
  name.vb: Farewell(String)
- uid: InnerLibs.Calendars.Months(InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)
  commentId: P:InnerLibs.Calendars.Months(InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)
  id: Months(InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: Months[Calendars.TypeOfFill, Calendars.TypeOfFill]
  nameWithType: Calendars.Months[Calendars.TypeOfFill, Calendars.TypeOfFill]
  fullName: InnerLibs.Calendars.Months[InnerLibs.Calendars.TypeOfFill, InnerLibs.Calendars.TypeOfFill]
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: Months
    path: Calendars.vb
    startLine: 644
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nReturna uma lista dupla com os meses\n"
  example: []
  syntax:
    content: public static List<KeyValuePair<string, string>> Months { get; }
    parameters:
    - id: TextType
      type: InnerLibs.Calendars.TypeOfFill
      description: Apresentação dos meses no texto
    - id: ValueType
      type: InnerLibs.Calendars.TypeOfFill
      description: Apresentação dos meses no valor
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}
    content.vb: Public Shared ReadOnly Property Months(TextType As Calendars.TypeOfFill = Calendars.TypeOfFill.LongName, ValueType As Calendars.TypeOfFill = Calendars.TypeOfFill.Number) As List(Of KeyValuePair(Of String, String))
  overload: InnerLibs.Calendars.Months*
  nameWithType.vb: Calendars.Months(Calendars.TypeOfFill, Calendars.TypeOfFill)
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: InnerLibs.Calendars.Months(InnerLibs.Calendars.TypeOfFill, InnerLibs.Calendars.TypeOfFill)
  name.vb: Months(Calendars.TypeOfFill, Calendars.TypeOfFill)
- uid: InnerLibs.Calendars.WeekDays(InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)
  commentId: P:InnerLibs.Calendars.WeekDays(InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)
  id: WeekDays(InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: WeekDays[Calendars.TypeOfFill, Calendars.TypeOfFill]
  nameWithType: Calendars.WeekDays[Calendars.TypeOfFill, Calendars.TypeOfFill]
  fullName: InnerLibs.Calendars.WeekDays[InnerLibs.Calendars.TypeOfFill, InnerLibs.Calendars.TypeOfFill]
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: WeekDays
    path: Calendars.vb
    startLine: 678
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nReturna uma lista dupla com os meses\n"
  example: []
  syntax:
    content: public static List<KeyValuePair<string, string>> WeekDays { get; }
    parameters:
    - id: TextType
      type: InnerLibs.Calendars.TypeOfFill
      description: Apresentação dos meses no texto
    - id: ValueType
      type: InnerLibs.Calendars.TypeOfFill
      description: Apresentação dos meses no valor
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}
    content.vb: Public Shared ReadOnly Property WeekDays(TextType As Calendars.TypeOfFill = Calendars.TypeOfFill.LongName, ValueType As Calendars.TypeOfFill = Calendars.TypeOfFill.Number) As List(Of KeyValuePair(Of String, String))
  overload: InnerLibs.Calendars.WeekDays*
  nameWithType.vb: Calendars.WeekDays(Calendars.TypeOfFill, Calendars.TypeOfFill)
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: InnerLibs.Calendars.WeekDays(InnerLibs.Calendars.TypeOfFill, InnerLibs.Calendars.TypeOfFill)
  name.vb: WeekDays(Calendars.TypeOfFill, Calendars.TypeOfFill)
- uid: InnerLibs.Calendars.FillWith(System.Web.UI.HtmlControls.HtmlSelect,InnerLibs.Calendars.CalendarType,InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)
  commentId: M:InnerLibs.Calendars.FillWith(System.Web.UI.HtmlControls.HtmlSelect,InnerLibs.Calendars.CalendarType,InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)
  id: FillWith(System.Web.UI.HtmlControls.HtmlSelect,InnerLibs.Calendars.CalendarType,InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: FillWith(HtmlSelect, Calendars.CalendarType, Calendars.TypeOfFill, Calendars.TypeOfFill)
  nameWithType: Calendars.FillWith(HtmlSelect, Calendars.CalendarType, Calendars.TypeOfFill, Calendars.TypeOfFill)
  fullName: InnerLibs.Calendars.FillWith(System.Web.UI.HtmlControls.HtmlSelect, InnerLibs.Calendars.CalendarType, InnerLibs.Calendars.TypeOfFill, InnerLibs.Calendars.TypeOfFill)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: FillWith
    path: Calendars.vb
    startLine: 712
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nPreenche um HtmlSelect com MESES ou DIAS DA SEMANA\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static void FillWith(this HtmlSelect Box, Calendars.CalendarType CalendarType, Calendars.TypeOfFill TextType = Calendars.TypeOfFill.LongName, Calendars.TypeOfFill ValueType = Calendars.TypeOfFill.Number)
    parameters:
    - id: Box
      type: System.Web.UI.HtmlControls.HtmlSelect
      description: Select HTML
    - id: CalendarType
      type: InnerLibs.Calendars.CalendarType
    - id: TextType
      type: InnerLibs.Calendars.TypeOfFill
      description: Apresentação dos meses no texto
    - id: ValueType
      type: InnerLibs.Calendars.TypeOfFill
      description: Apresentação dos meses no valor
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Sub FillWith(Box As HtmlSelect, CalendarType As Calendars.CalendarType, TextType As Calendars.TypeOfFill = Calendars.TypeOfFill.LongName, ValueType As Calendars.TypeOfFill = Calendars.TypeOfFill.Number)
  overload: InnerLibs.Calendars.FillWith*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Calendars.CalculatePercent(System.DateTime,System.DateTime,System.DateTime)
  commentId: M:InnerLibs.Calendars.CalculatePercent(System.DateTime,System.DateTime,System.DateTime)
  id: CalculatePercent(System.DateTime,System.DateTime,System.DateTime)
  isExtensionMethod: true
  parent: InnerLibs.Calendars
  langs:
  - csharp
  - vb
  name: CalculatePercent(DateTime, DateTime, DateTime)
  nameWithType: Calendars.CalculatePercent(DateTime, DateTime, DateTime)
  fullName: InnerLibs.Calendars.CalculatePercent(System.DateTime, System.DateTime, System.DateTime)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Calendars.vb
    id: CalculatePercent
    path: Calendars.vb
    startLine: 756
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCalcula a porcentagem de diferenca entre duas datas de acordo com a data inicial especificada\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static decimal CalculatePercent(this DateTime MidDate, DateTime StartDate, DateTime EndDate)
    parameters:
    - id: MidDate
      type: System.DateTime
      description: Data do meio a ser verificada (normalmente Now)
    - id: StartDate
      type: System.DateTime
      description: Data Inicial
    - id: EndDate
      type: System.DateTime
      description: Data Final
    return:
      type: System.Decimal
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function CalculatePercent(MidDate As Date, StartDate As Date, EndDate As Date) As Decimal
  overload: InnerLibs.Calendars.CalculatePercent*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: InnerLibs
  commentId: N:InnerLibs
  name: InnerLibs
  nameWithType: InnerLibs
  fullName: InnerLibs
- uid: InnerLibs.Calendars.InnerLibs.ClassTools.CreateDictionary
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary()
  nameWithType: ClassTools.CreateDictionary()
  fullName: InnerLibs.ClassTools.CreateDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  name: GetProperties(BindingFlags)
  nameWithType: ClassTools.GetProperties(BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object)
  name: GetProperties()
  nameWithType: ClassTools.GetProperties()
  fullName: InnerLibs.ClassTools.GetProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  name: GetPropertyValue(String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  name: GetPropertyValue<Type>(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  name: GetPropertyValue(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  name: HasProperty(String)
  nameWithType: ClassTools.HasProperty(String)
  fullName: InnerLibs.ClassTools.HasProperty(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsArrayOf``1
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  name: IsArrayOf<T>()
  nameWithType: ClassTools.IsArrayOf<T>()
  fullName: InnerLibs.ClassTools.IsArrayOf<T>()
  nameWithType.vb: ClassTools.IsArrayOf(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)()
  name.vb: IsArrayOf(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsDictionary
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsDictionary(System.Object)
  name: IsDictionary()
  nameWithType: ClassTools.IsDictionary()
  fullName: InnerLibs.ClassTools.IsDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Calendars},System.Collections.Generic.IEqualityComparer{InnerLibs.Calendars})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsIn(IEnumerable<Calendars>, IEqualityComparer<Calendars>)
  nameWithType: ClassTools.IsIn(IEnumerable<Calendars>, IEqualityComparer<Calendars>)
  fullName: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable<InnerLibs.Calendars>, System.Collections.Generic.IEqualityComparer<InnerLibs.Calendars>)
  nameWithType.vb: ClassTools.IsIn(IEnumerable(Of Calendars), IEqualityComparer(Of Calendars))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable(Of InnerLibs.Calendars), System.Collections.Generic.IEqualityComparer(Of InnerLibs.Calendars))
  name.vb: IsIn(IEnumerable(Of Calendars), IEqualityComparer(Of Calendars))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Calendars},System.Collections.Generic.IEqualityComparer{InnerLibs.Calendars})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Calendars},System.Collections.Generic.IEqualityComparer{InnerLibs.Calendars})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Calendars}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Calendars})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  name: IsInAny(IEnumerable<Calendars>[], IEqualityComparer<Calendars>)
  nameWithType: ClassTools.IsInAny(IEnumerable<Calendars>[], IEqualityComparer<Calendars>)
  fullName: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable<InnerLibs.Calendars>[], System.Collections.Generic.IEqualityComparer<InnerLibs.Calendars>)
  nameWithType.vb: ClassTools.IsInAny(IEnumerable(Of Calendars)(), IEqualityComparer(Of Calendars))
  fullName.vb: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable(Of InnerLibs.Calendars)(), System.Collections.Generic.IEqualityComparer(Of InnerLibs.Calendars))
  name.vb: IsInAny(IEnumerable(Of Calendars)(), IEqualityComparer(Of Calendars))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Calendars}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Calendars})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Calendars}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Calendars})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsList
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsList(System.Object)
  name: IsList()
  nameWithType: ClassTools.IsList()
  fullName: InnerLibs.ClassTools.IsList()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Calendars},System.Collections.Generic.IEqualityComparer{InnerLibs.Calendars})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsNotIn(IEnumerable<Calendars>, IEqualityComparer<Calendars>)
  nameWithType: ClassTools.IsNotIn(IEnumerable<Calendars>, IEqualityComparer<Calendars>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable<InnerLibs.Calendars>, System.Collections.Generic.IEqualityComparer<InnerLibs.Calendars>)
  nameWithType.vb: ClassTools.IsNotIn(IEnumerable(Of Calendars), IEqualityComparer(Of Calendars))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable(Of InnerLibs.Calendars), System.Collections.Generic.IEqualityComparer(Of InnerLibs.Calendars))
  name.vb: IsNotIn(IEnumerable(Of Calendars), IEqualityComparer(Of Calendars))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Calendars},System.Collections.Generic.IEqualityComparer{InnerLibs.Calendars})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Calendars},System.Collections.Generic.IEqualityComparer{InnerLibs.Calendars})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsNotIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsType``1
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsType``1(System.Object)
  name: IsType<T>()
  nameWithType: ClassTools.IsType<T>()
  fullName: InnerLibs.ClassTools.IsType<T>()
  nameWithType.vb: ClassTools.IsType(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)()
  name.vb: IsType(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.ClassTools.NullCoalesce(InnerLibs.Calendars[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce(Calendars[])
  nameWithType: ClassTools.NullCoalesce(Calendars[])
  fullName: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Calendars[])
  nameWithType.vb: ClassTools.NullCoalesce(Calendars())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Calendars())
  name.vb: NullCoalesce(Calendars())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Calendars[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Calendars[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.ClassTools.NullifyProperties
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties()
  nameWithType: ClassTools.NullifyProperties()
  fullName: InnerLibs.ClassTools.NullifyProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  name: SetPropertyValue<Type>(String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.String, Type)
  name.vb: SetPropertyValue(Of Type)(String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  name: SetPropertyValueFromCollection<Type>(String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  name: ToFlatString(String)
  nameWithType: ClassTools.ToFlatString(String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.DataManipulation.GetDbType
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  parent: InnerLibs.DataManipulation
  definition: InnerLibs.DataManipulation.GetDbType(System.Object)
  name: GetDbType()
  nameWithType: DataManipulation.GetDbType()
  fullName: InnerLibs.DataManipulation.GetDbType()
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.Converter.DefineEmptyList
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList()
  nameWithType: Converter.DefineEmptyList()
  fullName: InnerLibs.Converter.DefineEmptyList()
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.Converter.ChangeType``1
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType>()
  nameWithType: Converter.ChangeType<ToType>()
  fullName: InnerLibs.Converter.ChangeType<ToType>()
  nameWithType.vb: Converter.ChangeType(Of ToType)()
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType)()
  name.vb: ChangeType(Of ToType)()
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType<ToType>
    nameWithType: Converter.ChangeType<ToType>
    fullName: InnerLibs.Converter.ChangeType<ToType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType(Of ToType)
    nameWithType: Converter.ChangeType(Of ToType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.JsonViewer.CreateNode
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  parent: InnerLibs.JsonViewer
  definition: InnerLibs.JsonViewer.CreateNode(System.Object)
  name: CreateNode()
  nameWithType: JsonViewer.CreateNode()
  fullName: InnerLibs.JsonViewer.CreateNode()
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  parent: InnerLibs.Mathematic
  definition: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  name: IsBetween(Object, Object)
  nameWithType: Mathematic.IsBetween(Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Text.SerializeJSON(System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  parent: InnerLibs.Text
  definition: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  name: SerializeJSON(String)
  nameWithType: Text.SerializeJSON(String)
  fullName: InnerLibs.Text.SerializeJSON(System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNumber
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNumber(System.Object)
  name: IsNumber()
  nameWithType: Verify.IsNumber()
  fullName: InnerLibs.Verify.IsNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNotNumber
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNotNumber(System.Object)
  name: IsNotNumber()
  nameWithType: Verify.IsNotNumber()
  fullName: InnerLibs.Verify.IsNotNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IfBlank``1({T})
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  name: IfBlank<T>(T)
  nameWithType: Verify.IfBlank<T>(T)
  fullName: InnerLibs.Verify.IfBlank<T>(T)
  nameWithType.vb: Verify.IfBlank(Of T)(T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(T)
  name.vb: IfBlank(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.Verify.NullIf(System.Func{InnerLibs.Calendars,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  name: NullIf(Func<Calendars, Boolean>)
  nameWithType: Verify.NullIf(Func<Calendars, Boolean>)
  fullName: InnerLibs.Verify.NullIf(System.Func<InnerLibs.Calendars, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Func(Of Calendars, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(System.Func(Of InnerLibs.Calendars, System.Boolean))
  name.vb: NullIf(Func(Of Calendars, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.Calendars,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.Calendars,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.Verify.NullIf(InnerLibs.Calendars)
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf(Calendars)
  nameWithType: Verify.NullIf(Calendars)
  fullName: InnerLibs.Verify.NullIf(InnerLibs.Calendars)
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.Calendars)
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.Calendars)
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  parent: InnerLibs.Web
  definition: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  name: CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax(System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Calendars,{TextType}},System.Func{InnerLibs.Calendars,{ValueType}})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  parent: InnerLibs.Web
  definition: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  name: AsListItem<TextType, ValueType>(Func<Calendars, TextType>, Func<Calendars, ValueType>)
  nameWithType: Web.AsListItem<TextType, ValueType>(Func<Calendars, TextType>, Func<Calendars, ValueType>)
  fullName: InnerLibs.Web.AsListItem<TextType, ValueType>(System.Func<InnerLibs.Calendars, TextType>, System.Func<InnerLibs.Calendars, ValueType>)
  nameWithType.vb: Web.AsListItem(Of TextType, ValueType)(Func(Of Calendars, TextType), Func(Of Calendars, ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of TextType, ValueType)(System.Func(Of InnerLibs.Calendars, TextType), System.Func(Of InnerLibs.Calendars, ValueType))
  name.vb: AsListItem(Of TextType, ValueType)(Func(Of Calendars, TextType), Func(Of Calendars, ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Calendars,``0},System.Func{InnerLibs.Calendars,``1})
    name: AsListItem<TextType, ValueType>
    nameWithType: Web.AsListItem<TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Calendars,``0},System.Func{InnerLibs.Calendars,``1})
    name: AsListItem(Of TextType, ValueType)
    nameWithType: Web.AsListItem(Of TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.GetCastedValue
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.GetCastedValue(System.Object)
  name: GetCastedValue()
  nameWithType: WinForms.GetCastedValue()
  fullName: InnerLibs.WinForms.GetCastedValue()
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  name: CastValueForControl(Object)
  nameWithType: WinForms.CastValueForControl(Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  name: ApplyToControls(HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls(HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Calendars,System.Func{InnerLibs.Calendars,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  name: HasSamePropertyValues(Calendars, Func<Calendars, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues(Calendars, Func<Calendars, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Calendars, System.Func<InnerLibs.Calendars, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(Calendars, Func(Of Calendars, Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Calendars, System.Func(Of InnerLibs.Calendars, System.Object)())
  name.vb: HasSamePropertyValues(Calendars, Func(Of Calendars, Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Calendars,System.Func{InnerLibs.Calendars,System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Calendars,System.Func{InnerLibs.Calendars,System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Calendars
    name: Calendars
    nameWithType: Calendars
    fullName: InnerLibs.Calendars
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary<Type>(Type)
  nameWithType: ClassTools.CreateDictionary<Type>(Type)
  fullName: InnerLibs.ClassTools.CreateDictionary<Type>(Type)
  nameWithType.vb: ClassTools.CreateDictionary(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.CreateDictionary(Of Type)(Type)
  name.vb: CreateDictionary(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary<Type>
    nameWithType: ClassTools.CreateDictionary<Type>
    fullName: InnerLibs.ClassTools.CreateDictionary<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary(Of Type)
    nameWithType: ClassTools.CreateDictionary(Of Type)
    fullName: InnerLibs.ClassTools.CreateDictionary(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools
  commentId: T:InnerLibs.ClassTools
  parent: InnerLibs
  name: ClassTools
  nameWithType: ClassTools
  fullName: InnerLibs.ClassTools
- uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  isExternal: true
  name: GetProperties(Object, BindingFlags)
  nameWithType: ClassTools.GetProperties(Object, BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object, System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetProperties(System.Object)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  isExternal: true
  name: GetProperties(Object)
  nameWithType: ClassTools.GetProperties(Object)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue<Type>(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.Object, System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(Object, String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.Object, System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(Object, String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  isExternal: true
  name: HasProperty(Object, String)
  nameWithType: ClassTools.HasProperty(Object, String)
  fullName: InnerLibs.ClassTools.HasProperty(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  isExternal: true
  name: IsArrayOf<T>(Object)
  nameWithType: ClassTools.IsArrayOf<T>(Object)
  fullName: InnerLibs.ClassTools.IsArrayOf<T>(System.Object)
  nameWithType.vb: ClassTools.IsArrayOf(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)(System.Object)
  name.vb: IsArrayOf(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsDictionary(System.Object)
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  isExternal: true
  name: IsDictionary(Object)
  nameWithType: ClassTools.IsDictionary(Object)
  fullName: InnerLibs.ClassTools.IsDictionary(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  nameWithType: ClassTools.IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsInAny<Type>(Type, System.Collections.Generic.IEnumerable<Type>[], System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsInAny(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type)(), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny<Type>
    nameWithType: ClassTools.IsInAny<Type>
    fullName: InnerLibs.ClassTools.IsInAny<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny(Of Type)
    nameWithType: ClassTools.IsInAny(Of Type)
    fullName: InnerLibs.ClassTools.IsInAny(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsList(System.Object)
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  isExternal: true
  name: IsList(Object)
  nameWithType: ClassTools.IsList(Object)
  fullName: InnerLibs.ClassTools.IsList(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsType``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  isExternal: true
  name: IsType<T>(Object)
  nameWithType: ClassTools.IsType<T>(Object)
  fullName: InnerLibs.ClassTools.IsType<T>(System.Object)
  nameWithType.vb: ClassTools.IsType(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)(System.Object)
  name.vb: IsType(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce<T>(T, T[])
  nameWithType: ClassTools.NullCoalesce<T>(T, T[])
  fullName: InnerLibs.ClassTools.NullCoalesce<T>(T, T[])
  nameWithType.vb: ClassTools.NullCoalesce(Of T)(T, T())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(Of T)(T, T())
  name.vb: NullCoalesce(Of T)(T, T())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce<T>
    nameWithType: ClassTools.NullCoalesce<T>
    fullName: InnerLibs.ClassTools.NullCoalesce<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce(Of T)
    nameWithType: ClassTools.NullCoalesce(Of T)
    fullName: InnerLibs.ClassTools.NullCoalesce(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties<Type>(Type)
  nameWithType: ClassTools.NullifyProperties<Type>(Type)
  fullName: InnerLibs.ClassTools.NullifyProperties<Type>(Type)
  nameWithType.vb: ClassTools.NullifyProperties(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.NullifyProperties(Of Type)(Type)
  name.vb: NullifyProperties(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties<Type>
    nameWithType: ClassTools.NullifyProperties<Type>
    fullName: InnerLibs.ClassTools.NullifyProperties<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties(Of Type)
    nameWithType: ClassTools.NullifyProperties(Of Type)
    fullName: InnerLibs.ClassTools.NullifyProperties(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  isExternal: true
  name: SetPropertyValue<Type>(Object, String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(Object, String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.Object, System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(Object, String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.Object, System.String, Type)
  name.vb: SetPropertyValue(Of Type)(Object, String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  isExternal: true
  name: SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.Object, System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.Object, System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  isExternal: true
  name: ToFlatString(Object, String)
  nameWithType: ClassTools.ToFlatString(Object, String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation.GetDbType(System.Object)
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  isExternal: true
  name: GetDbType(Object)
  nameWithType: DataManipulation.GetDbType(Object)
  fullName: InnerLibs.DataManipulation.GetDbType(System.Object)
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation
  commentId: T:InnerLibs.DataManipulation
  parent: InnerLibs
  name: DataManipulation
  nameWithType: DataManipulation
  fullName: InnerLibs.DataManipulation
- uid: InnerLibs.Converter.DefineEmptyList``1(``0)
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList<T>(T)
  nameWithType: Converter.DefineEmptyList<T>(T)
  fullName: InnerLibs.Converter.DefineEmptyList<T>(T)
  nameWithType.vb: Converter.DefineEmptyList(Of T)(T)
  fullName.vb: InnerLibs.Converter.DefineEmptyList(Of T)(T)
  name.vb: DefineEmptyList(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList<T>
    nameWithType: Converter.DefineEmptyList<T>
    fullName: InnerLibs.Converter.DefineEmptyList<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList(Of T)
    nameWithType: Converter.DefineEmptyList(Of T)
    fullName: InnerLibs.Converter.DefineEmptyList(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Converter
  commentId: T:InnerLibs.Converter
  parent: InnerLibs
  name: Converter
  nameWithType: Converter
  fullName: InnerLibs.Converter
- uid: InnerLibs.Converter.ChangeType``2(``1)
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType, FromType>(FromType)
  nameWithType: Converter.ChangeType<ToType, FromType>(FromType)
  fullName: InnerLibs.Converter.ChangeType<ToType, FromType>(FromType)
  nameWithType.vb: Converter.ChangeType(Of ToType, FromType)(FromType)
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType, FromType)(FromType)
  name.vb: ChangeType(Of ToType, FromType)(FromType)
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType<ToType, FromType>
    nameWithType: Converter.ChangeType<ToType, FromType>
    fullName: InnerLibs.Converter.ChangeType<ToType, FromType>
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType(Of ToType, FromType)
    nameWithType: Converter.ChangeType(Of ToType, FromType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType, FromType)
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer.CreateNode(System.Object)
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  isExternal: true
  name: CreateNode(Object)
  nameWithType: JsonViewer.CreateNode(Object)
  fullName: InnerLibs.JsonViewer.CreateNode(System.Object)
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer
  commentId: T:InnerLibs.JsonViewer
  parent: InnerLibs
  name: JsonViewer
  nameWithType: JsonViewer
  fullName: InnerLibs.JsonViewer
- uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  isExternal: true
  name: IsBetween<Type>(Type, Object, Object)
  nameWithType: Mathematic.IsBetween<Type>(Type, Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween<Type>(Type, System.Object, System.Object)
  nameWithType.vb: Mathematic.IsBetween(Of Type)(Type, Object, Object)
  fullName.vb: InnerLibs.Mathematic.IsBetween(Of Type)(Type, System.Object, System.Object)
  name.vb: IsBetween(Of Type)(Type, Object, Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween<Type>
    nameWithType: Mathematic.IsBetween<Type>
    fullName: InnerLibs.Mathematic.IsBetween<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween(Of Type)
    nameWithType: Mathematic.IsBetween(Of Type)
    fullName: InnerLibs.Mathematic.IsBetween(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic
  commentId: T:InnerLibs.Mathematic
  parent: InnerLibs
  name: Mathematic
  nameWithType: Mathematic
  fullName: InnerLibs.Mathematic
- uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  isExternal: true
  name: SerializeJSON(Object, String)
  nameWithType: Text.SerializeJSON(Object, String)
  fullName: InnerLibs.Text.SerializeJSON(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text
  commentId: T:InnerLibs.Text
  parent: InnerLibs
  name: Text
  nameWithType: Text
  fullName: InnerLibs.Text
- uid: InnerLibs.Verify.IsNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  isExternal: true
  name: IsNumber(Object)
  nameWithType: Verify.IsNumber(Object)
  fullName: InnerLibs.Verify.IsNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify
  commentId: T:InnerLibs.Verify
  parent: InnerLibs
  name: Verify
  nameWithType: Verify
  fullName: InnerLibs.Verify
- uid: InnerLibs.Verify.IsNotNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  isExternal: true
  name: IsNotNumber(Object)
  nameWithType: Verify.IsNotNumber(Object)
  fullName: InnerLibs.Verify.IsNotNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  isExternal: true
  name: IfBlank<T>(Object, T)
  nameWithType: Verify.IfBlank<T>(Object, T)
  fullName: InnerLibs.Verify.IfBlank<T>(System.Object, T)
  nameWithType.vb: Verify.IfBlank(Of T)(Object, T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(System.Object, T)
  name.vb: IfBlank(Of T)(Object, T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  isExternal: true
  name: NullIf<T>(T, Func<T, Boolean>)
  nameWithType: Verify.NullIf<T>(T, Func<T, Boolean>)
  fullName: InnerLibs.Verify.NullIf<T>(T, System.Func<T, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Of T)(T, Func(Of T, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, System.Func(Of T, System.Boolean))
  name.vb: NullIf(Of T)(T, Func(Of T, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,``0)
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf<T>(T, T)
  nameWithType: Verify.NullIf<T>(T, T)
  fullName: InnerLibs.Verify.NullIf<T>(T, T)
  nameWithType.vb: Verify.NullIf(Of T)(T, T)
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, T)
  name.vb: NullIf(Of T)(T, T)
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  isExternal: true
  name: CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax<Type>(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  nameWithType.vb: Web.CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  fullName.vb: InnerLibs.Web.CreateFromAjax(Of Type)(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  name.vb: CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax<Type>
    nameWithType: Web.CreateFromAjax<Type>
    fullName: InnerLibs.Web.CreateFromAjax<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax(Of Type)
    nameWithType: Web.CreateFromAjax(Of Type)
    fullName: InnerLibs.Web.CreateFromAjax(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web
  commentId: T:InnerLibs.Web
  parent: InnerLibs
  name: Web
  nameWithType: Web
  fullName: InnerLibs.Web
- uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  isExternal: true
  name: AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  nameWithType: Web.AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>(T, System.Func<T, TextType>, System.Func<T, ValueType>)
  nameWithType.vb: Web.AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)(T, System.Func(Of T, TextType), System.Func(Of T, ValueType))
  name.vb: AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem<T, TextType, ValueType>
    nameWithType: Web.AsListItem<T, TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem(Of T, TextType, ValueType)
    nameWithType: Web.AsListItem(Of T, TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms.GetCastedValue(System.Object)
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  isExternal: true
  name: GetCastedValue(Object)
  nameWithType: WinForms.GetCastedValue(Object)
  fullName: InnerLibs.WinForms.GetCastedValue(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms
  commentId: T:InnerLibs.WinForms
  parent: InnerLibs
  name: WinForms
  nameWithType: WinForms
  fullName: InnerLibs.WinForms
- uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  isExternal: true
  name: CastValueForControl(Object, Object)
  nameWithType: WinForms.CastValueForControl(Object, Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  isExternal: true
  name: ApplyToControls<T>(T, HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls<T>(T, HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>(T, System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(Of T)(T, HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)(T, System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(Of T)(T, HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls<T>
    nameWithType: LINQExtensions.ApplyToControls<T>
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls(Of T)
    nameWithType: LINQExtensions.ApplyToControls(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions
  commentId: T:InnerLibs.LINQ.LINQExtensions
  parent: InnerLibs.LINQ
  name: LINQExtensions
  nameWithType: LINQExtensions
  fullName: InnerLibs.LINQ.LINQExtensions
- uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  isExternal: true
  name: HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>(T, T, System.Func<T, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)(T, T, System.Func(Of T, System.Object)())
  name.vb: HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues<T>
    nameWithType: LINQExtensions.HasSamePropertyValues<T>
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues(Of T)
    nameWithType: LINQExtensions.HasSamePropertyValues(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ
  commentId: N:InnerLibs.LINQ
  name: InnerLibs.LINQ
  nameWithType: InnerLibs.LINQ
  fullName: InnerLibs.LINQ
- uid: InnerLibs.Calendars.NextFortnight*
  commentId: Overload:InnerLibs.Calendars.NextFortnight
  name: NextFortnight
  nameWithType: Calendars.NextFortnight
  fullName: InnerLibs.Calendars.NextFortnight
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: InnerLibs.Calendars.WaitUntil*
  commentId: Overload:InnerLibs.Calendars.WaitUntil
  name: WaitUntil
  nameWithType: Calendars.WaitUntil
  fullName: InnerLibs.Calendars.WaitUntil
- uid: InnerLibs.Calendars.IsOverlap*
  commentId: Overload:InnerLibs.Calendars.IsOverlap
  name: IsOverlap
  nameWithType: Calendars.IsOverlap
  fullName: InnerLibs.Calendars.IsOverlap
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: InnerLibs.Calendars.DateRange*
  commentId: Overload:InnerLibs.Calendars.DateRange
  name: DateRange
  nameWithType: Calendars.DateRange
  fullName: InnerLibs.Calendars.DateRange
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.DateTime[]
  commentId: T:System.DateTime[]
  isExternal: true
  name: DateTime[]
  nameWithType: DateTime[]
  fullName: System.DateTime[]
  nameWithType.vb: DateTime()
  fullName.vb: System.DateTime()
  name.vb: DateTime()
  spec.csharp:
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.Calendars.GetFirstDateOfWeek*
  commentId: Overload:InnerLibs.Calendars.GetFirstDateOfWeek
  name: GetFirstDateOfWeek
  nameWithType: Calendars.GetFirstDateOfWeek
  fullName: InnerLibs.Calendars.GetFirstDateOfWeek
- uid: System.DayOfWeek
  commentId: T:System.DayOfWeek
  parent: System
  isExternal: true
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
- uid: InnerLibs.Calendars.GetLastDateOfWeek*
  commentId: Overload:InnerLibs.Calendars.GetLastDateOfWeek
  name: GetLastDateOfWeek
  nameWithType: Calendars.GetLastDateOfWeek
  fullName: InnerLibs.Calendars.GetLastDateOfWeek
- uid: InnerLibs.Calendars.GetWeek*
  commentId: Overload:InnerLibs.Calendars.GetWeek
  name: GetWeek
  nameWithType: Calendars.GetWeek
  fullName: InnerLibs.Calendars.GetWeek
- uid: InnerLibs.DateRange
  commentId: T:InnerLibs.DateRange
  parent: InnerLibs
  name: DateRange
  nameWithType: DateRange
  fullName: InnerLibs.DateRange
- uid: InnerLibs.Calendars.GetLastDayOfMonth*
  commentId: Overload:InnerLibs.Calendars.GetLastDayOfMonth
  name: GetLastDayOfMonth
  nameWithType: Calendars.GetLastDayOfMonth
  fullName: InnerLibs.Calendars.GetLastDayOfMonth
- uid: InnerLibs.Calendars.GetFirstDayOfMonth*
  commentId: Overload:InnerLibs.Calendars.GetFirstDayOfMonth
  name: GetFirstDayOfMonth
  nameWithType: Calendars.GetFirstDayOfMonth
  fullName: InnerLibs.Calendars.GetFirstDayOfMonth
- uid: InnerLibs.Calendars.GetFirstDayOfFortnight*
  commentId: Overload:InnerLibs.Calendars.GetFirstDayOfFortnight
  name: GetFirstDayOfFortnight
  nameWithType: Calendars.GetFirstDayOfFortnight
  fullName: InnerLibs.Calendars.GetFirstDayOfFortnight
- uid: InnerLibs.Calendars.GetLastDayOfFortnight*
  commentId: Overload:InnerLibs.Calendars.GetLastDayOfFortnight
  name: GetLastDayOfFortnight
  nameWithType: Calendars.GetLastDayOfFortnight
  fullName: InnerLibs.Calendars.GetLastDayOfFortnight
- uid: InnerLibs.Calendars.GetWeekOfYear*
  commentId: Overload:InnerLibs.Calendars.GetWeekOfYear
  name: GetWeekOfYear
  nameWithType: Calendars.GetWeekOfYear
  fullName: InnerLibs.Calendars.GetWeekOfYear
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: InnerLibs.Calendars.IsSameMonth*
  commentId: Overload:InnerLibs.Calendars.IsSameMonth
  name: IsSameMonth
  nameWithType: Calendars.IsSameMonth
  fullName: InnerLibs.Calendars.IsSameMonth
- uid: InnerLibs.Calendars.IsAnniversary*
  commentId: Overload:InnerLibs.Calendars.IsAnniversary
  name: IsAnniversary
  nameWithType: Calendars.IsAnniversary
  fullName: InnerLibs.Calendars.IsAnniversary
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.ToSQLDateString*
  commentId: Overload:InnerLibs.Calendars.ToSQLDateString
  name: ToSQLDateString
  nameWithType: Calendars.ToSQLDateString
  fullName: InnerLibs.Calendars.ToSQLDateString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: InnerLibs.TimeMachine.TimeFlow
  commentId: T:InnerLibs.TimeMachine.TimeFlow
  parent: InnerLibs.TimeMachine
  name: TimeFlow
  nameWithType: TimeFlow
  fullName: InnerLibs.TimeMachine.TimeFlow
- uid: InnerLibs.Calendars.GetDifference*
  commentId: Overload:InnerLibs.Calendars.GetDifference
  name: GetDifference
  nameWithType: Calendars.GetDifference
  fullName: InnerLibs.Calendars.GetDifference
- uid: InnerLibs.TimeMachine
  commentId: N:InnerLibs.TimeMachine
  name: InnerLibs.TimeMachine
  nameWithType: InnerLibs.TimeMachine
  fullName: InnerLibs.TimeMachine
- uid: InnerLibs.Calendars.FixDateOrder*
  commentId: Overload:InnerLibs.Calendars.FixDateOrder
  name: FixDateOrder
  nameWithType: Calendars.FixDateOrder
  fullName: InnerLibs.Calendars.FixDateOrder
- uid: InnerLibs.Calendars.IsBetween*
  commentId: Overload:InnerLibs.Calendars.IsBetween
  name: IsBetween
  nameWithType: Calendars.IsBetween
  fullName: InnerLibs.Calendars.IsBetween
- uid: InnerLibs.Calendars.GetBetween*
  commentId: Overload:InnerLibs.Calendars.GetBetween
  name: GetBetween
  nameWithType: Calendars.GetBetween
  fullName: InnerLibs.Calendars.GetBetween
- uid: System.DayOfWeek[]
  commentId: T:System.DayOfWeek[]
  isExternal: true
  name: DayOfWeek[]
  nameWithType: DayOfWeek[]
  fullName: System.DayOfWeek[]
  nameWithType.vb: DayOfWeek()
  fullName.vb: System.DayOfWeek()
  name.vb: DayOfWeek()
  spec.csharp:
  - uid: System.DayOfWeek
    name: DayOfWeek
    nameWithType: DayOfWeek
    fullName: System.DayOfWeek
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.DayOfWeek
    name: DayOfWeek
    nameWithType: DayOfWeek
    fullName: System.DayOfWeek
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List{System.DateTime}
  commentId: T:System.Collections.Generic.List{System.DateTime}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DateTime>
  nameWithType: List<DateTime>
  fullName: System.Collections.Generic.List<System.DateTime>
  nameWithType.vb: List(Of DateTime)
  fullName.vb: System.Collections.Generic.List(Of System.DateTime)
  name.vb: List(Of DateTime)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: InnerLibs.Calendars.ClearTime*
  commentId: Overload:InnerLibs.Calendars.ClearTime
  name: ClearTime
  nameWithType: Calendars.ClearTime
  fullName: InnerLibs.Calendars.ClearTime
- uid: InnerLibs.Calendars.ToTimeElapsedString*
  commentId: Overload:InnerLibs.Calendars.ToTimeElapsedString
  name: ToTimeElapsedString
  nameWithType: Calendars.ToTimeElapsedString
  fullName: InnerLibs.Calendars.ToTimeElapsedString
- uid: InnerLibs.Calendars.ToLongMonthName*
  commentId: Overload:InnerLibs.Calendars.ToLongMonthName
  name: ToLongMonthName
  nameWithType: Calendars.ToLongMonthName
  fullName: InnerLibs.Calendars.ToLongMonthName
- uid: InnerLibs.Calendars.ToShortMonthName*
  commentId: Overload:InnerLibs.Calendars.ToShortMonthName
  name: ToShortMonthName
  nameWithType: Calendars.ToShortMonthName
  fullName: InnerLibs.Calendars.ToShortMonthName
- uid: InnerLibs.Calendars.ToLongDayOfWeekName*
  commentId: Overload:InnerLibs.Calendars.ToLongDayOfWeekName
  name: ToLongDayOfWeekName
  nameWithType: Calendars.ToLongDayOfWeekName
  fullName: InnerLibs.Calendars.ToLongDayOfWeekName
- uid: InnerLibs.Calendars.ToShortDayOfWeekName*
  commentId: Overload:InnerLibs.Calendars.ToShortDayOfWeekName
  name: ToShortDayOfWeekName
  nameWithType: Calendars.ToShortDayOfWeekName
  fullName: InnerLibs.Calendars.ToShortDayOfWeekName
- uid: InnerLibs.Calendars.Tomorrow*
  commentId: Overload:InnerLibs.Calendars.Tomorrow
  name: Tomorrow
  nameWithType: Calendars.Tomorrow
  fullName: InnerLibs.Calendars.Tomorrow
- uid: InnerLibs.Calendars.Yesterday*
  commentId: Overload:InnerLibs.Calendars.Yesterday
  name: Yesterday
  nameWithType: Calendars.Yesterday
  fullName: InnerLibs.Calendars.Yesterday
- uid: InnerLibs.Calendars.LastSunday*
  commentId: Overload:InnerLibs.Calendars.LastSunday
  name: LastSunday
  nameWithType: Calendars.LastSunday
  fullName: InnerLibs.Calendars.LastSunday
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: InnerLibs.Calendars.NextSunday*
  commentId: Overload:InnerLibs.Calendars.NextSunday
  name: NextSunday
  nameWithType: Calendars.NextSunday
  fullName: InnerLibs.Calendars.NextSunday
- uid: InnerLibs.Calendars.LastDay*
  commentId: Overload:InnerLibs.Calendars.LastDay
  name: LastDay
  nameWithType: Calendars.LastDay
  fullName: InnerLibs.Calendars.LastDay
- uid: InnerLibs.Calendars.NextDay*
  commentId: Overload:InnerLibs.Calendars.NextDay
  name: NextDay
  nameWithType: Calendars.NextDay
  fullName: InnerLibs.Calendars.NextDay
- uid: InnerLibs.Calendars.IsWeekend*
  commentId: Overload:InnerLibs.Calendars.IsWeekend
  name: IsWeekend
  nameWithType: Calendars.IsWeekend
  fullName: InnerLibs.Calendars.IsWeekend
- uid: InnerLibs.Calendars.ToFarewell*
  commentId: Overload:InnerLibs.Calendars.ToFarewell
  name: ToFarewell
  nameWithType: Calendars.ToFarewell
  fullName: InnerLibs.Calendars.ToFarewell
- uid: InnerLibs.Calendars.ToGreeting*
  commentId: Overload:InnerLibs.Calendars.ToGreeting
  name: ToGreeting
  nameWithType: Calendars.ToGreeting
  fullName: InnerLibs.Calendars.ToGreeting
- uid: InnerLibs.Calendars.Greeting*
  commentId: Overload:InnerLibs.Calendars.Greeting
  name: Greeting
  nameWithType: Calendars.Greeting
  fullName: InnerLibs.Calendars.Greeting
- uid: InnerLibs.Calendars.Farewell*
  commentId: Overload:InnerLibs.Calendars.Farewell
  name: Farewell
  nameWithType: Calendars.Farewell
  fullName: InnerLibs.Calendars.Farewell
- uid: InnerLibs.Calendars.Months*
  commentId: Overload:InnerLibs.Calendars.Months
  name: Months
  nameWithType: Calendars.Months
  fullName: InnerLibs.Calendars.Months
- uid: InnerLibs.Calendars.TypeOfFill
  commentId: T:InnerLibs.Calendars.TypeOfFill
  parent: InnerLibs
  name: Calendars.TypeOfFill
  nameWithType: Calendars.TypeOfFill
  fullName: InnerLibs.Calendars.TypeOfFill
- uid: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<KeyValuePair<String, String>>
  nameWithType: List<KeyValuePair<String, String>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  nameWithType.vb: List(Of KeyValuePair(Of String, String))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: List(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Calendars.WeekDays*
  commentId: Overload:InnerLibs.Calendars.WeekDays
  name: WeekDays
  nameWithType: Calendars.WeekDays
  fullName: InnerLibs.Calendars.WeekDays
- uid: InnerLibs.Calendars.FillWith*
  commentId: Overload:InnerLibs.Calendars.FillWith
  name: FillWith
  nameWithType: Calendars.FillWith
  fullName: InnerLibs.Calendars.FillWith
- uid: System.Web.UI.HtmlControls.HtmlSelect
  commentId: T:System.Web.UI.HtmlControls.HtmlSelect
  parent: System.Web.UI.HtmlControls
  isExternal: true
  name: HtmlSelect
  nameWithType: HtmlSelect
  fullName: System.Web.UI.HtmlControls.HtmlSelect
- uid: InnerLibs.Calendars.CalendarType
  commentId: T:InnerLibs.Calendars.CalendarType
  parent: InnerLibs
  name: Calendars.CalendarType
  nameWithType: Calendars.CalendarType
  fullName: InnerLibs.Calendars.CalendarType
- uid: System.Web.UI.HtmlControls
  commentId: N:System.Web.UI.HtmlControls
  isExternal: true
  name: System.Web.UI.HtmlControls
  nameWithType: System.Web.UI.HtmlControls
  fullName: System.Web.UI.HtmlControls
- uid: InnerLibs.Calendars.CalculatePercent*
  commentId: Overload:InnerLibs.Calendars.CalculatePercent
  name: CalculatePercent
  nameWithType: Calendars.CalculatePercent
  fullName: InnerLibs.Calendars.CalculatePercent
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
