### YamlMime:ManagedReference
items:
- uid: InnerLibs.ClassTools
  commentId: T:InnerLibs.ClassTools
  id: ClassTools
  parent: InnerLibs
  children:
  - InnerLibs.ClassTools.AddFontFromBytes(System.Drawing.Text.PrivateFontCollection@,System.Byte[])
  - InnerLibs.ClassTools.AddFontFromResource(System.Drawing.Text.PrivateFontCollection@,System.Reflection.Assembly,System.String)
  - InnerLibs.ClassTools.AsIf``1(System.Boolean,``0,``0)
  - InnerLibs.ClassTools.AsIf``1(System.Nullable{System.Boolean},``0,``0)
  - InnerLibs.ClassTools.BlankCoalesce(System.String,System.String[])
  - InnerLibs.ClassTools.BlankCoalesce(System.String[])
  - InnerLibs.ClassTools.Choose``1(System.Boolean,``0,``0)
  - InnerLibs.ClassTools.Choose``1(System.String,``0,``0)
  - InnerLibs.ClassTools.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - InnerLibs.ClassTools.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - InnerLibs.ClassTools.CopyToObject``1(System.Collections.Specialized.NameValueCollection,``0@,System.String[])
  - InnerLibs.ClassTools.CreateDictionary``1(``0)
  - InnerLibs.ClassTools.CreateObject``1(System.Collections.Specialized.NameValueCollection,System.String[])
  - InnerLibs.ClassTools.DistinctCount``1(System.Collections.Generic.IEnumerable{``0})
  - InnerLibs.ClassTools.FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  - InnerLibs.ClassTools.FlatRequest(System.Web.HttpRequest)
  - InnerLibs.ClassTools.GetAttributeValue``2(System.Type,System.Func{``0,``1})
  - InnerLibs.ClassTools.GetEnumValue``1(System.String)
  - InnerLibs.ClassTools.GetEnumValues``1
  - InnerLibs.ClassTools.GetProperties(System.Object)
  - InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  - InnerLibs.ClassTools.GetPropertyParameterFromString``1(System.String)
  - InnerLibs.ClassTools.GetPropertyParametersFromString(System.Type,System.String)
  - InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  - InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  - InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  - InnerLibs.ClassTools.GetResourceBytes(System.Reflection.Assembly,System.String)
  - InnerLibs.ClassTools.GetResourceFileText(System.Reflection.Assembly,System.String)
  - InnerLibs.ClassTools.GetResourceHtmlDocument(System.Reflection.Assembly,System.String)
  - InnerLibs.ClassTools.GetValueOr``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)
  - InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  - InnerLibs.ClassTools.HasProperty(System.Type,System.String,System.Boolean)
  - InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  - InnerLibs.ClassTools.IsArrayOf``1(System.Type)
  - InnerLibs.ClassTools.IsDictionary(System.Object)
  - InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  - InnerLibs.ClassTools.IsList(System.Object)
  - InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - InnerLibs.ClassTools.IsNumericType(System.Type)
  - InnerLibs.ClassTools.IsType``1(System.Object)
  - InnerLibs.ClassTools.LastOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  - InnerLibs.ClassTools.Map``1(System.Data.Common.DbDataReader,System.Object[])
  - InnerLibs.ClassTools.Merge(System.Collections.Specialized.NameValueCollection[])
  - InnerLibs.ClassTools.MergeProperties(System.Object[])
  - InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  - InnerLibs.ClassTools.NullCoalesce``1(System.Collections.Generic.IEnumerable{``0})
  - InnerLibs.ClassTools.NullCoalesce``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})
  - InnerLibs.ClassTools.NullCoalesce``1(System.Nullable{``0},System.Nullable{``0}[])
  - InnerLibs.ClassTools.NullifyProperties``1(``0)
  - InnerLibs.ClassTools.RemoveIfExist``2(System.Collections.Generic.IDictionary{``0,``1},``0[])
  - InnerLibs.ClassTools.RemoveIfExist``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})
  - InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  - InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  - InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  langs:
  - csharp
  - vb
  name: ClassTools
  nameWithType: ClassTools
  fullName: InnerLibs.ClassTools
  type: Class
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: ClassTools
    path: ClassManager.vb
    startLine: 12
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public class ClassTools
    content.vb: Public Module ClassTools
  extensionMethods:
  - InnerLibs.ClassTools.InnerLibs.ClassTools.CreateDictionary
  - System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  - System.Object.InnerLibs.ClassTools.GetProperties
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  - System.Object.InnerLibs.ClassTools.IsArrayOf``1
  - System.Object.InnerLibs.ClassTools.IsDictionary
  - InnerLibs.ClassTools.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.ClassTools},System.Collections.Generic.IEqualityComparer{InnerLibs.ClassTools})
  - InnerLibs.ClassTools.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - InnerLibs.ClassTools.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.ClassTools}[],System.Collections.Generic.IEqualityComparer{InnerLibs.ClassTools})
  - System.Object.InnerLibs.ClassTools.IsList
  - InnerLibs.ClassTools.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.ClassTools},System.Collections.Generic.IEqualityComparer{InnerLibs.ClassTools})
  - InnerLibs.ClassTools.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - System.Object.InnerLibs.ClassTools.IsType``1
  - InnerLibs.ClassTools.InnerLibs.ClassTools.NullCoalesce(InnerLibs.ClassTools[])
  - InnerLibs.ClassTools.InnerLibs.ClassTools.NullifyProperties
  - System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  - System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  - System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  - System.Object.InnerLibs.DataManipulation.GetDbType
  - InnerLibs.ClassTools.InnerLibs.Converter.DefineEmptyList
  - InnerLibs.ClassTools.InnerLibs.Converter.ChangeType``1
  - System.Object.InnerLibs.JsonViewer.CreateNode
  - InnerLibs.ClassTools.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  - System.Object.InnerLibs.Text.SerializeJSON(System.String)
  - System.Object.InnerLibs.Verify.IsNumber
  - System.Object.InnerLibs.Verify.IsNotNumber
  - System.Object.InnerLibs.Verify.IfBlank``1({T})
  - InnerLibs.ClassTools.InnerLibs.Verify.NullIf(System.Func{InnerLibs.ClassTools,System.Boolean})
  - InnerLibs.ClassTools.InnerLibs.Verify.NullIf(InnerLibs.ClassTools)
  - InnerLibs.ClassTools.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  - InnerLibs.ClassTools.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.ClassTools,{TextType}},System.Func{InnerLibs.ClassTools,{ValueType}})
  - System.Object.InnerLibs.WinForms.GetCastedValue
  - System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  - InnerLibs.ClassTools.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  - InnerLibs.ClassTools.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.ClassTools,System.Func{InnerLibs.ClassTools,System.Object}[])
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Module
- uid: InnerLibs.ClassTools.Map``1(System.Data.Common.DbDataReader,System.Object[])
  commentId: M:InnerLibs.ClassTools.Map``1(System.Data.Common.DbDataReader,System.Object[])
  id: Map``1(System.Data.Common.DbDataReader,System.Object[])
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: Map<T>(DbDataReader, Object[])
  nameWithType: ClassTools.Map<T>(DbDataReader, Object[])
  fullName: InnerLibs.ClassTools.Map<T>(System.Data.Common.DbDataReader, System.Object[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: Map
    path: ClassManager.vb
    startLine: 20
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nMapeia os objetos de um datareader para uma classe\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static List<T> Map<T>(this DbDataReader Reader, params object[] Params)
    parameters:
    - id: Reader
      type: System.Data.Common.DbDataReader
      description: ''
    - id: Params
      type: System.Object[]
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Map(Of T)(Reader As DbDataReader, ParamArray Params As Object()) As List(Of T)
  overload: InnerLibs.ClassTools.Map*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.Map(Of T)(DbDataReader, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.Map(Of T)(System.Data.Common.DbDataReader, System.Object())
  name.vb: Map(Of T)(DbDataReader, Object())
- uid: InnerLibs.ClassTools.AddFontFromBytes(System.Drawing.Text.PrivateFontCollection@,System.Byte[])
  commentId: M:InnerLibs.ClassTools.AddFontFromBytes(System.Drawing.Text.PrivateFontCollection@,System.Byte[])
  id: AddFontFromBytes(System.Drawing.Text.PrivateFontCollection@,System.Byte[])
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: AddFontFromBytes(ref PrivateFontCollection, Byte[])
  nameWithType: ClassTools.AddFontFromBytes(ref PrivateFontCollection, Byte[])
  fullName: InnerLibs.ClassTools.AddFontFromBytes(ref System.Drawing.Text.PrivateFontCollection, System.Byte[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: AddFontFromBytes
    path: ClassManager.vb
    startLine: 51
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAdiciona uma fonte a uma PrivateFontCollection a partir de um Resource\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static void AddFontFromBytes(this ref PrivateFontCollection FontCollection, byte[] FontBytes)
    parameters:
    - id: FontCollection
      type: System.Drawing.Text.PrivateFontCollection
      description: Colecao
    - id: FontBytes
      type: System.Byte[]
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Sub AddFontFromBytes(ByRef FontCollection As PrivateFontCollection, FontBytes As Byte())
  overload: InnerLibs.ClassTools.AddFontFromBytes*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.AddFontFromBytes(ByRef PrivateFontCollection, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.AddFontFromBytes(ByRef System.Drawing.Text.PrivateFontCollection, System.Byte())
  name.vb: AddFontFromBytes(ByRef PrivateFontCollection, Byte())
- uid: InnerLibs.ClassTools.AddFontFromResource(System.Drawing.Text.PrivateFontCollection@,System.Reflection.Assembly,System.String)
  commentId: M:InnerLibs.ClassTools.AddFontFromResource(System.Drawing.Text.PrivateFontCollection@,System.Reflection.Assembly,System.String)
  id: AddFontFromResource(System.Drawing.Text.PrivateFontCollection@,System.Reflection.Assembly,System.String)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: AddFontFromResource(ref PrivateFontCollection, Assembly, String)
  nameWithType: ClassTools.AddFontFromResource(ref PrivateFontCollection, Assembly, String)
  fullName: InnerLibs.ClassTools.AddFontFromResource(ref System.Drawing.Text.PrivateFontCollection, System.Reflection.Assembly, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: AddFontFromResource
    path: ClassManager.vb
    startLine: 63
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAdiciona uma fonte a uma PrivateFontCollection a partir de um Resource\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static void AddFontFromResource(this ref PrivateFontCollection FontCollection, Assembly Assembly, string FileName)
    parameters:
    - id: FontCollection
      type: System.Drawing.Text.PrivateFontCollection
      description: Colecao
    - id: Assembly
      type: System.Reflection.Assembly
    - id: FileName
      type: System.String
      description: Nome do arquivo da fonte
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Sub AddFontFromResource(ByRef FontCollection As PrivateFontCollection, Assembly As Assembly, FileName As String)
  overload: InnerLibs.ClassTools.AddFontFromResource*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.AddFontFromResource(ByRef PrivateFontCollection, Assembly, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.AddFontFromResource(ByRef System.Drawing.Text.PrivateFontCollection, System.Reflection.Assembly, System.String)
  name.vb: AddFontFromResource(ByRef PrivateFontCollection, Assembly, String)
- uid: InnerLibs.ClassTools.AsIf``1(System.Boolean,``0,``0)
  commentId: M:InnerLibs.ClassTools.AsIf``1(System.Boolean,``0,``0)
  id: AsIf``1(System.Boolean,``0,``0)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: AsIf<T>(Boolean, T, T)
  nameWithType: ClassTools.AsIf<T>(Boolean, T, T)
  fullName: InnerLibs.ClassTools.AsIf<T>(System.Boolean, T, T)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: AsIf
    path: ClassManager.vb
    startLine: 79
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um valor de um tipo especifico de acordo com um valor boolean\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static T AsIf<T>(this bool Bool, T TrueValue, T FalseValue = null)
    parameters:
    - id: Bool
      type: System.Boolean
      description: Valor boolean
    - id: TrueValue
      type: '{T}'
      description: Valor se verdadeiro
    - id: FalseValue
      type: '{T}'
      description: valor se falso
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function AsIf(Of T)(Bool As Boolean, TrueValue As T, FalseValue As T = Nothing) As T
  overload: InnerLibs.ClassTools.AsIf*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.AsIf(Of T)(Boolean, T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.AsIf(Of T)(System.Boolean, T, T)
  name.vb: AsIf(Of T)(Boolean, T, T)
- uid: InnerLibs.ClassTools.AsIf``1(System.Nullable{System.Boolean},``0,``0)
  commentId: M:InnerLibs.ClassTools.AsIf``1(System.Nullable{System.Boolean},``0,``0)
  id: AsIf``1(System.Nullable{System.Boolean},``0,``0)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: AsIf<T>(Nullable<Boolean>, T, T)
  nameWithType: ClassTools.AsIf<T>(Nullable<Boolean>, T, T)
  fullName: InnerLibs.ClassTools.AsIf<T>(System.Nullable<System.Boolean>, T, T)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: AsIf
    path: ClassManager.vb
    startLine: 92
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um valor de um tipo especifico de acordo com um valor boolean\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static T AsIf<T>(this bool? Bool, T TrueValue, T FalseValue = null)
    parameters:
    - id: Bool
      type: System.Nullable{System.Boolean}
      description: Valor boolean
    - id: TrueValue
      type: '{T}'
      description: Valor se verdadeiro
    - id: FalseValue
      type: '{T}'
      description: valor se falso
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function AsIf(Of T)(Bool As Boolean?, TrueValue As T, FalseValue As T = Nothing) As T
  overload: InnerLibs.ClassTools.AsIf*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.AsIf(Of T)(Nullable(Of Boolean), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.AsIf(Of T)(System.Nullable(Of System.Boolean), T, T)
  name.vb: AsIf(Of T)(Nullable(Of Boolean), T, T)
- uid: InnerLibs.ClassTools.BlankCoalesce(System.String,System.String[])
  commentId: M:InnerLibs.ClassTools.BlankCoalesce(System.String,System.String[])
  id: BlankCoalesce(System.String,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: BlankCoalesce(String, String[])
  nameWithType: ClassTools.BlankCoalesce(String, String[])
  fullName: InnerLibs.ClassTools.BlankCoalesce(System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: BlankCoalesce
    path: ClassManager.vb
    startLine: 108
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se dois ou mais string estão nulas ou em branco e retorna o primeiro elemento que\npossuir um valor\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string BlankCoalesce(this string First, params string[] N)
    parameters:
    - id: First
      type: System.String
      description: Primeiro Item
    - id: N
      type: System.String[]
      description: Outros itens
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function BlankCoalesce(First As String, ParamArray N As String()) As String
  overload: InnerLibs.ClassTools.BlankCoalesce*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.BlankCoalesce(String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.BlankCoalesce(System.String, System.String())
  name.vb: BlankCoalesce(String, String())
- uid: InnerLibs.ClassTools.BlankCoalesce(System.String[])
  commentId: M:InnerLibs.ClassTools.BlankCoalesce(System.String[])
  id: BlankCoalesce(System.String[])
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: BlankCoalesce(String[])
  nameWithType: ClassTools.BlankCoalesce(String[])
  fullName: InnerLibs.ClassTools.BlankCoalesce(System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: BlankCoalesce
    path: ClassManager.vb
    startLine: 126
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se dois ou mais string estão nulas ou em branco e retorna o primeiro elemento que\npossuir um valor\n"
  example: []
  syntax:
    content: public static string BlankCoalesce(params string[] N)
    parameters:
    - id: N
      type: System.String[]
      description: Itens
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function BlankCoalesce(ParamArray N As String()) As String
  overload: InnerLibs.ClassTools.BlankCoalesce*
  nameWithType.vb: ClassTools.BlankCoalesce(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.BlankCoalesce(System.String())
  name.vb: BlankCoalesce(String())
- uid: InnerLibs.ClassTools.Choose``1(System.Boolean,``0,``0)
  commentId: M:InnerLibs.ClassTools.Choose``1(System.Boolean,``0,``0)
  id: Choose``1(System.Boolean,``0,``0)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: Choose<T>(Boolean, T, T)
  nameWithType: ClassTools.Choose<T>(Boolean, T, T)
  fullName: InnerLibs.ClassTools.Choose<T>(System.Boolean, T, T)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: Choose
    path: ClassManager.vb
    startLine: 142
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nEscolhe um valor de acordo com o resultado de uma variavel booliana\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static T Choose<T>(this bool BooleanValue, T ChooseIfTrue, T ChooseIfFalse)
    parameters:
    - id: BooleanValue
      type: System.Boolean
      description: Resultado da expressão booliana
    - id: ChooseIfTrue
      type: '{T}'
      description: Valor retornado se a expressão for verdadeira
    - id: ChooseIfFalse
      type: '{T}'
      description: Valor retornado se a expressão for falsa
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Choose(Of T)(BooleanValue As Boolean, ChooseIfTrue As T, ChooseIfFalse As T) As T
  overload: InnerLibs.ClassTools.Choose*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.Choose(Of T)(Boolean, T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.Choose(Of T)(System.Boolean, T, T)
  name.vb: Choose(Of T)(Boolean, T, T)
- uid: InnerLibs.ClassTools.Choose``1(System.String,``0,``0)
  commentId: M:InnerLibs.ClassTools.Choose``1(System.String,``0,``0)
  id: Choose``1(System.String,``0,``0)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: Choose<T>(String, T, T)
  nameWithType: ClassTools.Choose<T>(String, T, T)
  fullName: InnerLibs.ClassTools.Choose<T>(System.String, T, T)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: Choose
    path: ClassManager.vb
    startLine: 153
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nEscolhe um valor de acordo com o resultado de uma expressão\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static T Choose<T>(this string Expression, T ChooseIfTrue, T ChooseIfFalse)
    parameters:
    - id: Expression
      type: System.String
      description: Resultado da expressão booliana
    - id: ChooseIfTrue
      type: '{T}'
      description: Valor retornado se a expressão for verdadeira
    - id: ChooseIfFalse
      type: '{T}'
      description: Valor retornado se a expressão for falsa
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Choose(Of T)(Expression As String, ChooseIfTrue As T, ChooseIfFalse As T) As T
  overload: InnerLibs.ClassTools.Choose*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.Choose(Of T)(String, T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.Choose(Of T)(System.String, T, T)
  name.vb: Choose(Of T)(String, T, T)
- uid: InnerLibs.ClassTools.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: ContainsAll<Type>(IEnumerable<Type>, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.ContainsAll<Type>(IEnumerable<Type>, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.ContainsAll<Type>(System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: ContainsAll
    path: ClassManager.vb
    startLine: 178
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se uma lista, coleção ou array contem todos os itens de outra lista, coleção ou array.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool ContainsAll<Type>(this IEnumerable<Type> List1, IEnumerable<Type> List2, IEqualityComparer<Type> Comparer = null)
    parameters:
    - id: List1
      type: System.Collections.Generic.IEnumerable{{Type}}
      description: Lista 1
    - id: List2
      type: System.Collections.Generic.IEnumerable{{Type}}
      description: Lista2
    - id: Comparer
      type: System.Collections.Generic.IEqualityComparer{{Type}}
    typeParameters:
    - id: Type
      description: Tipo do objeto
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ContainsAll(Of Type)(List1 As IEnumerable(Of Type), List2 As IEnumerable(Of Type), Comparer As IEqualityComparer(Of Type) = Nothing) As Boolean
  overload: InnerLibs.ClassTools.ContainsAll*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.ContainsAll(Of Type)(IEnumerable(Of Type), IEnumerable(Of Type), IEqualityComparer(Of Type))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.ContainsAll(Of Type)(System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: ContainsAll(Of Type)(IEnumerable(Of Type), IEnumerable(Of Type), IEqualityComparer(Of Type))
- uid: InnerLibs.ClassTools.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: ContainsAny<Type>(IEnumerable<Type>, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.ContainsAny<Type>(IEnumerable<Type>, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.ContainsAny<Type>(System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: ContainsAny
    path: ClassManager.vb
    startLine: 201
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se uma lista, coleção ou array contem um dos itens de outra lista, coleção ou array.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool ContainsAny<Type>(this IEnumerable<Type> List1, IEnumerable<Type> List2, IEqualityComparer<Type> Comparer = null)
    parameters:
    - id: List1
      type: System.Collections.Generic.IEnumerable{{Type}}
      description: Lista 1
    - id: List2
      type: System.Collections.Generic.IEnumerable{{Type}}
      description: Lista2
    - id: Comparer
      type: System.Collections.Generic.IEqualityComparer{{Type}}
    typeParameters:
    - id: Type
      description: Tipo do objeto
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ContainsAny(Of Type)(List1 As IEnumerable(Of Type), List2 As IEnumerable(Of Type), Comparer As IEqualityComparer(Of Type) = Nothing) As Boolean
  overload: InnerLibs.ClassTools.ContainsAny*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.ContainsAny(Of Type)(IEnumerable(Of Type), IEnumerable(Of Type), IEqualityComparer(Of Type))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.ContainsAny(Of Type)(System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: ContainsAny(Of Type)(IEnumerable(Of Type), IEnumerable(Of Type), IEqualityComparer(Of Type))
- uid: InnerLibs.ClassTools.CopyToObject``1(System.Collections.Specialized.NameValueCollection,``0@,System.String[])
  commentId: M:InnerLibs.ClassTools.CopyToObject``1(System.Collections.Specialized.NameValueCollection,``0@,System.String[])
  id: CopyToObject``1(System.Collections.Specialized.NameValueCollection,``0@,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: CopyToObject<Type>(NameValueCollection, ref Type, String[])
  nameWithType: ClassTools.CopyToObject<Type>(NameValueCollection, ref Type, String[])
  fullName: InnerLibs.ClassTools.CopyToObject<Type>(System.Collections.Specialized.NameValueCollection, ref Type, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: CopyToObject
    path: ClassManager.vb
    startLine: 222
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCopia os valores de um <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> para um objeto de um tipo especifico\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Type CopyToObject<Type>(this NameValueCollection Collection, ref Type Obj, params string[] Keys)
          where Type : class
    parameters:
    - id: Collection
      type: System.Collections.Specialized.NameValueCollection
      description: Colecao
    - id: Obj
      type: '{Type}'
    - id: Keys
      type: System.String[]
    typeParameters:
    - id: Type
      description: Tipo do Objeto
    return:
      type: '{Type}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function CopyToObject(Of Type As Class)(Collection As NameValueCollection, ByRef Obj As Type, ParamArray Keys As String()) As Type
  overload: InnerLibs.ClassTools.CopyToObject*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.CopyToObject(Of Type)(NameValueCollection, ByRef Type, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.CopyToObject(Of Type)(System.Collections.Specialized.NameValueCollection, ByRef Type, System.String())
  name.vb: CopyToObject(Of Type)(NameValueCollection, ByRef Type, String())
- uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  id: CreateDictionary``1(``0)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: CreateDictionary<Type>(Type)
  nameWithType: ClassTools.CreateDictionary<Type>(Type)
  fullName: InnerLibs.ClassTools.CreateDictionary<Type>(Type)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: CreateDictionary
    path: ClassManager.vb
    startLine: 248
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nConverte uma classe para um <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Dictionary<string, object> CreateDictionary<Type>(this Type Obj)
    parameters:
    - id: Obj
      type: '{Type}'
      description: Object
    typeParameters:
    - id: Type
      description: Tipo da classe
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function CreateDictionary(Of Type)(Obj As Type) As Dictionary(Of String, Object)
  overload: InnerLibs.ClassTools.CreateDictionary*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.CreateDictionary(Of Type)(Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.CreateDictionary(Of Type)(Type)
  name.vb: CreateDictionary(Of Type)(Type)
- uid: InnerLibs.ClassTools.CreateObject``1(System.Collections.Specialized.NameValueCollection,System.String[])
  commentId: M:InnerLibs.ClassTools.CreateObject``1(System.Collections.Specialized.NameValueCollection,System.String[])
  id: CreateObject``1(System.Collections.Specialized.NameValueCollection,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: CreateObject<Type>(NameValueCollection, String[])
  nameWithType: ClassTools.CreateObject<Type>(NameValueCollection, String[])
  fullName: InnerLibs.ClassTools.CreateObject<Type>(System.Collections.Specialized.NameValueCollection, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: CreateObject
    path: ClassManager.vb
    startLine: 258
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um objeto de um tipo especifico a partir de um <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Type CreateObject<Type>(this NameValueCollection Collection, params string[] Keys)
          where Type : class
    parameters:
    - id: Collection
      type: System.Collections.Specialized.NameValueCollection
      description: Colecao
    - id: Keys
      type: System.String[]
    typeParameters:
    - id: Type
      description: Tipo do Objeto
    return:
      type: '{Type}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function CreateObject(Of Type As Class)(Collection As NameValueCollection, ParamArray Keys As String()) As Type
  overload: InnerLibs.ClassTools.CreateObject*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.CreateObject(Of Type)(NameValueCollection, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.CreateObject(Of Type)(System.Collections.Specialized.NameValueCollection, System.String())
  name.vb: CreateObject(Of Type)(NameValueCollection, String())
- uid: InnerLibs.ClassTools.DistinctCount``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:InnerLibs.ClassTools.DistinctCount``1(System.Collections.Generic.IEnumerable{``0})
  id: DistinctCount``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: DistinctCount<Type>(IEnumerable<Type>)
  nameWithType: ClassTools.DistinctCount<Type>(IEnumerable<Type>)
  fullName: InnerLibs.ClassTools.DistinctCount<Type>(System.Collections.Generic.IEnumerable<Type>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: DistinctCount
    path: ClassManager.vb
    startLine: 270
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nConta de maneira distinta items de uma coleçao\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Dictionary<Type, long> DistinctCount<Type>(this IEnumerable<Type> Arr)
    parameters:
    - id: Arr
      type: System.Collections.Generic.IEnumerable{{Type}}
      description: colecao
    typeParameters:
    - id: Type
      description: TIpo de Objeto
    return:
      type: System.Collections.Generic.Dictionary{{Type},System.Int64}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function DistinctCount(Of Type)(Arr As IEnumerable(Of Type)) As Dictionary(Of Type, Long)
  overload: InnerLibs.ClassTools.DistinctCount*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.DistinctCount(Of Type)(IEnumerable(Of Type))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.DistinctCount(Of Type)(System.Collections.Generic.IEnumerable(Of Type))
  name.vb: DistinctCount(Of Type)(IEnumerable(Of Type))
- uid: InnerLibs.ClassTools.FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:InnerLibs.ClassTools.FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: FirstOr<T>(IEnumerable<T>, T)
  nameWithType: ClassTools.FirstOr<T>(IEnumerable<T>, T)
  fullName: InnerLibs.ClassTools.FirstOr<T>(System.Collections.Generic.IEnumerable<T>, T)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: FirstOr
    path: ClassManager.vb
    startLine: 281
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o primeiro objeto de uma lista ou um objeto especifico se a lista estiver vazia\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static T FirstOr<T>(this IEnumerable<T> source, T Alternate)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    - id: Alternate
      type: '{T}'
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function FirstOr(Of T)(source As IEnumerable(Of T), Alternate As T) As T
  overload: InnerLibs.ClassTools.FirstOr*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.FirstOr(Of T)(IEnumerable(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.FirstOr(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: FirstOr(Of T)(IEnumerable(Of T), T)
- uid: InnerLibs.ClassTools.FlatRequest(System.Web.HttpRequest)
  commentId: M:InnerLibs.ClassTools.FlatRequest(System.Web.HttpRequest)
  id: FlatRequest(System.Web.HttpRequest)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: FlatRequest(HttpRequest)
  nameWithType: ClassTools.FlatRequest(HttpRequest)
  fullName: InnerLibs.ClassTools.FlatRequest(System.Web.HttpRequest)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: FlatRequest
    path: ClassManager.vb
    startLine: 296
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um unico <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> a partir de um\n<xref href=\"System.Web.HttpRequest.QueryString\" data-throw-if-not-resolved=\"false\"></xref> e um <xref href=\"System.Web.HttpRequest.Form\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static NameValueCollection FlatRequest(this HttpRequest Request)
    parameters:
    - id: Request
      type: System.Web.HttpRequest
      description: HttpRequest
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function FlatRequest(Request As HttpRequest) As NameValueCollection
  overload: InnerLibs.ClassTools.FlatRequest*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.ClassTools.GetAttributeValue``2(System.Type,System.Func{``0,``1})
  commentId: M:InnerLibs.ClassTools.GetAttributeValue``2(System.Type,System.Func{``0,``1})
  id: GetAttributeValue``2(System.Type,System.Func{``0,``1})
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: GetAttributeValue<TAttribute, TValue>(Type, Func<TAttribute, TValue>)
  nameWithType: ClassTools.GetAttributeValue<TAttribute, TValue>(Type, Func<TAttribute, TValue>)
  fullName: InnerLibs.ClassTools.GetAttributeValue<TAttribute, TValue>(System.Type, System.Func<TAttribute, TValue>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: GetAttributeValue
    path: ClassManager.vb
    startLine: 300
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: >-
      [Extension]

      public static TValue GetAttributeValue<TAttribute, TValue>(this Type type, Func<TAttribute, TValue> ValueSelector)
          where TAttribute : Attribute
    parameters:
    - id: type
      type: System.Type
    - id: ValueSelector
      type: System.Func{{TAttribute},{TValue}}
    typeParameters:
    - id: TAttribute
    - id: TValue
    return:
      type: '{TValue}'
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetAttributeValue(Of TAttribute As Attribute, TValue)(type As Type, ValueSelector As Func(Of TAttribute, TValue)) As TValue
  overload: InnerLibs.ClassTools.GetAttributeValue*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.GetAttributeValue(Of TAttribute, TValue)(Type, Func(Of TAttribute, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.GetAttributeValue(Of TAttribute, TValue)(System.Type, System.Func(Of TAttribute, TValue))
  name.vb: GetAttributeValue(Of TAttribute, TValue)(Type, Func(Of TAttribute, TValue))
- uid: InnerLibs.ClassTools.GetEnumValue``1(System.String)
  commentId: M:InnerLibs.ClassTools.GetEnumValue``1(System.String)
  id: GetEnumValue``1(System.String)
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: GetEnumValue<T>(String)
  nameWithType: ClassTools.GetEnumValue<T>(String)
  fullName: InnerLibs.ClassTools.GetEnumValue<T>(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: GetEnumValue
    path: ClassManager.vb
    startLine: 314
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTraz o valor de uma enumeração a partir de uma string\n"
  example: []
  syntax:
    content: public static T GetEnumValue<T>(string Name)
    parameters:
    - id: Name
      type: System.String
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public Shared Function GetEnumValue(Of T)(Name As String) As T
  overload: InnerLibs.ClassTools.GetEnumValue*
  nameWithType.vb: ClassTools.GetEnumValue(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.GetEnumValue(Of T)(System.String)
  name.vb: GetEnumValue(Of T)(String)
- uid: InnerLibs.ClassTools.GetEnumValues``1
  commentId: M:InnerLibs.ClassTools.GetEnumValues``1
  id: GetEnumValues``1
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: GetEnumValues<T>()
  nameWithType: ClassTools.GetEnumValues<T>()
  fullName: InnerLibs.ClassTools.GetEnumValues<T>()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: GetEnumValues
    path: ClassManager.vb
    startLine: 335
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTraz todos os Valores de uma enumeração\n"
  example: []
  syntax:
    content: public static List<T> GetEnumValues<T>()
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: ''
    content.vb: Public Shared Function GetEnumValues(Of T) As List(Of T)
  overload: InnerLibs.ClassTools.GetEnumValues*
  nameWithType.vb: ClassTools.GetEnumValues(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.GetEnumValues(Of T)()
  name.vb: GetEnumValues(Of T)()
- uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  id: GetProperties(System.Object,System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: GetProperties(Object, BindingFlags)
  nameWithType: ClassTools.GetProperties(Object, BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: GetProperties
    path: ClassManager.vb
    startLine: 347
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTraz uma Lista com todas as propriedades de um objeto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static List<PropertyInfo> GetProperties(this object MyObject, BindingFlags BindAttr)
    parameters:
    - id: MyObject
      type: System.Object
      description: Objeto
    - id: BindAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Collections.Generic.List{System.Reflection.PropertyInfo}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetProperties(MyObject As Object, BindAttr As BindingFlags) As List(Of PropertyInfo)
  overload: InnerLibs.ClassTools.GetProperties*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.ClassTools.GetProperties(System.Object)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  id: GetProperties(System.Object)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: GetProperties(Object)
  nameWithType: ClassTools.GetProperties(Object)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: GetProperties
    path: ClassManager.vb
    startLine: 361
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTraz uma Lista com todas as propriedades de um objeto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static List<PropertyInfo> GetProperties(this object MyObject)
    parameters:
    - id: MyObject
      type: System.Object
      description: Objeto
    return:
      type: System.Collections.Generic.List{System.Reflection.PropertyInfo}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetProperties(MyObject As Object) As List(Of PropertyInfo)
  overload: InnerLibs.ClassTools.GetProperties*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.ClassTools.GetPropertyParameterFromString``1(System.String)
  commentId: M:InnerLibs.ClassTools.GetPropertyParameterFromString``1(System.String)
  id: GetPropertyParameterFromString``1(System.String)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: GetPropertyParameterFromString<Type>(String)
  nameWithType: ClassTools.GetPropertyParameterFromString<Type>(String)
  fullName: InnerLibs.ClassTools.GetPropertyParameterFromString<Type>(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: GetPropertyParameterFromString
    path: ClassManager.vb
    startLine: 375
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um array de objetos a partir de uma string que representa uma propriedade de uma classe\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object[] GetPropertyParameterFromString<Type>(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: ''
    typeParameters:
    - id: Type
    return:
      type: System.Object[]
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetPropertyParameterFromString(Of Type)(Text As String) As Object()
  overload: InnerLibs.ClassTools.GetPropertyParameterFromString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.GetPropertyParameterFromString(Of Type)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.GetPropertyParameterFromString(Of Type)(System.String)
  name.vb: GetPropertyParameterFromString(Of Type)(String)
- uid: InnerLibs.ClassTools.GetPropertyParametersFromString(System.Type,System.String)
  commentId: M:InnerLibs.ClassTools.GetPropertyParametersFromString(System.Type,System.String)
  id: GetPropertyParametersFromString(System.Type,System.String)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: GetPropertyParametersFromString(Type, String)
  nameWithType: ClassTools.GetPropertyParametersFromString(Type, String)
  fullName: InnerLibs.ClassTools.GetPropertyParametersFromString(System.Type, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: GetPropertyParametersFromString
    path: ClassManager.vb
    startLine: 384
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um array de objetos a partir de uma string que representa uma propriedade de uma classe\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object[] GetPropertyParametersFromString(this Type Type, string Text)
    parameters:
    - id: Type
      type: System.Type
    - id: Text
      type: System.String
      description: ''
    return:
      type: System.Object[]
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetPropertyParametersFromString(Type As Type, Text As String) As Object()
  overload: InnerLibs.ClassTools.GetPropertyParametersFromString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  id: GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: GetPropertyValue(Object, String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: GetPropertyValue
    path: ClassManager.vb
    startLine: 412
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTraz o valor de uma propriedade de um objeto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object GetPropertyValue(this object MyObject, string PropertyName, Type Type, bool GetPrivate = false)
    parameters:
    - id: MyObject
      type: System.Object
      description: Objeto
    - id: PropertyName
      type: System.String
      description: Nome da properiedade
    - id: Type
      type: System.Type
      description: Tipo do Objeto
    - id: GetPrivate
      type: System.Boolean
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetPropertyValue(MyObject As Object, PropertyName As String, Type As Type, GetPrivate As Boolean = False) As Object
  overload: InnerLibs.ClassTools.GetPropertyValue*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  id: GetPropertyValue``1(System.Object,System.String,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: GetPropertyValue<Type>(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.Object, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: GetPropertyValue
    path: ClassManager.vb
    startLine: 470
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTraz o valor de uma propriedade de um objeto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Type GetPropertyValue<Type>(this object MyObject, string PropertyName, bool GetPrivate = false)
    parameters:
    - id: MyObject
      type: System.Object
      description: Objeto
    - id: PropertyName
      type: System.String
      description: Nome da properiedade
    - id: GetPrivate
      type: System.Boolean
    typeParameters:
    - id: Type
      description: Tipo do Objeto
    return:
      type: '{Type}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetPropertyValue(Of Type)(MyObject As Object, PropertyName As String, GetPrivate As Boolean = False) As Type
  overload: InnerLibs.ClassTools.GetPropertyValue*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(Object, String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.Object, System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(Object, String, Boolean)
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  id: GetPropertyValue(System.Object,System.String,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: GetPropertyValue(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: GetPropertyValue
    path: ClassManager.vb
    startLine: 481
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTraz o valor de uma propriedade de um objeto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object GetPropertyValue(this object MyObject, string PropertyName, bool GetPrivate = true)
    parameters:
    - id: MyObject
      type: System.Object
      description: Objeto
    - id: PropertyName
      type: System.String
      description: Nome da properiedade
    - id: GetPrivate
      type: System.Boolean
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetPropertyValue(MyObject As Object, PropertyName As String, GetPrivate As Boolean = True) As Object
  overload: InnerLibs.ClassTools.GetPropertyValue*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.ClassTools.GetResourceBytes(System.Reflection.Assembly,System.String)
  commentId: M:InnerLibs.ClassTools.GetResourceBytes(System.Reflection.Assembly,System.String)
  id: GetResourceBytes(System.Reflection.Assembly,System.String)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: GetResourceBytes(Assembly, String)
  nameWithType: ClassTools.GetResourceBytes(Assembly, String)
  fullName: InnerLibs.ClassTools.GetResourceBytes(System.Reflection.Assembly, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: GetResourceBytes
    path: ClassManager.vb
    startLine: 491
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nPega os bytes de um arquivo embutido no assembly\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static byte[] GetResourceBytes(this Assembly Assembly, string FileName)
    parameters:
    - id: Assembly
      type: System.Reflection.Assembly
    - id: FileName
      type: System.String
      description: ''
    return:
      type: System.Byte[]
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetResourceBytes(Assembly As Assembly, FileName As String) As Byte()
  overload: InnerLibs.ClassTools.GetResourceBytes*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.ClassTools.GetResourceFileText(System.Reflection.Assembly,System.String)
  commentId: M:InnerLibs.ClassTools.GetResourceFileText(System.Reflection.Assembly,System.String)
  id: GetResourceFileText(System.Reflection.Assembly,System.String)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: GetResourceFileText(Assembly, String)
  nameWithType: ClassTools.GetResourceFileText(Assembly, String)
  fullName: InnerLibs.ClassTools.GetResourceFileText(System.Reflection.Assembly, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: GetResourceFileText
    path: ClassManager.vb
    startLine: 507
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nPega o texto de um arquivo embutido no assembly\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string GetResourceFileText(this Assembly Assembly, string FileName)
    parameters:
    - id: Assembly
      type: System.Reflection.Assembly
    - id: FileName
      type: System.String
      description: Nome do arquivo embutido dentro do assembly (Embedded Resource)
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetResourceFileText(Assembly As Assembly, FileName As String) As String
  overload: InnerLibs.ClassTools.GetResourceFileText*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.ClassTools.GetResourceHtmlDocument(System.Reflection.Assembly,System.String)
  commentId: M:InnerLibs.ClassTools.GetResourceHtmlDocument(System.Reflection.Assembly,System.String)
  id: GetResourceHtmlDocument(System.Reflection.Assembly,System.String)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: GetResourceHtmlDocument(Assembly, String)
  nameWithType: ClassTools.GetResourceHtmlDocument(Assembly, String)
  fullName: InnerLibs.ClassTools.GetResourceHtmlDocument(System.Reflection.Assembly, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: GetResourceHtmlDocument
    path: ClassManager.vb
    startLine: 518
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nPega o texto de um arquivo embutido no assembly\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static HtmlDocument GetResourceHtmlDocument(this Assembly Assembly, string FileName)
    parameters:
    - id: Assembly
      type: System.Reflection.Assembly
    - id: FileName
      type: System.String
      description: Nome do arquivo embutido dentro do assembly (Embedded Resource)
    return:
      type: InnerLibs.HtmlParser.HtmlDocument
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetResourceHtmlDocument(Assembly As Assembly, FileName As String) As HtmlDocument
  overload: InnerLibs.ClassTools.GetResourceHtmlDocument*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.ClassTools.GetValueOr``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)
  commentId: M:InnerLibs.ClassTools.GetValueOr``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)
  id: GetValueOr``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: GetValueOr<tkey, Tvalue>(IDictionary<tkey, Tvalue>, tkey, Tvalue)
  nameWithType: ClassTools.GetValueOr<tkey, Tvalue>(IDictionary<tkey, Tvalue>, tkey, Tvalue)
  fullName: InnerLibs.ClassTools.GetValueOr<tkey, Tvalue>(System.Collections.Generic.IDictionary<tkey, Tvalue>, tkey, Tvalue)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: GetValueOr
    path: ClassManager.vb
    startLine: 524
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: >-
      [Extension]

      public static Tvalue GetValueOr<tkey, Tvalue>(this IDictionary<tkey, Tvalue> Dic, tkey Key, Tvalue ReplaceValue = null)
    parameters:
    - id: Dic
      type: System.Collections.Generic.IDictionary{{tkey},{Tvalue}}
    - id: Key
      type: '{tkey}'
    - id: ReplaceValue
      type: '{Tvalue}'
    typeParameters:
    - id: tkey
    - id: Tvalue
    return:
      type: '{Tvalue}'
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetValueOr(Of tkey, Tvalue)(Dic As IDictionary(Of tkey, Tvalue), Key As tkey, ReplaceValue As Tvalue = Nothing) As Tvalue
  overload: InnerLibs.ClassTools.GetValueOr*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.GetValueOr(Of tkey, Tvalue)(IDictionary(Of tkey, Tvalue), tkey, Tvalue)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.GetValueOr(Of tkey, Tvalue)(System.Collections.Generic.IDictionary(Of tkey, Tvalue), tkey, Tvalue)
  name.vb: GetValueOr(Of tkey, Tvalue)(IDictionary(Of tkey, Tvalue), tkey, Tvalue)
- uid: InnerLibs.ClassTools.HasProperty(System.Type,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Type,System.String,System.Boolean)
  id: HasProperty(System.Type,System.String,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: HasProperty(Type, String, Boolean)
  nameWithType: ClassTools.HasProperty(Type, String, Boolean)
  fullName: InnerLibs.ClassTools.HasProperty(System.Type, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: HasProperty
    path: ClassManager.vb
    startLine: 539
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se um tipo possui uma propriedade\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool HasProperty(this Type Type, string PropertyName, bool GetPrivate = false)
    parameters:
    - id: Type
      type: System.Type
      description: ''
    - id: PropertyName
      type: System.String
      description: ''
    - id: GetPrivate
      type: System.Boolean
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function HasProperty(Type As Type, PropertyName As String, GetPrivate As Boolean = False) As Boolean
  overload: InnerLibs.ClassTools.HasProperty*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  id: HasProperty(System.Object,System.String)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: HasProperty(Object, String)
  nameWithType: ClassTools.HasProperty(Object, String)
  fullName: InnerLibs.ClassTools.HasProperty(System.Object, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: HasProperty
    path: ClassManager.vb
    startLine: 576
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se um tipo possui uma propriedade\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool HasProperty(this object Obj, string Name)
    parameters:
    - id: Obj
      type: System.Object
      description: ''
    - id: Name
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function HasProperty(Obj As Object, Name As String) As Boolean
  overload: InnerLibs.ClassTools.HasProperty*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.ClassTools.IsArrayOf``1(System.Type)
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Type)
  id: IsArrayOf``1(System.Type)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: IsArrayOf<T>(Type)
  nameWithType: ClassTools.IsArrayOf<T>(Type)
  fullName: InnerLibs.ClassTools.IsArrayOf<T>(System.Type)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: IsArrayOf
    path: ClassManager.vb
    startLine: 586
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se o tipo é um array de um objeto especifico\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsArrayOf<T>(this Type Type)
    parameters:
    - id: Type
      type: System.Type
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsArrayOf(Of T)(Type As Type) As Boolean
  overload: InnerLibs.ClassTools.IsArrayOf*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.IsArrayOf(Of T)(Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)(System.Type)
  name.vb: IsArrayOf(Of T)(Type)
- uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  id: IsArrayOf``1(System.Object)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: IsArrayOf<T>(Object)
  nameWithType: ClassTools.IsArrayOf<T>(Object)
  fullName: InnerLibs.ClassTools.IsArrayOf<T>(System.Object)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: IsArrayOf
    path: ClassManager.vb
    startLine: 597
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se o tipo é um array de um objeto especifico\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsArrayOf<T>(this object Obj)
    parameters:
    - id: Obj
      type: System.Object
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsArrayOf(Of T)(Obj As Object) As Boolean
  overload: InnerLibs.ClassTools.IsArrayOf*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.IsArrayOf(Of T)(Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)(System.Object)
  name.vb: IsArrayOf(Of T)(Object)
- uid: InnerLibs.ClassTools.IsDictionary(System.Object)
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  id: IsDictionary(System.Object)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: IsDictionary(Object)
  nameWithType: ClassTools.IsDictionary(Object)
  fullName: InnerLibs.ClassTools.IsDictionary(System.Object)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: IsDictionary
    path: ClassManager.vb
    startLine: 607
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se o objeto é um iDictionary\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsDictionary(this object obj)
    parameters:
    - id: obj
      type: System.Object
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsDictionary(obj As Object) As Boolean
  overload: InnerLibs.ClassTools.IsDictionary*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: IsIn
    path: ClassManager.vb
    startLine: 622
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se o objeto existe dentro de uma Lista, coleção ou array.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsIn<Type>(this Type Obj, IEnumerable<Type> List, IEqualityComparer<Type> Comparer = null)
    parameters:
    - id: Obj
      type: '{Type}'
      description: objeto
    - id: List
      type: System.Collections.Generic.IEnumerable{{Type}}
      description: Lista
    - id: Comparer
      type: System.Collections.Generic.IEqualityComparer{{Type}}
    typeParameters:
    - id: Type
      description: Tipo do objeto
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsIn(Of Type)(Obj As Type, List As IEnumerable(Of Type), Comparer As IEqualityComparer(Of Type) = Nothing) As Boolean
  overload: InnerLibs.ClassTools.IsIn*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  id: IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: IsIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: IsIn
    path: ClassManager.vb
    startLine: 637
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se o objeto existe dentro de um texto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsIn<Type>(this Type Obj, string Text, IEqualityComparer<char> Comparer = null)
    parameters:
    - id: Obj
      type: '{Type}'
      description: objeto
    - id: Text
      type: System.String
    - id: Comparer
      type: System.Collections.Generic.IEqualityComparer{System.Char}
    typeParameters:
    - id: Type
      description: Tipo do objeto
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsIn(Of Type)(Obj As Type, Text As String, Comparer As IEqualityComparer(Of Char) = Nothing) As Boolean
  overload: InnerLibs.ClassTools.IsIn*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
- uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  id: IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  nameWithType: ClassTools.IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsInAny<Type>(Type, System.Collections.Generic.IEnumerable<Type>[], System.Collections.Generic.IEqualityComparer<Type>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: IsInAny
    path: ClassManager.vb
    startLine: 652
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se o objeto existe dentro de uma ou mais Listas, coleções ou arrays.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsInAny<Type>(this Type Obj, IEnumerable<Type>[] List, IEqualityComparer<Type> Comparer = null)
    parameters:
    - id: Obj
      type: '{Type}'
      description: objeto
    - id: List
      type: System.Collections.Generic.IEnumerable{{Type}}[]
      description: Lista
    - id: Comparer
      type: System.Collections.Generic.IEqualityComparer{{Type}}
    typeParameters:
    - id: Type
      description: Tipo do objeto
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsInAny(Of Type)(Obj As Type, List As IEnumerable(Of Type)(), Comparer As IEqualityComparer(Of Type) = Nothing) As Boolean
  overload: InnerLibs.ClassTools.IsInAny*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.IsInAny(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type)(), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
- uid: InnerLibs.ClassTools.IsList(System.Object)
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  id: IsList(System.Object)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: IsList(Object)
  nameWithType: ClassTools.IsList(Object)
  fullName: InnerLibs.ClassTools.IsList(System.Object)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: IsList
    path: ClassManager.vb
    startLine: 661
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se o objeto é uma lista\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsList(this object obj)
    parameters:
    - id: obj
      type: System.Object
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsList(obj As Object) As Boolean
  overload: InnerLibs.ClassTools.IsList*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: IsNotIn
    path: ClassManager.vb
    startLine: 676
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se o não objeto existe dentro de uma Lista, coleção ou array.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsNotIn<Type>(this Type Obj, IEnumerable<Type> List, IEqualityComparer<Type> Comparer = null)
    parameters:
    - id: Obj
      type: '{Type}'
      description: objeto
    - id: List
      type: System.Collections.Generic.IEnumerable{{Type}}
      description: Lista
    - id: Comparer
      type: System.Collections.Generic.IEqualityComparer{{Type}}
    typeParameters:
    - id: Type
      description: Tipo do objeto
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsNotIn(Of Type)(Obj As Type, List As IEnumerable(Of Type), Comparer As IEqualityComparer(Of Type) = Nothing) As Boolean
  overload: InnerLibs.ClassTools.IsNotIn*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  id: IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: IsNotIn
    path: ClassManager.vb
    startLine: 691
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se o objeto não existe dentro de um texto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsNotIn<Type>(this Type Obj, string Text, IEqualityComparer<char> Comparer = null)
    parameters:
    - id: Obj
      type: '{Type}'
      description: objeto
    - id: Text
      type: System.String
    - id: Comparer
      type: System.Collections.Generic.IEqualityComparer{System.Char}
    typeParameters:
    - id: Type
      description: Tipo do objeto
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsNotIn(Of Type)(Obj As Type, Text As String, Comparer As IEqualityComparer(Of Char) = Nothing) As Boolean
  overload: InnerLibs.ClassTools.IsNotIn*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
- uid: InnerLibs.ClassTools.IsNumericType(System.Type)
  commentId: M:InnerLibs.ClassTools.IsNumericType(System.Type)
  id: IsNumericType(System.Type)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: IsNumericType(Type)
  nameWithType: ClassTools.IsNumericType(Type)
  fullName: InnerLibs.ClassTools.IsNumericType(System.Type)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: IsNumericType
    path: ClassManager.vb
    startLine: 705
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se o objeto é do tipo numérico.\n"
  remarks: "\nBoolean is not considered numeric.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsNumericType(this Type Obj)
    parameters:
    - id: Obj
      type: System.Type
    return:
      type: System.Boolean
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsNumericType(Obj As Type) As Boolean
  overload: InnerLibs.ClassTools.IsNumericType*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.ClassTools.IsType``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  id: IsType``1(System.Object)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: IsType<T>(Object)
  nameWithType: ClassTools.IsType<T>(Object)
  fullName: InnerLibs.ClassTools.IsType<T>(System.Object)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: IsType
    path: ClassManager.vb
    startLine: 729
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se um objeto é de um determinado tipo\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsType<T>(this object Obj)
    parameters:
    - id: Obj
      type: System.Object
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsType(Of T)(Obj As Object) As Boolean
  overload: InnerLibs.ClassTools.IsType*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.IsType(Of T)(Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)(System.Object)
  name.vb: IsType(Of T)(Object)
- uid: InnerLibs.ClassTools.LastOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:InnerLibs.ClassTools.LastOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: LastOr``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: LastOr<T>(IEnumerable<T>, T)
  nameWithType: ClassTools.LastOr<T>(IEnumerable<T>, T)
  fullName: InnerLibs.ClassTools.LastOr<T>(System.Collections.Generic.IEnumerable<T>, T)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: LastOr
    path: ClassManager.vb
    startLine: 740
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o primeiro objeto de uma lista ou um objeto especifico se a lista estiver vazia\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static T LastOr<T>(this IEnumerable<T> source, T Alternate)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    - id: Alternate
      type: '{T}'
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function LastOr(Of T)(source As IEnumerable(Of T), Alternate As T) As T
  overload: InnerLibs.ClassTools.LastOr*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.LastOr(Of T)(IEnumerable(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.LastOr(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: LastOr(Of T)(IEnumerable(Of T), T)
- uid: InnerLibs.ClassTools.Merge(System.Collections.Specialized.NameValueCollection[])
  commentId: M:InnerLibs.ClassTools.Merge(System.Collections.Specialized.NameValueCollection[])
  id: Merge(System.Collections.Specialized.NameValueCollection[])
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: Merge(NameValueCollection[])
  nameWithType: ClassTools.Merge(NameValueCollection[])
  fullName: InnerLibs.ClassTools.Merge(System.Collections.Specialized.NameValueCollection[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: Merge
    path: ClassManager.vb
    startLine: 755
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nMescla varios <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref> em um unico <xref href=\"System.Collections.Specialized.NameValueCollection\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static NameValueCollection Merge(params NameValueCollection[] NVC)
    parameters:
    - id: NVC
      type: System.Collections.Specialized.NameValueCollection[]
      description: ''
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: ''
    content.vb: Public Shared Function Merge(ParamArray NVC As NameValueCollection()) As NameValueCollection
  overload: InnerLibs.ClassTools.Merge*
  nameWithType.vb: ClassTools.Merge(NameValueCollection())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.Merge(System.Collections.Specialized.NameValueCollection())
  name.vb: Merge(NameValueCollection())
- uid: InnerLibs.ClassTools.MergeProperties(System.Object[])
  commentId: M:InnerLibs.ClassTools.MergeProperties(System.Object[])
  id: MergeProperties(System.Object[])
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: MergeProperties(Object[])
  nameWithType: ClassTools.MergeProperties(Object[])
  fullName: InnerLibs.ClassTools.MergeProperties(System.Object[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: MergeProperties
    path: ClassManager.vb
    startLine: 768
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nMescla varios tipos de objeto em um unico dicionario a partir de suas propriedades\n"
  example: []
  syntax:
    content: public static Dictionary<string, object> MergeProperties(params object[] Items)
    parameters:
    - id: Items
      type: System.Object[]
      description: ''
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: ''
    content.vb: Public Shared Function MergeProperties(ParamArray Items As Object()) As Dictionary(Of String, Object)
  overload: InnerLibs.ClassTools.MergeProperties*
  nameWithType.vb: ClassTools.MergeProperties(Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.MergeProperties(System.Object())
  name.vb: MergeProperties(Object())
- uid: InnerLibs.ClassTools.NullCoalesce``1(System.Nullable{``0},System.Nullable{``0}[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(System.Nullable{``0},System.Nullable{``0}[])
  id: NullCoalesce``1(System.Nullable{``0},System.Nullable{``0}[])
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: NullCoalesce<T>(Nullable<T>, Nullable<T>[])
  nameWithType: ClassTools.NullCoalesce<T>(Nullable<T>, Nullable<T>[])
  fullName: InnerLibs.ClassTools.NullCoalesce<T>(System.Nullable<T>, System.Nullable<T>[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: NullCoalesce
    path: ClassManager.vb
    startLine: 792
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se dois ou mais valores são nulos e retorna o primeiro elemento que possuir um valor\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static T NullCoalesce<T>(this T? First, params T? [] N)
          where T : struct
    parameters:
    - id: First
      type: System.Nullable{{T}}
      description: Primeiro Item
    - id: N
      type: System.Nullable{{T}}[]
      description: Outros itens
    typeParameters:
    - id: T
      description: Tipo
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function NullCoalesce(Of T As Structure)(First As T?, ParamArray N As T?()) As T
  overload: InnerLibs.ClassTools.NullCoalesce*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.NullCoalesce(Of T)(Nullable(Of T), Nullable(Of T)())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(Of T)(System.Nullable(Of T), System.Nullable(Of T)())
  name.vb: NullCoalesce(Of T)(Nullable(Of T), Nullable(Of T)())
- uid: InnerLibs.ClassTools.NullCoalesce``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})
  id: NullCoalesce``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: NullCoalesce<T>(IEnumerable<Nullable<T>>)
  nameWithType: ClassTools.NullCoalesce<T>(IEnumerable<Nullable<T>>)
  fullName: InnerLibs.ClassTools.NullCoalesce<T>(System.Collections.Generic.IEnumerable<System.Nullable<T>>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: NullCoalesce
    path: ClassManager.vb
    startLine: 806
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se dois ou mais valores são nulos e retorna o primeiro elemento que possuir um valor\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static T NullCoalesce<T>(this IEnumerable<T? > List)
          where T : struct
    parameters:
    - id: List
      type: System.Collections.Generic.IEnumerable{System.Nullable{{T}}}
      description: Outros itens
    typeParameters:
    - id: T
      description: Tipo
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function NullCoalesce(Of T As Structure)(List As IEnumerable(Of T?)) As T
  overload: InnerLibs.ClassTools.NullCoalesce*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.NullCoalesce(Of T)(IEnumerable(Of Nullable(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(Of T)(System.Collections.Generic.IEnumerable(Of System.Nullable(Of T)))
  name.vb: NullCoalesce(Of T)(IEnumerable(Of Nullable(Of T)))
- uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  id: NullCoalesce``1(``0,``0[])
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: NullCoalesce<T>(T, T[])
  nameWithType: ClassTools.NullCoalesce<T>(T, T[])
  fullName: InnerLibs.ClassTools.NullCoalesce<T>(T, T[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: NullCoalesce
    path: ClassManager.vb
    startLine: 822
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se dois ou mais valores são nulos e retorna o primeiro elemento que possuir um valor\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static T NullCoalesce<T>(this T First, params T[] N)
          where T : class
    parameters:
    - id: First
      type: '{T}'
      description: Primeiro Item
    - id: N
      type: '{T}[]'
      description: Outros itens
    typeParameters:
    - id: T
      description: Tipo
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function NullCoalesce(Of T As Class)(First As T, ParamArray N As T()) As T
  overload: InnerLibs.ClassTools.NullCoalesce*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.NullCoalesce(Of T)(T, T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(Of T)(T, T())
  name.vb: NullCoalesce(Of T)(T, T())
- uid: InnerLibs.ClassTools.NullCoalesce``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(System.Collections.Generic.IEnumerable{``0})
  id: NullCoalesce``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: NullCoalesce<T>(IEnumerable<T>)
  nameWithType: ClassTools.NullCoalesce<T>(IEnumerable<T>)
  fullName: InnerLibs.ClassTools.NullCoalesce<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: NullCoalesce
    path: ClassManager.vb
    startLine: 836
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se dois ou mais valores são nulos e retorna o primeiro elemento que possuir um valor\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static T NullCoalesce<T>(this IEnumerable<T> List)
          where T : class
    parameters:
    - id: List
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Outros itens
    typeParameters:
    - id: T
      description: Tipo
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function NullCoalesce(Of T As Class)(List As IEnumerable(Of T)) As T
  overload: InnerLibs.ClassTools.NullCoalesce*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.NullCoalesce(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: NullCoalesce(Of T)(IEnumerable(Of T))
- uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  id: NullifyProperties``1(``0)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: NullifyProperties<Type>(Type)
  nameWithType: ClassTools.NullifyProperties<Type>(Type)
  fullName: InnerLibs.ClassTools.NullifyProperties<Type>(Type)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: NullifyProperties
    path: ClassManager.vb
    startLine: 851
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma todas as propriedades String em NULL quando suas estiverem em branco\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Type NullifyProperties<Type>(this Type Obj)
    parameters:
    - id: Obj
      type: '{Type}'
      description: ''
    typeParameters:
    - id: Type
      description: ''
    return:
      type: '{Type}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function NullifyProperties(Of Type)(Obj As Type) As Type
  overload: InnerLibs.ClassTools.NullifyProperties*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.NullifyProperties(Of Type)(Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.NullifyProperties(Of Type)(Type)
  name.vb: NullifyProperties(Of Type)(Type)
- uid: InnerLibs.ClassTools.RemoveIfExist``2(System.Collections.Generic.IDictionary{``0,``1},``0[])
  commentId: M:InnerLibs.ClassTools.RemoveIfExist``2(System.Collections.Generic.IDictionary{``0,``1},``0[])
  id: RemoveIfExist``2(System.Collections.Generic.IDictionary{``0,``1},``0[])
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: RemoveIfExist<TKey, TValue>(IDictionary<TKey, TValue>, TKey[])
  nameWithType: ClassTools.RemoveIfExist<TKey, TValue>(IDictionary<TKey, TValue>, TKey[])
  fullName: InnerLibs.ClassTools.RemoveIfExist<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: RemoveIfExist
    path: ClassManager.vb
    startLine: 870
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove de um dicionario as respectivas Keys se as mesmas existirem\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static void RemoveIfExist<TKey, TValue>(this IDictionary<TKey, TValue> dic, params TKey[] Keys)
    parameters:
    - id: dic
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: ''
    - id: Keys
      type: '{TKey}[]'
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Sub RemoveIfExist(Of TKey, TValue)(dic As IDictionary(Of TKey, TValue), ParamArray Keys As TKey())
  overload: InnerLibs.ClassTools.RemoveIfExist*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.RemoveIfExist(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.RemoveIfExist(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey())
  name.vb: RemoveIfExist(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey())
- uid: InnerLibs.ClassTools.RemoveIfExist``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})
  commentId: M:InnerLibs.ClassTools.RemoveIfExist``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})
  id: RemoveIfExist``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: RemoveIfExist<TKey, TValue>(IDictionary<TKey, TValue>, Func<KeyValuePair<TKey, TValue>, Boolean>)
  nameWithType: ClassTools.RemoveIfExist<TKey, TValue>(IDictionary<TKey, TValue>, Func<KeyValuePair<TKey, TValue>, Boolean>)
  fullName: InnerLibs.ClassTools.RemoveIfExist<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, System.Func<System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Boolean>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: RemoveIfExist
    path: ClassManager.vb
    startLine: 885
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove de um dicionario os valores encontrados pelo predicate\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static void RemoveIfExist<TKey, TValue>(this IDictionary<TKey, TValue> dic, Func<KeyValuePair<TKey, TValue>, bool> predicate)
    parameters:
    - id: dic
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: ''
    - id: predicate
      type: System.Func{System.Collections.Generic.KeyValuePair{{TKey},{TValue}},System.Boolean}
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Sub RemoveIfExist(Of TKey, TValue)(dic As IDictionary(Of TKey, TValue), predicate As Func(Of KeyValuePair(Of TKey, TValue), Boolean))
  overload: InnerLibs.ClassTools.RemoveIfExist*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.RemoveIfExist(Of TKey, TValue)(IDictionary(Of TKey, TValue), Func(Of KeyValuePair(Of TKey, TValue), Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.RemoveIfExist(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), System.Func(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Boolean))
  name.vb: RemoveIfExist(Of TKey, TValue)(IDictionary(Of TKey, TValue), Func(Of KeyValuePair(Of TKey, TValue), Boolean))
- uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  id: SetPropertyValue``1(System.Object,System.String,``0)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: SetPropertyValue<Type>(Object, String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(Object, String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.Object, System.String, Type)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: SetPropertyValue
    path: ClassManager.vb
    startLine: 898
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nSeta o valor de uma propriedade de um objeto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static void SetPropertyValue<Type>(this object MyObject, string PropertyName, Type Value)
    parameters:
    - id: MyObject
      type: System.Object
      description: Objeto
    - id: PropertyName
      type: System.String
      description: Nome da properiedade
    - id: Value
      type: '{Type}'
      description: Valor da propriedade definida por <code data-dev-comment-type="paramref" class="paramref">PropertyName</code>
    typeParameters:
    - id: Type
      description: "\nTipo do <code data-dev-comment-type=\"paramref\" class=\"paramref\">Value</code> da propriedade definida por <code data-dev-comment-type=\"paramref\" class=\"paramref\">PropertyName</code>\n"
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Sub SetPropertyValue(Of Type)(MyObject As Object, PropertyName As String, Value As Type)
  overload: InnerLibs.ClassTools.SetPropertyValue*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(Object, String, Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.Object, System.String, Type)
  name.vb: SetPropertyValue(Of Type)(Object, String, Type)
- uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  id: SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.Object, System.String, System.Collections.CollectionBase)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: SetPropertyValueFromCollection
    path: ClassManager.vb
    startLine: 903
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: >-
      [Extension]

      public static void SetPropertyValueFromCollection<Type>(this object MyObject, string PropertyName, CollectionBase Collection)
    parameters:
    - id: MyObject
      type: System.Object
    - id: PropertyName
      type: System.String
    - id: Collection
      type: System.Collections.CollectionBase
    typeParameters:
    - id: Type
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Sub SetPropertyValueFromCollection(Of Type)(MyObject As Object, PropertyName As String, Collection As CollectionBase)
  overload: InnerLibs.ClassTools.SetPropertyValueFromCollection*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.Object, System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
- uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  id: ToFlatString(System.Object,System.String)
  isExtensionMethod: true
  parent: InnerLibs.ClassTools
  langs:
  - csharp
  - vb
  name: ToFlatString(Object, String)
  nameWithType: ClassTools.ToFlatString(Object, String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.Object, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/ClassManager.vb
    id: ToFlatString
    path: ClassManager.vb
    startLine: 915
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o objeto em seu formato padrão de String, ou serializa o objeto em Json se o mesmo\nnão possuir formato em string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToFlatString(this object Obj, string DateFormat = "")
    parameters:
    - id: Obj
      type: System.Object
    - id: DateFormat
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToFlatString(Obj As Object, DateFormat As String = "") As String
  overload: InnerLibs.ClassTools.ToFlatString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: InnerLibs
  commentId: N:InnerLibs
  name: InnerLibs
  nameWithType: InnerLibs
  fullName: InnerLibs
- uid: InnerLibs.ClassTools.InnerLibs.ClassTools.CreateDictionary
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary()
  nameWithType: ClassTools.CreateDictionary()
  fullName: InnerLibs.ClassTools.CreateDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  name: GetProperties(BindingFlags)
  nameWithType: ClassTools.GetProperties(BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object)
  name: GetProperties()
  nameWithType: ClassTools.GetProperties()
  fullName: InnerLibs.ClassTools.GetProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  name: GetPropertyValue(String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  name: GetPropertyValue<Type>(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  name: GetPropertyValue(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  name: HasProperty(String)
  nameWithType: ClassTools.HasProperty(String)
  fullName: InnerLibs.ClassTools.HasProperty(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsArrayOf``1
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  name: IsArrayOf<T>()
  nameWithType: ClassTools.IsArrayOf<T>()
  fullName: InnerLibs.ClassTools.IsArrayOf<T>()
  nameWithType.vb: ClassTools.IsArrayOf(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)()
  name.vb: IsArrayOf(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsDictionary
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsDictionary(System.Object)
  name: IsDictionary()
  nameWithType: ClassTools.IsDictionary()
  fullName: InnerLibs.ClassTools.IsDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.ClassTools},System.Collections.Generic.IEqualityComparer{InnerLibs.ClassTools})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsIn(IEnumerable<ClassTools>, IEqualityComparer<ClassTools>)
  nameWithType: ClassTools.IsIn(IEnumerable<ClassTools>, IEqualityComparer<ClassTools>)
  fullName: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable<InnerLibs.ClassTools>, System.Collections.Generic.IEqualityComparer<InnerLibs.ClassTools>)
  nameWithType.vb: ClassTools.IsIn(IEnumerable(Of ClassTools), IEqualityComparer(Of ClassTools))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable(Of InnerLibs.ClassTools), System.Collections.Generic.IEqualityComparer(Of InnerLibs.ClassTools))
  name.vb: IsIn(IEnumerable(Of ClassTools), IEqualityComparer(Of ClassTools))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.ClassTools},System.Collections.Generic.IEqualityComparer{InnerLibs.ClassTools})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.ClassTools},System.Collections.Generic.IEqualityComparer{InnerLibs.ClassTools})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.ClassTools}[],System.Collections.Generic.IEqualityComparer{InnerLibs.ClassTools})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  name: IsInAny(IEnumerable<ClassTools>[], IEqualityComparer<ClassTools>)
  nameWithType: ClassTools.IsInAny(IEnumerable<ClassTools>[], IEqualityComparer<ClassTools>)
  fullName: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable<InnerLibs.ClassTools>[], System.Collections.Generic.IEqualityComparer<InnerLibs.ClassTools>)
  nameWithType.vb: ClassTools.IsInAny(IEnumerable(Of ClassTools)(), IEqualityComparer(Of ClassTools))
  fullName.vb: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable(Of InnerLibs.ClassTools)(), System.Collections.Generic.IEqualityComparer(Of InnerLibs.ClassTools))
  name.vb: IsInAny(IEnumerable(Of ClassTools)(), IEqualityComparer(Of ClassTools))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.ClassTools}[],System.Collections.Generic.IEqualityComparer{InnerLibs.ClassTools})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.ClassTools}[],System.Collections.Generic.IEqualityComparer{InnerLibs.ClassTools})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsList
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsList(System.Object)
  name: IsList()
  nameWithType: ClassTools.IsList()
  fullName: InnerLibs.ClassTools.IsList()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.ClassTools},System.Collections.Generic.IEqualityComparer{InnerLibs.ClassTools})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsNotIn(IEnumerable<ClassTools>, IEqualityComparer<ClassTools>)
  nameWithType: ClassTools.IsNotIn(IEnumerable<ClassTools>, IEqualityComparer<ClassTools>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable<InnerLibs.ClassTools>, System.Collections.Generic.IEqualityComparer<InnerLibs.ClassTools>)
  nameWithType.vb: ClassTools.IsNotIn(IEnumerable(Of ClassTools), IEqualityComparer(Of ClassTools))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable(Of InnerLibs.ClassTools), System.Collections.Generic.IEqualityComparer(Of InnerLibs.ClassTools))
  name.vb: IsNotIn(IEnumerable(Of ClassTools), IEqualityComparer(Of ClassTools))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.ClassTools},System.Collections.Generic.IEqualityComparer{InnerLibs.ClassTools})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.ClassTools},System.Collections.Generic.IEqualityComparer{InnerLibs.ClassTools})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsNotIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsType``1
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsType``1(System.Object)
  name: IsType<T>()
  nameWithType: ClassTools.IsType<T>()
  fullName: InnerLibs.ClassTools.IsType<T>()
  nameWithType.vb: ClassTools.IsType(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)()
  name.vb: IsType(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.ClassTools.NullCoalesce(InnerLibs.ClassTools[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce(ClassTools[])
  nameWithType: ClassTools.NullCoalesce(ClassTools[])
  fullName: InnerLibs.ClassTools.NullCoalesce(InnerLibs.ClassTools[])
  nameWithType.vb: ClassTools.NullCoalesce(ClassTools())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(InnerLibs.ClassTools())
  name.vb: NullCoalesce(ClassTools())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.ClassTools[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.ClassTools[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.ClassTools.NullifyProperties
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties()
  nameWithType: ClassTools.NullifyProperties()
  fullName: InnerLibs.ClassTools.NullifyProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  name: SetPropertyValue<Type>(String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.String, Type)
  name.vb: SetPropertyValue(Of Type)(String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  name: SetPropertyValueFromCollection<Type>(String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  name: ToFlatString(String)
  nameWithType: ClassTools.ToFlatString(String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.DataManipulation.GetDbType
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  parent: InnerLibs.DataManipulation
  definition: InnerLibs.DataManipulation.GetDbType(System.Object)
  name: GetDbType()
  nameWithType: DataManipulation.GetDbType()
  fullName: InnerLibs.DataManipulation.GetDbType()
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.Converter.DefineEmptyList
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList()
  nameWithType: Converter.DefineEmptyList()
  fullName: InnerLibs.Converter.DefineEmptyList()
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.Converter.ChangeType``1
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType>()
  nameWithType: Converter.ChangeType<ToType>()
  fullName: InnerLibs.Converter.ChangeType<ToType>()
  nameWithType.vb: Converter.ChangeType(Of ToType)()
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType)()
  name.vb: ChangeType(Of ToType)()
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType<ToType>
    nameWithType: Converter.ChangeType<ToType>
    fullName: InnerLibs.Converter.ChangeType<ToType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType(Of ToType)
    nameWithType: Converter.ChangeType(Of ToType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.JsonViewer.CreateNode
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  parent: InnerLibs.JsonViewer
  definition: InnerLibs.JsonViewer.CreateNode(System.Object)
  name: CreateNode()
  nameWithType: JsonViewer.CreateNode()
  fullName: InnerLibs.JsonViewer.CreateNode()
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  parent: InnerLibs.Mathematic
  definition: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  name: IsBetween(Object, Object)
  nameWithType: Mathematic.IsBetween(Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Text.SerializeJSON(System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  parent: InnerLibs.Text
  definition: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  name: SerializeJSON(String)
  nameWithType: Text.SerializeJSON(String)
  fullName: InnerLibs.Text.SerializeJSON(System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNumber
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNumber(System.Object)
  name: IsNumber()
  nameWithType: Verify.IsNumber()
  fullName: InnerLibs.Verify.IsNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNotNumber
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNotNumber(System.Object)
  name: IsNotNumber()
  nameWithType: Verify.IsNotNumber()
  fullName: InnerLibs.Verify.IsNotNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IfBlank``1({T})
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  name: IfBlank<T>(T)
  nameWithType: Verify.IfBlank<T>(T)
  fullName: InnerLibs.Verify.IfBlank<T>(T)
  nameWithType.vb: Verify.IfBlank(Of T)(T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(T)
  name.vb: IfBlank(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.Verify.NullIf(System.Func{InnerLibs.ClassTools,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  name: NullIf(Func<ClassTools, Boolean>)
  nameWithType: Verify.NullIf(Func<ClassTools, Boolean>)
  fullName: InnerLibs.Verify.NullIf(System.Func<InnerLibs.ClassTools, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Func(Of ClassTools, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(System.Func(Of InnerLibs.ClassTools, System.Boolean))
  name.vb: NullIf(Func(Of ClassTools, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.ClassTools,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.ClassTools,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.Verify.NullIf(InnerLibs.ClassTools)
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf(ClassTools)
  nameWithType: Verify.NullIf(ClassTools)
  fullName: InnerLibs.Verify.NullIf(InnerLibs.ClassTools)
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.ClassTools)
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.ClassTools)
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  parent: InnerLibs.Web
  definition: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  name: CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax(System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.ClassTools,{TextType}},System.Func{InnerLibs.ClassTools,{ValueType}})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  parent: InnerLibs.Web
  definition: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  name: AsListItem<TextType, ValueType>(Func<ClassTools, TextType>, Func<ClassTools, ValueType>)
  nameWithType: Web.AsListItem<TextType, ValueType>(Func<ClassTools, TextType>, Func<ClassTools, ValueType>)
  fullName: InnerLibs.Web.AsListItem<TextType, ValueType>(System.Func<InnerLibs.ClassTools, TextType>, System.Func<InnerLibs.ClassTools, ValueType>)
  nameWithType.vb: Web.AsListItem(Of TextType, ValueType)(Func(Of ClassTools, TextType), Func(Of ClassTools, ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of TextType, ValueType)(System.Func(Of InnerLibs.ClassTools, TextType), System.Func(Of InnerLibs.ClassTools, ValueType))
  name.vb: AsListItem(Of TextType, ValueType)(Func(Of ClassTools, TextType), Func(Of ClassTools, ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.ClassTools,``0},System.Func{InnerLibs.ClassTools,``1})
    name: AsListItem<TextType, ValueType>
    nameWithType: Web.AsListItem<TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.ClassTools,``0},System.Func{InnerLibs.ClassTools,``1})
    name: AsListItem(Of TextType, ValueType)
    nameWithType: Web.AsListItem(Of TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.GetCastedValue
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.GetCastedValue(System.Object)
  name: GetCastedValue()
  nameWithType: WinForms.GetCastedValue()
  fullName: InnerLibs.WinForms.GetCastedValue()
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  name: CastValueForControl(Object)
  nameWithType: WinForms.CastValueForControl(Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  name: ApplyToControls(HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls(HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.ClassTools,System.Func{InnerLibs.ClassTools,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  name: HasSamePropertyValues(ClassTools, Func<ClassTools, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues(ClassTools, Func<ClassTools, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.ClassTools, System.Func<InnerLibs.ClassTools, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(ClassTools, Func(Of ClassTools, Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.ClassTools, System.Func(Of InnerLibs.ClassTools, System.Object)())
  name.vb: HasSamePropertyValues(ClassTools, Func(Of ClassTools, Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.ClassTools,System.Func{InnerLibs.ClassTools,System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.ClassTools,System.Func{InnerLibs.ClassTools,System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.ClassTools
    name: ClassTools
    nameWithType: ClassTools
    fullName: InnerLibs.ClassTools
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary<Type>(Type)
  nameWithType: ClassTools.CreateDictionary<Type>(Type)
  fullName: InnerLibs.ClassTools.CreateDictionary<Type>(Type)
  nameWithType.vb: ClassTools.CreateDictionary(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.CreateDictionary(Of Type)(Type)
  name.vb: CreateDictionary(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary<Type>
    nameWithType: ClassTools.CreateDictionary<Type>
    fullName: InnerLibs.ClassTools.CreateDictionary<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary(Of Type)
    nameWithType: ClassTools.CreateDictionary(Of Type)
    fullName: InnerLibs.ClassTools.CreateDictionary(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools
  commentId: T:InnerLibs.ClassTools
  parent: InnerLibs
  name: ClassTools
  nameWithType: ClassTools
  fullName: InnerLibs.ClassTools
- uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  isExternal: true
  name: GetProperties(Object, BindingFlags)
  nameWithType: ClassTools.GetProperties(Object, BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object, System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetProperties(System.Object)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  isExternal: true
  name: GetProperties(Object)
  nameWithType: ClassTools.GetProperties(Object)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue<Type>(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.Object, System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(Object, String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.Object, System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(Object, String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  isExternal: true
  name: HasProperty(Object, String)
  nameWithType: ClassTools.HasProperty(Object, String)
  fullName: InnerLibs.ClassTools.HasProperty(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  isExternal: true
  name: IsArrayOf<T>(Object)
  nameWithType: ClassTools.IsArrayOf<T>(Object)
  fullName: InnerLibs.ClassTools.IsArrayOf<T>(System.Object)
  nameWithType.vb: ClassTools.IsArrayOf(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)(System.Object)
  name.vb: IsArrayOf(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsDictionary(System.Object)
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  isExternal: true
  name: IsDictionary(Object)
  nameWithType: ClassTools.IsDictionary(Object)
  fullName: InnerLibs.ClassTools.IsDictionary(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  nameWithType: ClassTools.IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsInAny<Type>(Type, System.Collections.Generic.IEnumerable<Type>[], System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsInAny(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type)(), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny<Type>
    nameWithType: ClassTools.IsInAny<Type>
    fullName: InnerLibs.ClassTools.IsInAny<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny(Of Type)
    nameWithType: ClassTools.IsInAny(Of Type)
    fullName: InnerLibs.ClassTools.IsInAny(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsList(System.Object)
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  isExternal: true
  name: IsList(Object)
  nameWithType: ClassTools.IsList(Object)
  fullName: InnerLibs.ClassTools.IsList(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsType``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  isExternal: true
  name: IsType<T>(Object)
  nameWithType: ClassTools.IsType<T>(Object)
  fullName: InnerLibs.ClassTools.IsType<T>(System.Object)
  nameWithType.vb: ClassTools.IsType(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)(System.Object)
  name.vb: IsType(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce<T>(T, T[])
  nameWithType: ClassTools.NullCoalesce<T>(T, T[])
  fullName: InnerLibs.ClassTools.NullCoalesce<T>(T, T[])
  nameWithType.vb: ClassTools.NullCoalesce(Of T)(T, T())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(Of T)(T, T())
  name.vb: NullCoalesce(Of T)(T, T())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce<T>
    nameWithType: ClassTools.NullCoalesce<T>
    fullName: InnerLibs.ClassTools.NullCoalesce<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce(Of T)
    nameWithType: ClassTools.NullCoalesce(Of T)
    fullName: InnerLibs.ClassTools.NullCoalesce(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties<Type>(Type)
  nameWithType: ClassTools.NullifyProperties<Type>(Type)
  fullName: InnerLibs.ClassTools.NullifyProperties<Type>(Type)
  nameWithType.vb: ClassTools.NullifyProperties(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.NullifyProperties(Of Type)(Type)
  name.vb: NullifyProperties(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties<Type>
    nameWithType: ClassTools.NullifyProperties<Type>
    fullName: InnerLibs.ClassTools.NullifyProperties<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties(Of Type)
    nameWithType: ClassTools.NullifyProperties(Of Type)
    fullName: InnerLibs.ClassTools.NullifyProperties(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  isExternal: true
  name: SetPropertyValue<Type>(Object, String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(Object, String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.Object, System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(Object, String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.Object, System.String, Type)
  name.vb: SetPropertyValue(Of Type)(Object, String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  isExternal: true
  name: SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.Object, System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.Object, System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  isExternal: true
  name: ToFlatString(Object, String)
  nameWithType: ClassTools.ToFlatString(Object, String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation.GetDbType(System.Object)
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  isExternal: true
  name: GetDbType(Object)
  nameWithType: DataManipulation.GetDbType(Object)
  fullName: InnerLibs.DataManipulation.GetDbType(System.Object)
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation
  commentId: T:InnerLibs.DataManipulation
  parent: InnerLibs
  name: DataManipulation
  nameWithType: DataManipulation
  fullName: InnerLibs.DataManipulation
- uid: InnerLibs.Converter.DefineEmptyList``1(``0)
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList<T>(T)
  nameWithType: Converter.DefineEmptyList<T>(T)
  fullName: InnerLibs.Converter.DefineEmptyList<T>(T)
  nameWithType.vb: Converter.DefineEmptyList(Of T)(T)
  fullName.vb: InnerLibs.Converter.DefineEmptyList(Of T)(T)
  name.vb: DefineEmptyList(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList<T>
    nameWithType: Converter.DefineEmptyList<T>
    fullName: InnerLibs.Converter.DefineEmptyList<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList(Of T)
    nameWithType: Converter.DefineEmptyList(Of T)
    fullName: InnerLibs.Converter.DefineEmptyList(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Converter
  commentId: T:InnerLibs.Converter
  parent: InnerLibs
  name: Converter
  nameWithType: Converter
  fullName: InnerLibs.Converter
- uid: InnerLibs.Converter.ChangeType``2(``1)
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType, FromType>(FromType)
  nameWithType: Converter.ChangeType<ToType, FromType>(FromType)
  fullName: InnerLibs.Converter.ChangeType<ToType, FromType>(FromType)
  nameWithType.vb: Converter.ChangeType(Of ToType, FromType)(FromType)
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType, FromType)(FromType)
  name.vb: ChangeType(Of ToType, FromType)(FromType)
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType<ToType, FromType>
    nameWithType: Converter.ChangeType<ToType, FromType>
    fullName: InnerLibs.Converter.ChangeType<ToType, FromType>
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType(Of ToType, FromType)
    nameWithType: Converter.ChangeType(Of ToType, FromType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType, FromType)
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer.CreateNode(System.Object)
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  isExternal: true
  name: CreateNode(Object)
  nameWithType: JsonViewer.CreateNode(Object)
  fullName: InnerLibs.JsonViewer.CreateNode(System.Object)
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer
  commentId: T:InnerLibs.JsonViewer
  parent: InnerLibs
  name: JsonViewer
  nameWithType: JsonViewer
  fullName: InnerLibs.JsonViewer
- uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  isExternal: true
  name: IsBetween<Type>(Type, Object, Object)
  nameWithType: Mathematic.IsBetween<Type>(Type, Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween<Type>(Type, System.Object, System.Object)
  nameWithType.vb: Mathematic.IsBetween(Of Type)(Type, Object, Object)
  fullName.vb: InnerLibs.Mathematic.IsBetween(Of Type)(Type, System.Object, System.Object)
  name.vb: IsBetween(Of Type)(Type, Object, Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween<Type>
    nameWithType: Mathematic.IsBetween<Type>
    fullName: InnerLibs.Mathematic.IsBetween<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween(Of Type)
    nameWithType: Mathematic.IsBetween(Of Type)
    fullName: InnerLibs.Mathematic.IsBetween(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic
  commentId: T:InnerLibs.Mathematic
  parent: InnerLibs
  name: Mathematic
  nameWithType: Mathematic
  fullName: InnerLibs.Mathematic
- uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  isExternal: true
  name: SerializeJSON(Object, String)
  nameWithType: Text.SerializeJSON(Object, String)
  fullName: InnerLibs.Text.SerializeJSON(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text
  commentId: T:InnerLibs.Text
  parent: InnerLibs
  name: Text
  nameWithType: Text
  fullName: InnerLibs.Text
- uid: InnerLibs.Verify.IsNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  isExternal: true
  name: IsNumber(Object)
  nameWithType: Verify.IsNumber(Object)
  fullName: InnerLibs.Verify.IsNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify
  commentId: T:InnerLibs.Verify
  parent: InnerLibs
  name: Verify
  nameWithType: Verify
  fullName: InnerLibs.Verify
- uid: InnerLibs.Verify.IsNotNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  isExternal: true
  name: IsNotNumber(Object)
  nameWithType: Verify.IsNotNumber(Object)
  fullName: InnerLibs.Verify.IsNotNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  isExternal: true
  name: IfBlank<T>(Object, T)
  nameWithType: Verify.IfBlank<T>(Object, T)
  fullName: InnerLibs.Verify.IfBlank<T>(System.Object, T)
  nameWithType.vb: Verify.IfBlank(Of T)(Object, T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(System.Object, T)
  name.vb: IfBlank(Of T)(Object, T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  isExternal: true
  name: NullIf<T>(T, Func<T, Boolean>)
  nameWithType: Verify.NullIf<T>(T, Func<T, Boolean>)
  fullName: InnerLibs.Verify.NullIf<T>(T, System.Func<T, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Of T)(T, Func(Of T, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, System.Func(Of T, System.Boolean))
  name.vb: NullIf(Of T)(T, Func(Of T, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,``0)
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf<T>(T, T)
  nameWithType: Verify.NullIf<T>(T, T)
  fullName: InnerLibs.Verify.NullIf<T>(T, T)
  nameWithType.vb: Verify.NullIf(Of T)(T, T)
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, T)
  name.vb: NullIf(Of T)(T, T)
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  isExternal: true
  name: CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax<Type>(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  nameWithType.vb: Web.CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  fullName.vb: InnerLibs.Web.CreateFromAjax(Of Type)(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  name.vb: CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax<Type>
    nameWithType: Web.CreateFromAjax<Type>
    fullName: InnerLibs.Web.CreateFromAjax<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax(Of Type)
    nameWithType: Web.CreateFromAjax(Of Type)
    fullName: InnerLibs.Web.CreateFromAjax(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web
  commentId: T:InnerLibs.Web
  parent: InnerLibs
  name: Web
  nameWithType: Web
  fullName: InnerLibs.Web
- uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  isExternal: true
  name: AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  nameWithType: Web.AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>(T, System.Func<T, TextType>, System.Func<T, ValueType>)
  nameWithType.vb: Web.AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)(T, System.Func(Of T, TextType), System.Func(Of T, ValueType))
  name.vb: AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem<T, TextType, ValueType>
    nameWithType: Web.AsListItem<T, TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem(Of T, TextType, ValueType)
    nameWithType: Web.AsListItem(Of T, TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms.GetCastedValue(System.Object)
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  isExternal: true
  name: GetCastedValue(Object)
  nameWithType: WinForms.GetCastedValue(Object)
  fullName: InnerLibs.WinForms.GetCastedValue(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms
  commentId: T:InnerLibs.WinForms
  parent: InnerLibs
  name: WinForms
  nameWithType: WinForms
  fullName: InnerLibs.WinForms
- uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  isExternal: true
  name: CastValueForControl(Object, Object)
  nameWithType: WinForms.CastValueForControl(Object, Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  isExternal: true
  name: ApplyToControls<T>(T, HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls<T>(T, HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>(T, System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(Of T)(T, HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)(T, System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(Of T)(T, HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls<T>
    nameWithType: LINQExtensions.ApplyToControls<T>
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls(Of T)
    nameWithType: LINQExtensions.ApplyToControls(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions
  commentId: T:InnerLibs.LINQ.LINQExtensions
  parent: InnerLibs.LINQ
  name: LINQExtensions
  nameWithType: LINQExtensions
  fullName: InnerLibs.LINQ.LINQExtensions
- uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  isExternal: true
  name: HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>(T, T, System.Func<T, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)(T, T, System.Func(Of T, System.Object)())
  name.vb: HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues<T>
    nameWithType: LINQExtensions.HasSamePropertyValues<T>
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues(Of T)
    nameWithType: LINQExtensions.HasSamePropertyValues(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ
  commentId: N:InnerLibs.LINQ
  name: InnerLibs.LINQ
  nameWithType: InnerLibs.LINQ
  fullName: InnerLibs.LINQ
- uid: InnerLibs.ClassTools.Map*
  commentId: Overload:InnerLibs.ClassTools.Map
  name: Map
  nameWithType: ClassTools.Map
  fullName: InnerLibs.ClassTools.Map
- uid: System.Data.Common.DbDataReader
  commentId: T:System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: true
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Object[]
  commentId: T:System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: true
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: InnerLibs.ClassTools.AddFontFromBytes*
  commentId: Overload:InnerLibs.ClassTools.AddFontFromBytes
  name: AddFontFromBytes
  nameWithType: ClassTools.AddFontFromBytes
  fullName: InnerLibs.ClassTools.AddFontFromBytes
- uid: System.Drawing.Text.PrivateFontCollection
  commentId: T:System.Drawing.Text.PrivateFontCollection
  parent: System.Drawing.Text
  isExternal: true
  name: PrivateFontCollection
  nameWithType: PrivateFontCollection
  fullName: System.Drawing.Text.PrivateFontCollection
- uid: System.Byte[]
  commentId: T:System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Drawing.Text
  commentId: N:System.Drawing.Text
  isExternal: true
  name: System.Drawing.Text
  nameWithType: System.Drawing.Text
  fullName: System.Drawing.Text
- uid: InnerLibs.ClassTools.AddFontFromResource*
  commentId: Overload:InnerLibs.ClassTools.AddFontFromResource
  name: AddFontFromResource
  nameWithType: ClassTools.AddFontFromResource
  fullName: InnerLibs.ClassTools.AddFontFromResource
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: InnerLibs.ClassTools.AsIf*
  commentId: Overload:InnerLibs.ClassTools.AsIf
  name: AsIf
  nameWithType: ClassTools.AsIf
  fullName: InnerLibs.ClassTools.AsIf
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: '{T}'
  commentId: '!:``0'
  definition: '``0'
  name: T
  nameWithType: T
  fullName: T
- uid: '``0'
  name: T
  nameWithType: T
  fullName: T
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.BlankCoalesce*
  commentId: Overload:InnerLibs.ClassTools.BlankCoalesce
  name: BlankCoalesce
  nameWithType: ClassTools.BlankCoalesce
  fullName: InnerLibs.ClassTools.BlankCoalesce
- uid: System.String[]
  commentId: T:System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.ClassTools.Choose*
  commentId: Overload:InnerLibs.ClassTools.Choose
  name: Choose
  nameWithType: ClassTools.Choose
  fullName: InnerLibs.ClassTools.Choose
- uid: InnerLibs.ClassTools.ContainsAll*
  commentId: Overload:InnerLibs.ClassTools.ContainsAll
  name: ContainsAll
  nameWithType: ClassTools.ContainsAll
  fullName: InnerLibs.ClassTools.ContainsAll
- uid: System.Collections.Generic.IEnumerable{{Type}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<Type>
  nameWithType.vb: IEnumerable(Of Type)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Type)
  name.vb: IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{Type}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<Type>
  nameWithType: IEqualityComparer<Type>
  fullName: System.Collections.Generic.IEqualityComparer<Type>
  nameWithType.vb: IEqualityComparer(Of Type)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of Type)
  name.vb: IEqualityComparer(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.ContainsAny*
  commentId: Overload:InnerLibs.ClassTools.ContainsAny
  name: ContainsAny
  nameWithType: ClassTools.ContainsAny
  fullName: InnerLibs.ClassTools.ContainsAny
- uid: System.Collections.Specialized.NameValueCollection
  commentId: T:System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: true
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: InnerLibs.ClassTools.CopyToObject*
  commentId: Overload:InnerLibs.ClassTools.CopyToObject
  name: CopyToObject
  nameWithType: ClassTools.CopyToObject
  fullName: InnerLibs.ClassTools.CopyToObject
- uid: '{Type}'
  commentId: '!:``0'
  definition: '``0'
  name: Type
  nameWithType: Type
  fullName: Type
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.CreateDictionary*
  commentId: Overload:InnerLibs.ClassTools.CreateDictionary
  name: CreateDictionary
  nameWithType: ClassTools.CreateDictionary
  fullName: InnerLibs.ClassTools.CreateDictionary
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.CreateObject*
  commentId: Overload:InnerLibs.ClassTools.CreateObject
  name: CreateObject
  nameWithType: ClassTools.CreateObject
  fullName: InnerLibs.ClassTools.CreateObject
- uid: InnerLibs.ClassTools.DistinctCount*
  commentId: Overload:InnerLibs.ClassTools.DistinctCount
  name: DistinctCount
  nameWithType: ClassTools.DistinctCount
  fullName: InnerLibs.ClassTools.DistinctCount
- uid: System.Collections.Generic.Dictionary{{Type},System.Int64}
  commentId: T:System.Collections.Generic.Dictionary{``0,System.Int64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Type, Int64>
  nameWithType: Dictionary<Type, Int64>
  fullName: System.Collections.Generic.Dictionary<Type, System.Int64>
  nameWithType.vb: Dictionary(Of Type, Int64)
  fullName.vb: System.Collections.Generic.Dictionary(Of Type, System.Int64)
  name.vb: Dictionary(Of Type, Int64)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.FirstOr*
  commentId: Overload:InnerLibs.ClassTools.FirstOr
  name: FirstOr
  nameWithType: ClassTools.FirstOr
  fullName: InnerLibs.ClassTools.FirstOr
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Web.HttpRequest.QueryString
  commentId: P:System.Web.HttpRequest.QueryString
  isExternal: true
- uid: System.Web.HttpRequest.Form
  commentId: P:System.Web.HttpRequest.Form
  isExternal: true
- uid: InnerLibs.ClassTools.FlatRequest*
  commentId: Overload:InnerLibs.ClassTools.FlatRequest
  name: FlatRequest
  nameWithType: ClassTools.FlatRequest
  fullName: InnerLibs.ClassTools.FlatRequest
- uid: System.Web.HttpRequest
  commentId: T:System.Web.HttpRequest
  parent: System.Web
  isExternal: true
  name: HttpRequest
  nameWithType: HttpRequest
  fullName: System.Web.HttpRequest
- uid: System.Web
  commentId: N:System.Web
  isExternal: true
  name: System.Web
  nameWithType: System.Web
  fullName: System.Web
- uid: InnerLibs.ClassTools.GetAttributeValue*
  commentId: Overload:InnerLibs.ClassTools.GetAttributeValue
  name: GetAttributeValue
  nameWithType: ClassTools.GetAttributeValue
  fullName: InnerLibs.ClassTools.GetAttributeValue
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Func{{TAttribute},{TValue}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TAttribute, TValue>
  nameWithType: Func<TAttribute, TValue>
  fullName: System.Func<TAttribute, TValue>
  nameWithType.vb: Func(Of TAttribute, TValue)
  fullName.vb: System.Func(Of TAttribute, TValue)
  name.vb: Func(Of TAttribute, TValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TAttribute
    nameWithType: TAttribute
    fullName: TAttribute
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAttribute
    nameWithType: TAttribute
    fullName: TAttribute
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TValue}'
  commentId: '!:``1'
  definition: '``1'
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '``1'
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: InnerLibs.ClassTools.GetEnumValue*
  commentId: Overload:InnerLibs.ClassTools.GetEnumValue
  name: GetEnumValue
  nameWithType: ClassTools.GetEnumValue
  fullName: InnerLibs.ClassTools.GetEnumValue
- uid: InnerLibs.ClassTools.GetEnumValues*
  commentId: Overload:InnerLibs.ClassTools.GetEnumValues
  name: GetEnumValues
  nameWithType: ClassTools.GetEnumValues
  fullName: InnerLibs.ClassTools.GetEnumValues
- uid: InnerLibs.ClassTools.GetProperties*
  commentId: Overload:InnerLibs.ClassTools.GetProperties
  name: GetProperties
  nameWithType: ClassTools.GetProperties
  fullName: InnerLibs.ClassTools.GetProperties
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.BindingFlags
  commentId: T:System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: true
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Collections.Generic.List{System.Reflection.PropertyInfo}
  commentId: T:System.Collections.Generic.List{System.Reflection.PropertyInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<PropertyInfo>
  nameWithType: List<PropertyInfo>
  fullName: System.Collections.Generic.List<System.Reflection.PropertyInfo>
  nameWithType.vb: List(Of PropertyInfo)
  fullName.vb: System.Collections.Generic.List(Of System.Reflection.PropertyInfo)
  name.vb: List(Of PropertyInfo)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyParameterFromString*
  commentId: Overload:InnerLibs.ClassTools.GetPropertyParameterFromString
  name: GetPropertyParameterFromString
  nameWithType: ClassTools.GetPropertyParameterFromString
  fullName: InnerLibs.ClassTools.GetPropertyParameterFromString
- uid: InnerLibs.ClassTools.GetPropertyParametersFromString*
  commentId: Overload:InnerLibs.ClassTools.GetPropertyParametersFromString
  name: GetPropertyParametersFromString
  nameWithType: ClassTools.GetPropertyParametersFromString
  fullName: InnerLibs.ClassTools.GetPropertyParametersFromString
- uid: InnerLibs.ClassTools.GetPropertyValue*
  commentId: Overload:InnerLibs.ClassTools.GetPropertyValue
  name: GetPropertyValue
  nameWithType: ClassTools.GetPropertyValue
  fullName: InnerLibs.ClassTools.GetPropertyValue
- uid: InnerLibs.ClassTools.GetResourceBytes*
  commentId: Overload:InnerLibs.ClassTools.GetResourceBytes
  name: GetResourceBytes
  nameWithType: ClassTools.GetResourceBytes
  fullName: InnerLibs.ClassTools.GetResourceBytes
- uid: InnerLibs.ClassTools.GetResourceFileText*
  commentId: Overload:InnerLibs.ClassTools.GetResourceFileText
  name: GetResourceFileText
  nameWithType: ClassTools.GetResourceFileText
  fullName: InnerLibs.ClassTools.GetResourceFileText
- uid: InnerLibs.ClassTools.GetResourceHtmlDocument*
  commentId: Overload:InnerLibs.ClassTools.GetResourceHtmlDocument
  name: GetResourceHtmlDocument
  nameWithType: ClassTools.GetResourceHtmlDocument
  fullName: InnerLibs.ClassTools.GetResourceHtmlDocument
- uid: InnerLibs.HtmlParser.HtmlDocument
  commentId: T:InnerLibs.HtmlParser.HtmlDocument
  parent: InnerLibs.HtmlParser
  name: HtmlDocument
  nameWithType: HtmlDocument
  fullName: InnerLibs.HtmlParser.HtmlDocument
- uid: InnerLibs.HtmlParser
  commentId: N:InnerLibs.HtmlParser
  name: InnerLibs.HtmlParser
  nameWithType: InnerLibs.HtmlParser
  fullName: InnerLibs.HtmlParser
- uid: InnerLibs.ClassTools.GetValueOr*
  commentId: Overload:InnerLibs.ClassTools.GetValueOr
  name: GetValueOr
  nameWithType: ClassTools.GetValueOr
  fullName: InnerLibs.ClassTools.GetValueOr
- uid: System.Collections.Generic.IDictionary{{tkey},{Tvalue}}
  commentId: T:System.Collections.Generic.IDictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<tkey, Tvalue>
  nameWithType: IDictionary<tkey, Tvalue>
  fullName: System.Collections.Generic.IDictionary<tkey, Tvalue>
  nameWithType.vb: IDictionary(Of tkey, Tvalue)
  fullName.vb: System.Collections.Generic.IDictionary(Of tkey, Tvalue)
  name.vb: IDictionary(Of tkey, Tvalue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: tkey
    nameWithType: tkey
    fullName: tkey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Tvalue
    nameWithType: Tvalue
    fullName: Tvalue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: tkey
    nameWithType: tkey
    fullName: tkey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Tvalue
    nameWithType: Tvalue
    fullName: Tvalue
  - name: )
    nameWithType: )
    fullName: )
- uid: '{tkey}'
  commentId: '!:``0'
  definition: '``0'
  name: tkey
  nameWithType: tkey
  fullName: tkey
- uid: '{Tvalue}'
  commentId: '!:``1'
  definition: '``1'
  name: Tvalue
  nameWithType: Tvalue
  fullName: Tvalue
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.HasProperty*
  commentId: Overload:InnerLibs.ClassTools.HasProperty
  name: HasProperty
  nameWithType: ClassTools.HasProperty
  fullName: InnerLibs.ClassTools.HasProperty
- uid: InnerLibs.ClassTools.IsArrayOf*
  commentId: Overload:InnerLibs.ClassTools.IsArrayOf
  name: IsArrayOf
  nameWithType: ClassTools.IsArrayOf
  fullName: InnerLibs.ClassTools.IsArrayOf
- uid: InnerLibs.ClassTools.IsDictionary*
  commentId: Overload:InnerLibs.ClassTools.IsDictionary
  name: IsDictionary
  nameWithType: ClassTools.IsDictionary
  fullName: InnerLibs.ClassTools.IsDictionary
- uid: InnerLibs.ClassTools.IsIn*
  commentId: Overload:InnerLibs.ClassTools.IsIn
  name: IsIn
  nameWithType: ClassTools.IsIn
  fullName: InnerLibs.ClassTools.IsIn
- uid: System.Collections.Generic.IEqualityComparer{System.Char}
  commentId: T:System.Collections.Generic.IEqualityComparer{System.Char}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<Char>
  nameWithType: IEqualityComparer<Char>
  fullName: System.Collections.Generic.IEqualityComparer<System.Char>
  nameWithType.vb: IEqualityComparer(Of Char)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of System.Char)
  name.vb: IEqualityComparer(Of Char)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsInAny*
  commentId: Overload:InnerLibs.ClassTools.IsInAny
  name: IsInAny
  nameWithType: ClassTools.IsInAny
  fullName: InnerLibs.ClassTools.IsInAny
- uid: System.Collections.Generic.IEnumerable{{Type}}[]
  commentId: T:System.Collections.Generic.IEnumerable{``0}[]
  definition: System.Collections.Generic.IEnumerable{``0}[]
  name: IEnumerable<Type>[]
  nameWithType: IEnumerable<Type>[]
  fullName: System.Collections.Generic.IEnumerable<Type>[]
  nameWithType.vb: IEnumerable(Of Type)()
  fullName.vb: System.Collections.Generic.IEnumerable(Of Type)()
  name.vb: IEnumerable(Of Type)()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{``0}[]
  commentId: T:System.Collections.Generic.IEnumerable{``0}[]
  isExternal: true
  name: IEnumerable<Type>[]
  nameWithType: IEnumerable<Type>[]
  fullName: System.Collections.Generic.IEnumerable<Type>[]
  nameWithType.vb: IEnumerable(Of Type)()
  fullName.vb: System.Collections.Generic.IEnumerable(Of Type)()
  name.vb: IEnumerable(Of Type)()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.ClassTools.IsList*
  commentId: Overload:InnerLibs.ClassTools.IsList
  name: IsList
  nameWithType: ClassTools.IsList
  fullName: InnerLibs.ClassTools.IsList
- uid: InnerLibs.ClassTools.IsNotIn*
  commentId: Overload:InnerLibs.ClassTools.IsNotIn
  name: IsNotIn
  nameWithType: ClassTools.IsNotIn
  fullName: InnerLibs.ClassTools.IsNotIn
- uid: InnerLibs.ClassTools.IsNumericType*
  commentId: Overload:InnerLibs.ClassTools.IsNumericType
  name: IsNumericType
  nameWithType: ClassTools.IsNumericType
  fullName: InnerLibs.ClassTools.IsNumericType
- uid: InnerLibs.ClassTools.IsType*
  commentId: Overload:InnerLibs.ClassTools.IsType
  name: IsType
  nameWithType: ClassTools.IsType
  fullName: InnerLibs.ClassTools.IsType
- uid: InnerLibs.ClassTools.LastOr*
  commentId: Overload:InnerLibs.ClassTools.LastOr
  name: LastOr
  nameWithType: ClassTools.LastOr
  fullName: InnerLibs.ClassTools.LastOr
- uid: InnerLibs.ClassTools.Merge*
  commentId: Overload:InnerLibs.ClassTools.Merge
  name: Merge
  nameWithType: ClassTools.Merge
  fullName: InnerLibs.ClassTools.Merge
- uid: System.Collections.Specialized.NameValueCollection[]
  commentId: T:System.Collections.Specialized.NameValueCollection[]
  isExternal: true
  name: NameValueCollection[]
  nameWithType: NameValueCollection[]
  fullName: System.Collections.Specialized.NameValueCollection[]
  nameWithType.vb: NameValueCollection()
  fullName.vb: System.Collections.Specialized.NameValueCollection()
  name.vb: NameValueCollection()
  spec.csharp:
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.ClassTools.MergeProperties*
  commentId: Overload:InnerLibs.ClassTools.MergeProperties
  name: MergeProperties
  nameWithType: ClassTools.MergeProperties
  fullName: InnerLibs.ClassTools.MergeProperties
- uid: InnerLibs.ClassTools.NullCoalesce*
  commentId: Overload:InnerLibs.ClassTools.NullCoalesce
  name: NullCoalesce
  nameWithType: ClassTools.NullCoalesce
  fullName: InnerLibs.ClassTools.NullCoalesce
- uid: System.Nullable{{T}}
  commentId: T:System.Nullable{``0}
  parent: System
  definition: System.Nullable`1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{{T}}[]
  commentId: T:System.Nullable{``0}[]
  definition: System.Nullable{``0}[]
  name: Nullable<T>[]
  nameWithType: Nullable<T>[]
  fullName: System.Nullable<T>[]
  nameWithType.vb: Nullable(Of T)()
  fullName.vb: System.Nullable(Of T)()
  name.vb: Nullable(Of T)()
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Nullable{``0}[]
  commentId: T:System.Nullable{``0}[]
  isExternal: true
  name: Nullable<T>[]
  nameWithType: Nullable<T>[]
  fullName: System.Nullable<T>[]
  nameWithType.vb: Nullable(Of T)()
  fullName.vb: System.Nullable(Of T)()
  name.vb: Nullable(Of T)()
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{System.Nullable{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Nullable{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Nullable<T>>
  nameWithType: IEnumerable<Nullable<T>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<T>>
  nameWithType.vb: IEnumerable(Of Nullable(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of T))
  name.vb: IEnumerable(Of Nullable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}[]'
  commentId: T:``0[]
  definition: '``0[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '``0[]'
  commentId: T:``0[]
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.ClassTools.NullifyProperties*
  commentId: Overload:InnerLibs.ClassTools.NullifyProperties
  name: NullifyProperties
  nameWithType: ClassTools.NullifyProperties
  fullName: InnerLibs.ClassTools.NullifyProperties
- uid: InnerLibs.ClassTools.RemoveIfExist*
  commentId: Overload:InnerLibs.ClassTools.RemoveIfExist
  name: RemoveIfExist
  nameWithType: ClassTools.RemoveIfExist
  fullName: InnerLibs.ClassTools.RemoveIfExist
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.IDictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TKey}[]'
  commentId: T:``0[]
  definition: '``0[]'
  name: TKey[]
  nameWithType: TKey[]
  fullName: TKey[]
  nameWithType.vb: TKey()
  fullName.vb: TKey()
  name.vb: TKey()
  spec.csharp:
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Func{System.Collections.Generic.KeyValuePair{{TKey},{TValue}},System.Boolean}
  commentId: T:System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<KeyValuePair<TKey, TValue>, Boolean>
  nameWithType: Func<KeyValuePair<TKey, TValue>, Boolean>
  fullName: System.Func<System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Boolean>
  nameWithType.vb: Func(Of KeyValuePair(Of TKey, TValue), Boolean)
  fullName.vb: System.Func(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Boolean)
  name.vb: Func(Of KeyValuePair(Of TKey, TValue), Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValue*
  commentId: Overload:InnerLibs.ClassTools.SetPropertyValue
  name: SetPropertyValue
  nameWithType: ClassTools.SetPropertyValue
  fullName: InnerLibs.ClassTools.SetPropertyValue
- uid: InnerLibs.ClassTools.SetPropertyValueFromCollection*
  commentId: Overload:InnerLibs.ClassTools.SetPropertyValueFromCollection
  name: SetPropertyValueFromCollection
  nameWithType: ClassTools.SetPropertyValueFromCollection
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection
- uid: System.Collections.CollectionBase
  commentId: T:System.Collections.CollectionBase
  parent: System.Collections
  isExternal: true
  name: CollectionBase
  nameWithType: CollectionBase
  fullName: System.Collections.CollectionBase
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: InnerLibs.ClassTools.ToFlatString*
  commentId: Overload:InnerLibs.ClassTools.ToFlatString
  name: ToFlatString
  nameWithType: ClassTools.ToFlatString
  fullName: InnerLibs.ClassTools.ToFlatString
