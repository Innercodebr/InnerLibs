### YamlMime:ManagedReference
items:
- uid: InnerLibs.Text
  commentId: T:InnerLibs.Text
  id: Text
  parent: InnerLibs
  children:
  - InnerLibs.Text.AdjustBlankSpaces(System.String)
  - InnerLibs.Text.AdjustWhiteSpaces(System.String)
  - InnerLibs.Text.Alphabetize(System.String)
  - InnerLibs.Text.Append(System.String@,System.String)
  - InnerLibs.Text.AppendIf(System.String@,System.String,System.Boolean)
  - InnerLibs.Text.ApplySpaceOnWrapChars(System.String)
  - InnerLibs.Text.BreakLineChars
  - InnerLibs.Text.CamelSplit(System.String)
  - InnerLibs.Text.Censor(System.String,System.Char,System.String[])
  - InnerLibs.Text.Censor(System.String@,System.Collections.Generic.List{System.String},System.Char)
  - InnerLibs.Text.CloseWrappers
  - InnerLibs.Text.ContainsAll(System.String,System.String[])
  - InnerLibs.Text.ContainsAll(System.String,System.StringComparison,System.String[])
  - InnerLibs.Text.ContainsAny(System.String,System.String[])
  - InnerLibs.Text.ContainsAny(System.String,System.StringComparison,System.String[])
  - InnerLibs.Text.CountCharacter(System.String,System.Char)
  - InnerLibs.Text.CountWords(System.String,System.Boolean,System.String[])
  - InnerLibs.Text.CreateElement(System.String)
  - InnerLibs.Text.Decrement(System.Int32@,System.Int32)
  - InnerLibs.Text.Decrement(System.Int64@,System.Int32)
  - InnerLibs.Text.DeleteLine(System.String@,System.Int32)
  - InnerLibs.Text.DistinctCount(System.String)
  - InnerLibs.Text.DistinctCount(System.String[])
  - InnerLibs.Text.EndOfSentencePunctuation
  - InnerLibs.Text.EndsWithAny(System.String,System.String[])
  - InnerLibs.Text.EscapeQuotesToQuery(System.String)
  - InnerLibs.Text.FindNumbers(System.String)
  - InnerLibs.Text.FindTelephoneNumbers(System.String)
  - InnerLibs.Text.FixBreakLines(System.String)
  - InnerLibs.Text.FixCaptalization(System.String)
  - InnerLibs.Text.FixPunctuation(System.String@,System.String,System.Boolean)
  - InnerLibs.Text.FixText(System.String)
  - InnerLibs.Text.Format(System.String,System.Object[])
  - InnerLibs.Text.GetAfter(System.String,System.String)
  - InnerLibs.Text.GetAllBetween(System.String,System.String,System.String)
  - InnerLibs.Text.GetBefore(System.String,System.String)
  - InnerLibs.Text.GetBetween(System.String,System.String,System.String)
  - InnerLibs.Text.GetDomain(System.String,System.Boolean)
  - InnerLibs.Text.GetDomain(System.Uri,System.Boolean)
  - InnerLibs.Text.GetFirstChars(System.String,System.Int32)
  - InnerLibs.Text.GetKeyWords(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.String[],System.String[])
  - InnerLibs.Text.GetLastChars(System.String,System.Int32)
  - InnerLibs.Text.GetMiddleChars(System.String,System.Int32)
  - InnerLibs.Text.GetOppositeWrapChar(System.String)
  - InnerLibs.Text.GetRandomItem``1(``0[])
  - InnerLibs.Text.GetRandomItem``1(System.Collections.Generic.List{``0})
  - InnerLibs.Text.GetRelativeURL(System.String)
  - InnerLibs.Text.GetRelativeURL(System.Uri)
  - InnerLibs.Text.GetWords(System.String)
  - InnerLibs.Text.GetWrappedText(System.String,System.String,System.Boolean)
  - InnerLibs.Text.HtmlDecode(System.String)
  - InnerLibs.Text.HtmlEncode(System.String)
  - InnerLibs.Text.Increment(System.Int32@,System.Int32)
  - InnerLibs.Text.Increment(System.Int64@,System.Int32)
  - InnerLibs.Text.IsAnagramOf(System.String,System.String)
  - InnerLibs.Text.IsAny(System.String,System.String[])
  - InnerLibs.Text.IsPalindrome(System.String,System.Boolean)
  - InnerLibs.Text.Join``1(``0[],System.String)
  - InnerLibs.Text.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)
  - InnerLibs.Text.Join``1(System.Collections.Generic.List{``0},System.String)
  - InnerLibs.Text.Join``1(System.String,``0[])
  - InnerLibs.Text.LevenshteinDistance(System.String,System.String)
  - InnerLibs.Text.MakeClean(System.String)
  - InnerLibs.Text.MidSentencePunctuation
  - InnerLibs.Text.OpenWrappers
  - InnerLibs.Text.ParseDigits(System.String,System.Globalization.CultureInfo)
  - InnerLibs.Text.ParseDigits``1(System.String,System.Globalization.CultureInfo)
  - InnerLibs.Text.ParseJSON(System.String,System.String)
  - InnerLibs.Text.ParseJSON``1(System.String,System.String)
  - InnerLibs.Text.Poopfy(System.String)
  - InnerLibs.Text.Poopfy(System.String[])
  - InnerLibs.Text.PreetyPrint(System.Xml.XmlDocument)
  - InnerLibs.Text.Prepend(System.String@,System.String)
  - InnerLibs.Text.PrependIf(System.String@,System.String,System.Boolean)
  - InnerLibs.Text.QuantifyText(System.String,System.Globalization.CultureInfo,System.String)
  - InnerLibs.Text.QuantifyText(System.String,System.Object,System.Globalization.CultureInfo)
  - InnerLibs.Text.Quote(System.String,System.Char)
  - InnerLibs.Text.QuoteIf(System.String,System.Boolean,System.String)
  - InnerLibs.Text.RandomItem``1(``0[])
  - InnerLibs.Text.RegexEscape(System.String)
  - InnerLibs.Text.RemoveAccents(System.String@)
  - InnerLibs.Text.RemoveAny(System.String,System.String[])
  - InnerLibs.Text.RemoveDiacritics(System.String@)
  - InnerLibs.Text.RemoveFirstAny(System.String,System.Boolean,System.String[])
  - InnerLibs.Text.RemoveFirstChars(System.String,System.Int32)
  - InnerLibs.Text.RemoveFirstIf(System.String,System.String)
  - InnerLibs.Text.RemoveHTML(System.String)
  - InnerLibs.Text.RemoveLastAny(System.String,System.Boolean,System.String[])
  - InnerLibs.Text.RemoveLastChars(System.String,System.Int32)
  - InnerLibs.Text.RemoveLastIf(System.String,System.String)
  - InnerLibs.Text.RemoveNonPrintable(System.String)
  - InnerLibs.Text.Replace(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean)
  - InnerLibs.Text.Replace(System.String[],System.String,System.String,System.Boolean)
  - InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String,System.String[]},System.StringComparison)
  - InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  - InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String[],System.String[]},System.StringComparison)
  - InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String[],System.String},System.StringComparison)
  - InnerLibs.Text.ReplaceMany(System.String,System.String,System.String[])
  - InnerLibs.Text.ReplaceNone(System.String,System.String)
  - InnerLibs.Text.SensitiveReplace(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)
  - InnerLibs.Text.SensitiveReplace(System.String,System.String,System.String,System.StringComparison)
  - InnerLibs.Text.SerializeJSON(System.Object,System.String)
  - InnerLibs.Text.Shuffle(System.String@)
  - InnerLibs.Text.Shuffle``1(``0[]@)
  - InnerLibs.Text.Shuffle``1(System.Collections.Generic.List{``0}@)
  - InnerLibs.Text.Singularize(System.String)
  - InnerLibs.Text.Slice(System.String,System.Int32,System.String)
  - InnerLibs.Text.Split(System.String,System.String,System.StringSplitOptions)
  - InnerLibs.Text.StartsWithAny(System.String,System.String[])
  - InnerLibs.Text.SyllableCount(System.String)
  - InnerLibs.Text.ToAlternateCase(System.String)
  - InnerLibs.Text.ToAnagram(System.String)
  - InnerLibs.Text.ToAnagramList(System.String)
  - InnerLibs.Text.ToCamel(System.String)
  - InnerLibs.Text.ToExtensiveForm(InnerLibs.Money)
  - InnerLibs.Text.ToExtensiveForm(System.Decimal,System.Int32)
  - InnerLibs.Text.ToExtensiveForm(System.Int32)
  - InnerLibs.Text.ToExtensiveMoneyForm(System.Decimal)
  - InnerLibs.Text.ToFileSizeString(System.Byte[])
  - InnerLibs.Text.ToFileSizeString(System.Decimal)
  - InnerLibs.Text.ToFileSizeString(System.Double)
  - InnerLibs.Text.ToFileSizeString(System.Int32)
  - InnerLibs.Text.ToFileSizeString(System.Int64)
  - InnerLibs.Text.ToFileSizeString(System.IO.FileInfo)
  - InnerLibs.Text.ToFriendlyURL(System.String,System.Boolean)
  - InnerLibs.Text.ToHtmlList``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)
  - InnerLibs.Text.ToHtmlString(System.Web.UI.HtmlControls.HtmlGenericControl)
  - InnerLibs.Text.ToLeet(System.String,System.Int32)
  - InnerLibs.Text.ToMoney(System.Decimal,System.String,System.Char,System.Char)
  - InnerLibs.Text.ToNumberString(System.Decimal,System.Char,System.Char)
  - InnerLibs.Text.ToPercentString(System.Decimal)
  - InnerLibs.Text.ToPercentString(System.Double)
  - InnerLibs.Text.ToPercentString(System.Int16)
  - InnerLibs.Text.ToPercentString(System.Int32)
  - InnerLibs.Text.ToPercentString(System.Int64)
  - InnerLibs.Text.ToProper(System.String)
  - InnerLibs.Text.ToQuantityText(System.Decimal,System.Globalization.CultureInfo)
  - InnerLibs.Text.ToQuantityText(System.Int32,System.Globalization.CultureInfo)
  - InnerLibs.Text.ToQuantityText(System.Int64,System.Globalization.CultureInfo)
  - InnerLibs.Text.ToRandomCase(System.String)
  - InnerLibs.Text.ToSlug(System.String,System.Boolean)
  - InnerLibs.Text.ToSnake(System.String)
  - InnerLibs.Text.ToStream(System.String)
  - InnerLibs.Text.ToTelephone(System.Decimal)
  - InnerLibs.Text.ToTelephone(System.Double)
  - InnerLibs.Text.ToTelephone(System.Int32)
  - InnerLibs.Text.ToTelephone(System.Int64)
  - InnerLibs.Text.ToTelephone(System.String)
  - InnerLibs.Text.ToTitle(System.String)
  - InnerLibs.Text.ToUnitString(System.Decimal)
  - InnerLibs.Text.ToUnitString(System.Int16)
  - InnerLibs.Text.ToUnitString(System.Int32)
  - InnerLibs.Text.ToUnitString(System.Int64)
  - InnerLibs.Text.ToXMLString(System.Xml.XmlDocument)
  - InnerLibs.Text.TrimAny(System.String,System.Boolean,System.String[])
  - InnerLibs.Text.TrimAny(System.String,System.String[])
  - InnerLibs.Text.TrimCarriage(System.String)
  - InnerLibs.Text.UrlDecode(System.String)
  - InnerLibs.Text.UrlEncode(System.String)
  - InnerLibs.Text.WhiteSpaceChars
  - InnerLibs.Text.WordSplitters
  - InnerLibs.Text.WordWrappers
  - InnerLibs.Text.Wrap(System.String,System.String)
  - InnerLibs.Text.WrapInTag(System.String,System.String)
  langs:
  - csharp
  - vb
  name: Text
  nameWithType: Text
  fullName: InnerLibs.Text
  type: Class
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Text
    path: Text.vb
    startLine: 14
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nModulo de manipulação de Texto\n"
  remarks: ''
  example: []
  syntax:
    content: public class Text
    content.vb: Public Module Text
  extensionMethods:
  - InnerLibs.Text.InnerLibs.ClassTools.CreateDictionary
  - System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  - System.Object.InnerLibs.ClassTools.GetProperties
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  - System.Object.InnerLibs.ClassTools.IsArrayOf``1
  - System.Object.InnerLibs.ClassTools.IsDictionary
  - InnerLibs.Text.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Text},System.Collections.Generic.IEqualityComparer{InnerLibs.Text})
  - InnerLibs.Text.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - InnerLibs.Text.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Text}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Text})
  - System.Object.InnerLibs.ClassTools.IsList
  - InnerLibs.Text.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Text},System.Collections.Generic.IEqualityComparer{InnerLibs.Text})
  - InnerLibs.Text.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - System.Object.InnerLibs.ClassTools.IsType``1
  - InnerLibs.Text.InnerLibs.ClassTools.NullCoalesce(InnerLibs.Text[])
  - InnerLibs.Text.InnerLibs.ClassTools.NullifyProperties
  - System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  - System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  - System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  - System.Object.InnerLibs.DataManipulation.GetDbType
  - InnerLibs.Text.InnerLibs.Converter.DefineEmptyList
  - InnerLibs.Text.InnerLibs.Converter.ChangeType``1
  - System.Object.InnerLibs.JsonViewer.CreateNode
  - InnerLibs.Text.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  - System.Object.InnerLibs.Text.SerializeJSON(System.String)
  - System.Object.InnerLibs.Verify.IsNumber
  - System.Object.InnerLibs.Verify.IsNotNumber
  - System.Object.InnerLibs.Verify.IfBlank``1({T})
  - InnerLibs.Text.InnerLibs.Verify.NullIf(System.Func{InnerLibs.Text,System.Boolean})
  - InnerLibs.Text.InnerLibs.Verify.NullIf(InnerLibs.Text)
  - InnerLibs.Text.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  - InnerLibs.Text.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Text,{TextType}},System.Func{InnerLibs.Text,{ValueType}})
  - System.Object.InnerLibs.WinForms.GetCastedValue
  - System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  - InnerLibs.Text.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  - InnerLibs.Text.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Text,System.Func{InnerLibs.Text,System.Object}[])
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Module
- uid: InnerLibs.Text.LevenshteinDistance(System.String,System.String)
  commentId: M:InnerLibs.Text.LevenshteinDistance(System.String,System.String)
  id: LevenshteinDistance(System.String,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: LevenshteinDistance(String, String)
  nameWithType: Text.LevenshteinDistance(String, String)
  fullName: InnerLibs.Text.LevenshteinDistance(System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: LevenshteinDistance
    path: Text.vb
    startLine: 21
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nComputa a distancia de Levenshtein entre 2 strings.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static int LevenshteinDistance(this string Text1, string Text2)
    parameters:
    - id: Text1
      type: System.String
    - id: Text2
      type: System.String
    return:
      type: System.Int32
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function LevenshteinDistance(Text1 As String, Text2 As String) As Integer
  overload: InnerLibs.Text.LevenshteinDistance*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.BreakLineChars
  commentId: P:InnerLibs.Text.BreakLineChars
  id: BreakLineChars
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: BreakLineChars
  nameWithType: Text.BreakLineChars
  fullName: InnerLibs.Text.BreakLineChars
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: BreakLineChars
    path: Text.vb
    startLine: 59
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static string[] BreakLineChars { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public Shared ReadOnly Property BreakLineChars As String()
  overload: InnerLibs.Text.BreakLineChars*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InnerLibs.Text.WhiteSpaceChars
  commentId: P:InnerLibs.Text.WhiteSpaceChars
  id: WhiteSpaceChars
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: WhiteSpaceChars
  nameWithType: Text.WhiteSpaceChars
  fullName: InnerLibs.Text.WhiteSpaceChars
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: WhiteSpaceChars
    path: Text.vb
    startLine: 64
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCaracteres em branco\n"
  example: []
  syntax:
    content: public static string[] WhiteSpaceChars { get; }
    parameters: []
    return:
      type: System.String[]
      description: ''
    content.vb: Public Shared ReadOnly Property WhiteSpaceChars As String()
  overload: InnerLibs.Text.WhiteSpaceChars*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InnerLibs.Text.WordSplitters
  commentId: P:InnerLibs.Text.WordSplitters
  id: WordSplitters
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: WordSplitters
  nameWithType: Text.WordSplitters
  fullName: InnerLibs.Text.WordSplitters
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: WordSplitters
    path: Text.vb
    startLine: 70
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nStrings utilizadas para descobrir as palavras em uma string\n"
  example: []
  syntax:
    content: public static string[] WordSplitters { get; }
    parameters: []
    return:
      type: System.String[]
      description: ''
    content.vb: Public Shared ReadOnly Property WordSplitters As String()
  overload: InnerLibs.Text.WordSplitters*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InnerLibs.Text.WordWrappers
  commentId: P:InnerLibs.Text.WordWrappers
  id: WordWrappers
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: WordWrappers
  nameWithType: Text.WordWrappers
  fullName: InnerLibs.Text.WordWrappers
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: WordWrappers
    path: Text.vb
    startLine: 76
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCaracteres usado para encapsular palavras em textos\n"
  example: []
  syntax:
    content: public static string[] WordWrappers { get; }
    parameters: []
    return:
      type: System.String[]
      description: ''
    content.vb: Public Shared ReadOnly Property WordWrappers As String()
  overload: InnerLibs.Text.WordWrappers*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InnerLibs.Text.OpenWrappers
  commentId: P:InnerLibs.Text.OpenWrappers
  id: OpenWrappers
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: OpenWrappers
  nameWithType: Text.OpenWrappers
  fullName: InnerLibs.Text.OpenWrappers
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: OpenWrappers
    path: Text.vb
    startLine: 81
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static string[] OpenWrappers { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public Shared ReadOnly Property OpenWrappers As String()
  overload: InnerLibs.Text.OpenWrappers*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InnerLibs.Text.CloseWrappers
  commentId: P:InnerLibs.Text.CloseWrappers
  id: CloseWrappers
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: CloseWrappers
  nameWithType: Text.CloseWrappers
  fullName: InnerLibs.Text.CloseWrappers
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: CloseWrappers
    path: Text.vb
    startLine: 82
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static string[] CloseWrappers { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public Shared ReadOnly Property CloseWrappers As String()
  overload: InnerLibs.Text.CloseWrappers*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InnerLibs.Text.EndOfSentencePunctuation
  commentId: P:InnerLibs.Text.EndOfSentencePunctuation
  id: EndOfSentencePunctuation
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: EndOfSentencePunctuation
  nameWithType: Text.EndOfSentencePunctuation
  fullName: InnerLibs.Text.EndOfSentencePunctuation
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: EndOfSentencePunctuation
    path: Text.vb
    startLine: 84
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static string[] EndOfSentencePunctuation { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public Shared ReadOnly Property EndOfSentencePunctuation As String()
  overload: InnerLibs.Text.EndOfSentencePunctuation*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InnerLibs.Text.MidSentencePunctuation
  commentId: P:InnerLibs.Text.MidSentencePunctuation
  id: MidSentencePunctuation
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: MidSentencePunctuation
  nameWithType: Text.MidSentencePunctuation
  fullName: InnerLibs.Text.MidSentencePunctuation
  type: Property
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: MidSentencePunctuation
    path: Text.vb
    startLine: 85
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: public static string[] MidSentencePunctuation { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public Shared ReadOnly Property MidSentencePunctuation As String()
  overload: InnerLibs.Text.MidSentencePunctuation*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InnerLibs.Text.AdjustBlankSpaces(System.String)
  commentId: M:InnerLibs.Text.AdjustBlankSpaces(System.String)
  id: AdjustBlankSpaces(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: AdjustBlankSpaces(String)
  nameWithType: Text.AdjustBlankSpaces(String)
  fullName: InnerLibs.Text.AdjustBlankSpaces(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: AdjustBlankSpaces
    path: Text.vb
    startLine: 88
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: >-
      [Extension]

      public static string AdjustBlankSpaces(this string Text)
    parameters:
    - id: Text
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function AdjustBlankSpaces(Text As String) As String
  overload: InnerLibs.Text.AdjustBlankSpaces*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.AdjustWhiteSpaces(System.String)
  commentId: M:InnerLibs.Text.AdjustWhiteSpaces(System.String)
  id: AdjustWhiteSpaces(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: AdjustWhiteSpaces(String)
  nameWithType: Text.AdjustWhiteSpaces(String)
  fullName: InnerLibs.Text.AdjustWhiteSpaces(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: AdjustWhiteSpaces
    path: Text.vb
    startLine: 93
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: >-
      [Extension]

      public static string AdjustWhiteSpaces(this string Text)
    parameters:
    - id: Text
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function AdjustWhiteSpaces(Text As String) As String
  overload: InnerLibs.Text.AdjustWhiteSpaces*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.Alphabetize(System.String)
  commentId: M:InnerLibs.Text.Alphabetize(System.String)
  id: Alphabetize(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Alphabetize(String)
  nameWithType: Text.Alphabetize(String)
  fullName: InnerLibs.Text.Alphabetize(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Alphabetize
    path: Text.vb
    startLine: 145
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma string em ordem afabética baseada em uma outra string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string Alphabetize(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Alphabetize(Text As String) As String
  overload: InnerLibs.Text.Alphabetize*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.Append(System.String@,System.String)
  commentId: M:InnerLibs.Text.Append(System.String@,System.String)
  id: Append(System.String@,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Append(ref String, String)
  nameWithType: Text.Append(ref String, String)
  fullName: InnerLibs.Text.Append(ref System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Append
    path: Text.vb
    startLine: 157
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAdiciona texto ao final de uma string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string Append(this ref string Text, string AppendText)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: AppendText
      type: System.String
      description: Texto adicional
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Append(ByRef Text As String, AppendText As String) As String
  overload: InnerLibs.Text.Append*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Append(ByRef String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Append(ByRef System.String, System.String)
  name.vb: Append(ByRef String, String)
- uid: InnerLibs.Text.AppendIf(System.String@,System.String,System.Boolean)
  commentId: M:InnerLibs.Text.AppendIf(System.String@,System.String,System.Boolean)
  id: AppendIf(System.String@,System.String,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: AppendIf(ref String, String, Boolean)
  nameWithType: Text.AppendIf(ref String, String, Boolean)
  fullName: InnerLibs.Text.AppendIf(ref System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: AppendIf
    path: Text.vb
    startLine: 169
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAdiciona texto ao final de uma string se um criterio for cumprido\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string AppendIf(this ref string Text, string AppendText, bool Test)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: AppendText
      type: System.String
      description: Texto adicional
    - id: Test
      type: System.Boolean
      description: Teste
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function AppendIf(ByRef Text As String, AppendText As String, Test As Boolean) As String
  overload: InnerLibs.Text.AppendIf*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.AppendIf(ByRef String, String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.AppendIf(ByRef System.String, System.String, System.Boolean)
  name.vb: AppendIf(ByRef String, String, Boolean)
- uid: InnerLibs.Text.ApplySpaceOnWrapChars(System.String)
  commentId: M:InnerLibs.Text.ApplySpaceOnWrapChars(System.String)
  id: ApplySpaceOnWrapChars(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ApplySpaceOnWrapChars(String)
  nameWithType: Text.ApplySpaceOnWrapChars(String)
  fullName: InnerLibs.Text.ApplySpaceOnWrapChars(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ApplySpaceOnWrapChars
    path: Text.vb
    startLine: 181
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAplica espacos em todos os caracteres de encapsulamento\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ApplySpaceOnWrapChars(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ApplySpaceOnWrapChars(Text As String) As String
  overload: InnerLibs.Text.ApplySpaceOnWrapChars*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.Censor(System.String@,System.Collections.Generic.List{System.String},System.Char)
  commentId: M:InnerLibs.Text.Censor(System.String@,System.Collections.Generic.List{System.String},System.Char)
  id: Censor(System.String@,System.Collections.Generic.List{System.String},System.Char)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Censor(ref String, List<String>, Char)
  nameWithType: Text.Censor(ref String, List<String>, Char)
  fullName: InnerLibs.Text.Censor(ref System.String, System.Collections.Generic.List<System.String>, System.Char)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Censor
    path: Text.vb
    startLine: 196
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCensura as palavras de um texto substituindo as palavras indesejadas por * (ou outro\ncaractere desejado) e retorna um valor indicando se o texto precisou ser censurado\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool Censor(this ref string Text, List<string> BadWords, char CensorshipCharacter = '*')
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: BadWords
      type: System.Collections.Generic.List{System.String}
      description: Lista de palavras indesejadas
    - id: CensorshipCharacter
      type: System.Char
      description: Caractere que será aplicado nas palavras censuradas
    return:
      type: System.Boolean
      description: TRUE se a frase precisou ser censurada, FALSE se a frase não precisou de censura
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Censor(ByRef Text As String, BadWords As List(Of String), CensorshipCharacter As Char = "*"c) As Boolean
  overload: InnerLibs.Text.Censor*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Censor(ByRef String, List(Of String), Char)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Censor(ByRef System.String, System.Collections.Generic.List(Of System.String), System.Char)
  name.vb: Censor(ByRef String, List(Of String), Char)
- uid: InnerLibs.Text.Censor(System.String,System.Char,System.String[])
  commentId: M:InnerLibs.Text.Censor(System.String,System.Char,System.String[])
  id: Censor(System.String,System.Char,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Censor(String, Char, String[])
  nameWithType: Text.Censor(String, Char, String[])
  fullName: InnerLibs.Text.Censor(System.String, System.Char, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Censor
    path: Text.vb
    startLine: 225
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um novo texto censurando as palavras de um texto substituindo as palavras indesejadas\npor um caractere desejado)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string Censor(this string Text, char CensorshipCharacter, params string[] BadWords)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: CensorshipCharacter
      type: System.Char
      description: Caractere que será aplicado nas palavras censuradas
    - id: BadWords
      type: System.String[]
      description: Array de palavras indesejadas
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Censor(Text As String, CensorshipCharacter As Char, ParamArray BadWords As String()) As String
  overload: InnerLibs.Text.Censor*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Censor(String, Char, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Censor(System.String, System.Char, System.String())
  name.vb: Censor(String, Char, String())
- uid: InnerLibs.Text.ContainsAll(System.String,System.String[])
  commentId: M:InnerLibs.Text.ContainsAll(System.String,System.String[])
  id: ContainsAll(System.String,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ContainsAll(String, String[])
  nameWithType: Text.ContainsAll(String, String[])
  fullName: InnerLibs.Text.ContainsAll(System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ContainsAll
    path: Text.vb
    startLine: 238
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se uma String contém todos os valores especificados\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool ContainsAll(this string Text, params string[] Values)
    parameters:
    - id: Text
      type: System.String
      description: Texto correspondente
    - id: Values
      type: System.String[]
      description: Lista de valores
    return:
      type: System.Boolean
      description: True se conter todos os valores, false se não
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ContainsAll(Text As String, ParamArray Values As String()) As Boolean
  overload: InnerLibs.Text.ContainsAll*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.ContainsAll(String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.ContainsAll(System.String, System.String())
  name.vb: ContainsAll(String, String())
- uid: InnerLibs.Text.ContainsAll(System.String,System.StringComparison,System.String[])
  commentId: M:InnerLibs.Text.ContainsAll(System.String,System.StringComparison,System.String[])
  id: ContainsAll(System.String,System.StringComparison,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ContainsAll(String, StringComparison, String[])
  nameWithType: Text.ContainsAll(String, StringComparison, String[])
  fullName: InnerLibs.Text.ContainsAll(System.String, System.StringComparison, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ContainsAll
    path: Text.vb
    startLine: 255
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se uma String contém todos os valores especificados\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool ContainsAll(this string Text, StringComparison ComparisonType, params string[] Values)
    parameters:
    - id: Text
      type: System.String
      description: Texto correspondente
    - id: ComparisonType
      type: System.StringComparison
      description: Tipo de comparacao
    - id: Values
      type: System.String[]
      description: Lista de valores
    return:
      type: System.Boolean
      description: True se conter algum valor, false se não
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ContainsAll(Text As String, ComparisonType As StringComparison, ParamArray Values As String()) As Boolean
  overload: InnerLibs.Text.ContainsAll*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.ContainsAll(String, StringComparison, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.ContainsAll(System.String, System.StringComparison, System.String())
  name.vb: ContainsAll(String, StringComparison, String())
- uid: InnerLibs.Text.ContainsAny(System.String,System.String[])
  commentId: M:InnerLibs.Text.ContainsAny(System.String,System.String[])
  id: ContainsAny(System.String,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ContainsAny(String, String[])
  nameWithType: Text.ContainsAny(String, String[])
  fullName: InnerLibs.Text.ContainsAny(System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ContainsAny
    path: Text.vb
    startLine: 271
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se uma String contém qualquer um dos valores especificados\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool ContainsAny(this string Text, params string[] Values)
    parameters:
    - id: Text
      type: System.String
      description: Texto correspondente
    - id: Values
      type: System.String[]
      description: Lista de valores
    return:
      type: System.Boolean
      description: True se conter algum valor, false se não
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ContainsAny(Text As String, ParamArray Values As String()) As Boolean
  overload: InnerLibs.Text.ContainsAny*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.ContainsAny(String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.ContainsAny(System.String, System.String())
  name.vb: ContainsAny(String, String())
- uid: InnerLibs.Text.ContainsAny(System.String,System.StringComparison,System.String[])
  commentId: M:InnerLibs.Text.ContainsAny(System.String,System.StringComparison,System.String[])
  id: ContainsAny(System.String,System.StringComparison,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ContainsAny(String, StringComparison, String[])
  nameWithType: Text.ContainsAny(String, StringComparison, String[])
  fullName: InnerLibs.Text.ContainsAny(System.String, System.StringComparison, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ContainsAny
    path: Text.vb
    startLine: 288
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se uma String contém qualquer um dos valores especificados\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool ContainsAny(this string Text, StringComparison ComparisonType, params string[] Values)
    parameters:
    - id: Text
      type: System.String
      description: Texto correspondente
    - id: ComparisonType
      type: System.StringComparison
      description: Tipo de comparacao
    - id: Values
      type: System.String[]
      description: Lista de valores
    return:
      type: System.Boolean
      description: True se conter algum valor, false se não
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ContainsAny(Text As String, ComparisonType As StringComparison, ParamArray Values As String()) As Boolean
  overload: InnerLibs.Text.ContainsAny*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.ContainsAny(String, StringComparison, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.ContainsAny(System.String, System.StringComparison, System.String())
  name.vb: ContainsAny(String, StringComparison, String())
- uid: InnerLibs.Text.CountCharacter(System.String,System.Char)
  commentId: M:InnerLibs.Text.CountCharacter(System.String,System.Char)
  id: CountCharacter(System.String,System.Char)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: CountCharacter(String, Char)
  nameWithType: Text.CountCharacter(String, Char)
  fullName: InnerLibs.Text.CountCharacter(System.String, System.Char)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: CountCharacter
    path: Text.vb
    startLine: 304
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nConta os caracters especificos de uma string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static int CountCharacter(this string Text, char Character)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: Character
      type: System.Char
      description: Caractere
    return:
      type: System.Int32
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function CountCharacter(Text As String, Character As Char) As Integer
  overload: InnerLibs.Text.CountCharacter*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.CountWords(System.String,System.Boolean,System.String[])
  commentId: M:InnerLibs.Text.CountWords(System.String,System.Boolean,System.String[])
  id: CountWords(System.String,System.Boolean,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: CountWords(String, Boolean, String[])
  nameWithType: Text.CountWords(String, Boolean, String[])
  fullName: InnerLibs.Text.CountWords(System.String, System.Boolean, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: CountWords
    path: Text.vb
    startLine: 318
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna as plavaras contidas em uma frase em ordem alfabética e sua respectiva quantidade\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Dictionary<string, long> CountWords(this string Text, bool RemoveDiacritics = true, string[] Words = null)
    parameters:
    - id: Text
      type: System.String
      description: TExto
    - id: RemoveDiacritics
      type: System.Boolean
      description: indica se os acentos devem ser removidos das palavras
    - id: Words
      type: System.String[]
      description: "\nDesconsidera outras palavras e busca a quantidadade de cada palavra especificada em um array\n"
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Int64}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function CountWords(Text As String, RemoveDiacritics As Boolean = True, Words As String() = Nothing) As Dictionary(Of String, Long)
  overload: InnerLibs.Text.CountWords*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.CountWords(String, Boolean, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.CountWords(System.String, System.Boolean, System.String())
  name.vb: CountWords(String, Boolean, String())
- uid: InnerLibs.Text.CreateElement(System.String)
  commentId: M:InnerLibs.Text.CreateElement(System.String)
  id: CreateElement(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: CreateElement(String)
  nameWithType: Text.CreateElement(String)
  fullName: InnerLibs.Text.CreateElement(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: CreateElement
    path: Text.vb
    startLine: 344
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um elemento HTML a partir de uma string HTML\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static HtmlGenericControl CreateElement(this string HTMLString)
    parameters:
    - id: HTMLString
      type: System.String
      description: String contendo o HTML
    return:
      type: System.Web.UI.HtmlControls.HtmlGenericControl
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function CreateElement(HTMLString As String) As HtmlGenericControl
  overload: InnerLibs.Text.CreateElement*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.Decrement(System.Int32@,System.Int32)
  commentId: M:InnerLibs.Text.Decrement(System.Int32@,System.Int32)
  id: Decrement(System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Decrement(ref Int32, Int32)
  nameWithType: Text.Decrement(ref Int32, Int32)
  fullName: InnerLibs.Text.Decrement(ref System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Decrement
    path: Text.vb
    startLine: 364
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nDecrementa em 1 ou mais um numero inteiro\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static int Decrement(this ref int Number, int Amount = 1)
    parameters:
    - id: Number
      type: System.Int32
      description: Numero
    - id: Amount
      type: System.Int32
      description: QUantidade que será removida
    return:
      type: System.Int32
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Decrement(ByRef Number As Integer, Amount As Integer = 1) As Integer
  overload: InnerLibs.Text.Decrement*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Decrement(ByRef Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Decrement(ByRef System.Int32, System.Int32)
  name.vb: Decrement(ByRef Int32, Int32)
- uid: InnerLibs.Text.Decrement(System.Int64@,System.Int32)
  commentId: M:InnerLibs.Text.Decrement(System.Int64@,System.Int32)
  id: Decrement(System.Int64@,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Decrement(ref Int64, Int32)
  nameWithType: Text.Decrement(ref Int64, Int32)
  fullName: InnerLibs.Text.Decrement(ref System.Int64, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Decrement
    path: Text.vb
    startLine: 376
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nDecrementa em 1 ou mais um numero inteiro\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static int Decrement(this ref long Number, int Amount = 1)
    parameters:
    - id: Number
      type: System.Int64
      description: Numero
    - id: Amount
      type: System.Int32
      description: QUantidade que será removida
    return:
      type: System.Int32
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Decrement(ByRef Number As Long, Amount As Integer = 1) As Integer
  overload: InnerLibs.Text.Decrement*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Decrement(ByRef Int64, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Decrement(ByRef System.Int64, System.Int32)
  name.vb: Decrement(ByRef Int64, Int32)
- uid: InnerLibs.Text.DeleteLine(System.String@,System.Int32)
  commentId: M:InnerLibs.Text.DeleteLine(System.String@,System.Int32)
  id: DeleteLine(System.String@,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: DeleteLine(ref String, Int32)
  nameWithType: Text.DeleteLine(ref String, Int32)
  fullName: InnerLibs.Text.DeleteLine(ref System.String, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: DeleteLine
    path: Text.vb
    startLine: 382
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: >-
      [Extension]

      public static string DeleteLine(this ref string Text, int LineIndex)
    parameters:
    - id: Text
      type: System.String
    - id: LineIndex
      type: System.Int32
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function DeleteLine(ByRef Text As String, LineIndex As Integer) As String
  overload: InnerLibs.Text.DeleteLine*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.DeleteLine(ByRef String, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.DeleteLine(ByRef System.String, System.Int32)
  name.vb: DeleteLine(ByRef String, Int32)
- uid: InnerLibs.Text.DistinctCount(System.String[])
  commentId: M:InnerLibs.Text.DistinctCount(System.String[])
  id: DistinctCount(System.String[])
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: DistinctCount(String[])
  nameWithType: Text.DistinctCount(String[])
  fullName: InnerLibs.Text.DistinctCount(System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: DistinctCount
    path: Text.vb
    startLine: 410
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um dicionário com as palavras de uma lista e a quantidade de cada uma.\n"
  example: []
  syntax:
    content: public static Dictionary<string, long> DistinctCount(params string[] List)
    parameters:
    - id: List
      type: System.String[]
      description: Lista de palavras
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Int64}
      description: ''
    content.vb: Public Shared Function DistinctCount(ParamArray List As String()) As Dictionary(Of String, Long)
  overload: InnerLibs.Text.DistinctCount*
  nameWithType.vb: Text.DistinctCount(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.DistinctCount(System.String())
  name.vb: DistinctCount(String())
- uid: InnerLibs.Text.DistinctCount(System.String)
  commentId: M:InnerLibs.Text.DistinctCount(System.String)
  id: DistinctCount(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: DistinctCount(String)
  nameWithType: Text.DistinctCount(String)
  fullName: InnerLibs.Text.DistinctCount(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: DistinctCount
    path: Text.vb
    startLine: 419
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um dicionário com as palavras de uma frase e sua respectiva quantidade.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Dictionary<string, long> DistinctCount(this string Phrase)
    parameters:
    - id: Phrase
      type: System.String
      description: Lista de palavras
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Int64}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function DistinctCount(Phrase As String) As Dictionary(Of String, Long)
  overload: InnerLibs.Text.DistinctCount*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.EndsWithAny(System.String,System.String[])
  commentId: M:InnerLibs.Text.EndsWithAny(System.String,System.String[])
  id: EndsWithAny(System.String,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: EndsWithAny(String, String[])
  nameWithType: Text.EndsWithAny(String, String[])
  fullName: InnerLibs.Text.EndsWithAny(System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: EndsWithAny
    path: Text.vb
    startLine: 429
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se uma string termina com alguma outra string de um array\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool EndsWithAny(this string Text, params string[] Words)
    parameters:
    - id: Text
      type: System.String
      description: ''
    - id: Words
      type: System.String[]
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function EndsWithAny(Text As String, ParamArray Words As String()) As Boolean
  overload: InnerLibs.Text.EndsWithAny*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.EndsWithAny(String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.EndsWithAny(System.String, System.String())
  name.vb: EndsWithAny(String, String())
- uid: InnerLibs.Text.FindTelephoneNumbers(System.String)
  commentId: M:InnerLibs.Text.FindTelephoneNumbers(System.String)
  id: FindTelephoneNumbers(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: FindTelephoneNumbers(String)
  nameWithType: Text.FindTelephoneNumbers(String)
  fullName: InnerLibs.Text.FindTelephoneNumbers(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: FindTelephoneNumbers
    path: Text.vb
    startLine: 438
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nProcurea numeros de telefone em um texto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static List<string> FindTelephoneNumbers(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: ''
    return:
      type: System.Collections.Generic.List{System.String}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function FindTelephoneNumbers(Text As String) As List(Of String)
  overload: InnerLibs.Text.FindTelephoneNumbers*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.FixBreakLines(System.String)
  commentId: M:InnerLibs.Text.FixBreakLines(System.String)
  id: FixBreakLines(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: FixBreakLines(String)
  nameWithType: Text.FixBreakLines(String)
  fullName: InnerLibs.Text.FixBreakLines(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: FixBreakLines
    path: Text.vb
    startLine: 451
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma quebras de linha HTML em quebras de linha comuns ao .net\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string FixBreakLines(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: Texto correspondente
    return:
      type: System.String
      description: String fixada
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function FixBreakLines(Text As String) As String
  overload: InnerLibs.Text.FixBreakLines*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.FixCaptalization(System.String)
  commentId: M:InnerLibs.Text.FixCaptalization(System.String)
  id: FixCaptalization(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: FixCaptalization(String)
  nameWithType: Text.FixCaptalization(String)
  fullName: InnerLibs.Text.FixCaptalization(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: FixCaptalization
    path: Text.vb
    startLine: 464
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove os espaços excessivos (duplos) no meio da frase e remove os espaços no inicio e final\n(é um alias para <xref href=\"InnerLibs.Text.AdjustWhiteSpaces(System.String)\" data-throw-if-not-resolved=\"false\"></xref> da frase\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string FixCaptalization(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: Frase a ser manipulada
    return:
      type: System.String
      description: Uma String com a frase corrigida
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function FixCaptalization(Text As String) As String
  overload: InnerLibs.Text.FixCaptalization*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.FixPunctuation(System.String@,System.String,System.Boolean)
  commentId: M:InnerLibs.Text.FixPunctuation(System.String@,System.String,System.Boolean)
  id: FixPunctuation(System.String@,System.String,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: FixPunctuation(ref String, String, Boolean)
  nameWithType: Text.FixPunctuation(ref String, String, Boolean)
  fullName: InnerLibs.Text.FixPunctuation(ref System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: FixPunctuation
    path: Text.vb
    startLine: 503
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAdciona pontuaçao ao final de uma string se a mesma não terminar com alguma pontuacao.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string FixPunctuation(this ref string Text, string Punctuation = ".", bool ForceSpecificPunctuation = false)
    parameters:
    - id: Text
      type: System.String
      description: Frase, Texto a ser pontuado
    - id: Punctuation
      type: System.String
      description: Ponto a ser adicionado na frase se a mesma não estiver com pontuacao
    - id: ForceSpecificPunctuation
      type: System.Boolean
    return:
      type: System.String
      description: Frase corretamente pontuada
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function FixPunctuation(ByRef Text As String, Punctuation As String = ".", ForceSpecificPunctuation As Boolean = False) As String
  overload: InnerLibs.Text.FixPunctuation*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.FixPunctuation(ByRef String, String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.FixPunctuation(ByRef System.String, System.String, System.Boolean)
  name.vb: FixPunctuation(ByRef String, String, Boolean)
- uid: InnerLibs.Text.EscapeQuotesToQuery(System.String)
  commentId: M:InnerLibs.Text.EscapeQuotesToQuery(System.String)
  id: EscapeQuotesToQuery(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: EscapeQuotesToQuery(String)
  nameWithType: Text.EscapeQuotesToQuery(String)
  fullName: InnerLibs.Text.EscapeQuotesToQuery(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: EscapeQuotesToQuery
    path: Text.vb
    startLine: 522
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nPrepara uma string com aspas simples para uma Query TransactSQL\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string EscapeQuotesToQuery(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: Texto a ser tratado
    return:
      type: System.String
      description: String pornta para a query
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function EscapeQuotesToQuery(Text As String) As String
  overload: InnerLibs.Text.EscapeQuotesToQuery*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.FixText(System.String)
  commentId: M:InnerLibs.Text.FixText(System.String)
  id: FixText(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: FixText(String)
  nameWithType: Text.FixText(String)
  fullName: InnerLibs.Text.FixText(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: FixText
    path: Text.vb
    startLine: 533
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nArruma a ortografia do texto captalizando corretamente, adcionando pontução ao final de frase\ncaso nescessário e removendo espaços excessivos ou incorretos\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string FixText(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function FixText(Text As String) As String
  overload: InnerLibs.Text.FixText*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.Format(System.String,System.Object[])
  commentId: M:InnerLibs.Text.Format(System.String,System.Object[])
  id: Format(System.String,System.Object[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Format(String, Object[])
  nameWithType: Text.Format(String, Object[])
  fullName: InnerLibs.Text.Format(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Format
    path: Text.vb
    startLine: 543
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nExtension Method para <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string Format(this string Text, params object[] Args)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: Args
      type: System.Object[]
      description: Objetos de substituição
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Format(Text As String, ParamArray Args As Object()) As String
  overload: InnerLibs.Text.Format*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Format(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Format(System.String, System.Object())
  name.vb: Format(String, Object())
- uid: InnerLibs.Text.GetAfter(System.String,System.String)
  commentId: M:InnerLibs.Text.GetAfter(System.String,System.String)
  id: GetAfter(System.String,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetAfter(String, String)
  nameWithType: Text.GetAfter(String, String)
  fullName: InnerLibs.Text.GetAfter(System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetAfter
    path: Text.vb
    startLine: 553
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um texto posterior a outro\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string GetAfter(this string Text, string Value)
    parameters:
    - id: Text
      type: System.String
      description: Texto correspondente
    - id: Value
      type: System.String
      description: Texto Posterior
    return:
      type: System.String
      description: Uma string com o valor posterior ao valor especificado.
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetAfter(Text As String, Value As String) As String
  overload: InnerLibs.Text.GetAfter*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.GetAllBetween(System.String,System.String,System.String)
  commentId: M:InnerLibs.Text.GetAllBetween(System.String,System.String,System.String)
  id: GetAllBetween(System.String,System.String,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetAllBetween(String, String, String)
  nameWithType: Text.GetAllBetween(String, String, String)
  fullName: InnerLibs.Text.GetAllBetween(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetAllBetween
    path: Text.vb
    startLine: 569
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna todas as ocorrencias de um texto entre dois textos\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string[] GetAllBetween(this string Text, string Before, string After = "")
    parameters:
    - id: Text
      type: System.String
      description: O texto correspondente
    - id: Before
      type: System.String
      description: O texto Anterior
    - id: After
      type: System.String
      description: O texto Posterior
    return:
      type: System.String[]
      description: Uma String com o texto entre o texto anterior e posterior
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetAllBetween(Text As String, Before As String, After As String = "") As String()
  overload: InnerLibs.Text.GetAllBetween*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.GetBefore(System.String,System.String)
  commentId: M:InnerLibs.Text.GetBefore(System.String,System.String)
  id: GetBefore(System.String,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetBefore(String, String)
  nameWithType: Text.GetBefore(String, String)
  fullName: InnerLibs.Text.GetBefore(System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetBefore
    path: Text.vb
    startLine: 585
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um texto anterior a outro\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string GetBefore(this string Text, string Value)
    parameters:
    - id: Text
      type: System.String
      description: Texto correspondente
    - id: Value
      type: System.String
      description: Texto Anterior
    return:
      type: System.String
      description: Uma string com o valor anterior ao valor especificado.
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetBefore(Text As String, Value As String) As String
  overload: InnerLibs.Text.GetBefore*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.GetBetween(System.String,System.String,System.String)
  commentId: M:InnerLibs.Text.GetBetween(System.String,System.String,System.String)
  id: GetBetween(System.String,System.String,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetBetween(String, String, String)
  nameWithType: Text.GetBetween(String, String, String)
  fullName: InnerLibs.Text.GetBetween(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetBetween
    path: Text.vb
    startLine: 601
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o texto entre dois textos\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string GetBetween(this string Text, string Before, string After)
    parameters:
    - id: Text
      type: System.String
      description: O texto correspondente
    - id: Before
      type: System.String
      description: O texto Anterior
    - id: After
      type: System.String
      description: O texto Posterior
    return:
      type: System.String
      description: Uma String com o texto entre o texto anterior e posterior
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetBetween(Text As String, Before As String, After As String) As String
  overload: InnerLibs.Text.GetBetween*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.GetDomain(System.Uri,System.Boolean)
  commentId: M:InnerLibs.Text.GetDomain(System.Uri,System.Boolean)
  id: GetDomain(System.Uri,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetDomain(Uri, Boolean)
  nameWithType: Text.GetDomain(Uri, Boolean)
  fullName: InnerLibs.Text.GetDomain(System.Uri, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetDomain
    path: Text.vb
    startLine: 622
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nPega o dominio principal de uma URL\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string GetDomain(this Uri URL, bool RemoveFirstSubdomain = false)
    parameters:
    - id: URL
      type: System.Uri
      description: URL
    - id: RemoveFirstSubdomain
      type: System.Boolean
    return:
      type: System.String
      description: nome do dominio
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetDomain(URL As Uri, RemoveFirstSubdomain As Boolean = False) As String
  overload: InnerLibs.Text.GetDomain*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.GetDomain(System.String,System.Boolean)
  commentId: M:InnerLibs.Text.GetDomain(System.String,System.Boolean)
  id: GetDomain(System.String,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetDomain(String, Boolean)
  nameWithType: Text.GetDomain(String, Boolean)
  fullName: InnerLibs.Text.GetDomain(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetDomain
    path: Text.vb
    startLine: 640
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nPega o dominio principal de uma URL\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string GetDomain(this string URL, bool RemoveFirstSubdomain = false)
    parameters:
    - id: URL
      type: System.String
      description: URL
    - id: RemoveFirstSubdomain
      type: System.Boolean
    return:
      type: System.String
      description: nome do dominio
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetDomain(URL As String, RemoveFirstSubdomain As Boolean = False) As String
  overload: InnerLibs.Text.GetDomain*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.GetMiddleChars(System.String,System.Int32)
  commentId: M:InnerLibs.Text.GetMiddleChars(System.String,System.Int32)
  id: GetMiddleChars(System.String,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetMiddleChars(String, Int32)
  nameWithType: Text.GetMiddleChars(String, Int32)
  fullName: InnerLibs.Text.GetMiddleChars(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetMiddleChars
    path: Text.vb
    startLine: 652
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna N caracteres de uma string a partir do caractere encontrado no centro\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string GetMiddleChars(this string Text, int Length)
    parameters:
    - id: Text
      type: System.String
      description: ''
    - id: Length
      type: System.Int32
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetMiddleChars(Text As String, Length As Integer) As String
  overload: InnerLibs.Text.GetMiddleChars*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.GetFirstChars(System.String,System.Int32)
  commentId: M:InnerLibs.Text.GetFirstChars(System.String,System.Int32)
  id: GetFirstChars(System.String,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetFirstChars(String, Int32)
  nameWithType: Text.GetFirstChars(String, Int32)
  fullName: InnerLibs.Text.GetFirstChars(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetFirstChars
    path: Text.vb
    startLine: 669
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: >-
      [Extension]

      public static string GetFirstChars(this string Text, int Number = 1)
    parameters:
    - id: Text
      type: System.String
    - id: Number
      type: System.Int32
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetFirstChars(Text As String, Number As Integer = 1) As String
  overload: InnerLibs.Text.GetFirstChars*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.GetKeyWords(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.String[],System.String[])
  commentId: M:InnerLibs.Text.GetKeyWords(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.String[],System.String[])
  id: GetKeyWords(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.String[],System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetKeyWords(String, Int32, Int32, Int32, Boolean, String[], String[])
  nameWithType: Text.GetKeyWords(String, Int32, Int32, Int32, Boolean, String[], String[])
  fullName: InnerLibs.Text.GetKeyWords(System.String, System.Int32, System.Int32, System.Int32, System.Boolean, System.String[], System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetKeyWords
    path: Text.vb
    startLine: 691
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nExtrai palavras chave de um texto seguindo critérios especificos.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Dictionary<string, long> GetKeyWords(this string TextOrURL, int MinWordCount = 1, int MinWordLenght = 1, int LimitCollection = 0, bool RemoveDiacritics = true, string[] IgnoredWords = null, string[] ImportantWords = null)
    parameters:
    - id: TextOrURL
      type: System.String
      description: Texto principal ou URL
    - id: MinWordCount
      type: System.Int32
      description: Minimo de aparições da palavra no texto
    - id: MinWordLenght
      type: System.Int32
      description: Tamanho minimo da palavra
    - id: LimitCollection
      type: System.Int32
    - id: RemoveDiacritics
      type: System.Boolean
      description: TRUE para remover acentos
    - id: IgnoredWords
      type: System.String[]
      description: palavras que sempre serão ignoradas
    - id: ImportantWords
      type: System.String[]
      description: "\nPalavras importantes. elas sempre serão adicionadas a lista de tags desde que não estejam nas <code data-dev-comment-type=\"paramref\" class=\"paramref\">IgnoredWords</code>\n"
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Int64}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetKeyWords(TextOrURL As String, MinWordCount As Integer = 1, MinWordLenght As Integer = 1, LimitCollection As Integer = 0, RemoveDiacritics As Boolean = True, IgnoredWords As String() = Nothing, ImportantWords As String() = Nothing) As Dictionary(Of String, Long)
  overload: InnerLibs.Text.GetKeyWords*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.GetKeyWords(String, Int32, Int32, Int32, Boolean, String(), String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.GetKeyWords(System.String, System.Int32, System.Int32, System.Int32, System.Boolean, System.String(), System.String())
  name.vb: GetKeyWords(String, Int32, Int32, Int32, Boolean, String(), String())
- uid: InnerLibs.Text.GetLastChars(System.String,System.Int32)
  commentId: M:InnerLibs.Text.GetLastChars(System.String,System.Int32)
  id: GetLastChars(System.String,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetLastChars(String, Int32)
  nameWithType: Text.GetLastChars(String, Int32)
  fullName: InnerLibs.Text.GetLastChars(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetLastChars
    path: Text.vb
    startLine: 744
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: >-
      [Extension]

      public static string GetLastChars(this string Text, int Number = 1)
    parameters:
    - id: Text
      type: System.String
    - id: Number
      type: System.Int32
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetLastChars(Text As String, Number As Integer = 1) As String
  overload: InnerLibs.Text.GetLastChars*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.GetOppositeWrapChar(System.String)
  commentId: M:InnerLibs.Text.GetOppositeWrapChar(System.String)
  id: GetOppositeWrapChar(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetOppositeWrapChar(String)
  nameWithType: Text.GetOppositeWrapChar(String)
  fullName: InnerLibs.Text.GetOppositeWrapChar(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetOppositeWrapChar
    path: Text.vb
    startLine: 758
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o caractere de encapsulamento oposto ao caractere indicado\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string GetOppositeWrapChar(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: Caractere
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetOppositeWrapChar(Text As String) As String
  overload: InnerLibs.Text.GetOppositeWrapChar*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.GetRandomItem``1(System.Collections.Generic.List{``0})
  commentId: M:InnerLibs.Text.GetRandomItem``1(System.Collections.Generic.List{``0})
  id: GetRandomItem``1(System.Collections.Generic.List{``0})
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetRandomItem<Type>(List<Type>)
  nameWithType: Text.GetRandomItem<Type>(List<Type>)
  fullName: InnerLibs.Text.GetRandomItem<Type>(System.Collections.Generic.List<Type>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetRandomItem
    path: Text.vb
    startLine: 811
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nSorteia um item da Lista\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Type GetRandomItem<Type>(this List<Type> List)
    parameters:
    - id: List
      type: System.Collections.Generic.List{{Type}}
      description: Lista
    typeParameters:
    - id: Type
      description: Tipo de lista
    return:
      type: '{Type}'
      description: Um valor do tipo especificado
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetRandomItem(Of Type)(List As List(Of Type)) As Type
  overload: InnerLibs.Text.GetRandomItem*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.GetRandomItem(Of Type)(List(Of Type))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.GetRandomItem(Of Type)(System.Collections.Generic.List(Of Type))
  name.vb: GetRandomItem(Of Type)(List(Of Type))
- uid: InnerLibs.Text.GetRandomItem``1(``0[])
  commentId: M:InnerLibs.Text.GetRandomItem``1(``0[])
  id: GetRandomItem``1(``0[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetRandomItem<Type>(Type[])
  nameWithType: Text.GetRandomItem<Type>(Type[])
  fullName: InnerLibs.Text.GetRandomItem<Type>(Type[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetRandomItem
    path: Text.vb
    startLine: 822
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nSorteia um item da Lista\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Type GetRandomItem<Type>(this Type[] Array)
    parameters:
    - id: Array
      type: '{Type}[]'
      description: Matriz
    typeParameters:
    - id: Type
      description: Tipo da Matriz
    return:
      type: '{Type}'
      description: Um valor do tipo especificado
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetRandomItem(Of Type)(Array As Type()) As Type
  overload: InnerLibs.Text.GetRandomItem*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.GetRandomItem(Of Type)(Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.GetRandomItem(Of Type)(Type())
  name.vb: GetRandomItem(Of Type)(Type())
- uid: InnerLibs.Text.GetRelativeURL(System.Uri)
  commentId: M:InnerLibs.Text.GetRelativeURL(System.Uri)
  id: GetRelativeURL(System.Uri)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetRelativeURL(Uri)
  nameWithType: Text.GetRelativeURL(Uri)
  fullName: InnerLibs.Text.GetRelativeURL(System.Uri)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetRelativeURL
    path: Text.vb
    startLine: 832
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o caminho relativo da url\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string GetRelativeURL(this Uri URL)
    parameters:
    - id: URL
      type: System.Uri
      description: Url
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetRelativeURL(URL As Uri) As String
  overload: InnerLibs.Text.GetRelativeURL*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.GetRelativeURL(System.String)
  commentId: M:InnerLibs.Text.GetRelativeURL(System.String)
  id: GetRelativeURL(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetRelativeURL(String)
  nameWithType: Text.GetRelativeURL(String)
  fullName: InnerLibs.Text.GetRelativeURL(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetRelativeURL
    path: Text.vb
    startLine: 842
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o caminho relativo da url\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string GetRelativeURL(this string URL)
    parameters:
    - id: URL
      type: System.String
      description: Url
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetRelativeURL(URL As String) As String
  overload: InnerLibs.Text.GetRelativeURL*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.GetWords(System.String)
  commentId: M:InnerLibs.Text.GetWords(System.String)
  id: GetWords(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetWords(String)
  nameWithType: Text.GetWords(String)
  fullName: InnerLibs.Text.GetWords(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetWords
    path: Text.vb
    startLine: 852
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma lista de palavras encontradas no texto em ordem alfabetica\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IOrderedEnumerable<string> GetWords(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: ''
    return:
      type: System.Linq.IOrderedEnumerable{System.String}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetWords(Text As String) As IOrderedEnumerable(Of String)
  overload: InnerLibs.Text.GetWords*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.GetWrappedText(System.String,System.String,System.Boolean)
  commentId: M:InnerLibs.Text.GetWrappedText(System.String,System.String,System.Boolean)
  id: GetWrappedText(System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: GetWrappedText(String, String, Boolean)
  nameWithType: Text.GetWrappedText(String, String, Boolean)
  fullName: InnerLibs.Text.GetWrappedText(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: GetWrappedText
    path: Text.vb
    startLine: 866
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCaptura todas as sentenças que estão entre aspas ou parentesis ou chaves ou colchetes em um texto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string[] GetWrappedText(this string Text, string Character = "\"", bool ExcludeWrapChars = true)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: Character
      type: System.String
    - id: ExcludeWrapChars
      type: System.Boolean
    return:
      type: System.String[]
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetWrappedText(Text As String, Character As String = """", ExcludeWrapChars As Boolean = True) As String()
  overload: InnerLibs.Text.GetWrappedText*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.HtmlDecode(System.String)
  commentId: M:InnerLibs.Text.HtmlDecode(System.String)
  id: HtmlDecode(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: HtmlDecode(String)
  nameWithType: Text.HtmlDecode(String)
  fullName: InnerLibs.Text.HtmlDecode(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: HtmlDecode
    path: Text.vb
    startLine: 885
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um texto com entidades HTML convertidas para caracteres e tags BR em breaklines\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string HtmlDecode(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: string HTML
    return:
      type: System.String
      description: String HTML corrigido
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function HtmlDecode(Text As String) As String
  overload: InnerLibs.Text.HtmlDecode*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.HtmlEncode(System.String)
  commentId: M:InnerLibs.Text.HtmlEncode(System.String)
  id: HtmlEncode(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: HtmlEncode(String)
  nameWithType: Text.HtmlEncode(String)
  fullName: InnerLibs.Text.HtmlEncode(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: HtmlEncode
    path: Text.vb
    startLine: 896
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nEscapa o texto HTML\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string HtmlEncode(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: string HTML
    return:
      type: System.String
      description: String HTML corrigido
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function HtmlEncode(Text As String) As String
  overload: InnerLibs.Text.HtmlEncode*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.Increment(System.Int32@,System.Int32)
  commentId: M:InnerLibs.Text.Increment(System.Int32@,System.Int32)
  id: Increment(System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Increment(ref Int32, Int32)
  nameWithType: Text.Increment(ref Int32, Int32)
  fullName: InnerLibs.Text.Increment(ref System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Increment
    path: Text.vb
    startLine: 906
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nIncrementa em 1 ou mais um numero inteiro\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static int Increment(this ref int Number, int Amount = 1)
    parameters:
    - id: Number
      type: System.Int32
      description: Numero
    - id: Amount
      type: System.Int32
      description: QUantidade adicionada
    return:
      type: System.Int32
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Increment(ByRef Number As Integer, Amount As Integer = 1) As Integer
  overload: InnerLibs.Text.Increment*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Increment(ByRef Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Increment(ByRef System.Int32, System.Int32)
  name.vb: Increment(ByRef Int32, Int32)
- uid: InnerLibs.Text.Increment(System.Int64@,System.Int32)
  commentId: M:InnerLibs.Text.Increment(System.Int64@,System.Int32)
  id: Increment(System.Int64@,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Increment(ref Int64, Int32)
  nameWithType: Text.Increment(ref Int64, Int32)
  fullName: InnerLibs.Text.Increment(ref System.Int64, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Increment
    path: Text.vb
    startLine: 917
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nIncrementa em 1 ou mais um numero inteiro\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static long Increment(this ref long Number, int Amount = 1)
    parameters:
    - id: Number
      type: System.Int64
      description: Numero
    - id: Amount
      type: System.Int32
      description: QUantidade adicionada
    return:
      type: System.Int64
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Increment(ByRef Number As Long, Amount As Integer = 1) As Long
  overload: InnerLibs.Text.Increment*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Increment(ByRef Int64, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Increment(ByRef System.Int64, System.Int32)
  name.vb: Increment(ByRef Int64, Int32)
- uid: InnerLibs.Text.IsAnagramOf(System.String,System.String)
  commentId: M:InnerLibs.Text.IsAnagramOf(System.String,System.String)
  id: IsAnagramOf(System.String,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: IsAnagramOf(String, String)
  nameWithType: Text.IsAnagramOf(String, String)
  fullName: InnerLibs.Text.IsAnagramOf(System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: IsAnagramOf
    path: Text.vb
    startLine: 929
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se uma palavra é um Anagrama de outra palavra\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsAnagramOf(this string Text, string AnotherText)
    parameters:
    - id: Text
      type: System.String
      description: ''
    - id: AnotherText
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsAnagramOf(Text As String, AnotherText As String) As Boolean
  overload: InnerLibs.Text.IsAnagramOf*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.IsAny(System.String,System.String[])
  commentId: M:InnerLibs.Text.IsAny(System.String,System.String[])
  id: IsAny(System.String,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: IsAny(String, String[])
  nameWithType: Text.IsAny(String, String[])
  fullName: InnerLibs.Text.IsAny(System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: IsAny
    path: Text.vb
    startLine: 946
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCompara se uma string é igual a outras strings\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool IsAny(this string Text, params string[] Texts)
    parameters:
    - id: Text
      type: System.String
      description: string principal
    - id: Texts
      type: System.String[]
      description: strings para comparar
    return:
      type: System.Boolean
      description: TRUE se alguma das strings for igual a principal
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function IsAny(Text As String, ParamArray Texts As String()) As Boolean
  overload: InnerLibs.Text.IsAny*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.IsAny(String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.IsAny(System.String, System.String())
  name.vb: IsAny(String, String())
- uid: InnerLibs.Text.IsPalindrome(System.String,System.Boolean)
  commentId: M:InnerLibs.Text.IsPalindrome(System.String,System.Boolean)
  id: IsPalindrome(System.String,System.Boolean)
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: IsPalindrome(String, Boolean)
  nameWithType: Text.IsPalindrome(String, Boolean)
  fullName: InnerLibs.Text.IsPalindrome(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: IsPalindrome
    path: Text.vb
    startLine: 961
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se uma palavra ou frase é idêntica da direita para a esqueda bem como da esqueda\npara direita\n"
  example: []
  syntax:
    content: public static bool IsPalindrome(string Text, bool IgnoreWhiteSpaces = false)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: IgnoreWhiteSpaces
      type: System.Boolean
      description: Ignora os espaços na hora de comparar
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsPalindrome(Text As String, IgnoreWhiteSpaces As Boolean = False) As Boolean
  overload: InnerLibs.Text.IsPalindrome*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:InnerLibs.Text.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)
  id: Join``1(System.Collections.Generic.IEnumerable{``0},System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Join<Type>(IEnumerable<Type>, String)
  nameWithType: Text.Join<Type>(IEnumerable<Type>, String)
  fullName: InnerLibs.Text.Join<Type>(System.Collections.Generic.IEnumerable<Type>, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Join
    path: Text.vb
    startLine: 975
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nUne todos os valores de um objeto em uma unica string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string Join<Type>(this IEnumerable<Type> Array, string Separator = ";")
    parameters:
    - id: Array
      type: System.Collections.Generic.IEnumerable{{Type}}
      description: Objeto com os valores
    - id: Separator
      type: System.String
      description: Separador entre as strings
    typeParameters:
    - id: Type
    return:
      type: System.String
      description: string
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Join(Of Type)(Array As IEnumerable(Of Type), Separator As String = ";") As String
  overload: InnerLibs.Text.Join*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Join(Of Type)(IEnumerable(Of Type), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Join(Of Type)(System.Collections.Generic.IEnumerable(Of Type), System.String)
  name.vb: Join(Of Type)(IEnumerable(Of Type), String)
- uid: InnerLibs.Text.Join``1(``0[],System.String)
  commentId: M:InnerLibs.Text.Join``1(``0[],System.String)
  id: Join``1(``0[],System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Join<Type>(Type[], String)
  nameWithType: Text.Join<Type>(Type[], String)
  fullName: InnerLibs.Text.Join<Type>(Type[], System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Join
    path: Text.vb
    startLine: 986
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nUne todos os valores de um objeto em uma unica string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string Join<Type>(this Type[] Array, string Separator = ";")
    parameters:
    - id: Array
      type: '{Type}[]'
      description: Objeto com os valores
    - id: Separator
      type: System.String
      description: Separador entre as strings
    typeParameters:
    - id: Type
    return:
      type: System.String
      description: string
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Join(Of Type)(Array As Type(), Separator As String = ";") As String
  overload: InnerLibs.Text.Join*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Join(Of Type)(Type(), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Join(Of Type)(Type(), System.String)
  name.vb: Join(Of Type)(Type(), String)
- uid: InnerLibs.Text.Join``1(System.String,``0[])
  commentId: M:InnerLibs.Text.Join``1(System.String,``0[])
  id: Join``1(System.String,``0[])
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Join<Type>(String, Type[])
  nameWithType: Text.Join<Type>(String, Type[])
  fullName: InnerLibs.Text.Join<Type>(System.String, Type[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Join
    path: Text.vb
    startLine: 997
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nUne todos os valores de um objeto em uma unica string\n"
  example: []
  syntax:
    content: public static string Join<Type>(string Separator, params Type[] Array)
    parameters:
    - id: Separator
      type: System.String
      description: Separador entre as strings
    - id: Array
      type: '{Type}[]'
      description: Objeto com os valores
    typeParameters:
    - id: Type
    return:
      type: System.String
      description: string
    content.vb: Public Shared Function Join(Of Type)(Separator As String, ParamArray Array As Type()) As String
  overload: InnerLibs.Text.Join*
  nameWithType.vb: Text.Join(Of Type)(String, Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Join(Of Type)(System.String, Type())
  name.vb: Join(Of Type)(String, Type())
- uid: InnerLibs.Text.Join``1(System.Collections.Generic.List{``0},System.String)
  commentId: M:InnerLibs.Text.Join``1(System.Collections.Generic.List{``0},System.String)
  id: Join``1(System.Collections.Generic.List{``0},System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Join<Type>(List<Type>, String)
  nameWithType: Text.Join<Type>(List<Type>, String)
  fullName: InnerLibs.Text.Join<Type>(System.Collections.Generic.List<Type>, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Join
    path: Text.vb
    startLine: 1007
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nUne todos os valores de um objeto em uma unica string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string Join<Type>(this List<Type> List, string Separator = "")
    parameters:
    - id: List
      type: System.Collections.Generic.List{{Type}}
      description: Objeto com os valores
    - id: Separator
      type: System.String
      description: Separador entre as strings
    typeParameters:
    - id: Type
    return:
      type: System.String
      description: string
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Join(Of Type)(List As List(Of Type), Separator As String = "") As String
  overload: InnerLibs.Text.Join*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Join(Of Type)(List(Of Type), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Join(Of Type)(System.Collections.Generic.List(Of Type), System.String)
  name.vb: Join(Of Type)(List(Of Type), String)
- uid: InnerLibs.Text.MakeClean(System.String)
  commentId: M:InnerLibs.Text.MakeClean(System.String)
  id: MakeClean(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: MakeClean(String)
  nameWithType: Text.MakeClean(String)
  fullName: InnerLibs.Text.MakeClean(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: MakeClean
    path: Text.vb
    startLine: 1017
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nlimpa um texto deixando apenas os caracteres alfanumericos.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string MakeClean(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function MakeClean(Text As String) As String
  overload: InnerLibs.Text.MakeClean*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ParseDigits(System.String,System.Globalization.CultureInfo)
  commentId: M:InnerLibs.Text.ParseDigits(System.String,System.Globalization.CultureInfo)
  id: ParseDigits(System.String,System.Globalization.CultureInfo)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ParseDigits(String, CultureInfo)
  nameWithType: Text.ParseDigits(String, CultureInfo)
  fullName: InnerLibs.Text.ParseDigits(System.String, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ParseDigits
    path: Text.vb
    startLine: 1030
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove caracteres não numéricos de uma string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ParseDigits(this string Text, CultureInfo Culture = null)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: Culture
      type: System.Globalization.CultureInfo
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ParseDigits(Text As String, Culture As CultureInfo = Nothing) As String
  overload: InnerLibs.Text.ParseDigits*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ParseDigits``1(System.String,System.Globalization.CultureInfo)
  commentId: M:InnerLibs.Text.ParseDigits``1(System.String,System.Globalization.CultureInfo)
  id: ParseDigits``1(System.String,System.Globalization.CultureInfo)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ParseDigits<Type>(String, CultureInfo)
  nameWithType: Text.ParseDigits<Type>(String, CultureInfo)
  fullName: InnerLibs.Text.ParseDigits<Type>(System.String, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ParseDigits
    path: Text.vb
    startLine: 1042
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: >-
      [Extension]

      public static Type ParseDigits<Type>(this string Text, CultureInfo Culture = null)
          where Type : IConvertible
    parameters:
    - id: Text
      type: System.String
    - id: Culture
      type: System.Globalization.CultureInfo
    typeParameters:
    - id: Type
    return:
      type: '{Type}'
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ParseDigits(Of Type As IConvertible)(Text As String, Culture As CultureInfo = Nothing) As Type
  overload: InnerLibs.Text.ParseDigits*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.ParseDigits(Of Type)(String, CultureInfo)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.ParseDigits(Of Type)(System.String, System.Globalization.CultureInfo)
  name.vb: ParseDigits(Of Type)(String, CultureInfo)
- uid: InnerLibs.Text.ParseJSON``1(System.String,System.String)
  commentId: M:InnerLibs.Text.ParseJSON``1(System.String,System.String)
  id: ParseJSON``1(System.String,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ParseJSON<TypeClass>(String, String)
  nameWithType: Text.ParseJSON<TypeClass>(String, String)
  fullName: InnerLibs.Text.ParseJSON<TypeClass>(System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ParseJSON
    path: Text.vb
    startLine: 1052
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma uma JSON String em um Objeto ou Classe\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static TypeClass ParseJSON<TypeClass>(this string JSON, string DateFormat = "yyyy-MM-dd HH:mm:ss")
    parameters:
    - id: JSON
      type: System.String
      description: String JSON
    - id: DateFormat
      type: System.String
    typeParameters:
    - id: TypeClass
      description: Objeto ou Classe
    return:
      type: '{TypeClass}'
      description: Um objeto do tipo T
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ParseJSON(Of TypeClass)(JSON As String, DateFormat As String = "yyyy-MM-dd HH:mm:ss") As TypeClass
  overload: InnerLibs.Text.ParseJSON*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.ParseJSON(Of TypeClass)(String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.ParseJSON(Of TypeClass)(System.String, System.String)
  name.vb: ParseJSON(Of TypeClass)(String, String)
- uid: InnerLibs.Text.ParseJSON(System.String,System.String)
  commentId: M:InnerLibs.Text.ParseJSON(System.String,System.String)
  id: ParseJSON(System.String,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ParseJSON(String, String)
  nameWithType: Text.ParseJSON(String, String)
  fullName: InnerLibs.Text.ParseJSON(System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ParseJSON
    path: Text.vb
    startLine: 1061
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma uma JSON String em um Objeto ou Classe\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object ParseJSON(this string JSON, string DateFormat = "yyyy-MM-dd HH:mm:ss")
    parameters:
    - id: JSON
      type: System.String
      description: String JSON
    - id: DateFormat
      type: System.String
    return:
      type: System.Object
      description: Um objeto do tipo T
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ParseJSON(JSON As String, DateFormat As String = "yyyy-MM-dd HH:mm:ss") As Object
  overload: InnerLibs.Text.ParseJSON*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.Poopfy(System.String[])
  commentId: M:InnerLibs.Text.Poopfy(System.String[])
  id: Poopfy(System.String[])
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Poopfy(String[])
  nameWithType: Text.Poopfy(String[])
  fullName: InnerLibs.Text.Poopfy(System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Poopfy
    path: Text.vb
    startLine: 1072
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma string em sua forma poop\n"
  example: []
  syntax:
    content: public static string Poopfy(params string[] Words)
    parameters:
    - id: Words
      type: System.String[]
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function Poopfy(ParamArray Words As String()) As String
  overload: InnerLibs.Text.Poopfy*
  nameWithType.vb: Text.Poopfy(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Poopfy(System.String())
  name.vb: Poopfy(String())
- uid: InnerLibs.Text.Poopfy(System.String)
  commentId: M:InnerLibs.Text.Poopfy(System.String)
  id: Poopfy(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Poopfy(String)
  nameWithType: Text.Poopfy(String)
  fullName: InnerLibs.Text.Poopfy(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Poopfy
    path: Text.vb
    startLine: 1090
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma string em sua forma poop\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string Poopfy(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Poopfy(Text As String) As String
  overload: InnerLibs.Text.Poopfy*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.PreetyPrint(System.Xml.XmlDocument)
  commentId: M:InnerLibs.Text.PreetyPrint(System.Xml.XmlDocument)
  id: PreetyPrint(System.Xml.XmlDocument)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: PreetyPrint(XmlDocument)
  nameWithType: Text.PreetyPrint(XmlDocument)
  fullName: InnerLibs.Text.PreetyPrint(System.Xml.XmlDocument)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: PreetyPrint
    path: Text.vb
    startLine: 1099
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nReturn a Idented XML string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string PreetyPrint(this XmlDocument Document)
    parameters:
    - id: Document
      type: System.Xml.XmlDocument
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function PreetyPrint(Document As XmlDocument) As String
  overload: InnerLibs.Text.PreetyPrint*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.Prepend(System.String@,System.String)
  commentId: M:InnerLibs.Text.Prepend(System.String@,System.String)
  id: Prepend(System.String@,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Prepend(ref String, String)
  nameWithType: Text.Prepend(ref String, String)
  fullName: InnerLibs.Text.Prepend(ref System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Prepend
    path: Text.vb
    startLine: 1133
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAdiciona texto ao começo de uma string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string Prepend(this ref string Text, string PrependText)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: PrependText
      type: System.String
      description: Texto adicional
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Prepend(ByRef Text As String, PrependText As String) As String
  overload: InnerLibs.Text.Prepend*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Prepend(ByRef String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Prepend(ByRef System.String, System.String)
  name.vb: Prepend(ByRef String, String)
- uid: InnerLibs.Text.PrependIf(System.String@,System.String,System.Boolean)
  commentId: M:InnerLibs.Text.PrependIf(System.String@,System.String,System.Boolean)
  id: PrependIf(System.String@,System.String,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: PrependIf(ref String, String, Boolean)
  nameWithType: Text.PrependIf(ref String, String, Boolean)
  fullName: InnerLibs.Text.PrependIf(ref System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: PrependIf
    path: Text.vb
    startLine: 1145
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAdiciona texto ao começo de uma string se um criterio for cumprido\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string PrependIf(this ref string Text, string PrependText, bool Test)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: PrependText
      type: System.String
      description: Texto adicional
    - id: Test
      type: System.Boolean
      description: Teste
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function PrependIf(ByRef Text As String, PrependText As String, Test As Boolean) As String
  overload: InnerLibs.Text.PrependIf*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.PrependIf(ByRef String, String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.PrependIf(ByRef System.String, System.String, System.Boolean)
  name.vb: PrependIf(ByRef String, String, Boolean)
- uid: InnerLibs.Text.QuantifyText(System.String,System.Globalization.CultureInfo,System.String)
  commentId: M:InnerLibs.Text.QuantifyText(System.String,System.Globalization.CultureInfo,System.String)
  id: QuantifyText(System.String,System.Globalization.CultureInfo,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: QuantifyText(String, CultureInfo, String)
  nameWithType: Text.QuantifyText(String, CultureInfo, String)
  fullName: InnerLibs.Text.QuantifyText(System.String, System.Globalization.CultureInfo, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: QuantifyText
    path: Text.vb
    startLine: 1160
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o texto a na sua forma singular ou plural de acordo com um numero determinado em <code data-dev-comment-type=\"paramref\" class=\"paramref\">Identifier</code>.\n"
  example:
  - texto = &quot;total de {q=2 pães}&quot;
  syntax:
    content: >-
      [Extension]

      public static string QuantifyText(this string PluralText, CultureInfo Culture = null, string Identifier = "q")
    parameters:
    - id: PluralText
      type: System.String
      description: Texto no plural
    - id: Culture
      type: System.Globalization.CultureInfo
      description: Cultura
    - id: Identifier
      type: System.String
      description: Identificador da variavel quantificadora
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function QuantifyText(PluralText As String, Culture As CultureInfo = Nothing, Identifier As String = "q") As String
  overload: InnerLibs.Text.QuantifyText*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.QuantifyText(System.String,System.Object,System.Globalization.CultureInfo)
  commentId: M:InnerLibs.Text.QuantifyText(System.String,System.Object,System.Globalization.CultureInfo)
  id: QuantifyText(System.String,System.Object,System.Globalization.CultureInfo)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: QuantifyText(String, Object, CultureInfo)
  nameWithType: Text.QuantifyText(String, Object, CultureInfo)
  fullName: InnerLibs.Text.QuantifyText(System.String, System.Object, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: QuantifyText
    path: Text.vb
    startLine: 1197
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o texto a na sua forma singular ou plural de acordo com um numero determinado.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string QuantifyText(this string PluralText, object Quantity, CultureInfo Culture = null)
    parameters:
    - id: PluralText
      type: System.String
      description: Texto no plural
    - id: Quantity
      type: System.Object
      description: Quantidade de Itens
    - id: Culture
      type: System.Globalization.CultureInfo
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function QuantifyText(PluralText As String, Quantity As Object, Culture As CultureInfo = Nothing) As String
  overload: InnerLibs.Text.QuantifyText*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.Quote(System.String,System.Char)
  commentId: M:InnerLibs.Text.Quote(System.String,System.Char)
  id: Quote(System.String,System.Char)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Quote(String, Char)
  nameWithType: Text.Quote(String, Char)
  fullName: InnerLibs.Text.Quote(System.String, System.Char)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Quote
    path: Text.vb
    startLine: 1233
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nEncapsula um tento entre 2 caracteres (normalmente parentesis, chaves, aspas ou colchetes)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string Quote(this string Text, char QuoteChar = '"')
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: QuoteChar
      type: System.Char
      description: Caractere de encapsulamento
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Quote(Text As String, QuoteChar As Char = """"c) As String
  overload: InnerLibs.Text.Quote*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.QuoteIf(System.String,System.Boolean,System.String)
  commentId: M:InnerLibs.Text.QuoteIf(System.String,System.Boolean,System.String)
  id: QuoteIf(System.String,System.Boolean,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: QuoteIf(String, Boolean, String)
  nameWithType: Text.QuoteIf(String, Boolean, String)
  fullName: InnerLibs.Text.QuoteIf(System.String, System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: QuoteIf
    path: Text.vb
    startLine: 1245
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nEncapsula um tento entre 2 textos (normalmente parentesis, chaves, aspas ou colchetes) se uma\ncondiçao for cumprida\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string QuoteIf(this string Text, bool Condition, string QuoteChar = "\"")
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: Condition
      type: System.Boolean
    - id: QuoteChar
      type: System.String
      description: Caractere de encapsulamento
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function QuoteIf(Text As String, Condition As Boolean, QuoteChar As String = """") As String
  overload: InnerLibs.Text.QuoteIf*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.RandomItem``1(``0[])
  commentId: M:InnerLibs.Text.RandomItem``1(``0[])
  id: RandomItem``1(``0[])
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: RandomItem<Type>(Type[])
  nameWithType: Text.RandomItem<Type>(Type[])
  fullName: InnerLibs.Text.RandomItem<Type>(Type[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: RandomItem
    path: Text.vb
    startLine: 1256
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nSorteia um item da Matriz\n"
  example: []
  syntax:
    content: public static Type RandomItem<Type>(params Type[] Array)
    parameters:
    - id: Array
      type: '{Type}[]'
      description: Matriz
    typeParameters:
    - id: Type
      description: Tipo da Matriz
    return:
      type: '{Type}'
      description: Um valor do tipo especificado
    content.vb: Public Shared Function RandomItem(Of Type)(ParamArray Array As Type()) As Type
  overload: InnerLibs.Text.RandomItem*
  nameWithType.vb: Text.RandomItem(Of Type)(Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.RandomItem(Of Type)(Type())
  name.vb: RandomItem(Of Type)(Type())
- uid: InnerLibs.Text.RegexEscape(System.String)
  commentId: M:InnerLibs.Text.RegexEscape(System.String)
  id: RegexEscape(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: RegexEscape(String)
  nameWithType: Text.RegexEscape(String)
  fullName: InnerLibs.Text.RegexEscape(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: RegexEscape
    path: Text.vb
    startLine: 1265
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nEscapa caracteres exclusivos de uma regex\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string RegexEscape(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function RegexEscape(Text As String) As String
  overload: InnerLibs.Text.RegexEscape*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.RemoveAccents(System.String@)
  commentId: M:InnerLibs.Text.RemoveAccents(System.String@)
  id: RemoveAccents(System.String@)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: RemoveAccents(ref String)
  nameWithType: Text.RemoveAccents(ref String)
  fullName: InnerLibs.Text.RemoveAccents(ref System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: RemoveAccents
    path: Text.vb
    startLine: 1284
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove os acentos de uma string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string RemoveAccents(this ref string Text)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    return:
      type: System.String
      description: String sem os acentos
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function RemoveAccents(ByRef Text As String) As String
  overload: InnerLibs.Text.RemoveAccents*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.RemoveAccents(ByRef String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.RemoveAccents(ByRef System.String)
  name.vb: RemoveAccents(ByRef String)
- uid: InnerLibs.Text.RemoveAny(System.String,System.String[])
  commentId: M:InnerLibs.Text.RemoveAny(System.String,System.String[])
  id: RemoveAny(System.String,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: RemoveAny(String, String[])
  nameWithType: Text.RemoveAny(String, String[])
  fullName: InnerLibs.Text.RemoveAny(System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: RemoveAny
    path: Text.vb
    startLine: 1306
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove várias strings de uma string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string RemoveAny(this string Text, params string[] Values)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: Values
      type: System.String[]
      description: Strings a serem removidas
    return:
      type: System.String
      description: Uma string com os valores removidos
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function RemoveAny(Text As String, ParamArray Values As String()) As String
  overload: InnerLibs.Text.RemoveAny*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.RemoveAny(String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.RemoveAny(System.String, System.String())
  name.vb: RemoveAny(String, String())
- uid: InnerLibs.Text.RemoveDiacritics(System.String@)
  commentId: M:InnerLibs.Text.RemoveDiacritics(System.String@)
  id: RemoveDiacritics(System.String@)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: RemoveDiacritics(ref String)
  nameWithType: Text.RemoveDiacritics(ref String)
  fullName: InnerLibs.Text.RemoveDiacritics(ref System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: RemoveDiacritics
    path: Text.vb
    startLine: 1317
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove os acentos de uma string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string RemoveDiacritics(this ref string Text)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    return:
      type: System.String
      description: String sem os acentos
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function RemoveDiacritics(ByRef Text As String) As String
  overload: InnerLibs.Text.RemoveDiacritics*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.RemoveDiacritics(ByRef String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.RemoveDiacritics(ByRef System.String)
  name.vb: RemoveDiacritics(ByRef String)
- uid: InnerLibs.Text.RemoveFirstAny(System.String,System.Boolean,System.String[])
  commentId: M:InnerLibs.Text.RemoveFirstAny(System.String,System.Boolean,System.String[])
  id: RemoveFirstAny(System.String,System.Boolean,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: RemoveFirstAny(String, Boolean, String[])
  nameWithType: Text.RemoveFirstAny(String, Boolean, String[])
  fullName: InnerLibs.Text.RemoveFirstAny(System.String, System.Boolean, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: RemoveFirstAny
    path: Text.vb
    startLine: 1333
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove o final de uma string se ela for igual a qualquer um dos valores correspondentes\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string RemoveFirstAny(this string Text, bool ContinuouslyRemove, params string[] StartStringTest)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: ContinuouslyRemove
      type: System.Boolean
      description: "\nParametro que indica se a string deve continuar sendo testada até que todas as ocorrencias\nsejam removidas\n"
    - id: StartStringTest
      type: System.String[]
      description: Conjunto de textos que serão comparados
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function RemoveFirstAny(Text As String, ContinuouslyRemove As Boolean, ParamArray StartStringTest As String()) As String
  overload: InnerLibs.Text.RemoveFirstAny*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.RemoveFirstAny(String, Boolean, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.RemoveFirstAny(System.String, System.Boolean, System.String())
  name.vb: RemoveFirstAny(String, Boolean, String())
- uid: InnerLibs.Text.RemoveFirstChars(System.String,System.Int32)
  commentId: M:InnerLibs.Text.RemoveFirstChars(System.String,System.Int32)
  id: RemoveFirstChars(System.String,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: RemoveFirstChars(String, Int32)
  nameWithType: Text.RemoveFirstChars(String, Int32)
  fullName: InnerLibs.Text.RemoveFirstChars(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: RemoveFirstChars
    path: Text.vb
    startLine: 1359
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove uma determinada linha de um texto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string RemoveFirstChars(this string Text, int Quantity = 1)
    parameters:
    - id: Text
      type: System.String
      description: Texto completo
    - id: Quantity
      type: System.Int32
      description: Quantidade de Caracteres
    return:
      type: System.String
      description: string sem a linha indicada
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function RemoveFirstChars(Text As String, Quantity As Integer = 1) As String
  overload: InnerLibs.Text.RemoveFirstChars*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.RemoveFirstIf(System.String,System.String)
  commentId: M:InnerLibs.Text.RemoveFirstIf(System.String,System.String)
  id: RemoveFirstIf(System.String,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: RemoveFirstIf(String, String)
  nameWithType: Text.RemoveFirstIf(String, String)
  fullName: InnerLibs.Text.RemoveFirstIf(System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: RemoveFirstIf
    path: Text.vb
    startLine: 1373
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove um texto do inicio de uma string se ele for um outro texto especificado\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string RemoveFirstIf(this string Text, string StartStringTest)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: StartStringTest
      type: System.String
      description: Texto inicial que será comparado
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function RemoveFirstIf(Text As String, StartStringTest As String) As String
  overload: InnerLibs.Text.RemoveFirstIf*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.RemoveHTML(System.String)
  commentId: M:InnerLibs.Text.RemoveHTML(System.String)
  id: RemoveHTML(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: RemoveHTML(String)
  nameWithType: Text.RemoveHTML(String)
  fullName: InnerLibs.Text.RemoveHTML(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: RemoveHTML
    path: Text.vb
    startLine: 1381
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: >-
      [Extension]

      public static string RemoveHTML(this string Text)
    parameters:
    - id: Text
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function RemoveHTML(Text As String) As String
  overload: InnerLibs.Text.RemoveHTML*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.RemoveLastAny(System.String,System.Boolean,System.String[])
  commentId: M:InnerLibs.Text.RemoveLastAny(System.String,System.Boolean,System.String[])
  id: RemoveLastAny(System.String,System.Boolean,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: RemoveLastAny(String, Boolean, String[])
  nameWithType: Text.RemoveLastAny(String, Boolean, String[])
  fullName: InnerLibs.Text.RemoveLastAny(System.String, System.Boolean, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: RemoveLastAny
    path: Text.vb
    startLine: 1399
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove o final de uma string se ela for igual a qualquer um dos valores correspondentes\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string RemoveLastAny(this string Text, bool ContinuouslyRemove, params string[] EndStringTest)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: ContinuouslyRemove
      type: System.Boolean
      description: "\nParametro que indica se a string deve continuar sendo testada até que todas as ocorrencias\nsejam removidas\n"
    - id: EndStringTest
      type: System.String[]
      description: Conjunto de textos que serão comparados
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function RemoveLastAny(Text As String, ContinuouslyRemove As Boolean, ParamArray EndStringTest As String()) As String
  overload: InnerLibs.Text.RemoveLastAny*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.RemoveLastAny(String, Boolean, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.RemoveLastAny(System.String, System.Boolean, System.String())
  name.vb: RemoveLastAny(String, Boolean, String())
- uid: InnerLibs.Text.RemoveLastChars(System.String,System.Int32)
  commentId: M:InnerLibs.Text.RemoveLastChars(System.String,System.Int32)
  id: RemoveLastChars(System.String,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: RemoveLastChars(String, Int32)
  nameWithType: Text.RemoveLastChars(String, Int32)
  fullName: InnerLibs.Text.RemoveLastChars(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: RemoveLastChars
    path: Text.vb
    startLine: 1419
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove os X ultimos caracteres\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string RemoveLastChars(this string Text, int Quantity = 1)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: Quantity
      type: System.Int32
      description: Quantidade de Caracteres
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function RemoveLastChars(Text As String, Quantity As Integer = 1) As String
  overload: InnerLibs.Text.RemoveLastChars*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.RemoveLastIf(System.String,System.String)
  commentId: M:InnerLibs.Text.RemoveLastIf(System.String,System.String)
  id: RemoveLastIf(System.String,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: RemoveLastIf(String, String)
  nameWithType: Text.RemoveLastIf(String, String)
  fullName: InnerLibs.Text.RemoveLastIf(System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: RemoveLastIf
    path: Text.vb
    startLine: 1429
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove um texto do final de uma string se ele for um outro texto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string RemoveLastIf(this string Text, string EndStringTest)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: EndStringTest
      type: System.String
      description: Texto final que será comparado
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function RemoveLastIf(Text As String, EndStringTest As String) As String
  overload: InnerLibs.Text.RemoveLastIf*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.RemoveNonPrintable(System.String)
  commentId: M:InnerLibs.Text.RemoveNonPrintable(System.String)
  id: RemoveNonPrintable(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: RemoveNonPrintable(String)
  nameWithType: Text.RemoveNonPrintable(String)
  fullName: InnerLibs.Text.RemoveNonPrintable(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: RemoveNonPrintable
    path: Text.vb
    startLine: 1442
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove caracteres não printaveis de uma string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string RemoveNonPrintable(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    return:
      type: System.String
      description: String corrigida
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function RemoveNonPrintable(Text As String) As String
  overload: InnerLibs.Text.RemoveNonPrintable*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.Replace(System.String[],System.String,System.String,System.Boolean)
  commentId: M:InnerLibs.Text.Replace(System.String[],System.String,System.String,System.Boolean)
  id: Replace(System.String[],System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Replace(String[], String, String, Boolean)
  nameWithType: Text.Replace(String[], String, String, Boolean)
  fullName: InnerLibs.Text.Replace(System.String[], System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Replace
    path: Text.vb
    startLine: 1463
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nFaz uma busca em todos os elementos do array e aplica um ReplaceFrom comum\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string[] Replace(this string[] Strings, string OldValue, string NewValue, bool ReplaceIfEquals = true)
    parameters:
    - id: Strings
      type: System.String[]
      description: Array de strings
    - id: OldValue
      type: System.String
      description: Valor antigo que será substituido
    - id: NewValue
      type: System.String
      description: Valor utilizado para substituir o valor antigo
    - id: ReplaceIfEquals
      type: System.Boolean
      description: "\nSe TRUE, realiza o replace se o valor no array for idêntico ao Valor antigo, se FALSE realiza\num ReplaceFrom em quaisquer valores antigos encontrados dentro do valor do array\n"
    return:
      type: System.String[]
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Replace(Strings As String(), OldValue As String, NewValue As String, ReplaceIfEquals As Boolean = True) As String()
  overload: InnerLibs.Text.Replace*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Replace(String(), String, String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Replace(System.String(), System.String, System.String, System.Boolean)
  name.vb: Replace(String(), String, String, Boolean)
- uid: InnerLibs.Text.Replace(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean)
  commentId: M:InnerLibs.Text.Replace(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean)
  id: Replace(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Replace(List<String>, String, String, Boolean)
  nameWithType: Text.Replace(List<String>, String, String, Boolean)
  fullName: InnerLibs.Text.Replace(System.Collections.Generic.List<System.String>, System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Replace
    path: Text.vb
    startLine: 1489
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nFaz uma busca em todos os elementos de uma lista e aplica um ReplaceFrom comum\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static List<string> Replace(this List<string> Strings, string OldValue, string NewValue, bool ReplaceIfEquals = true)
    parameters:
    - id: Strings
      type: System.Collections.Generic.List{System.String}
      description: Array de strings
    - id: OldValue
      type: System.String
      description: Valor antigo que será substituido
    - id: NewValue
      type: System.String
      description: Valor utilizado para substituir o valor antigo
    - id: ReplaceIfEquals
      type: System.Boolean
      description: "\nSe TRUE, realiza o replace se o valor no array for idêntico ao Valor antigo, se FALSE realiza\num ReplaceFrom em quaisquer valores antigos encontrados dentro do valor do array\n"
    return:
      type: System.Collections.Generic.List{System.String}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Replace(Strings As List(Of String), OldValue As String, NewValue As String, ReplaceIfEquals As Boolean = True) As List(Of String)
  overload: InnerLibs.Text.Replace*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Replace(List(Of String), String, String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Replace(System.Collections.Generic.List(Of System.String), System.String, System.String, System.Boolean)
  name.vb: Replace(List(Of String), String, String, Boolean)
- uid: InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  id: ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ReplaceFrom(String, IDictionary<String, String>)
  nameWithType: Text.ReplaceFrom(String, IDictionary<String, String>)
  fullName: InnerLibs.Text.ReplaceFrom(System.String, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ReplaceFrom
    path: Text.vb
    startLine: 1497
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\naplica um replace a um texto baseando-se em um <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ReplaceFrom(this string Text, IDictionary<string, string> Dic)
    parameters:
    - id: Text
      type: System.String
    - id: Dic
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ReplaceFrom(Text As String, Dic As IDictionary(Of String, String)) As String
  overload: InnerLibs.Text.ReplaceFrom*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.ReplaceFrom(String, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.ReplaceFrom(System.String, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: ReplaceFrom(String, IDictionary(Of String, String))
- uid: InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String,System.String[]},System.StringComparison)
  commentId: M:InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String,System.String[]},System.StringComparison)
  id: ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String,System.String[]},System.StringComparison)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ReplaceFrom(String, IDictionary<String, String[]>, StringComparison)
  nameWithType: Text.ReplaceFrom(String, IDictionary<String, String[]>, StringComparison)
  fullName: InnerLibs.Text.ReplaceFrom(System.String, System.Collections.Generic.IDictionary<System.String, System.String[]>, System.StringComparison)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ReplaceFrom
    path: Text.vb
    startLine: 1509
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAplica um replace a um texto baseando-se em um <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ReplaceFrom(this string Text, IDictionary<string, string[]> Dic, StringComparison Comparison = StringComparison.InvariantCultureIgnoreCase)
    parameters:
    - id: Text
      type: System.String
    - id: Dic
      type: System.Collections.Generic.IDictionary{System.String,System.String[]}
    - id: Comparison
      type: System.StringComparison
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ReplaceFrom(Text As String, Dic As IDictionary(Of String, String()), Comparison As StringComparison = StringComparison.InvariantCultureIgnoreCase) As String
  overload: InnerLibs.Text.ReplaceFrom*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.ReplaceFrom(String, IDictionary(Of String, String()), StringComparison)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.ReplaceFrom(System.String, System.Collections.Generic.IDictionary(Of System.String, System.String()), System.StringComparison)
  name.vb: ReplaceFrom(String, IDictionary(Of String, String()), StringComparison)
- uid: InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String[],System.String},System.StringComparison)
  commentId: M:InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String[],System.String},System.StringComparison)
  id: ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String[],System.String},System.StringComparison)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ReplaceFrom(String, IDictionary<String[], String>, StringComparison)
  nameWithType: Text.ReplaceFrom(String, IDictionary<String[], String>, StringComparison)
  fullName: InnerLibs.Text.ReplaceFrom(System.String, System.Collections.Generic.IDictionary<System.String[], System.String>, System.StringComparison)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ReplaceFrom
    path: Text.vb
    startLine: 1521
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAplica um replace a um texto baseando-se em um <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ReplaceFrom(this string Text, IDictionary<string[], string> Dic, StringComparison Comparison = StringComparison.InvariantCultureIgnoreCase)
    parameters:
    - id: Text
      type: System.String
    - id: Dic
      type: System.Collections.Generic.IDictionary{System.String[],System.String}
    - id: Comparison
      type: System.StringComparison
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ReplaceFrom(Text As String, Dic As IDictionary(Of String(), String), Comparison As StringComparison = StringComparison.InvariantCultureIgnoreCase) As String
  overload: InnerLibs.Text.ReplaceFrom*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.ReplaceFrom(String, IDictionary(Of String(), String), StringComparison)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.ReplaceFrom(System.String, System.Collections.Generic.IDictionary(Of System.String(), System.String), System.StringComparison)
  name.vb: ReplaceFrom(String, IDictionary(Of String(), String), StringComparison)
- uid: InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String[],System.String[]},System.StringComparison)
  commentId: M:InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String[],System.String[]},System.StringComparison)
  id: ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String[],System.String[]},System.StringComparison)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ReplaceFrom(String, IDictionary<String[], String[]>, StringComparison)
  nameWithType: Text.ReplaceFrom(String, IDictionary<String[], String[]>, StringComparison)
  fullName: InnerLibs.Text.ReplaceFrom(System.String, System.Collections.Generic.IDictionary<System.String[], System.String[]>, System.StringComparison)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ReplaceFrom
    path: Text.vb
    startLine: 1533
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAplica um replace a um texto baseando-se em um <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ReplaceFrom(this string Text, IDictionary<string[], string[]> Dic, StringComparison Comparison = StringComparison.InvariantCultureIgnoreCase)
    parameters:
    - id: Text
      type: System.String
    - id: Dic
      type: System.Collections.Generic.IDictionary{System.String[],System.String[]}
    - id: Comparison
      type: System.StringComparison
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ReplaceFrom(Text As String, Dic As IDictionary(Of String(), String()), Comparison As StringComparison = StringComparison.InvariantCultureIgnoreCase) As String
  overload: InnerLibs.Text.ReplaceFrom*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.ReplaceFrom(String, IDictionary(Of String(), String()), StringComparison)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.ReplaceFrom(System.String, System.Collections.Generic.IDictionary(Of System.String(), System.String()), System.StringComparison)
  name.vb: ReplaceFrom(String, IDictionary(Of String(), String()), StringComparison)
- uid: InnerLibs.Text.ReplaceMany(System.String,System.String,System.String[])
  commentId: M:InnerLibs.Text.ReplaceMany(System.String,System.String,System.String[])
  id: ReplaceMany(System.String,System.String,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ReplaceMany(String, String, String[])
  nameWithType: Text.ReplaceMany(String, String, String[])
  fullName: InnerLibs.Text.ReplaceMany(System.String, System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ReplaceMany
    path: Text.vb
    startLine: 1557
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma nova sequência na qual todas as ocorrências de uma String especificada são\nsubstituídas por um novo valor.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ReplaceMany(this string Text, string NewValue, params string[] OldValues)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: NewValue
      type: System.String
      description: Novo Valor
    - id: OldValues
      type: System.String[]
      description: Valores a serem substituido por um novo valor
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ReplaceMany(Text As String, NewValue As String, ParamArray OldValues As String()) As String
  overload: InnerLibs.Text.ReplaceMany*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.ReplaceMany(String, String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.ReplaceMany(System.String, System.String, System.String())
  name.vb: ReplaceMany(String, String, String())
- uid: InnerLibs.Text.ReplaceNone(System.String,System.String)
  commentId: M:InnerLibs.Text.ReplaceNone(System.String,System.String)
  id: ReplaceNone(System.String,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ReplaceNone(String, String)
  nameWithType: Text.ReplaceNone(String, String)
  fullName: InnerLibs.Text.ReplaceNone(System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ReplaceNone
    path: Text.vb
    startLine: 1572
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma nova sequência na qual todas as ocorrências de uma String especificada são\nsubstituídas por vazio.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ReplaceNone(this string Text, string OldValue)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: OldValue
      type: System.String
      description: Valor a ser substituido por vazio
    return:
      type: System.String
      description: String corrigida
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ReplaceNone(Text As String, OldValue As String) As String
  overload: InnerLibs.Text.ReplaceNone*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.SensitiveReplace(System.String,System.String,System.String,System.StringComparison)
  commentId: M:InnerLibs.Text.SensitiveReplace(System.String,System.String,System.String,System.StringComparison)
  id: SensitiveReplace(System.String,System.String,System.String,System.StringComparison)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: SensitiveReplace(String, String, String, StringComparison)
  nameWithType: Text.SensitiveReplace(String, String, String, StringComparison)
  fullName: InnerLibs.Text.SensitiveReplace(System.String, System.String, System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: SensitiveReplace
    path: Text.vb
    startLine: 1585
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRealiza um replace em uma string usando um tipo especifico de comparacao\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string SensitiveReplace(this string Text, string NewValue, string OldValue, StringComparison ComparisonType = StringComparison.InvariantCulture)
    parameters:
    - id: Text
      type: System.String
      description: ''
    - id: NewValue
      type: System.String
      description: ''
    - id: OldValue
      type: System.String
      description: ''
    - id: ComparisonType
      type: System.StringComparison
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function SensitiveReplace(Text As String, NewValue As String, OldValue As String, ComparisonType As StringComparison = StringComparison.InvariantCulture) As String
  overload: InnerLibs.Text.SensitiveReplace*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.SensitiveReplace(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)
  commentId: M:InnerLibs.Text.SensitiveReplace(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)
  id: SensitiveReplace(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: SensitiveReplace(String, String, IEnumerable<String>, StringComparison)
  nameWithType: Text.SensitiveReplace(String, String, IEnumerable<String>, StringComparison)
  fullName: InnerLibs.Text.SensitiveReplace(System.String, System.String, System.Collections.Generic.IEnumerable<System.String>, System.StringComparison)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: SensitiveReplace
    path: Text.vb
    startLine: 1598
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRealiza um replace em uma string usando um tipo especifico de comparacao\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string SensitiveReplace(this string Text, string NewValue, IEnumerable<string> OldValues, StringComparison ComparisonType = StringComparison.InvariantCulture)
    parameters:
    - id: Text
      type: System.String
      description: ''
    - id: NewValue
      type: System.String
      description: ''
    - id: OldValues
      type: System.Collections.Generic.IEnumerable{System.String}
      description: ''
    - id: ComparisonType
      type: System.StringComparison
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function SensitiveReplace(Text As String, NewValue As String, OldValues As IEnumerable(Of String), ComparisonType As StringComparison = StringComparison.InvariantCulture) As String
  overload: InnerLibs.Text.SensitiveReplace*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.SensitiveReplace(String, String, IEnumerable(Of String), StringComparison)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.SensitiveReplace(System.String, System.String, System.Collections.Generic.IEnumerable(Of System.String), System.StringComparison)
  name.vb: SensitiveReplace(String, String, IEnumerable(Of String), StringComparison)
- uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  id: SerializeJSON(System.Object,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: SerializeJSON(Object, String)
  nameWithType: Text.SerializeJSON(Object, String)
  fullName: InnerLibs.Text.SerializeJSON(System.Object, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: SerializeJSON
    path: Text.vb
    startLine: 1622
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma um Objeto em JSON\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string SerializeJSON(this object Object, string DateFormat = "yyyy-MM-dd HH:mm:ss")
    parameters:
    - id: Object
      type: System.Object
    - id: DateFormat
      type: System.String
    return:
      type: System.String
      description: Uma String JSON
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function SerializeJSON(Object As Object, DateFormat As String = "yyyy-MM-dd HH:mm:ss") As String
  overload: InnerLibs.Text.SerializeJSON*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.Shuffle``1(``0[]@)
  commentId: M:InnerLibs.Text.Shuffle``1(``0[]@)
  id: Shuffle``1(``0[]@)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Shuffle<Type>(ref Type[])
  nameWithType: Text.Shuffle<Type>(ref Type[])
  fullName: InnerLibs.Text.Shuffle<Type>(ref Type[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Shuffle
    path: Text.vb
    startLine: 1631
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRandomiza a ordem dos itens de um Array\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Type[] Shuffle<Type>(this ref Type[] Array)
    parameters:
    - id: Array
      type: '{Type}[]'
      description: Matriz
    typeParameters:
    - id: Type
      description: Tipo do Array
    return:
      type: '{Type}[]'
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Shuffle(Of Type)(ByRef Array As Type()) As Type()
  overload: InnerLibs.Text.Shuffle*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Shuffle(Of Type)(ByRef Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Shuffle(Of Type)(ByRef Type())
  name.vb: Shuffle(Of Type)(ByRef Type())
- uid: InnerLibs.Text.Shuffle``1(System.Collections.Generic.List{``0}@)
  commentId: M:InnerLibs.Text.Shuffle``1(System.Collections.Generic.List{``0}@)
  id: Shuffle``1(System.Collections.Generic.List{``0}@)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Shuffle<Type>(ref List<Type>)
  nameWithType: Text.Shuffle<Type>(ref List<Type>)
  fullName: InnerLibs.Text.Shuffle<Type>(ref System.Collections.Generic.List<Type>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Shuffle
    path: Text.vb
    startLine: 1653
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRandomiza a ordem dos itens de uma Lista\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static List<Type> Shuffle<Type>(this ref List<Type> List)
    parameters:
    - id: List
      type: System.Collections.Generic.List{{Type}}
      description: Matriz
    typeParameters:
    - id: Type
      description: Tipo de Lista
    return:
      type: System.Collections.Generic.List{{Type}}
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Shuffle(Of Type)(ByRef List As List(Of Type)) As List(Of Type)
  overload: InnerLibs.Text.Shuffle*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Shuffle(Of Type)(ByRef List(Of Type))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Shuffle(Of Type)(ByRef System.Collections.Generic.List(Of Type))
  name.vb: Shuffle(Of Type)(ByRef List(Of Type))
- uid: InnerLibs.Text.Shuffle(System.String@)
  commentId: M:InnerLibs.Text.Shuffle(System.String@)
  id: Shuffle(System.String@)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Shuffle(ref String)
  nameWithType: Text.Shuffle(ref String)
  fullName: InnerLibs.Text.Shuffle(ref System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Shuffle
    path: Text.vb
    startLine: 1663
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAleatoriza a ordem das letras de um texto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string Shuffle(this ref string Text)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Shuffle(ByRef Text As String) As String
  overload: InnerLibs.Text.Shuffle*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.Shuffle(ByRef String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.Shuffle(ByRef System.String)
  name.vb: Shuffle(ByRef String)
- uid: InnerLibs.Text.Singularize(System.String)
  commentId: M:InnerLibs.Text.Singularize(System.String)
  id: Singularize(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Singularize(String)
  nameWithType: Text.Singularize(String)
  fullName: InnerLibs.Text.Singularize(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Singularize
    path: Text.vb
    startLine: 1673
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna a frase especificada em sua forma singular\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string Singularize(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: Texto no pluiral
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Singularize(Text As String) As String
  overload: InnerLibs.Text.Singularize*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.Slice(System.String,System.Int32,System.String)
  commentId: M:InnerLibs.Text.Slice(System.String,System.Int32,System.String)
  id: Slice(System.String,System.Int32,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Slice(String, Int32, String)
  nameWithType: Text.Slice(String, Int32, String)
  fullName: InnerLibs.Text.Slice(System.String, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Slice
    path: Text.vb
    startLine: 1714
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: >-
      [Extension]

      public static string Slice(this string Text, int TextLength = 0, string Ellipsis = "...")
    parameters:
    - id: Text
      type: System.String
    - id: TextLength
      type: System.Int32
    - id: Ellipsis
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Slice(Text As String, TextLength As Integer = 0, Ellipsis As String = "...") As String
  overload: InnerLibs.Text.Slice*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.Split(System.String,System.String,System.StringSplitOptions)
  commentId: M:InnerLibs.Text.Split(System.String,System.String,System.StringSplitOptions)
  id: Split(System.String,System.String,System.StringSplitOptions)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Split(String, String, StringSplitOptions)
  nameWithType: Text.Split(String, String, StringSplitOptions)
  fullName: InnerLibs.Text.Split(System.String, System.String, System.StringSplitOptions)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Split
    path: Text.vb
    startLine: 1729
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nSepara um texto em um array de strings a partir de uma outra string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string[] Split(this string Text, string Separator, StringSplitOptions Options = StringSplitOptions.RemoveEmptyEntries)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: Separator
      type: System.String
      description: Texto utilizado como separador
    - id: Options
      type: System.StringSplitOptions
    return:
      type: System.String[]
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Split(Text As String, Separator As String, Options As StringSplitOptions = StringSplitOptions.RemoveEmptyEntries) As String()
  overload: InnerLibs.Text.Split*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.StartsWithAny(System.String,System.String[])
  commentId: M:InnerLibs.Text.StartsWithAny(System.String,System.String[])
  id: StartsWithAny(System.String,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: StartsWithAny(String, String[])
  nameWithType: Text.StartsWithAny(String, String[])
  fullName: InnerLibs.Text.StartsWithAny(System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: StartsWithAny
    path: Text.vb
    startLine: 1740
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nVerifica se uma string começa com alguma outra string de um array\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static bool StartsWithAny(this string Text, params string[] Words)
    parameters:
    - id: Text
      type: System.String
      description: ''
    - id: Words
      type: System.String[]
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function StartsWithAny(Text As String, ParamArray Words As String()) As Boolean
  overload: InnerLibs.Text.StartsWithAny*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.StartsWithAny(String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.StartsWithAny(System.String, System.String())
  name.vb: StartsWithAny(String, String())
- uid: InnerLibs.Text.SyllableCount(System.String)
  commentId: M:InnerLibs.Text.SyllableCount(System.String)
  id: SyllableCount(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: SyllableCount(String)
  nameWithType: Text.SyllableCount(String)
  fullName: InnerLibs.Text.SyllableCount(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: SyllableCount
    path: Text.vb
    startLine: 1749
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nConta as silabas de uma palavra\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static int SyllableCount(this string Word)
    parameters:
    - id: Word
      type: System.String
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function SyllableCount(Word As String) As Integer
  overload: InnerLibs.Text.SyllableCount*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToAnagram(System.String)
  commentId: M:InnerLibs.Text.ToAnagram(System.String)
  id: ToAnagram(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToAnagram(String)
  nameWithType: Text.ToAnagram(String)
  fullName: InnerLibs.Text.ToAnagram(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToAnagram
    path: Text.vb
    startLine: 1771
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um anagrama de um texto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToAnagram(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToAnagram(Text As String) As String
  overload: InnerLibs.Text.ToAnagram*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToAnagramList(System.String)
  commentId: M:InnerLibs.Text.ToAnagramList(System.String)
  id: ToAnagramList(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToAnagramList(String)
  nameWithType: Text.ToAnagramList(String)
  fullName: InnerLibs.Text.ToAnagramList(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToAnagramList
    path: Text.vb
    startLine: 1780
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna uma lista com todos os anagramas de uma palavra (Metodo Lento)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static List<string> ToAnagramList(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    return:
      type: System.Collections.Generic.List{System.String}
      description: Lista de anagramas
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToAnagramList(Text As String) As List(Of String)
  overload: InnerLibs.Text.ToAnagramList*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToCamel(System.String)
  commentId: M:InnerLibs.Text.ToCamel(System.String)
  id: ToCamel(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToCamel(String)
  nameWithType: Text.ToCamel(String)
  fullName: InnerLibs.Text.ToCamel(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToCamel
    path: Text.vb
    startLine: 1844
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma uma frase em uma palavra CamelCase\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToCamel(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: Texto a ser manipulado
    return:
      type: System.String
      description: Uma String com o texto am CameCase
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToCamel(Text As String) As String
  overload: InnerLibs.Text.ToCamel*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.CamelSplit(System.String)
  commentId: M:InnerLibs.Text.CamelSplit(System.String)
  id: CamelSplit(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: CamelSplit(String)
  nameWithType: Text.CamelSplit(String)
  fullName: InnerLibs.Text.CamelSplit(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: CamelSplit
    path: Text.vb
    startLine: 1854
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma uma palavra em CameCase em varias palavras a partir de suas letras maíusculas\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string CamelSplit(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function CamelSplit(Text As String) As String
  overload: InnerLibs.Text.CamelSplit*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToRandomCase(System.String)
  commentId: M:InnerLibs.Text.ToRandomCase(System.String)
  id: ToRandomCase(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToRandomCase(String)
  nameWithType: Text.ToRandomCase(String)
  fullName: InnerLibs.Text.ToRandomCase(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToRandomCase
    path: Text.vb
    startLine: 1871
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nColoca a string em Randomcase (aleatoriamente letras maiusculas ou minusculas)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToRandomCase(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToRandomCase(Text As String) As String
  overload: InnerLibs.Text.ToRandomCase*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToAlternateCase(System.String)
  commentId: M:InnerLibs.Text.ToAlternateCase(System.String)
  id: ToAlternateCase(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToAlternateCase(String)
  nameWithType: Text.ToAlternateCase(String)
  fullName: InnerLibs.Text.ToAlternateCase(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToAlternateCase
    path: Text.vb
    startLine: 1886
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAlterna maiusculas e minusculas para cada letra de uma string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToAlternateCase(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToAlternateCase(Text As String) As String
  overload: InnerLibs.Text.ToAlternateCase*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToExtensiveForm(System.Decimal,System.Int32)
  commentId: M:InnerLibs.Text.ToExtensiveForm(System.Decimal,System.Int32)
  id: ToExtensiveForm(System.Decimal,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToExtensiveForm(Decimal, Int32)
  nameWithType: Text.ToExtensiveForm(Decimal, Int32)
  fullName: InnerLibs.Text.ToExtensiveForm(System.Decimal, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToExtensiveForm
    path: Text.vb
    startLine: 1906
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma um numero em sua forma extensa (com até 3 casas apos a virgula)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToExtensiveForm(this decimal Number, int DecimalPlaces = 3)
    parameters:
    - id: Number
      type: System.Decimal
      description: Numero decimal
    - id: DecimalPlaces
      type: System.Int32
      description: Numero de casas decimais (de 0 a 3)
    return:
      type: System.String
      description: String contendo o numero por extenso
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToExtensiveForm(Number As Decimal, DecimalPlaces As Integer = 3) As String
  overload: InnerLibs.Text.ToExtensiveForm*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToExtensiveForm(System.Int32)
  commentId: M:InnerLibs.Text.ToExtensiveForm(System.Int32)
  id: ToExtensiveForm(System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToExtensiveForm(Int32)
  nameWithType: Text.ToExtensiveForm(Int32)
  fullName: InnerLibs.Text.ToExtensiveForm(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToExtensiveForm
    path: Text.vb
    startLine: 1917
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma um numero em sua forma extensa\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToExtensiveForm(this int Number)
    parameters:
    - id: Number
      type: System.Int32
      description: Numero decimal
    return:
      type: System.String
      description: String contendo o numero por extenso
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToExtensiveForm(Number As Integer) As String
  overload: InnerLibs.Text.ToExtensiveForm*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToExtensiveForm(InnerLibs.Money)
  commentId: M:InnerLibs.Text.ToExtensiveForm(InnerLibs.Money)
  id: ToExtensiveForm(InnerLibs.Money)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToExtensiveForm(Money)
  nameWithType: Text.ToExtensiveForm(Money)
  fullName: InnerLibs.Text.ToExtensiveForm(InnerLibs.Money)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToExtensiveForm
    path: Text.vb
    startLine: 1926
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma um valor monetário em sua forma extensa\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToExtensiveForm(this Money MoneyValue)
    parameters:
    - id: MoneyValue
      type: InnerLibs.Money
      description: Numero decimal
    return:
      type: System.String
      description: String contendo o numero por extenso
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToExtensiveForm(MoneyValue As Money) As String
  overload: InnerLibs.Text.ToExtensiveForm*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToExtensiveMoneyForm(System.Decimal)
  commentId: M:InnerLibs.Text.ToExtensiveMoneyForm(System.Decimal)
  id: ToExtensiveMoneyForm(System.Decimal)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToExtensiveMoneyForm(Decimal)
  nameWithType: Text.ToExtensiveMoneyForm(Decimal)
  fullName: InnerLibs.Text.ToExtensiveMoneyForm(System.Decimal)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToExtensiveMoneyForm
    path: Text.vb
    startLine: 1935
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma um valor monetário R$ em sua forma extensa\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToExtensiveMoneyForm(this decimal Value)
    parameters:
    - id: Value
      type: System.Decimal
      description: Numero decimal
    return:
      type: System.String
      description: String contendo o numero por extenso
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToExtensiveMoneyForm(Value As Decimal) As String
  overload: InnerLibs.Text.ToExtensiveMoneyForm*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToFileSizeString(System.Byte[])
  commentId: M:InnerLibs.Text.ToFileSizeString(System.Byte[])
  id: ToFileSizeString(System.Byte[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToFileSizeString(Byte[])
  nameWithType: Text.ToFileSizeString(Byte[])
  fullName: InnerLibs.Text.ToFileSizeString(System.Byte[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToFileSizeString
    path: Text.vb
    startLine: 1946
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o uma string representando um valor em bytes, KB, MB ou TB\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToFileSizeString(this byte[] Size)
    parameters:
    - id: Size
      type: System.Byte[]
      description: Tamanho
    return:
      type: System.String
      description: String com o tamanho + unidade de medida
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToFileSizeString(Size As Byte()) As String
  overload: InnerLibs.Text.ToFileSizeString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.ToFileSizeString(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.ToFileSizeString(System.Byte())
  name.vb: ToFileSizeString(Byte())
- uid: InnerLibs.Text.ToFileSizeString(System.IO.FileInfo)
  commentId: M:InnerLibs.Text.ToFileSizeString(System.IO.FileInfo)
  id: ToFileSizeString(System.IO.FileInfo)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToFileSizeString(FileInfo)
  nameWithType: Text.ToFileSizeString(FileInfo)
  fullName: InnerLibs.Text.ToFileSizeString(System.IO.FileInfo)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToFileSizeString
    path: Text.vb
    startLine: 1956
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o uma string representando um valor em bytes, KB, MB ou TB\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToFileSizeString(this FileInfo Size)
    parameters:
    - id: Size
      type: System.IO.FileInfo
      description: Tamanho
    return:
      type: System.String
      description: String com o tamanho + unidade de medida
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToFileSizeString(Size As FileInfo) As String
  overload: InnerLibs.Text.ToFileSizeString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToFileSizeString(System.Double)
  commentId: M:InnerLibs.Text.ToFileSizeString(System.Double)
  id: ToFileSizeString(System.Double)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToFileSizeString(Double)
  nameWithType: Text.ToFileSizeString(Double)
  fullName: InnerLibs.Text.ToFileSizeString(System.Double)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToFileSizeString
    path: Text.vb
    startLine: 1966
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o uma string representando um valor em bytes, KB, MB ou TB\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToFileSizeString(this double Size)
    parameters:
    - id: Size
      type: System.Double
      description: Tamanho
    return:
      type: System.String
      description: String com o tamanho + unidade de medida
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToFileSizeString(Size As Double) As String
  overload: InnerLibs.Text.ToFileSizeString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToFileSizeString(System.Int32)
  commentId: M:InnerLibs.Text.ToFileSizeString(System.Int32)
  id: ToFileSizeString(System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToFileSizeString(Int32)
  nameWithType: Text.ToFileSizeString(Int32)
  fullName: InnerLibs.Text.ToFileSizeString(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToFileSizeString
    path: Text.vb
    startLine: 1976
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o uma string representando um valor em bytes, KB, MB ou TB\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToFileSizeString(this int Size)
    parameters:
    - id: Size
      type: System.Int32
      description: Tamanho
    return:
      type: System.String
      description: String com o tamanho + unidade de medida
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToFileSizeString(Size As Integer) As String
  overload: InnerLibs.Text.ToFileSizeString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToFileSizeString(System.Int64)
  commentId: M:InnerLibs.Text.ToFileSizeString(System.Int64)
  id: ToFileSizeString(System.Int64)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToFileSizeString(Int64)
  nameWithType: Text.ToFileSizeString(Int64)
  fullName: InnerLibs.Text.ToFileSizeString(System.Int64)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToFileSizeString
    path: Text.vb
    startLine: 1986
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o uma string representando um valor em bytes, KB, MB ou TB\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToFileSizeString(this long Size)
    parameters:
    - id: Size
      type: System.Int64
      description: Tamanho
    return:
      type: System.String
      description: String com o tamanho + unidade de medida
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToFileSizeString(Size As Long) As String
  overload: InnerLibs.Text.ToFileSizeString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToFileSizeString(System.Decimal)
  commentId: M:InnerLibs.Text.ToFileSizeString(System.Decimal)
  id: ToFileSizeString(System.Decimal)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToFileSizeString(Decimal)
  nameWithType: Text.ToFileSizeString(Decimal)
  fullName: InnerLibs.Text.ToFileSizeString(System.Decimal)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToFileSizeString
    path: Text.vb
    startLine: 1996
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna o uma string representando um valor em bytes, KB, MB ou TB\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToFileSizeString(this decimal Size)
    parameters:
    - id: Size
      type: System.Decimal
      description: Tamanho
    return:
      type: System.String
      description: String com o tamanho + unidade de medida
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToFileSizeString(Size As Decimal) As String
  overload: InnerLibs.Text.ToFileSizeString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToFriendlyURL(System.String,System.Boolean)
  commentId: M:InnerLibs.Text.ToFriendlyURL(System.String,System.Boolean)
  id: ToFriendlyURL(System.String,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToFriendlyURL(String, Boolean)
  nameWithType: Text.ToFriendlyURL(String, Boolean)
  fullName: InnerLibs.Text.ToFriendlyURL(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToFriendlyURL
    path: Text.vb
    startLine: 2017
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nPrepara uma string para se tornar uma URL amigavel (remove caracteres nao permitidos e troca\nespacos por hifen)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToFriendlyURL(this string Text, bool UseUnderscore = false)
    parameters:
    - id: Text
      type: System.String
      description: ''
    - id: UseUnderscore
      type: System.Boolean
      description: "\nIndica se os espacos serão substituidos por underscores (underline). Use FALSE para hifens\n"
    return:
      type: System.String
      description: string amigavel para URL
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToFriendlyURL(Text As String, UseUnderscore As Boolean = False) As String
  overload: InnerLibs.Text.ToFriendlyURL*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToHtmlList``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)
  commentId: M:InnerLibs.Text.ToHtmlList``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)
  id: ToHtmlList``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToHtmlList<T>(IEnumerable<T>, Boolean)
  nameWithType: Text.ToHtmlList<T>(IEnumerable<T>, Boolean)
  fullName: InnerLibs.Text.ToHtmlList<T>(System.Collections.Generic.IEnumerable<T>, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToHtmlList
    path: Text.vb
    startLine: 2029
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma uma lista em uma lista HTML (OL ou UL)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static HtmlElement ToHtmlList<T>(this IEnumerable<T> List, bool OrdenedList = false)
    parameters:
    - id: List
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    - id: OrdenedList
      type: System.Boolean
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: InnerLibs.HtmlParser.HtmlElement
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToHtmlList(Of T)(List As IEnumerable(Of T), OrdenedList As Boolean = False) As HtmlElement
  overload: InnerLibs.Text.ToHtmlList*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.ToHtmlList(Of T)(IEnumerable(Of T), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.ToHtmlList(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Boolean)
  name.vb: ToHtmlList(Of T)(IEnumerable(Of T), Boolean)
- uid: InnerLibs.Text.ToHtmlString(System.Web.UI.HtmlControls.HtmlGenericControl)
  commentId: M:InnerLibs.Text.ToHtmlString(System.Web.UI.HtmlControls.HtmlGenericControl)
  id: ToHtmlString(System.Web.UI.HtmlControls.HtmlGenericControl)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToHtmlString(HtmlGenericControl)
  nameWithType: Text.ToHtmlString(HtmlGenericControl)
  fullName: InnerLibs.Text.ToHtmlString(System.Web.UI.HtmlControls.HtmlGenericControl)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToHtmlString
    path: Text.vb
    startLine: 2038
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma um HtmlGenericControl em uma stringHTML\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToHtmlString(this HtmlGenericControl Control)
    parameters:
    - id: Control
      type: System.Web.UI.HtmlControls.HtmlGenericControl
      description: Controle HTML
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToHtmlString(Control As HtmlGenericControl) As String
  overload: InnerLibs.Text.ToHtmlString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToLeet(System.String,System.Int32)
  commentId: M:InnerLibs.Text.ToLeet(System.String,System.Int32)
  id: ToLeet(System.String,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToLeet(String, Int32)
  nameWithType: Text.ToLeet(String, Int32)
  fullName: InnerLibs.Text.ToLeet(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToLeet
    path: Text.vb
    startLine: 2055
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nConverte um texo para Leet (1337)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToLeet(this string Text, int Degree = 30)
    parameters:
    - id: Text
      type: System.String
    - id: Degree
      type: System.Int32
    return:
      type: System.String
      description: Texto em 1337
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToLeet(Text As String, Degree As Integer = 30) As String
  overload: InnerLibs.Text.ToLeet*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToMoney(System.Decimal,System.String,System.Char,System.Char)
  commentId: M:InnerLibs.Text.ToMoney(System.Decimal,System.String,System.Char,System.Char)
  id: ToMoney(System.Decimal,System.String,System.Char,System.Char)
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToMoney(Decimal, String, Char, Char)
  nameWithType: Text.ToMoney(Decimal, String, Char, Char)
  fullName: InnerLibs.Text.ToMoney(System.Decimal, System.String, System.Char, System.Char)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToMoney
    path: Text.vb
    startLine: 2733
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nFormata um numero decimal como moeda\n"
  example: []
  syntax:
    content: public static object ToMoney(decimal Number, string Currency = "R$", char ThousandSeparator = '.', char DecimalSeparator = ',')
    parameters:
    - id: Number
      type: System.Decimal
      description: Numero Decimal
    - id: Currency
      type: System.String
      description: SImbolo de moeda
    - id: ThousandSeparator
      type: System.Char
      description: Separador de milhares
    - id: DecimalSeparator
      type: System.Char
      description: Separador de casas decimais
    return:
      type: System.Object
      description: ''
    content.vb: Public Shared Function ToMoney(Number As Decimal, Currency As String = "R$", ThousandSeparator As Char = "."c, DecimalSeparator As Char = ","c) As Object
  overload: InnerLibs.Text.ToMoney*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToNumberString(System.Decimal,System.Char,System.Char)
  commentId: M:InnerLibs.Text.ToNumberString(System.Decimal,System.Char,System.Char)
  id: ToNumberString(System.Decimal,System.Char,System.Char)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToNumberString(Decimal, Char, Char)
  nameWithType: Text.ToNumberString(Decimal, Char, Char)
  fullName: InnerLibs.Text.ToNumberString(System.Decimal, System.Char, System.Char)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToNumberString
    path: Text.vb
    startLine: 2744
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nFormata um numero decimal com separador de milhares e 2 casas decimais.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToNumberString(this decimal Number, char ThousandSeparator = '.', char DecimalSeparator = ',')
    parameters:
    - id: Number
      type: System.Decimal
      description: Numero Decimal
    - id: ThousandSeparator
      type: System.Char
      description: Separador de milhares
    - id: DecimalSeparator
      type: System.Char
      description: Separador de casas decimais
    return:
      type: System.String
      description: Numero formatado em string
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToNumberString(Number As Decimal, ThousandSeparator As Char = "."c, DecimalSeparator As Char = ","c) As String
  overload: InnerLibs.Text.ToNumberString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToPercentString(System.Decimal)
  commentId: M:InnerLibs.Text.ToPercentString(System.Decimal)
  id: ToPercentString(System.Decimal)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToPercentString(Decimal)
  nameWithType: Text.ToPercentString(Decimal)
  fullName: InnerLibs.Text.ToPercentString(System.Decimal)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToPercentString
    path: Text.vb
    startLine: 2757
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um numero com o sinal de porcentagem\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object ToPercentString(this decimal Number)
    parameters:
    - id: Number
      type: System.Decimal
      description: ''
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToPercentString(Number As Decimal) As Object
  overload: InnerLibs.Text.ToPercentString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToPercentString(System.Int32)
  commentId: M:InnerLibs.Text.ToPercentString(System.Int32)
  id: ToPercentString(System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToPercentString(Int32)
  nameWithType: Text.ToPercentString(Int32)
  fullName: InnerLibs.Text.ToPercentString(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToPercentString
    path: Text.vb
    startLine: 2766
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um numero com o sinal de porcentagem\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object ToPercentString(this int Number)
    parameters:
    - id: Number
      type: System.Int32
      description: ''
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToPercentString(Number As Integer) As Object
  overload: InnerLibs.Text.ToPercentString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToPercentString(System.Double)
  commentId: M:InnerLibs.Text.ToPercentString(System.Double)
  id: ToPercentString(System.Double)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToPercentString(Double)
  nameWithType: Text.ToPercentString(Double)
  fullName: InnerLibs.Text.ToPercentString(System.Double)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToPercentString
    path: Text.vb
    startLine: 2775
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um numero com o sinal de porcentagem\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object ToPercentString(this double Number)
    parameters:
    - id: Number
      type: System.Double
      description: ''
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToPercentString(Number As Double) As Object
  overload: InnerLibs.Text.ToPercentString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToPercentString(System.Int16)
  commentId: M:InnerLibs.Text.ToPercentString(System.Int16)
  id: ToPercentString(System.Int16)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToPercentString(Int16)
  nameWithType: Text.ToPercentString(Int16)
  fullName: InnerLibs.Text.ToPercentString(System.Int16)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToPercentString
    path: Text.vb
    startLine: 2784
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um numero com o sinal de porcentagem\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object ToPercentString(this short Number)
    parameters:
    - id: Number
      type: System.Int16
      description: ''
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToPercentString(Number As Short) As Object
  overload: InnerLibs.Text.ToPercentString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToPercentString(System.Int64)
  commentId: M:InnerLibs.Text.ToPercentString(System.Int64)
  id: ToPercentString(System.Int64)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToPercentString(Int64)
  nameWithType: Text.ToPercentString(Int64)
  fullName: InnerLibs.Text.ToPercentString(System.Int64)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToPercentString
    path: Text.vb
    startLine: 2793
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um numero com o sinal de porcentagem\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object ToPercentString(this long Number)
    parameters:
    - id: Number
      type: System.Int64
      description: ''
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToPercentString(Number As Long) As Object
  overload: InnerLibs.Text.ToPercentString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToProper(System.String)
  commentId: M:InnerLibs.Text.ToProper(System.String)
  id: ToProper(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToProper(String)
  nameWithType: Text.ToProper(String)
  fullName: InnerLibs.Text.ToProper(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToProper
    path: Text.vb
    startLine: 2797
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: >-
      [Extension]

      public static string ToProper(this string Text)
    parameters:
    - id: Text
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToProper(Text As String) As String
  overload: InnerLibs.Text.ToProper*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToSlug(System.String,System.Boolean)
  commentId: M:InnerLibs.Text.ToSlug(System.String,System.Boolean)
  id: ToSlug(System.String,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToSlug(String, Boolean)
  nameWithType: Text.ToSlug(String, Boolean)
  fullName: InnerLibs.Text.ToSlug(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToSlug
    path: Text.vb
    startLine: 2811
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nPrepara uma string para se tornar uma URL amigavel (remove caracteres nao permitidos e troca\nespacos por hifen). É um alias para <xref href=\"InnerLibs.Text.ToFriendlyURL(System.String%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToSlug(this string Text, bool UseUnderscore = false)
    parameters:
    - id: Text
      type: System.String
      description: ''
    - id: UseUnderscore
      type: System.Boolean
      description: "\nIndica se os espacos serão substituidos por underscores (underline). Use FALSE para hifens\n"
    return:
      type: System.String
      description: string amigavel para URL
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToSlug(Text As String, UseUnderscore As Boolean = False) As String
  overload: InnerLibs.Text.ToSlug*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToSnake(System.String)
  commentId: M:InnerLibs.Text.ToSnake(System.String)
  id: ToSnake(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToSnake(String)
  nameWithType: Text.ToSnake(String)
  fullName: InnerLibs.Text.ToSnake(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToSnake
    path: Text.vb
    startLine: 2815
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  syntax:
    content: >-
      [Extension]

      public static string ToSnake(this string Text)
    parameters:
    - id: Text
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToSnake(Text As String) As String
  overload: InnerLibs.Text.ToSnake*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToStream(System.String)
  commentId: M:InnerLibs.Text.ToStream(System.String)
  id: ToStream(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToStream(String)
  nameWithType: Text.ToStream(String)
  fullName: InnerLibs.Text.ToStream(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToStream
    path: Text.vb
    startLine: 2825
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nCria um <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> a partir de uma string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Stream ToStream(this string Text)
    parameters:
    - id: Text
      type: System.String
    return:
      type: System.IO.Stream
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToStream(Text As String) As Stream
  overload: InnerLibs.Text.ToStream*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToTelephone(System.String)
  commentId: M:InnerLibs.Text.ToTelephone(System.String)
  id: ToTelephone(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToTelephone(String)
  nameWithType: Text.ToTelephone(String)
  fullName: InnerLibs.Text.ToTelephone(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToTelephone
    path: Text.vb
    startLine: 2839
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAplica uma mascara a um numero de telefone\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToTelephone(this string Number)
    parameters:
    - id: Number
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToTelephone(Number As String) As String
  overload: InnerLibs.Text.ToTelephone*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToTelephone(System.Int64)
  commentId: M:InnerLibs.Text.ToTelephone(System.Int64)
  id: ToTelephone(System.Int64)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToTelephone(Int64)
  nameWithType: Text.ToTelephone(Int64)
  fullName: InnerLibs.Text.ToTelephone(System.Int64)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToTelephone
    path: Text.vb
    startLine: 2870
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAplica uma mascara a um numero de telefone\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToTelephone(this long Number)
    parameters:
    - id: Number
      type: System.Int64
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToTelephone(Number As Long) As String
  overload: InnerLibs.Text.ToTelephone*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToTelephone(System.Int32)
  commentId: M:InnerLibs.Text.ToTelephone(System.Int32)
  id: ToTelephone(System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToTelephone(Int32)
  nameWithType: Text.ToTelephone(Int32)
  fullName: InnerLibs.Text.ToTelephone(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToTelephone
    path: Text.vb
    startLine: 2879
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAplica uma mascara a um numero de telefone\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToTelephone(this int Number)
    parameters:
    - id: Number
      type: System.Int32
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToTelephone(Number As Integer) As String
  overload: InnerLibs.Text.ToTelephone*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToTelephone(System.Decimal)
  commentId: M:InnerLibs.Text.ToTelephone(System.Decimal)
  id: ToTelephone(System.Decimal)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToTelephone(Decimal)
  nameWithType: Text.ToTelephone(Decimal)
  fullName: InnerLibs.Text.ToTelephone(System.Decimal)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToTelephone
    path: Text.vb
    startLine: 2888
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAplica uma mascara a um numero de telefone\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToTelephone(this decimal Number)
    parameters:
    - id: Number
      type: System.Decimal
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToTelephone(Number As Decimal) As String
  overload: InnerLibs.Text.ToTelephone*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToTelephone(System.Double)
  commentId: M:InnerLibs.Text.ToTelephone(System.Double)
  id: ToTelephone(System.Double)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToTelephone(Double)
  nameWithType: Text.ToTelephone(Double)
  fullName: InnerLibs.Text.ToTelephone(System.Double)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToTelephone
    path: Text.vb
    startLine: 2897
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAplica uma mascara a um numero de telefone\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToTelephone(this double Number)
    parameters:
    - id: Number
      type: System.Double
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToTelephone(Number As Double) As String
  overload: InnerLibs.Text.ToTelephone*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToTitle(System.String)
  commentId: M:InnerLibs.Text.ToTitle(System.String)
  id: ToTitle(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToTitle(String)
  nameWithType: Text.ToTitle(String)
  fullName: InnerLibs.Text.ToTitle(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToTitle
    path: Text.vb
    startLine: 2907
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma um texto em titulo Ex.: igor -> Igor / inner code -> Inner Code\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToTitle(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: Texto a ser manipulado
    return:
      type: System.String
      description: Uma String com o texto em nome próprio
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToTitle(Text As String) As String
  overload: InnerLibs.Text.ToTitle*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToUnitString(System.Decimal)
  commentId: M:InnerLibs.Text.ToUnitString(System.Decimal)
  id: ToUnitString(System.Decimal)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToUnitString(Decimal)
  nameWithType: Text.ToUnitString(Decimal)
  fullName: InnerLibs.Text.ToUnitString(System.Decimal)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToUnitString
    path: Text.vb
    startLine: 2917
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAbrevia um numero adicionando o letra da unidade que o representa\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToUnitString(this decimal Number)
    parameters:
    - id: Number
      type: System.Decimal
      description: Numero
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToUnitString(Number As Decimal) As String
  overload: InnerLibs.Text.ToUnitString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToQuantityText(System.Int32,System.Globalization.CultureInfo)
  commentId: M:InnerLibs.Text.ToQuantityText(System.Int32,System.Globalization.CultureInfo)
  id: ToQuantityText(System.Int32,System.Globalization.CultureInfo)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToQuantityText(Int32, CultureInfo)
  nameWithType: Text.ToQuantityText(Int32, CultureInfo)
  fullName: InnerLibs.Text.ToQuantityText(System.Int32, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToQuantityText
    path: Text.vb
    startLine: 2935
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um texto quantificado a partir de um numero\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToQuantityText(this int Number, CultureInfo CultureInfo = null)
    parameters:
    - id: Number
      type: System.Int32
      description: ''
    - id: CultureInfo
      type: System.Globalization.CultureInfo
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToQuantityText(Number As Integer, CultureInfo As CultureInfo = Nothing) As String
  overload: InnerLibs.Text.ToQuantityText*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToQuantityText(System.Int64,System.Globalization.CultureInfo)
  commentId: M:InnerLibs.Text.ToQuantityText(System.Int64,System.Globalization.CultureInfo)
  id: ToQuantityText(System.Int64,System.Globalization.CultureInfo)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToQuantityText(Int64, CultureInfo)
  nameWithType: Text.ToQuantityText(Int64, CultureInfo)
  fullName: InnerLibs.Text.ToQuantityText(System.Int64, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToQuantityText
    path: Text.vb
    startLine: 2945
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um texto quantificado a partir de um numero\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToQuantityText(this long Number, CultureInfo CultureInfo = null)
    parameters:
    - id: Number
      type: System.Int64
      description: ''
    - id: CultureInfo
      type: System.Globalization.CultureInfo
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToQuantityText(Number As Long, CultureInfo As CultureInfo = Nothing) As String
  overload: InnerLibs.Text.ToQuantityText*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToQuantityText(System.Decimal,System.Globalization.CultureInfo)
  commentId: M:InnerLibs.Text.ToQuantityText(System.Decimal,System.Globalization.CultureInfo)
  id: ToQuantityText(System.Decimal,System.Globalization.CultureInfo)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToQuantityText(Decimal, CultureInfo)
  nameWithType: Text.ToQuantityText(Decimal, CultureInfo)
  fullName: InnerLibs.Text.ToQuantityText(System.Decimal, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToQuantityText
    path: Text.vb
    startLine: 2955
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRetorna um texto quantificado a partir de um numero\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToQuantityText(this decimal Number, CultureInfo CultureInfo = null)
    parameters:
    - id: Number
      type: System.Decimal
      description: ''
    - id: CultureInfo
      type: System.Globalization.CultureInfo
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToQuantityText(Number As Decimal, CultureInfo As CultureInfo = Nothing) As String
  overload: InnerLibs.Text.ToQuantityText*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToUnitString(System.Int32)
  commentId: M:InnerLibs.Text.ToUnitString(System.Int32)
  id: ToUnitString(System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToUnitString(Int32)
  nameWithType: Text.ToUnitString(Int32)
  fullName: InnerLibs.Text.ToUnitString(System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToUnitString
    path: Text.vb
    startLine: 2971
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAbrevia um numero adicionando o letra da unidade que o representa\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object ToUnitString(this int Number)
    parameters:
    - id: Number
      type: System.Int32
      description: Numero
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToUnitString(Number As Integer) As Object
  overload: InnerLibs.Text.ToUnitString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToUnitString(System.Int64)
  commentId: M:InnerLibs.Text.ToUnitString(System.Int64)
  id: ToUnitString(System.Int64)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToUnitString(Int64)
  nameWithType: Text.ToUnitString(Int64)
  fullName: InnerLibs.Text.ToUnitString(System.Int64)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToUnitString
    path: Text.vb
    startLine: 2980
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAbrevia um numero adicionando o letra da unidade que o representa\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object ToUnitString(this long Number)
    parameters:
    - id: Number
      type: System.Int64
      description: Numero
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToUnitString(Number As Long) As Object
  overload: InnerLibs.Text.ToUnitString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToUnitString(System.Int16)
  commentId: M:InnerLibs.Text.ToUnitString(System.Int16)
  id: ToUnitString(System.Int16)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToUnitString(Int16)
  nameWithType: Text.ToUnitString(Int16)
  fullName: InnerLibs.Text.ToUnitString(System.Int16)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToUnitString
    path: Text.vb
    startLine: 2989
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nAbrevia um numero adicionando o letra da unidade que o representa\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object ToUnitString(this short Number)
    parameters:
    - id: Number
      type: System.Int16
      description: Numero
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToUnitString(Number As Short) As Object
  overload: InnerLibs.Text.ToUnitString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.ToXMLString(System.Xml.XmlDocument)
  commentId: M:InnerLibs.Text.ToXMLString(System.Xml.XmlDocument)
  id: ToXMLString(System.Xml.XmlDocument)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: ToXMLString(XmlDocument)
  nameWithType: Text.ToXMLString(XmlDocument)
  fullName: InnerLibs.Text.ToXMLString(System.Xml.XmlDocument)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: ToXMLString
    path: Text.vb
    startLine: 2998
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nTransforma um XML Document em string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string ToXMLString(this XmlDocument XML)
    parameters:
    - id: XML
      type: System.Xml.XmlDocument
      description: Documento XML
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ToXMLString(XML As XmlDocument) As String
  overload: InnerLibs.Text.ToXMLString*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.TrimAny(System.String,System.Boolean,System.String[])
  commentId: M:InnerLibs.Text.TrimAny(System.String,System.Boolean,System.String[])
  id: TrimAny(System.String,System.Boolean,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: TrimAny(String, Boolean, String[])
  nameWithType: Text.TrimAny(String, Boolean, String[])
  fullName: InnerLibs.Text.TrimAny(System.String, System.Boolean, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: TrimAny
    path: Text.vb
    startLine: 3019
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove do começo e do final de uma string qualquer valor que estiver no conjunto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string TrimAny(this string Text, bool ContinuouslyRemove, params string[] StringTest)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: ContinuouslyRemove
      type: System.Boolean
      description: "\nParametro que indica se a string deve continuar sendo testada até que todas as ocorrencias\nsejam removidas\n"
    - id: StringTest
      type: System.String[]
      description: Conjunto de textos que serão comparados
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function TrimAny(Text As String, ContinuouslyRemove As Boolean, ParamArray StringTest As String()) As String
  overload: InnerLibs.Text.TrimAny*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.TrimAny(String, Boolean, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.TrimAny(System.String, System.Boolean, System.String())
  name.vb: TrimAny(String, Boolean, String())
- uid: InnerLibs.Text.TrimAny(System.String,System.String[])
  commentId: M:InnerLibs.Text.TrimAny(System.String,System.String[])
  id: TrimAny(System.String,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: TrimAny(String, String[])
  nameWithType: Text.TrimAny(String, String[])
  fullName: InnerLibs.Text.TrimAny(System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: TrimAny
    path: Text.vb
    startLine: 3036
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove do começo e do final de uma string qualquer valor que estiver no conjunto\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string TrimAny(this string Text, params string[] StringTest)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: StringTest
      type: System.String[]
      description: Conjunto de textos que serão comparados
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function TrimAny(Text As String, ParamArray StringTest As String()) As String
  overload: InnerLibs.Text.TrimAny*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: Text.TrimAny(String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.Text.TrimAny(System.String, System.String())
  name.vb: TrimAny(String, String())
- uid: InnerLibs.Text.TrimCarriage(System.String)
  commentId: M:InnerLibs.Text.TrimCarriage(System.String)
  id: TrimCarriage(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: TrimCarriage(String)
  nameWithType: Text.TrimCarriage(String)
  fullName: InnerLibs.Text.TrimCarriage(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: TrimCarriage
    path: Text.vb
    startLine: 3045
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nRemove continuamente caracteres em branco do começo e fim de uma string incluindo breaklines\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string TrimCarriage(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function TrimCarriage(Text As String) As String
  overload: InnerLibs.Text.TrimCarriage*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.UrlDecode(System.String)
  commentId: M:InnerLibs.Text.UrlDecode(System.String)
  id: UrlDecode(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: UrlDecode(String)
  nameWithType: Text.UrlDecode(String)
  fullName: InnerLibs.Text.UrlDecode(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: UrlDecode
    path: Text.vb
    startLine: 3054
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nDecoda uma string de uma transmissão por URL\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string UrlDecode(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function UrlDecode(Text As String) As String
  overload: InnerLibs.Text.UrlDecode*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.UrlEncode(System.String)
  commentId: M:InnerLibs.Text.UrlEncode(System.String)
  id: UrlEncode(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: UrlEncode(String)
  nameWithType: Text.UrlEncode(String)
  fullName: InnerLibs.Text.UrlEncode(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: UrlEncode
    path: Text.vb
    startLine: 3064
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nEncoda uma string para transmissão por URL\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string UrlEncode(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function UrlEncode(Text As String) As String
  overload: InnerLibs.Text.UrlEncode*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.Wrap(System.String,System.String)
  commentId: M:InnerLibs.Text.Wrap(System.String,System.String)
  id: Wrap(System.String,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: Wrap(String, String)
  nameWithType: Text.Wrap(String, String)
  fullName: InnerLibs.Text.Wrap(System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: Wrap
    path: Text.vb
    startLine: 3075
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nEncapsula um tento entre 2 textos\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string Wrap(this string Text, string WrapText = "\"")
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: WrapText
      type: System.String
      description: Caractere de encapsulamento
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Wrap(Text As String, WrapText As String = """") As String
  overload: InnerLibs.Text.Wrap*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.WrapInTag(System.String,System.String)
  commentId: M:InnerLibs.Text.WrapInTag(System.String,System.String)
  id: WrapInTag(System.String,System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: WrapInTag(String, String)
  nameWithType: Text.WrapInTag(String, String)
  fullName: InnerLibs.Text.WrapInTag(System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: WrapInTag
    path: Text.vb
    startLine: 3089
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nEncapsula um texto dentro de um elemento HTML\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static HtmlElement WrapInTag(this string Text, string TagName)
    parameters:
    - id: Text
      type: System.String
      description: Texto
    - id: TagName
      type: System.String
      description: 'Nome da Tag (Exemplo: div)'
    return:
      type: InnerLibs.HtmlParser.HtmlElement
      description: Uma string HTML com seu texto dentro de uma tag
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function WrapInTag(Text As String, TagName As String) As HtmlElement
  overload: InnerLibs.Text.WrapInTag*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InnerLibs.Text.FindNumbers(System.String)
  commentId: M:InnerLibs.Text.FindNumbers(System.String)
  id: FindNumbers(System.String)
  isExtensionMethod: true
  parent: InnerLibs.Text
  langs:
  - csharp
  - vb
  name: FindNumbers(String)
  nameWithType: Text.FindNumbers(String)
  fullName: InnerLibs.Text.FindNumbers(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Text.vb
    id: FindNumbers
    path: Text.vb
    startLine: 3101
  assemblies:
  - InnerLibs
  namespace: InnerLibs
  summary: "\nProcura numeros em uma string e retorna um array deles\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static long[] FindNumbers(this string Text)
    parameters:
    - id: Text
      type: System.String
      description: ''
    return:
      type: System.Int64[]
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function FindNumbers(Text As String) As Long()
  overload: InnerLibs.Text.FindNumbers*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: InnerLibs
  commentId: N:InnerLibs
  name: InnerLibs
  nameWithType: InnerLibs
  fullName: InnerLibs
- uid: InnerLibs.Text.InnerLibs.ClassTools.CreateDictionary
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary()
  nameWithType: ClassTools.CreateDictionary()
  fullName: InnerLibs.ClassTools.CreateDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  name: GetProperties(BindingFlags)
  nameWithType: ClassTools.GetProperties(BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object)
  name: GetProperties()
  nameWithType: ClassTools.GetProperties()
  fullName: InnerLibs.ClassTools.GetProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  name: GetPropertyValue(String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  name: GetPropertyValue<Type>(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  name: GetPropertyValue(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  name: HasProperty(String)
  nameWithType: ClassTools.HasProperty(String)
  fullName: InnerLibs.ClassTools.HasProperty(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsArrayOf``1
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  name: IsArrayOf<T>()
  nameWithType: ClassTools.IsArrayOf<T>()
  fullName: InnerLibs.ClassTools.IsArrayOf<T>()
  nameWithType.vb: ClassTools.IsArrayOf(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)()
  name.vb: IsArrayOf(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsDictionary
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsDictionary(System.Object)
  name: IsDictionary()
  nameWithType: ClassTools.IsDictionary()
  fullName: InnerLibs.ClassTools.IsDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Text},System.Collections.Generic.IEqualityComparer{InnerLibs.Text})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsIn(IEnumerable<Text>, IEqualityComparer<Text>)
  nameWithType: ClassTools.IsIn(IEnumerable<Text>, IEqualityComparer<Text>)
  fullName: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable<InnerLibs.Text>, System.Collections.Generic.IEqualityComparer<InnerLibs.Text>)
  nameWithType.vb: ClassTools.IsIn(IEnumerable(Of Text), IEqualityComparer(Of Text))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable(Of InnerLibs.Text), System.Collections.Generic.IEqualityComparer(Of InnerLibs.Text))
  name.vb: IsIn(IEnumerable(Of Text), IEqualityComparer(Of Text))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Text},System.Collections.Generic.IEqualityComparer{InnerLibs.Text})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Text},System.Collections.Generic.IEqualityComparer{InnerLibs.Text})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Text}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Text})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  name: IsInAny(IEnumerable<Text>[], IEqualityComparer<Text>)
  nameWithType: ClassTools.IsInAny(IEnumerable<Text>[], IEqualityComparer<Text>)
  fullName: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable<InnerLibs.Text>[], System.Collections.Generic.IEqualityComparer<InnerLibs.Text>)
  nameWithType.vb: ClassTools.IsInAny(IEnumerable(Of Text)(), IEqualityComparer(Of Text))
  fullName.vb: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable(Of InnerLibs.Text)(), System.Collections.Generic.IEqualityComparer(Of InnerLibs.Text))
  name.vb: IsInAny(IEnumerable(Of Text)(), IEqualityComparer(Of Text))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Text}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Text})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Text}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Text})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsList
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsList(System.Object)
  name: IsList()
  nameWithType: ClassTools.IsList()
  fullName: InnerLibs.ClassTools.IsList()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Text},System.Collections.Generic.IEqualityComparer{InnerLibs.Text})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsNotIn(IEnumerable<Text>, IEqualityComparer<Text>)
  nameWithType: ClassTools.IsNotIn(IEnumerable<Text>, IEqualityComparer<Text>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable<InnerLibs.Text>, System.Collections.Generic.IEqualityComparer<InnerLibs.Text>)
  nameWithType.vb: ClassTools.IsNotIn(IEnumerable(Of Text), IEqualityComparer(Of Text))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable(Of InnerLibs.Text), System.Collections.Generic.IEqualityComparer(Of InnerLibs.Text))
  name.vb: IsNotIn(IEnumerable(Of Text), IEqualityComparer(Of Text))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Text},System.Collections.Generic.IEqualityComparer{InnerLibs.Text})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Text},System.Collections.Generic.IEqualityComparer{InnerLibs.Text})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsNotIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsType``1
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsType``1(System.Object)
  name: IsType<T>()
  nameWithType: ClassTools.IsType<T>()
  fullName: InnerLibs.ClassTools.IsType<T>()
  nameWithType.vb: ClassTools.IsType(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)()
  name.vb: IsType(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.ClassTools.NullCoalesce(InnerLibs.Text[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce(Text[])
  nameWithType: ClassTools.NullCoalesce(Text[])
  fullName: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Text[])
  nameWithType.vb: ClassTools.NullCoalesce(Text())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Text())
  name.vb: NullCoalesce(Text())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Text[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Text[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.ClassTools.NullifyProperties
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties()
  nameWithType: ClassTools.NullifyProperties()
  fullName: InnerLibs.ClassTools.NullifyProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  name: SetPropertyValue<Type>(String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.String, Type)
  name.vb: SetPropertyValue(Of Type)(String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  name: SetPropertyValueFromCollection<Type>(String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  name: ToFlatString(String)
  nameWithType: ClassTools.ToFlatString(String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.DataManipulation.GetDbType
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  parent: InnerLibs.DataManipulation
  definition: InnerLibs.DataManipulation.GetDbType(System.Object)
  name: GetDbType()
  nameWithType: DataManipulation.GetDbType()
  fullName: InnerLibs.DataManipulation.GetDbType()
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.Converter.DefineEmptyList
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList()
  nameWithType: Converter.DefineEmptyList()
  fullName: InnerLibs.Converter.DefineEmptyList()
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.Converter.ChangeType``1
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType>()
  nameWithType: Converter.ChangeType<ToType>()
  fullName: InnerLibs.Converter.ChangeType<ToType>()
  nameWithType.vb: Converter.ChangeType(Of ToType)()
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType)()
  name.vb: ChangeType(Of ToType)()
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType<ToType>
    nameWithType: Converter.ChangeType<ToType>
    fullName: InnerLibs.Converter.ChangeType<ToType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType(Of ToType)
    nameWithType: Converter.ChangeType(Of ToType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.JsonViewer.CreateNode
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  parent: InnerLibs.JsonViewer
  definition: InnerLibs.JsonViewer.CreateNode(System.Object)
  name: CreateNode()
  nameWithType: JsonViewer.CreateNode()
  fullName: InnerLibs.JsonViewer.CreateNode()
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  parent: InnerLibs.Mathematic
  definition: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  name: IsBetween(Object, Object)
  nameWithType: Mathematic.IsBetween(Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Text.SerializeJSON(System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  parent: InnerLibs.Text
  definition: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  name: SerializeJSON(String)
  nameWithType: Text.SerializeJSON(String)
  fullName: InnerLibs.Text.SerializeJSON(System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNumber
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNumber(System.Object)
  name: IsNumber()
  nameWithType: Verify.IsNumber()
  fullName: InnerLibs.Verify.IsNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNotNumber
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNotNumber(System.Object)
  name: IsNotNumber()
  nameWithType: Verify.IsNotNumber()
  fullName: InnerLibs.Verify.IsNotNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IfBlank``1({T})
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  name: IfBlank<T>(T)
  nameWithType: Verify.IfBlank<T>(T)
  fullName: InnerLibs.Verify.IfBlank<T>(T)
  nameWithType.vb: Verify.IfBlank(Of T)(T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(T)
  name.vb: IfBlank(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.Verify.NullIf(System.Func{InnerLibs.Text,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  name: NullIf(Func<Text, Boolean>)
  nameWithType: Verify.NullIf(Func<Text, Boolean>)
  fullName: InnerLibs.Verify.NullIf(System.Func<InnerLibs.Text, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Func(Of Text, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(System.Func(Of InnerLibs.Text, System.Boolean))
  name.vb: NullIf(Func(Of Text, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.Text,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.Text,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.Verify.NullIf(InnerLibs.Text)
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf(Text)
  nameWithType: Verify.NullIf(Text)
  fullName: InnerLibs.Verify.NullIf(InnerLibs.Text)
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.Text)
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.Text)
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  parent: InnerLibs.Web
  definition: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  name: CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax(System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Text,{TextType}},System.Func{InnerLibs.Text,{ValueType}})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  parent: InnerLibs.Web
  definition: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  name: AsListItem<TextType, ValueType>(Func<Text, TextType>, Func<Text, ValueType>)
  nameWithType: Web.AsListItem<TextType, ValueType>(Func<Text, TextType>, Func<Text, ValueType>)
  fullName: InnerLibs.Web.AsListItem<TextType, ValueType>(System.Func<InnerLibs.Text, TextType>, System.Func<InnerLibs.Text, ValueType>)
  nameWithType.vb: Web.AsListItem(Of TextType, ValueType)(Func(Of Text, TextType), Func(Of Text, ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of TextType, ValueType)(System.Func(Of InnerLibs.Text, TextType), System.Func(Of InnerLibs.Text, ValueType))
  name.vb: AsListItem(Of TextType, ValueType)(Func(Of Text, TextType), Func(Of Text, ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Text,``0},System.Func{InnerLibs.Text,``1})
    name: AsListItem<TextType, ValueType>
    nameWithType: Web.AsListItem<TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Text,``0},System.Func{InnerLibs.Text,``1})
    name: AsListItem(Of TextType, ValueType)
    nameWithType: Web.AsListItem(Of TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.GetCastedValue
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.GetCastedValue(System.Object)
  name: GetCastedValue()
  nameWithType: WinForms.GetCastedValue()
  fullName: InnerLibs.WinForms.GetCastedValue()
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  name: CastValueForControl(Object)
  nameWithType: WinForms.CastValueForControl(Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  name: ApplyToControls(HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls(HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Text,System.Func{InnerLibs.Text,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  name: HasSamePropertyValues(Text, Func<Text, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues(Text, Func<Text, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Text, System.Func<InnerLibs.Text, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(Text, Func(Of Text, Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Text, System.Func(Of InnerLibs.Text, System.Object)())
  name.vb: HasSamePropertyValues(Text, Func(Of Text, Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Text,System.Func{InnerLibs.Text,System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Text,System.Func{InnerLibs.Text,System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Text
    name: Text
    nameWithType: Text
    fullName: InnerLibs.Text
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary<Type>(Type)
  nameWithType: ClassTools.CreateDictionary<Type>(Type)
  fullName: InnerLibs.ClassTools.CreateDictionary<Type>(Type)
  nameWithType.vb: ClassTools.CreateDictionary(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.CreateDictionary(Of Type)(Type)
  name.vb: CreateDictionary(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary<Type>
    nameWithType: ClassTools.CreateDictionary<Type>
    fullName: InnerLibs.ClassTools.CreateDictionary<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary(Of Type)
    nameWithType: ClassTools.CreateDictionary(Of Type)
    fullName: InnerLibs.ClassTools.CreateDictionary(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools
  commentId: T:InnerLibs.ClassTools
  parent: InnerLibs
  name: ClassTools
  nameWithType: ClassTools
  fullName: InnerLibs.ClassTools
- uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  isExternal: true
  name: GetProperties(Object, BindingFlags)
  nameWithType: ClassTools.GetProperties(Object, BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object, System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetProperties(System.Object)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  isExternal: true
  name: GetProperties(Object)
  nameWithType: ClassTools.GetProperties(Object)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue<Type>(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.Object, System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(Object, String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.Object, System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(Object, String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  isExternal: true
  name: HasProperty(Object, String)
  nameWithType: ClassTools.HasProperty(Object, String)
  fullName: InnerLibs.ClassTools.HasProperty(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  isExternal: true
  name: IsArrayOf<T>(Object)
  nameWithType: ClassTools.IsArrayOf<T>(Object)
  fullName: InnerLibs.ClassTools.IsArrayOf<T>(System.Object)
  nameWithType.vb: ClassTools.IsArrayOf(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)(System.Object)
  name.vb: IsArrayOf(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsDictionary(System.Object)
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  isExternal: true
  name: IsDictionary(Object)
  nameWithType: ClassTools.IsDictionary(Object)
  fullName: InnerLibs.ClassTools.IsDictionary(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  nameWithType: ClassTools.IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsInAny<Type>(Type, System.Collections.Generic.IEnumerable<Type>[], System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsInAny(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type)(), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny<Type>
    nameWithType: ClassTools.IsInAny<Type>
    fullName: InnerLibs.ClassTools.IsInAny<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny(Of Type)
    nameWithType: ClassTools.IsInAny(Of Type)
    fullName: InnerLibs.ClassTools.IsInAny(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsList(System.Object)
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  isExternal: true
  name: IsList(Object)
  nameWithType: ClassTools.IsList(Object)
  fullName: InnerLibs.ClassTools.IsList(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsType``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  isExternal: true
  name: IsType<T>(Object)
  nameWithType: ClassTools.IsType<T>(Object)
  fullName: InnerLibs.ClassTools.IsType<T>(System.Object)
  nameWithType.vb: ClassTools.IsType(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)(System.Object)
  name.vb: IsType(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce<T>(T, T[])
  nameWithType: ClassTools.NullCoalesce<T>(T, T[])
  fullName: InnerLibs.ClassTools.NullCoalesce<T>(T, T[])
  nameWithType.vb: ClassTools.NullCoalesce(Of T)(T, T())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(Of T)(T, T())
  name.vb: NullCoalesce(Of T)(T, T())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce<T>
    nameWithType: ClassTools.NullCoalesce<T>
    fullName: InnerLibs.ClassTools.NullCoalesce<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce(Of T)
    nameWithType: ClassTools.NullCoalesce(Of T)
    fullName: InnerLibs.ClassTools.NullCoalesce(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties<Type>(Type)
  nameWithType: ClassTools.NullifyProperties<Type>(Type)
  fullName: InnerLibs.ClassTools.NullifyProperties<Type>(Type)
  nameWithType.vb: ClassTools.NullifyProperties(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.NullifyProperties(Of Type)(Type)
  name.vb: NullifyProperties(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties<Type>
    nameWithType: ClassTools.NullifyProperties<Type>
    fullName: InnerLibs.ClassTools.NullifyProperties<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties(Of Type)
    nameWithType: ClassTools.NullifyProperties(Of Type)
    fullName: InnerLibs.ClassTools.NullifyProperties(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  isExternal: true
  name: SetPropertyValue<Type>(Object, String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(Object, String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.Object, System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(Object, String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.Object, System.String, Type)
  name.vb: SetPropertyValue(Of Type)(Object, String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  isExternal: true
  name: SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.Object, System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.Object, System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  isExternal: true
  name: ToFlatString(Object, String)
  nameWithType: ClassTools.ToFlatString(Object, String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation.GetDbType(System.Object)
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  isExternal: true
  name: GetDbType(Object)
  nameWithType: DataManipulation.GetDbType(Object)
  fullName: InnerLibs.DataManipulation.GetDbType(System.Object)
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation
  commentId: T:InnerLibs.DataManipulation
  parent: InnerLibs
  name: DataManipulation
  nameWithType: DataManipulation
  fullName: InnerLibs.DataManipulation
- uid: InnerLibs.Converter.DefineEmptyList``1(``0)
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList<T>(T)
  nameWithType: Converter.DefineEmptyList<T>(T)
  fullName: InnerLibs.Converter.DefineEmptyList<T>(T)
  nameWithType.vb: Converter.DefineEmptyList(Of T)(T)
  fullName.vb: InnerLibs.Converter.DefineEmptyList(Of T)(T)
  name.vb: DefineEmptyList(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList<T>
    nameWithType: Converter.DefineEmptyList<T>
    fullName: InnerLibs.Converter.DefineEmptyList<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList(Of T)
    nameWithType: Converter.DefineEmptyList(Of T)
    fullName: InnerLibs.Converter.DefineEmptyList(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Converter
  commentId: T:InnerLibs.Converter
  parent: InnerLibs
  name: Converter
  nameWithType: Converter
  fullName: InnerLibs.Converter
- uid: InnerLibs.Converter.ChangeType``2(``1)
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType, FromType>(FromType)
  nameWithType: Converter.ChangeType<ToType, FromType>(FromType)
  fullName: InnerLibs.Converter.ChangeType<ToType, FromType>(FromType)
  nameWithType.vb: Converter.ChangeType(Of ToType, FromType)(FromType)
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType, FromType)(FromType)
  name.vb: ChangeType(Of ToType, FromType)(FromType)
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType<ToType, FromType>
    nameWithType: Converter.ChangeType<ToType, FromType>
    fullName: InnerLibs.Converter.ChangeType<ToType, FromType>
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType(Of ToType, FromType)
    nameWithType: Converter.ChangeType(Of ToType, FromType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType, FromType)
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer.CreateNode(System.Object)
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  isExternal: true
  name: CreateNode(Object)
  nameWithType: JsonViewer.CreateNode(Object)
  fullName: InnerLibs.JsonViewer.CreateNode(System.Object)
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer
  commentId: T:InnerLibs.JsonViewer
  parent: InnerLibs
  name: JsonViewer
  nameWithType: JsonViewer
  fullName: InnerLibs.JsonViewer
- uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  isExternal: true
  name: IsBetween<Type>(Type, Object, Object)
  nameWithType: Mathematic.IsBetween<Type>(Type, Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween<Type>(Type, System.Object, System.Object)
  nameWithType.vb: Mathematic.IsBetween(Of Type)(Type, Object, Object)
  fullName.vb: InnerLibs.Mathematic.IsBetween(Of Type)(Type, System.Object, System.Object)
  name.vb: IsBetween(Of Type)(Type, Object, Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween<Type>
    nameWithType: Mathematic.IsBetween<Type>
    fullName: InnerLibs.Mathematic.IsBetween<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween(Of Type)
    nameWithType: Mathematic.IsBetween(Of Type)
    fullName: InnerLibs.Mathematic.IsBetween(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic
  commentId: T:InnerLibs.Mathematic
  parent: InnerLibs
  name: Mathematic
  nameWithType: Mathematic
  fullName: InnerLibs.Mathematic
- uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  isExternal: true
  name: SerializeJSON(Object, String)
  nameWithType: Text.SerializeJSON(Object, String)
  fullName: InnerLibs.Text.SerializeJSON(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text
  commentId: T:InnerLibs.Text
  parent: InnerLibs
  name: Text
  nameWithType: Text
  fullName: InnerLibs.Text
- uid: InnerLibs.Verify.IsNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  isExternal: true
  name: IsNumber(Object)
  nameWithType: Verify.IsNumber(Object)
  fullName: InnerLibs.Verify.IsNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify
  commentId: T:InnerLibs.Verify
  parent: InnerLibs
  name: Verify
  nameWithType: Verify
  fullName: InnerLibs.Verify
- uid: InnerLibs.Verify.IsNotNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  isExternal: true
  name: IsNotNumber(Object)
  nameWithType: Verify.IsNotNumber(Object)
  fullName: InnerLibs.Verify.IsNotNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  isExternal: true
  name: IfBlank<T>(Object, T)
  nameWithType: Verify.IfBlank<T>(Object, T)
  fullName: InnerLibs.Verify.IfBlank<T>(System.Object, T)
  nameWithType.vb: Verify.IfBlank(Of T)(Object, T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(System.Object, T)
  name.vb: IfBlank(Of T)(Object, T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  isExternal: true
  name: NullIf<T>(T, Func<T, Boolean>)
  nameWithType: Verify.NullIf<T>(T, Func<T, Boolean>)
  fullName: InnerLibs.Verify.NullIf<T>(T, System.Func<T, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Of T)(T, Func(Of T, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, System.Func(Of T, System.Boolean))
  name.vb: NullIf(Of T)(T, Func(Of T, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,``0)
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf<T>(T, T)
  nameWithType: Verify.NullIf<T>(T, T)
  fullName: InnerLibs.Verify.NullIf<T>(T, T)
  nameWithType.vb: Verify.NullIf(Of T)(T, T)
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, T)
  name.vb: NullIf(Of T)(T, T)
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  isExternal: true
  name: CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax<Type>(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  nameWithType.vb: Web.CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  fullName.vb: InnerLibs.Web.CreateFromAjax(Of Type)(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  name.vb: CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax<Type>
    nameWithType: Web.CreateFromAjax<Type>
    fullName: InnerLibs.Web.CreateFromAjax<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax(Of Type)
    nameWithType: Web.CreateFromAjax(Of Type)
    fullName: InnerLibs.Web.CreateFromAjax(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web
  commentId: T:InnerLibs.Web
  parent: InnerLibs
  name: Web
  nameWithType: Web
  fullName: InnerLibs.Web
- uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  isExternal: true
  name: AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  nameWithType: Web.AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>(T, System.Func<T, TextType>, System.Func<T, ValueType>)
  nameWithType.vb: Web.AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)(T, System.Func(Of T, TextType), System.Func(Of T, ValueType))
  name.vb: AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem<T, TextType, ValueType>
    nameWithType: Web.AsListItem<T, TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem(Of T, TextType, ValueType)
    nameWithType: Web.AsListItem(Of T, TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms.GetCastedValue(System.Object)
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  isExternal: true
  name: GetCastedValue(Object)
  nameWithType: WinForms.GetCastedValue(Object)
  fullName: InnerLibs.WinForms.GetCastedValue(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms
  commentId: T:InnerLibs.WinForms
  parent: InnerLibs
  name: WinForms
  nameWithType: WinForms
  fullName: InnerLibs.WinForms
- uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  isExternal: true
  name: CastValueForControl(Object, Object)
  nameWithType: WinForms.CastValueForControl(Object, Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  isExternal: true
  name: ApplyToControls<T>(T, HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls<T>(T, HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>(T, System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(Of T)(T, HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)(T, System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(Of T)(T, HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls<T>
    nameWithType: LINQExtensions.ApplyToControls<T>
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls(Of T)
    nameWithType: LINQExtensions.ApplyToControls(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions
  commentId: T:InnerLibs.LINQ.LINQExtensions
  parent: InnerLibs.LINQ
  name: LINQExtensions
  nameWithType: LINQExtensions
  fullName: InnerLibs.LINQ.LINQExtensions
- uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  isExternal: true
  name: HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>(T, T, System.Func<T, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)(T, T, System.Func(Of T, System.Object)())
  name.vb: HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues<T>
    nameWithType: LINQExtensions.HasSamePropertyValues<T>
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues(Of T)
    nameWithType: LINQExtensions.HasSamePropertyValues(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ
  commentId: N:InnerLibs.LINQ
  name: InnerLibs.LINQ
  nameWithType: InnerLibs.LINQ
  fullName: InnerLibs.LINQ
- uid: InnerLibs.Text.LevenshteinDistance*
  commentId: Overload:InnerLibs.Text.LevenshteinDistance
  name: LevenshteinDistance
  nameWithType: Text.LevenshteinDistance
  fullName: InnerLibs.Text.LevenshteinDistance
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: InnerLibs.Text.BreakLineChars*
  commentId: Overload:InnerLibs.Text.BreakLineChars
  name: BreakLineChars
  nameWithType: Text.BreakLineChars
  fullName: InnerLibs.Text.BreakLineChars
- uid: System.String[]
  commentId: T:System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.Text.WhiteSpaceChars*
  commentId: Overload:InnerLibs.Text.WhiteSpaceChars
  name: WhiteSpaceChars
  nameWithType: Text.WhiteSpaceChars
  fullName: InnerLibs.Text.WhiteSpaceChars
- uid: InnerLibs.Text.WordSplitters*
  commentId: Overload:InnerLibs.Text.WordSplitters
  name: WordSplitters
  nameWithType: Text.WordSplitters
  fullName: InnerLibs.Text.WordSplitters
- uid: InnerLibs.Text.WordWrappers*
  commentId: Overload:InnerLibs.Text.WordWrappers
  name: WordWrappers
  nameWithType: Text.WordWrappers
  fullName: InnerLibs.Text.WordWrappers
- uid: InnerLibs.Text.OpenWrappers*
  commentId: Overload:InnerLibs.Text.OpenWrappers
  name: OpenWrappers
  nameWithType: Text.OpenWrappers
  fullName: InnerLibs.Text.OpenWrappers
- uid: InnerLibs.Text.CloseWrappers*
  commentId: Overload:InnerLibs.Text.CloseWrappers
  name: CloseWrappers
  nameWithType: Text.CloseWrappers
  fullName: InnerLibs.Text.CloseWrappers
- uid: InnerLibs.Text.EndOfSentencePunctuation*
  commentId: Overload:InnerLibs.Text.EndOfSentencePunctuation
  name: EndOfSentencePunctuation
  nameWithType: Text.EndOfSentencePunctuation
  fullName: InnerLibs.Text.EndOfSentencePunctuation
- uid: InnerLibs.Text.MidSentencePunctuation*
  commentId: Overload:InnerLibs.Text.MidSentencePunctuation
  name: MidSentencePunctuation
  nameWithType: Text.MidSentencePunctuation
  fullName: InnerLibs.Text.MidSentencePunctuation
- uid: InnerLibs.Text.AdjustBlankSpaces*
  commentId: Overload:InnerLibs.Text.AdjustBlankSpaces
  name: AdjustBlankSpaces
  nameWithType: Text.AdjustBlankSpaces
  fullName: InnerLibs.Text.AdjustBlankSpaces
- uid: InnerLibs.Text.AdjustWhiteSpaces*
  commentId: Overload:InnerLibs.Text.AdjustWhiteSpaces
  name: AdjustWhiteSpaces
  nameWithType: Text.AdjustWhiteSpaces
  fullName: InnerLibs.Text.AdjustWhiteSpaces
- uid: InnerLibs.Text.Alphabetize*
  commentId: Overload:InnerLibs.Text.Alphabetize
  name: Alphabetize
  nameWithType: Text.Alphabetize
  fullName: InnerLibs.Text.Alphabetize
- uid: InnerLibs.Text.Append*
  commentId: Overload:InnerLibs.Text.Append
  name: Append
  nameWithType: Text.Append
  fullName: InnerLibs.Text.Append
- uid: InnerLibs.Text.AppendIf*
  commentId: Overload:InnerLibs.Text.AppendIf
  name: AppendIf
  nameWithType: Text.AppendIf
  fullName: InnerLibs.Text.AppendIf
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: InnerLibs.Text.ApplySpaceOnWrapChars*
  commentId: Overload:InnerLibs.Text.ApplySpaceOnWrapChars
  name: ApplySpaceOnWrapChars
  nameWithType: Text.ApplySpaceOnWrapChars
  fullName: InnerLibs.Text.ApplySpaceOnWrapChars
- uid: InnerLibs.Text.Censor*
  commentId: Overload:InnerLibs.Text.Censor
  name: Censor
  nameWithType: Text.Censor
  fullName: InnerLibs.Text.Censor
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: InnerLibs.Text.ContainsAll*
  commentId: Overload:InnerLibs.Text.ContainsAll
  name: ContainsAll
  nameWithType: Text.ContainsAll
  fullName: InnerLibs.Text.ContainsAll
- uid: System.StringComparison
  commentId: T:System.StringComparison
  parent: System
  isExternal: true
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: InnerLibs.Text.ContainsAny*
  commentId: Overload:InnerLibs.Text.ContainsAny
  name: ContainsAny
  nameWithType: Text.ContainsAny
  fullName: InnerLibs.Text.ContainsAny
- uid: InnerLibs.Text.CountCharacter*
  commentId: Overload:InnerLibs.Text.CountCharacter
  name: CountCharacter
  nameWithType: Text.CountCharacter
  fullName: InnerLibs.Text.CountCharacter
- uid: InnerLibs.Text.CountWords*
  commentId: Overload:InnerLibs.Text.CountWords
  name: CountWords
  nameWithType: Text.CountWords
  fullName: InnerLibs.Text.CountWords
- uid: System.Collections.Generic.Dictionary{System.String,System.Int64}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Int64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Int64>
  nameWithType: Dictionary<String, Int64>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Int64>
  nameWithType.vb: Dictionary(Of String, Int64)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Int64)
  name.vb: Dictionary(Of String, Int64)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.CreateElement*
  commentId: Overload:InnerLibs.Text.CreateElement
  name: CreateElement
  nameWithType: Text.CreateElement
  fullName: InnerLibs.Text.CreateElement
- uid: System.Web.UI.HtmlControls.HtmlGenericControl
  commentId: T:System.Web.UI.HtmlControls.HtmlGenericControl
  parent: System.Web.UI.HtmlControls
  isExternal: true
  name: HtmlGenericControl
  nameWithType: HtmlGenericControl
  fullName: System.Web.UI.HtmlControls.HtmlGenericControl
- uid: System.Web.UI.HtmlControls
  commentId: N:System.Web.UI.HtmlControls
  isExternal: true
  name: System.Web.UI.HtmlControls
  nameWithType: System.Web.UI.HtmlControls
  fullName: System.Web.UI.HtmlControls
- uid: InnerLibs.Text.Decrement*
  commentId: Overload:InnerLibs.Text.Decrement
  name: Decrement
  nameWithType: Text.Decrement
  fullName: InnerLibs.Text.Decrement
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: InnerLibs.Text.DeleteLine*
  commentId: Overload:InnerLibs.Text.DeleteLine
  name: DeleteLine
  nameWithType: Text.DeleteLine
  fullName: InnerLibs.Text.DeleteLine
- uid: InnerLibs.Text.DistinctCount*
  commentId: Overload:InnerLibs.Text.DistinctCount
  name: DistinctCount
  nameWithType: Text.DistinctCount
  fullName: InnerLibs.Text.DistinctCount
- uid: InnerLibs.Text.EndsWithAny*
  commentId: Overload:InnerLibs.Text.EndsWithAny
  name: EndsWithAny
  nameWithType: Text.EndsWithAny
  fullName: InnerLibs.Text.EndsWithAny
- uid: InnerLibs.Text.FindTelephoneNumbers*
  commentId: Overload:InnerLibs.Text.FindTelephoneNumbers
  name: FindTelephoneNumbers
  nameWithType: Text.FindTelephoneNumbers
  fullName: InnerLibs.Text.FindTelephoneNumbers
- uid: InnerLibs.Text.FixBreakLines*
  commentId: Overload:InnerLibs.Text.FixBreakLines
  name: FixBreakLines
  nameWithType: Text.FixBreakLines
  fullName: InnerLibs.Text.FixBreakLines
- uid: InnerLibs.Text.AdjustWhiteSpaces(System.String)
  commentId: M:InnerLibs.Text.AdjustWhiteSpaces(System.String)
  isExternal: true
- uid: InnerLibs.Text.FixCaptalization*
  commentId: Overload:InnerLibs.Text.FixCaptalization
  name: FixCaptalization
  nameWithType: Text.FixCaptalization
  fullName: InnerLibs.Text.FixCaptalization
- uid: InnerLibs.Text.FixPunctuation*
  commentId: Overload:InnerLibs.Text.FixPunctuation
  name: FixPunctuation
  nameWithType: Text.FixPunctuation
  fullName: InnerLibs.Text.FixPunctuation
- uid: InnerLibs.Text.EscapeQuotesToQuery*
  commentId: Overload:InnerLibs.Text.EscapeQuotesToQuery
  name: EscapeQuotesToQuery
  nameWithType: Text.EscapeQuotesToQuery
  fullName: InnerLibs.Text.EscapeQuotesToQuery
- uid: InnerLibs.Text.FixText*
  commentId: Overload:InnerLibs.Text.FixText
  name: FixText
  nameWithType: Text.FixText
  fullName: InnerLibs.Text.FixText
- uid: InnerLibs.Text.Format*
  commentId: Overload:InnerLibs.Text.Format
  name: Format
  nameWithType: Text.Format
  fullName: InnerLibs.Text.Format
- uid: System.Object[]
  commentId: T:System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.Text.GetAfter*
  commentId: Overload:InnerLibs.Text.GetAfter
  name: GetAfter
  nameWithType: Text.GetAfter
  fullName: InnerLibs.Text.GetAfter
- uid: InnerLibs.Text.GetAllBetween*
  commentId: Overload:InnerLibs.Text.GetAllBetween
  name: GetAllBetween
  nameWithType: Text.GetAllBetween
  fullName: InnerLibs.Text.GetAllBetween
- uid: InnerLibs.Text.GetBefore*
  commentId: Overload:InnerLibs.Text.GetBefore
  name: GetBefore
  nameWithType: Text.GetBefore
  fullName: InnerLibs.Text.GetBefore
- uid: InnerLibs.Text.GetBetween*
  commentId: Overload:InnerLibs.Text.GetBetween
  name: GetBetween
  nameWithType: Text.GetBetween
  fullName: InnerLibs.Text.GetBetween
- uid: InnerLibs.Text.GetDomain*
  commentId: Overload:InnerLibs.Text.GetDomain
  name: GetDomain
  nameWithType: Text.GetDomain
  fullName: InnerLibs.Text.GetDomain
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: InnerLibs.Text.GetMiddleChars*
  commentId: Overload:InnerLibs.Text.GetMiddleChars
  name: GetMiddleChars
  nameWithType: Text.GetMiddleChars
  fullName: InnerLibs.Text.GetMiddleChars
- uid: InnerLibs.Text.GetFirstChars*
  commentId: Overload:InnerLibs.Text.GetFirstChars
  name: GetFirstChars
  nameWithType: Text.GetFirstChars
  fullName: InnerLibs.Text.GetFirstChars
- uid: InnerLibs.Text.GetKeyWords*
  commentId: Overload:InnerLibs.Text.GetKeyWords
  name: GetKeyWords
  nameWithType: Text.GetKeyWords
  fullName: InnerLibs.Text.GetKeyWords
- uid: InnerLibs.Text.GetLastChars*
  commentId: Overload:InnerLibs.Text.GetLastChars
  name: GetLastChars
  nameWithType: Text.GetLastChars
  fullName: InnerLibs.Text.GetLastChars
- uid: InnerLibs.Text.GetOppositeWrapChar*
  commentId: Overload:InnerLibs.Text.GetOppositeWrapChar
  name: GetOppositeWrapChar
  nameWithType: Text.GetOppositeWrapChar
  fullName: InnerLibs.Text.GetOppositeWrapChar
- uid: InnerLibs.Text.GetRandomItem*
  commentId: Overload:InnerLibs.Text.GetRandomItem
  name: GetRandomItem
  nameWithType: Text.GetRandomItem
  fullName: InnerLibs.Text.GetRandomItem
- uid: System.Collections.Generic.List{{Type}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Type>
  nameWithType: List<Type>
  fullName: System.Collections.Generic.List<Type>
  nameWithType.vb: List(Of Type)
  fullName.vb: System.Collections.Generic.List(Of Type)
  name.vb: List(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: '{Type}'
  commentId: '!:``0'
  definition: '``0'
  name: Type
  nameWithType: Type
  fullName: Type
- uid: '``0'
  name: T
  nameWithType: T
  fullName: T
- uid: '{Type}[]'
  commentId: T:``0[]
  definition: '``0[]'
  name: Type[]
  nameWithType: Type[]
  fullName: Type[]
  nameWithType.vb: Type()
  fullName.vb: Type()
  name.vb: Type()
  spec.csharp:
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '``0[]'
  commentId: T:``0[]
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.Text.GetRelativeURL*
  commentId: Overload:InnerLibs.Text.GetRelativeURL
  name: GetRelativeURL
  nameWithType: Text.GetRelativeURL
  fullName: InnerLibs.Text.GetRelativeURL
- uid: InnerLibs.Text.GetWords*
  commentId: Overload:InnerLibs.Text.GetWords
  name: GetWords
  nameWithType: Text.GetWords
  fullName: InnerLibs.Text.GetWords
- uid: System.Linq.IOrderedEnumerable{System.String}
  commentId: T:System.Linq.IOrderedEnumerable{System.String}
  parent: System.Linq
  definition: System.Linq.IOrderedEnumerable`1
  name: IOrderedEnumerable<String>
  nameWithType: IOrderedEnumerable<String>
  fullName: System.Linq.IOrderedEnumerable<System.String>
  nameWithType.vb: IOrderedEnumerable(Of String)
  fullName.vb: System.Linq.IOrderedEnumerable(Of System.String)
  name.vb: IOrderedEnumerable(Of String)
  spec.csharp:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IOrderedEnumerable`1
  commentId: T:System.Linq.IOrderedEnumerable`1
  isExternal: true
  name: IOrderedEnumerable<TElement>
  nameWithType: IOrderedEnumerable<TElement>
  fullName: System.Linq.IOrderedEnumerable<TElement>
  nameWithType.vb: IOrderedEnumerable(Of TElement)
  fullName.vb: System.Linq.IOrderedEnumerable(Of TElement)
  name.vb: IOrderedEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: InnerLibs.Text.GetWrappedText*
  commentId: Overload:InnerLibs.Text.GetWrappedText
  name: GetWrappedText
  nameWithType: Text.GetWrappedText
  fullName: InnerLibs.Text.GetWrappedText
- uid: InnerLibs.Text.HtmlDecode*
  commentId: Overload:InnerLibs.Text.HtmlDecode
  name: HtmlDecode
  nameWithType: Text.HtmlDecode
  fullName: InnerLibs.Text.HtmlDecode
- uid: InnerLibs.Text.HtmlEncode*
  commentId: Overload:InnerLibs.Text.HtmlEncode
  name: HtmlEncode
  nameWithType: Text.HtmlEncode
  fullName: InnerLibs.Text.HtmlEncode
- uid: InnerLibs.Text.Increment*
  commentId: Overload:InnerLibs.Text.Increment
  name: Increment
  nameWithType: Text.Increment
  fullName: InnerLibs.Text.Increment
- uid: InnerLibs.Text.IsAnagramOf*
  commentId: Overload:InnerLibs.Text.IsAnagramOf
  name: IsAnagramOf
  nameWithType: Text.IsAnagramOf
  fullName: InnerLibs.Text.IsAnagramOf
- uid: InnerLibs.Text.IsAny*
  commentId: Overload:InnerLibs.Text.IsAny
  name: IsAny
  nameWithType: Text.IsAny
  fullName: InnerLibs.Text.IsAny
- uid: InnerLibs.Text.IsPalindrome*
  commentId: Overload:InnerLibs.Text.IsPalindrome
  name: IsPalindrome
  nameWithType: Text.IsPalindrome
  fullName: InnerLibs.Text.IsPalindrome
- uid: InnerLibs.Text.Join*
  commentId: Overload:InnerLibs.Text.Join
  name: Join
  nameWithType: Text.Join
  fullName: InnerLibs.Text.Join
- uid: System.Collections.Generic.IEnumerable{{Type}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<Type>
  nameWithType.vb: IEnumerable(Of Type)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Type)
  name.vb: IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.MakeClean*
  commentId: Overload:InnerLibs.Text.MakeClean
  name: MakeClean
  nameWithType: Text.MakeClean
  fullName: InnerLibs.Text.MakeClean
- uid: InnerLibs.Text.ParseDigits*
  commentId: Overload:InnerLibs.Text.ParseDigits
  name: ParseDigits
  nameWithType: Text.ParseDigits
  fullName: InnerLibs.Text.ParseDigits
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: InnerLibs.Text.ParseJSON*
  commentId: Overload:InnerLibs.Text.ParseJSON
  name: ParseJSON
  nameWithType: Text.ParseJSON
  fullName: InnerLibs.Text.ParseJSON
- uid: '{TypeClass}'
  commentId: '!:``0'
  definition: '``0'
  name: TypeClass
  nameWithType: TypeClass
  fullName: TypeClass
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: InnerLibs.Text.Poopfy*
  commentId: Overload:InnerLibs.Text.Poopfy
  name: Poopfy
  nameWithType: Text.Poopfy
  fullName: InnerLibs.Text.Poopfy
- uid: InnerLibs.Text.PreetyPrint*
  commentId: Overload:InnerLibs.Text.PreetyPrint
  name: PreetyPrint
  nameWithType: Text.PreetyPrint
  fullName: InnerLibs.Text.PreetyPrint
- uid: System.Xml.XmlDocument
  commentId: T:System.Xml.XmlDocument
  parent: System.Xml
  isExternal: true
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: InnerLibs.Text.Prepend*
  commentId: Overload:InnerLibs.Text.Prepend
  name: Prepend
  nameWithType: Text.Prepend
  fullName: InnerLibs.Text.Prepend
- uid: InnerLibs.Text.PrependIf*
  commentId: Overload:InnerLibs.Text.PrependIf
  name: PrependIf
  nameWithType: Text.PrependIf
  fullName: InnerLibs.Text.PrependIf
- uid: InnerLibs.Text.QuantifyText*
  commentId: Overload:InnerLibs.Text.QuantifyText
  name: QuantifyText
  nameWithType: Text.QuantifyText
  fullName: InnerLibs.Text.QuantifyText
- uid: InnerLibs.Text.Quote*
  commentId: Overload:InnerLibs.Text.Quote
  name: Quote
  nameWithType: Text.Quote
  fullName: InnerLibs.Text.Quote
- uid: InnerLibs.Text.QuoteIf*
  commentId: Overload:InnerLibs.Text.QuoteIf
  name: QuoteIf
  nameWithType: Text.QuoteIf
  fullName: InnerLibs.Text.QuoteIf
- uid: InnerLibs.Text.RandomItem*
  commentId: Overload:InnerLibs.Text.RandomItem
  name: RandomItem
  nameWithType: Text.RandomItem
  fullName: InnerLibs.Text.RandomItem
- uid: InnerLibs.Text.RegexEscape*
  commentId: Overload:InnerLibs.Text.RegexEscape
  name: RegexEscape
  nameWithType: Text.RegexEscape
  fullName: InnerLibs.Text.RegexEscape
- uid: InnerLibs.Text.RemoveAccents*
  commentId: Overload:InnerLibs.Text.RemoveAccents
  name: RemoveAccents
  nameWithType: Text.RemoveAccents
  fullName: InnerLibs.Text.RemoveAccents
- uid: InnerLibs.Text.RemoveAny*
  commentId: Overload:InnerLibs.Text.RemoveAny
  name: RemoveAny
  nameWithType: Text.RemoveAny
  fullName: InnerLibs.Text.RemoveAny
- uid: InnerLibs.Text.RemoveDiacritics*
  commentId: Overload:InnerLibs.Text.RemoveDiacritics
  name: RemoveDiacritics
  nameWithType: Text.RemoveDiacritics
  fullName: InnerLibs.Text.RemoveDiacritics
- uid: InnerLibs.Text.RemoveFirstAny*
  commentId: Overload:InnerLibs.Text.RemoveFirstAny
  name: RemoveFirstAny
  nameWithType: Text.RemoveFirstAny
  fullName: InnerLibs.Text.RemoveFirstAny
- uid: InnerLibs.Text.RemoveFirstChars*
  commentId: Overload:InnerLibs.Text.RemoveFirstChars
  name: RemoveFirstChars
  nameWithType: Text.RemoveFirstChars
  fullName: InnerLibs.Text.RemoveFirstChars
- uid: InnerLibs.Text.RemoveFirstIf*
  commentId: Overload:InnerLibs.Text.RemoveFirstIf
  name: RemoveFirstIf
  nameWithType: Text.RemoveFirstIf
  fullName: InnerLibs.Text.RemoveFirstIf
- uid: InnerLibs.Text.RemoveHTML*
  commentId: Overload:InnerLibs.Text.RemoveHTML
  name: RemoveHTML
  nameWithType: Text.RemoveHTML
  fullName: InnerLibs.Text.RemoveHTML
- uid: InnerLibs.Text.RemoveLastAny*
  commentId: Overload:InnerLibs.Text.RemoveLastAny
  name: RemoveLastAny
  nameWithType: Text.RemoveLastAny
  fullName: InnerLibs.Text.RemoveLastAny
- uid: InnerLibs.Text.RemoveLastChars*
  commentId: Overload:InnerLibs.Text.RemoveLastChars
  name: RemoveLastChars
  nameWithType: Text.RemoveLastChars
  fullName: InnerLibs.Text.RemoveLastChars
- uid: InnerLibs.Text.RemoveLastIf*
  commentId: Overload:InnerLibs.Text.RemoveLastIf
  name: RemoveLastIf
  nameWithType: Text.RemoveLastIf
  fullName: InnerLibs.Text.RemoveLastIf
- uid: InnerLibs.Text.RemoveNonPrintable*
  commentId: Overload:InnerLibs.Text.RemoveNonPrintable
  name: RemoveNonPrintable
  nameWithType: Text.RemoveNonPrintable
  fullName: InnerLibs.Text.RemoveNonPrintable
- uid: InnerLibs.Text.Replace*
  commentId: Overload:InnerLibs.Text.Replace
  name: Replace
  nameWithType: Text.Replace
  fullName: InnerLibs.Text.Replace
- uid: System.Collections.IDictionary
  commentId: T:System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: InnerLibs.Text.ReplaceFrom*
  commentId: Overload:InnerLibs.Text.ReplaceFrom
  name: ReplaceFrom
  nameWithType: Text.ReplaceFrom
  fullName: InnerLibs.Text.ReplaceFrom
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.String[]}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String[]>
  nameWithType: IDictionary<String, String[]>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String[]>
  nameWithType.vb: IDictionary(Of String, String())
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String())
  name.vb: IDictionary(Of String, String())
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String[],System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String[],System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String[], String>
  nameWithType: IDictionary<String[], String>
  fullName: System.Collections.Generic.IDictionary<System.String[], System.String>
  nameWithType.vb: IDictionary(Of String(), String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String(), System.String)
  name.vb: IDictionary(Of String(), String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String[],System.String[]}
  commentId: T:System.Collections.Generic.IDictionary{System.String[],System.String[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String[], String[]>
  nameWithType: IDictionary<String[], String[]>
  fullName: System.Collections.Generic.IDictionary<System.String[], System.String[]>
  nameWithType.vb: IDictionary(Of String(), String())
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String(), System.String())
  name.vb: IDictionary(Of String(), String())
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.ReplaceMany*
  commentId: Overload:InnerLibs.Text.ReplaceMany
  name: ReplaceMany
  nameWithType: Text.ReplaceMany
  fullName: InnerLibs.Text.ReplaceMany
- uid: InnerLibs.Text.ReplaceNone*
  commentId: Overload:InnerLibs.Text.ReplaceNone
  name: ReplaceNone
  nameWithType: Text.ReplaceNone
  fullName: InnerLibs.Text.ReplaceNone
- uid: InnerLibs.Text.SensitiveReplace*
  commentId: Overload:InnerLibs.Text.SensitiveReplace
  name: SensitiveReplace
  nameWithType: Text.SensitiveReplace
  fullName: InnerLibs.Text.SensitiveReplace
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text.SerializeJSON*
  commentId: Overload:InnerLibs.Text.SerializeJSON
  name: SerializeJSON
  nameWithType: Text.SerializeJSON
  fullName: InnerLibs.Text.SerializeJSON
- uid: InnerLibs.Text.Shuffle*
  commentId: Overload:InnerLibs.Text.Shuffle
  name: Shuffle
  nameWithType: Text.Shuffle
  fullName: InnerLibs.Text.Shuffle
- uid: InnerLibs.Text.Singularize*
  commentId: Overload:InnerLibs.Text.Singularize
  name: Singularize
  nameWithType: Text.Singularize
  fullName: InnerLibs.Text.Singularize
- uid: InnerLibs.Text.Slice*
  commentId: Overload:InnerLibs.Text.Slice
  name: Slice
  nameWithType: Text.Slice
  fullName: InnerLibs.Text.Slice
- uid: InnerLibs.Text.Split*
  commentId: Overload:InnerLibs.Text.Split
  name: Split
  nameWithType: Text.Split
  fullName: InnerLibs.Text.Split
- uid: System.StringSplitOptions
  commentId: T:System.StringSplitOptions
  parent: System
  isExternal: true
  name: StringSplitOptions
  nameWithType: StringSplitOptions
  fullName: System.StringSplitOptions
- uid: InnerLibs.Text.StartsWithAny*
  commentId: Overload:InnerLibs.Text.StartsWithAny
  name: StartsWithAny
  nameWithType: Text.StartsWithAny
  fullName: InnerLibs.Text.StartsWithAny
- uid: InnerLibs.Text.SyllableCount*
  commentId: Overload:InnerLibs.Text.SyllableCount
  name: SyllableCount
  nameWithType: Text.SyllableCount
  fullName: InnerLibs.Text.SyllableCount
- uid: InnerLibs.Text.ToAnagram*
  commentId: Overload:InnerLibs.Text.ToAnagram
  name: ToAnagram
  nameWithType: Text.ToAnagram
  fullName: InnerLibs.Text.ToAnagram
- uid: InnerLibs.Text.ToAnagramList*
  commentId: Overload:InnerLibs.Text.ToAnagramList
  name: ToAnagramList
  nameWithType: Text.ToAnagramList
  fullName: InnerLibs.Text.ToAnagramList
- uid: InnerLibs.Text.ToCamel*
  commentId: Overload:InnerLibs.Text.ToCamel
  name: ToCamel
  nameWithType: Text.ToCamel
  fullName: InnerLibs.Text.ToCamel
- uid: InnerLibs.Text.CamelSplit*
  commentId: Overload:InnerLibs.Text.CamelSplit
  name: CamelSplit
  nameWithType: Text.CamelSplit
  fullName: InnerLibs.Text.CamelSplit
- uid: InnerLibs.Text.ToRandomCase*
  commentId: Overload:InnerLibs.Text.ToRandomCase
  name: ToRandomCase
  nameWithType: Text.ToRandomCase
  fullName: InnerLibs.Text.ToRandomCase
- uid: InnerLibs.Text.ToAlternateCase*
  commentId: Overload:InnerLibs.Text.ToAlternateCase
  name: ToAlternateCase
  nameWithType: Text.ToAlternateCase
  fullName: InnerLibs.Text.ToAlternateCase
- uid: InnerLibs.Text.ToExtensiveForm*
  commentId: Overload:InnerLibs.Text.ToExtensiveForm
  name: ToExtensiveForm
  nameWithType: Text.ToExtensiveForm
  fullName: InnerLibs.Text.ToExtensiveForm
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: InnerLibs.Money
  commentId: T:InnerLibs.Money
  parent: InnerLibs
  name: Money
  nameWithType: Money
  fullName: InnerLibs.Money
- uid: InnerLibs.Text.ToExtensiveMoneyForm*
  commentId: Overload:InnerLibs.Text.ToExtensiveMoneyForm
  name: ToExtensiveMoneyForm
  nameWithType: Text.ToExtensiveMoneyForm
  fullName: InnerLibs.Text.ToExtensiveMoneyForm
- uid: InnerLibs.Text.ToFileSizeString*
  commentId: Overload:InnerLibs.Text.ToFileSizeString
  name: ToFileSizeString
  nameWithType: Text.ToFileSizeString
  fullName: InnerLibs.Text.ToFileSizeString
- uid: System.Byte[]
  commentId: T:System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.IO.FileInfo
  commentId: T:System.IO.FileInfo
  parent: System.IO
  isExternal: true
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: InnerLibs.Text.ToFriendlyURL*
  commentId: Overload:InnerLibs.Text.ToFriendlyURL
  name: ToFriendlyURL
  nameWithType: Text.ToFriendlyURL
  fullName: InnerLibs.Text.ToFriendlyURL
- uid: InnerLibs.Text.ToHtmlList*
  commentId: Overload:InnerLibs.Text.ToHtmlList
  name: ToHtmlList
  nameWithType: Text.ToHtmlList
  fullName: InnerLibs.Text.ToHtmlList
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.HtmlParser.HtmlElement
  commentId: T:InnerLibs.HtmlParser.HtmlElement
  parent: InnerLibs.HtmlParser
  name: HtmlElement
  nameWithType: HtmlElement
  fullName: InnerLibs.HtmlParser.HtmlElement
- uid: InnerLibs.HtmlParser
  commentId: N:InnerLibs.HtmlParser
  name: InnerLibs.HtmlParser
  nameWithType: InnerLibs.HtmlParser
  fullName: InnerLibs.HtmlParser
- uid: InnerLibs.Text.ToHtmlString*
  commentId: Overload:InnerLibs.Text.ToHtmlString
  name: ToHtmlString
  nameWithType: Text.ToHtmlString
  fullName: InnerLibs.Text.ToHtmlString
- uid: InnerLibs.Text.ToLeet*
  commentId: Overload:InnerLibs.Text.ToLeet
  name: ToLeet
  nameWithType: Text.ToLeet
  fullName: InnerLibs.Text.ToLeet
- uid: InnerLibs.Text.ToMoney*
  commentId: Overload:InnerLibs.Text.ToMoney
  name: ToMoney
  nameWithType: Text.ToMoney
  fullName: InnerLibs.Text.ToMoney
- uid: InnerLibs.Text.ToNumberString*
  commentId: Overload:InnerLibs.Text.ToNumberString
  name: ToNumberString
  nameWithType: Text.ToNumberString
  fullName: InnerLibs.Text.ToNumberString
- uid: InnerLibs.Text.ToPercentString*
  commentId: Overload:InnerLibs.Text.ToPercentString
  name: ToPercentString
  nameWithType: Text.ToPercentString
  fullName: InnerLibs.Text.ToPercentString
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: InnerLibs.Text.ToProper*
  commentId: Overload:InnerLibs.Text.ToProper
  name: ToProper
  nameWithType: Text.ToProper
  fullName: InnerLibs.Text.ToProper
- uid: InnerLibs.Text.ToFriendlyURL(System.String,System.Boolean)
  commentId: M:InnerLibs.Text.ToFriendlyURL(System.String,System.Boolean)
  isExternal: true
- uid: InnerLibs.Text.ToSlug*
  commentId: Overload:InnerLibs.Text.ToSlug
  name: ToSlug
  nameWithType: Text.ToSlug
  fullName: InnerLibs.Text.ToSlug
- uid: InnerLibs.Text.ToSnake*
  commentId: Overload:InnerLibs.Text.ToSnake
  name: ToSnake
  nameWithType: Text.ToSnake
  fullName: InnerLibs.Text.ToSnake
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: InnerLibs.Text.ToStream*
  commentId: Overload:InnerLibs.Text.ToStream
  name: ToStream
  nameWithType: Text.ToStream
  fullName: InnerLibs.Text.ToStream
- uid: InnerLibs.Text.ToTelephone*
  commentId: Overload:InnerLibs.Text.ToTelephone
  name: ToTelephone
  nameWithType: Text.ToTelephone
  fullName: InnerLibs.Text.ToTelephone
- uid: InnerLibs.Text.ToTitle*
  commentId: Overload:InnerLibs.Text.ToTitle
  name: ToTitle
  nameWithType: Text.ToTitle
  fullName: InnerLibs.Text.ToTitle
- uid: InnerLibs.Text.ToUnitString*
  commentId: Overload:InnerLibs.Text.ToUnitString
  name: ToUnitString
  nameWithType: Text.ToUnitString
  fullName: InnerLibs.Text.ToUnitString
- uid: InnerLibs.Text.ToQuantityText*
  commentId: Overload:InnerLibs.Text.ToQuantityText
  name: ToQuantityText
  nameWithType: Text.ToQuantityText
  fullName: InnerLibs.Text.ToQuantityText
- uid: InnerLibs.Text.ToXMLString*
  commentId: Overload:InnerLibs.Text.ToXMLString
  name: ToXMLString
  nameWithType: Text.ToXMLString
  fullName: InnerLibs.Text.ToXMLString
- uid: InnerLibs.Text.TrimAny*
  commentId: Overload:InnerLibs.Text.TrimAny
  name: TrimAny
  nameWithType: Text.TrimAny
  fullName: InnerLibs.Text.TrimAny
- uid: InnerLibs.Text.TrimCarriage*
  commentId: Overload:InnerLibs.Text.TrimCarriage
  name: TrimCarriage
  nameWithType: Text.TrimCarriage
  fullName: InnerLibs.Text.TrimCarriage
- uid: InnerLibs.Text.UrlDecode*
  commentId: Overload:InnerLibs.Text.UrlDecode
  name: UrlDecode
  nameWithType: Text.UrlDecode
  fullName: InnerLibs.Text.UrlDecode
- uid: InnerLibs.Text.UrlEncode*
  commentId: Overload:InnerLibs.Text.UrlEncode
  name: UrlEncode
  nameWithType: Text.UrlEncode
  fullName: InnerLibs.Text.UrlEncode
- uid: InnerLibs.Text.Wrap*
  commentId: Overload:InnerLibs.Text.Wrap
  name: Wrap
  nameWithType: Text.Wrap
  fullName: InnerLibs.Text.Wrap
- uid: InnerLibs.Text.WrapInTag*
  commentId: Overload:InnerLibs.Text.WrapInTag
  name: WrapInTag
  nameWithType: Text.WrapInTag
  fullName: InnerLibs.Text.WrapInTag
- uid: InnerLibs.Text.FindNumbers*
  commentId: Overload:InnerLibs.Text.FindNumbers
  name: FindNumbers
  nameWithType: Text.FindNumbers
  fullName: InnerLibs.Text.FindNumbers
- uid: System.Int64[]
  commentId: T:System.Int64[]
  isExternal: true
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  nameWithType.vb: Int64()
  fullName.vb: System.Int64()
  name.vb: Int64()
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
