### YamlMime:ManagedReference
items:
- uid: InnerLibs.Triforce.LINQ.Triforce`1
  commentId: T:InnerLibs.Triforce.LINQ.Triforce`1
  id: Triforce`1
  parent: InnerLibs.Triforce.LINQ
  children:
  - InnerLibs.Triforce.LINQ.Triforce`1.#ctor(System.IO.DirectoryInfo,System.String[])
  - InnerLibs.Triforce.LINQ.Triforce`1.#ctor(System.Reflection.Assembly,System.String[])
  - InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1
  - InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(``0,System.String)
  - InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.String)
  - InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Data.Linq.EntitySet{``0},System.Int32,System.Int32,System.String)
  - InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Data.Linq.ISingleResult{``0},System.Int32,System.Int32,System.String)
  - InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Data.Linq.Table{``0},System.Int32,System.Int32,System.String)
  - InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32)
  - InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.String)
  - InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32)
  - InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.String,System.Object[])
  - InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Int32)
  - InnerLibs.Triforce.LINQ.Triforce`1.GetCommand(System.String)
  langs:
  - csharp
  - vb
  name: Triforce<DataContextType>
  nameWithType: Triforce<DataContextType>
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>
  type: Class
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Triforce/LINQTemplatizer.vb
    id: Triforce
    path: Triforce/LINQTemplatizer.vb
    startLine: 91
  assemblies:
  - InnerLibs
  namespace: InnerLibs.Triforce.LINQ
  summary: "\nPermite integrar <xref href=\"InnerLibs.Triforce.Triforce\" data-throw-if-not-resolved=\"false\"></xref> a objetos LINQ to SQL\n"
  example: []
  syntax:
    content: 'public class Triforce<DataContextType> : Triforce where DataContextType : DataContext'
    typeParameters:
    - id: DataContextType
      description: Objeto LINQ to SQL gerado
    content.vb: >-
      Public Class Triforce(Of DataContextType As DataContext)
          Inherits Triforce
  inheritance:
  - System.Object
  - InnerLibs.Triforce.Triforce
  inheritedMembers:
  - InnerLibs.Triforce.Triforce.ApplicationAssembly
  - InnerLibs.Triforce.Triforce.Culture
  - InnerLibs.Triforce.Triforce.CustomProperties
  - InnerLibs.Triforce.Triforce.CustomValues
  - InnerLibs.Triforce.Triforce.Selectors
  - InnerLibs.Triforce.Triforce.TemplateDirectory
  - InnerLibs.Triforce.Triforce.ApplyArrayTemplate(System.String,System.Object[])
  - InnerLibs.Triforce.Triforce.ClearNotFoundValues(System.String)
  - InnerLibs.Triforce.Triforce.CreatePaginarionUrlTemplate(System.String,System.String[])
  - InnerLibs.Triforce.Triforce.CreateUrl``1({T},System.String)
  - InnerLibs.Triforce.Triforce.GetTemplate``1(System.Boolean)
  - InnerLibs.Triforce.Triforce.GetTemplate(System.Type,System.Boolean)
  - InnerLibs.Triforce.Triforce.GetTemplateContent(System.String,InnerLibs.Triforce.TemplateTag)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.Finalize
  - System.Object.MemberwiseClone
  extensionMethods:
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.CreateDictionary
  - System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  - System.Object.InnerLibs.ClassTools.GetProperties
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  - System.Object.InnerLibs.ClassTools.IsArrayOf``1
  - System.Object.InnerLibs.ClassTools.IsDictionary
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}}},System.Collections.Generic.IEqualityComparer{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}}})
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}}}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}}})
  - System.Object.InnerLibs.ClassTools.IsList
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}}},System.Collections.Generic.IEqualityComparer{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}}})
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - System.Object.InnerLibs.ClassTools.IsType``1
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.NullCoalesce(InnerLibs.Triforce.LINQ.Triforce{{DataContextType}}[])
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.NullifyProperties
  - System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  - System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  - System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  - System.Object.InnerLibs.DataManipulation.GetDbType
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.Converter.DefineEmptyList
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.Converter.ChangeType``1
  - System.Object.InnerLibs.JsonViewer.CreateNode
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  - System.Object.InnerLibs.Text.SerializeJSON(System.String)
  - System.Object.InnerLibs.Verify.IsNumber
  - System.Object.InnerLibs.Verify.IsNotNumber
  - System.Object.InnerLibs.Verify.IfBlank``1({T})
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.Verify.NullIf(System.Func{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}},System.Boolean})
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.Verify.NullIf(InnerLibs.Triforce.LINQ.Triforce{{DataContextType}})
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}},{TextType}},System.Func{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}},{ValueType}})
  - System.Object.InnerLibs.WinForms.GetCastedValue
  - System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  - InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Triforce.LINQ.Triforce{{DataContextType}},System.Func{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}},System.Object}[])
  nameWithType.vb: Triforce(Of DataContextType)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType)
  name.vb: Triforce(Of DataContextType)
- uid: InnerLibs.Triforce.LINQ.Triforce`1.#ctor(System.IO.DirectoryInfo,System.String[])
  commentId: M:InnerLibs.Triforce.LINQ.Triforce`1.#ctor(System.IO.DirectoryInfo,System.String[])
  id: '#ctor(System.IO.DirectoryInfo,System.String[])'
  parent: InnerLibs.Triforce.LINQ.Triforce`1
  langs:
  - csharp
  - vb
  name: Triforce(DirectoryInfo, String[])
  nameWithType: Triforce<DataContextType>.Triforce(DirectoryInfo, String[])
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.Triforce(System.IO.DirectoryInfo, System.String[])
  type: Constructor
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Triforce/LINQTemplatizer.vb
    id: .ctor
    path: Triforce/LINQTemplatizer.vb
    startLine: 101
  assemblies:
  - InnerLibs
  namespace: InnerLibs.Triforce.LINQ
  summary: "\nInstancia um novo <xref href=\"InnerLibs.Triforce.LINQ\" data-throw-if-not-resolved=\"false\"></xref> a partir de um Diretório\n"
  example: []
  syntax:
    content: public Triforce(DirectoryInfo TemplateDirectory, params string[] Selectors)
    parameters:
    - id: TemplateDirectory
      type: System.IO.DirectoryInfo
      description: Diretório contendo os arquivos HTML
    - id: Selectors
      type: System.String[]
    content.vb: Public Sub New(TemplateDirectory As DirectoryInfo, ParamArray Selectors As String())
  overload: InnerLibs.Triforce.LINQ.Triforce`1.#ctor*
  nameWithType.vb: Triforce(Of DataContextType).Triforce(DirectoryInfo, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).Triforce(System.IO.DirectoryInfo, System.String())
  name.vb: Triforce(DirectoryInfo, String())
- uid: InnerLibs.Triforce.LINQ.Triforce`1.#ctor(System.Reflection.Assembly,System.String[])
  commentId: M:InnerLibs.Triforce.LINQ.Triforce`1.#ctor(System.Reflection.Assembly,System.String[])
  id: '#ctor(System.Reflection.Assembly,System.String[])'
  parent: InnerLibs.Triforce.LINQ.Triforce`1
  langs:
  - csharp
  - vb
  name: Triforce(Assembly, String[])
  nameWithType: Triforce<DataContextType>.Triforce(Assembly, String[])
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.Triforce(System.Reflection.Assembly, System.String[])
  type: Constructor
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Triforce/LINQTemplatizer.vb
    id: .ctor
    path: Triforce/LINQTemplatizer.vb
    startLine: 112
  assemblies:
  - InnerLibs
  namespace: InnerLibs.Triforce.LINQ
  summary: "\nInstancia um novo <xref href=\"InnerLibs.Triforce.LINQ\" data-throw-if-not-resolved=\"false\"></xref> a partir de um Assembly\n"
  example: []
  syntax:
    content: public Triforce(Assembly ApplicationAssembly, params string[] Selectors)
    parameters:
    - id: ApplicationAssembly
      type: System.Reflection.Assembly
      description: "\nAssembly contendo os arquivos HTML. Os arquivos HTML devem ser marcados como EMBEDDED RESOURCE\n"
    - id: Selectors
      type: System.String[]
    content.vb: Public Sub New(ApplicationAssembly As Assembly, ParamArray Selectors As String())
  overload: InnerLibs.Triforce.LINQ.Triforce`1.#ctor*
  nameWithType.vb: Triforce(Of DataContextType).Triforce(Assembly, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).Triforce(System.Reflection.Assembly, System.String())
  name.vb: Triforce(Assembly, String())
- uid: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32)
  commentId: M:InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32)
  id: ApplyTemplate``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32)
  parent: InnerLibs.Triforce.LINQ.Triforce`1
  langs:
  - csharp
  - vb
  name: ApplyTemplate<T>(Expression<Func<T, Boolean>>, Int32, Int32)
  nameWithType: Triforce<DataContextType>.ApplyTemplate<T>(Expression<Func<T, Boolean>>, Int32, Int32)
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.ApplyTemplate<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Triforce/LINQTemplatizer.vb
    id: ApplyTemplate
    path: Triforce/LINQTemplatizer.vb
    startLine: 125
  assemblies:
  - InnerLibs
  namespace: InnerLibs.Triforce.LINQ
  summary: "\nAplica um template a uma busca determinada pelo tipo de objeto\n"
  example: []
  syntax:
    content: >-
      public TemplatePage<T> ApplyTemplate<T>(Expression<Func<T, bool>> predicade, int PageNumber = 0, int PageSize = 0)
          where T : class
    parameters:
    - id: predicade
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: Filtro da busca
    - id: PageNumber
      type: System.Int32
      description: Pagina atual
    - id: PageSize
      type: System.Int32
      description: Numero de itens por pagina
    typeParameters:
    - id: T
      description: Tipo de objeto
    return:
      type: InnerLibs.Triforce.TemplatePage{{T}}
      description: ''
    content.vb: Public Function ApplyTemplate(Of T As Class)(predicade As Expression(Of Func(Of T, Boolean)), PageNumber As Integer = 0, PageSize As Integer = 0) As TemplatePage(Of T)
  overload: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate*
  nameWithType.vb: Triforce(Of DataContextType).ApplyTemplate(Of T)(Expression(Of Func(Of T, Boolean)), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).ApplyTemplate(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Int32, System.Int32)
  name.vb: ApplyTemplate(Of T)(Expression(Of Func(Of T, Boolean)), Int32, Int32)
- uid: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32)
  commentId: M:InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32)
  id: ApplyTemplate``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32)
  parent: InnerLibs.Triforce.LINQ.Triforce`1
  langs:
  - csharp
  - vb
  name: ApplyTemplate<T>(String, Expression<Func<T, Boolean>>, Int32, Int32)
  nameWithType: Triforce<DataContextType>.ApplyTemplate<T>(String, Expression<Func<T, Boolean>>, Int32, Int32)
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.ApplyTemplate<T>(System.String, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Triforce/LINQTemplatizer.vb
    id: ApplyTemplate
    path: Triforce/LINQTemplatizer.vb
    startLine: 137
  assemblies:
  - InnerLibs
  namespace: InnerLibs.Triforce.LINQ
  summary: "\nAplica um template a uma busca determinada pelo tipo de objeto\n"
  example: []
  syntax:
    content: >-
      public TemplatePage<T> ApplyTemplate<T>(string Template, Expression<Func<T, bool>> predicade = null, int PageNumber = 0, int PageSize = 0)
          where T : class
    parameters:
    - id: Template
      type: System.String
    - id: predicade
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: Filtro da busca
    - id: PageNumber
      type: System.Int32
      description: Pagina atual
    - id: PageSize
      type: System.Int32
      description: Numero de itens por pagina
    typeParameters:
    - id: T
      description: Tipo de objeto
    return:
      type: InnerLibs.Triforce.TemplatePage{{T}}
      description: ''
    content.vb: Public Function ApplyTemplate(Of T As Class)(Template As String, predicade As Expression(Of Func(Of T, Boolean)) = Nothing, PageNumber As Integer = 0, PageSize As Integer = 0) As TemplatePage(Of T)
  overload: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate*
  nameWithType.vb: Triforce(Of DataContextType).ApplyTemplate(Of T)(String, Expression(Of Func(Of T, Boolean)), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).ApplyTemplate(Of T)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Int32, System.Int32)
  name.vb: ApplyTemplate(Of T)(String, Expression(Of Func(Of T, Boolean)), Int32, Int32)
- uid: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(``0,System.String)
  commentId: M:InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(``0,System.String)
  id: ApplyTemplate``1(``0,System.String)
  parent: InnerLibs.Triforce.LINQ.Triforce`1
  langs:
  - csharp
  - vb
  name: ApplyTemplate<T>(T, String)
  nameWithType: Triforce<DataContextType>.ApplyTemplate<T>(T, String)
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.ApplyTemplate<T>(T, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Triforce/LINQTemplatizer.vb
    id: ApplyTemplate
    path: Triforce/LINQTemplatizer.vb
    startLine: 154
  assemblies:
  - InnerLibs
  namespace: InnerLibs.Triforce.LINQ
  summary: "\nAplica um template HTML a um unico objeto\n"
  example: []
  syntax:
    content: >-
      public override Template<T> ApplyTemplate<T>(T Item, string Template = "")
          where T : class
    parameters:
    - id: Item
      type: '{T}'
      description: Objeto
    - id: Template
      type: System.String
      description: Template HTML ou nome do template HTML
    typeParameters:
    - id: T
      description: TIpo de objeto usado como fonte dos dados
    return:
      type: InnerLibs.Triforce.Template{{T}}
    content.vb: Public Overrides Function ApplyTemplate(Of T As Class)(Item As T, Template As String = "") As Template(Of T)
  overridden: InnerLibs.Triforce.Triforce.ApplyTemplate``1({T},System.String)
  overload: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate*
  nameWithType.vb: Triforce(Of DataContextType).ApplyTemplate(Of T)(T, String)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).ApplyTemplate(Of T)(T, System.String)
  name.vb: ApplyTemplate(Of T)(T, String)
- uid: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Int32)
  commentId: M:InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Int32)
  id: ApplyTemplate``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Int32)
  parent: InnerLibs.Triforce.LINQ.Triforce`1
  langs:
  - csharp
  - vb
  name: ApplyTemplate<T>(String, String, IEnumerable<Object>, Int32, Int32)
  nameWithType: Triforce<DataContextType>.ApplyTemplate<T>(String, String, IEnumerable<Object>, Int32, Int32)
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.ApplyTemplate<T>(System.String, System.String, System.Collections.Generic.IEnumerable<System.Object>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Triforce/LINQTemplatizer.vb
    id: ApplyTemplate
    path: Triforce/LINQTemplatizer.vb
    startLine: 167
  assemblies:
  - InnerLibs
  namespace: InnerLibs.Triforce.LINQ
  summary: "\nExecuta uma query SQL e retorna um <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> com os resultados (É um\nwrapper para <xref href=\"System.Data.Linq.DataContext.ExecuteQuery%60%601(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>\nporém aplica os templates automaticamente\n"
  example: []
  syntax:
    content: >-
      public TemplatePage<T> ApplyTemplate<T>(string SQLQuery, string Template, IEnumerable<object> Parameters, int PageNumber = 1, int PageSize = 0)
          where T : class
    parameters:
    - id: SQLQuery
      type: System.String
      description: ''
    - id: Template
      type: System.String
    - id: Parameters
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: ''
    - id: PageNumber
      type: System.Int32
    - id: PageSize
      type: System.Int32
    typeParameters:
    - id: T
      description: Tipo do Objeto
    return:
      type: InnerLibs.Triforce.TemplatePage{{T}}
      description: ''
    content.vb: Public Function ApplyTemplate(Of T As Class)(SQLQuery As String, Template As String, Parameters As IEnumerable(Of Object), PageNumber As Integer = 1, PageSize As Integer = 0) As TemplatePage(Of T)
  overload: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate*
  nameWithType.vb: Triforce(Of DataContextType).ApplyTemplate(Of T)(String, String, IEnumerable(Of Object), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).ApplyTemplate(Of T)(System.String, System.String, System.Collections.Generic.IEnumerable(Of System.Object), System.Int32, System.Int32)
  name.vb: ApplyTemplate(Of T)(String, String, IEnumerable(Of Object), Int32, Int32)
- uid: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.String)
  commentId: M:InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.String)
  id: ApplyTemplate``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.String)
  parent: InnerLibs.Triforce.LINQ.Triforce`1
  langs:
  - csharp
  - vb
  name: ApplyTemplate<T>(IQueryable<T>, Int32, Int32, String)
  nameWithType: Triforce<DataContextType>.ApplyTemplate<T>(IQueryable<T>, Int32, Int32, String)
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.ApplyTemplate<T>(System.Linq.IQueryable<T>, System.Int32, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Triforce/LINQTemplatizer.vb
    id: ApplyTemplate
    path: Triforce/LINQTemplatizer.vb
    startLine: 208
  assemblies:
  - InnerLibs
  namespace: InnerLibs.Triforce.LINQ
  summary: "\nAplica um template HTML a um objeto <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      public TemplatePage<T> ApplyTemplate<T>(IQueryable<T> List, int PageNumber = 1, int PageSize = 0, string Template = "")
          where T : class
    parameters:
    - id: List
      type: System.Linq.IQueryable{{T}}
      description: Lista de objetos
    - id: PageNumber
      type: System.Int32
      description: Pagina que será processada.
    - id: PageSize
      type: System.Int32
      description: "\nQuantidade de itens por página. Passar o valor 0 para trazer todos os itens\n"
    - id: Template
      type: System.String
      description: Template HTML ou nome do template HTML
    typeParameters:
    - id: T
      description: TIpo de objeto usado como fonte dos dados
    return:
      type: InnerLibs.Triforce.TemplatePage{{T}}
      description: ''
    content.vb: Public Function ApplyTemplate(Of T As Class)(List As IQueryable(Of T), PageNumber As Integer = 1, PageSize As Integer = 0, Template As String = "") As TemplatePage(Of T)
  overload: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate*
  nameWithType.vb: Triforce(Of DataContextType).ApplyTemplate(Of T)(IQueryable(Of T), Int32, Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).ApplyTemplate(Of T)(System.Linq.IQueryable(Of T), System.Int32, System.Int32, System.String)
  name.vb: ApplyTemplate(Of T)(IQueryable(Of T), Int32, Int32, String)
- uid: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Data.Linq.EntitySet{``0},System.Int32,System.Int32,System.String)
  commentId: M:InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Data.Linq.EntitySet{``0},System.Int32,System.Int32,System.String)
  id: ApplyTemplate``1(System.Data.Linq.EntitySet{``0},System.Int32,System.Int32,System.String)
  parent: InnerLibs.Triforce.LINQ.Triforce`1
  langs:
  - csharp
  - vb
  name: ApplyTemplate<T>(EntitySet<T>, Int32, Int32, String)
  nameWithType: Triforce<DataContextType>.ApplyTemplate<T>(EntitySet<T>, Int32, Int32, String)
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.ApplyTemplate<T>(System.Data.Linq.EntitySet<T>, System.Int32, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Triforce/LINQTemplatizer.vb
    id: ApplyTemplate
    path: Triforce/LINQTemplatizer.vb
    startLine: 232
  assemblies:
  - InnerLibs
  namespace: InnerLibs.Triforce.LINQ
  summary: "\nAplica um template HTML a um objeto <xref href=\"System.Data.Linq.EntitySet%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      public TemplatePage<T> ApplyTemplate<T>(EntitySet<T> List, int PageNumber = 1, int PageSize = 0, string Template = "")
          where T : class
    parameters:
    - id: List
      type: System.Data.Linq.EntitySet{{T}}
      description: Lista de objetos
    - id: PageNumber
      type: System.Int32
      description: Pagina que será processada.
    - id: PageSize
      type: System.Int32
      description: "\nQuantidade de itens por página. Passar o valor 0 para trazer todos os itens\n"
    - id: Template
      type: System.String
      description: Template HTML ou nome do template HTML
    typeParameters:
    - id: T
      description: TIpo de objeto usado como fonte dos dados
    return:
      type: InnerLibs.Triforce.TemplatePage{{T}}
      description: ''
    content.vb: Public Function ApplyTemplate(Of T As Class)(List As EntitySet(Of T), PageNumber As Integer = 1, PageSize As Integer = 0, Template As String = "") As TemplatePage(Of T)
  overload: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate*
  nameWithType.vb: Triforce(Of DataContextType).ApplyTemplate(Of T)(EntitySet(Of T), Int32, Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).ApplyTemplate(Of T)(System.Data.Linq.EntitySet(Of T), System.Int32, System.Int32, System.String)
  name.vb: ApplyTemplate(Of T)(EntitySet(Of T), Int32, Int32, String)
- uid: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Data.Linq.ISingleResult{``0},System.Int32,System.Int32,System.String)
  commentId: M:InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Data.Linq.ISingleResult{``0},System.Int32,System.Int32,System.String)
  id: ApplyTemplate``1(System.Data.Linq.ISingleResult{``0},System.Int32,System.Int32,System.String)
  parent: InnerLibs.Triforce.LINQ.Triforce`1
  langs:
  - csharp
  - vb
  name: ApplyTemplate<T>(ISingleResult<T>, Int32, Int32, String)
  nameWithType: Triforce<DataContextType>.ApplyTemplate<T>(ISingleResult<T>, Int32, Int32, String)
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.ApplyTemplate<T>(System.Data.Linq.ISingleResult<T>, System.Int32, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Triforce/LINQTemplatizer.vb
    id: ApplyTemplate
    path: Triforce/LINQTemplatizer.vb
    startLine: 247
  assemblies:
  - InnerLibs
  namespace: InnerLibs.Triforce.LINQ
  summary: "\nAplica um template HTML a um objeto <xref href=\"System.Data.Linq.ISingleResult%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      public TemplatePage<T> ApplyTemplate<T>(ISingleResult<T> List, int PageNumber = 1, int PageSize = 0, string Template = "")
          where T : class
    parameters:
    - id: List
      type: System.Data.Linq.ISingleResult{{T}}
      description: Lista de objetos
    - id: PageNumber
      type: System.Int32
      description: Pagina que será processada.
    - id: PageSize
      type: System.Int32
      description: "\nQuantidade de itens por página. Passar o valor 0 para trazer todos os itens\n"
    - id: Template
      type: System.String
      description: Template HTML ou nome do template HTML
    typeParameters:
    - id: T
      description: TIpo de objeto usado como fonte dos dados
    return:
      type: InnerLibs.Triforce.TemplatePage{{T}}
      description: ''
    content.vb: Public Function ApplyTemplate(Of T As Class)(List As ISingleResult(Of T), PageNumber As Integer = 1, PageSize As Integer = 0, Template As String = "") As TemplatePage(Of T)
  overload: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate*
  nameWithType.vb: Triforce(Of DataContextType).ApplyTemplate(Of T)(ISingleResult(Of T), Int32, Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).ApplyTemplate(Of T)(System.Data.Linq.ISingleResult(Of T), System.Int32, System.Int32, System.String)
  name.vb: ApplyTemplate(Of T)(ISingleResult(Of T), Int32, Int32, String)
- uid: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.String,System.Object[])
  commentId: M:InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.String,System.Object[])
  id: ApplyTemplate``1(System.String,System.Object[])
  parent: InnerLibs.Triforce.LINQ.Triforce`1
  langs:
  - csharp
  - vb
  name: ApplyTemplate<T>(String, Object[])
  nameWithType: Triforce<DataContextType>.ApplyTemplate<T>(String, Object[])
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.ApplyTemplate<T>(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Triforce/LINQTemplatizer.vb
    id: ApplyTemplate
    path: Triforce/LINQTemplatizer.vb
    startLine: 258
  assemblies:
  - InnerLibs
  namespace: InnerLibs.Triforce.LINQ
  summary: "\nExtrai uma Query SQL de um arquivo e retorna um <xref href=\"InnerLibs.Triforce.TemplatePage%601\" data-throw-if-not-resolved=\"false\"></xref> com os resultados\n"
  example: []
  syntax:
    content: >-
      public TemplatePage<T> ApplyTemplate<T>(string TemplateName, object[] Parameters)
          where T : class
    parameters:
    - id: TemplateName
      type: System.String
      description: Nome do Template configurado
    - id: Parameters
      type: System.Object[]
      description: ''
    typeParameters:
    - id: T
      description: Tipo do Objeto
    return:
      type: InnerLibs.Triforce.TemplatePage{{T}}
      description: ''
    content.vb: Public Function ApplyTemplate(Of T As Class)(TemplateName As String, Parameters As Object()) As TemplatePage(Of T)
  overload: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate*
  nameWithType.vb: Triforce(Of DataContextType).ApplyTemplate(Of T)(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).ApplyTemplate(Of T)(System.String, System.Object())
  name.vb: ApplyTemplate(Of T)(String, Object())
- uid: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1
  commentId: M:InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1
  id: ApplyTemplate``1
  parent: InnerLibs.Triforce.LINQ.Triforce`1
  langs:
  - csharp
  - vb
  name: ApplyTemplate<T>()
  nameWithType: Triforce<DataContextType>.ApplyTemplate<T>()
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.ApplyTemplate<T>()
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Triforce/LINQTemplatizer.vb
    id: ApplyTemplate
    path: Triforce/LINQTemplatizer.vb
    startLine: 268
  assemblies:
  - InnerLibs
  namespace: InnerLibs.Triforce.LINQ
  summary: "\nExtrai o Comando SQL e o Template HTML definidos para o objeto do tipo\n<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> e retorna um <xref href=\"InnerLibs.Triforce.TemplatePage%601\" data-throw-if-not-resolved=\"false\"></xref> com os resultados\n"
  example: []
  syntax:
    content: >-
      public TemplatePage<T> ApplyTemplate<T>()
          where T : class
    typeParameters:
    - id: T
      description: Tipo do Objeto
    return:
      type: InnerLibs.Triforce.TemplatePage{{T}}
      description: ''
    content.vb: Public Function ApplyTemplate(Of T As Class) As TemplatePage(Of T)
  overload: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate*
  nameWithType.vb: Triforce(Of DataContextType).ApplyTemplate(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).ApplyTemplate(Of T)()
  name.vb: ApplyTemplate(Of T)()
- uid: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Data.Linq.Table{``0},System.Int32,System.Int32,System.String)
  commentId: M:InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Data.Linq.Table{``0},System.Int32,System.Int32,System.String)
  id: ApplyTemplate``1(System.Data.Linq.Table{``0},System.Int32,System.Int32,System.String)
  parent: InnerLibs.Triforce.LINQ.Triforce`1
  langs:
  - csharp
  - vb
  name: ApplyTemplate<T>(Table<T>, Int32, Int32, String)
  nameWithType: Triforce<DataContextType>.ApplyTemplate<T>(Table<T>, Int32, Int32, String)
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.ApplyTemplate<T>(System.Data.Linq.Table<T>, System.Int32, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Triforce/LINQTemplatizer.vb
    id: ApplyTemplate
    path: Triforce/LINQTemplatizer.vb
    startLine: 283
  assemblies:
  - InnerLibs
  namespace: InnerLibs.Triforce.LINQ
  summary: "\nAplica um template HTML a um objeto <xref href=\"System.Data.Linq.Table%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      public TemplatePage<T> ApplyTemplate<T>(Table<T> List, int PageNumber = 1, int PageSize = 0, string Template = "")
          where T : class
    parameters:
    - id: List
      type: System.Data.Linq.Table{{T}}
      description: Lista de objetos
    - id: PageNumber
      type: System.Int32
      description: Pagina que será processada.
    - id: PageSize
      type: System.Int32
      description: "\nQuantidade de itens por página. Passar o valor 0 para trazer todos os itens\n"
    - id: Template
      type: System.String
      description: Template HTML ou nome do template HTML
    typeParameters:
    - id: T
      description: TIpo de objeto usado como fonte dos dados
    return:
      type: InnerLibs.Triforce.TemplatePage{{T}}
      description: ''
    content.vb: Public Function ApplyTemplate(Of T As Class)(List As Table(Of T), PageNumber As Integer = 1, PageSize As Integer = 0, Template As String = "") As TemplatePage(Of T)
  overload: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate*
  nameWithType.vb: Triforce(Of DataContextType).ApplyTemplate(Of T)(Table(Of T), Int32, Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).ApplyTemplate(Of T)(System.Data.Linq.Table(Of T), System.Int32, System.Int32, System.String)
  name.vb: ApplyTemplate(Of T)(Table(Of T), Int32, Int32, String)
- uid: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.String)
  commentId: M:InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.String)
  id: ApplyTemplate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.String)
  parent: InnerLibs.Triforce.LINQ.Triforce`1
  langs:
  - csharp
  - vb
  name: ApplyTemplate<T>(IEnumerable<T>, Int32, Int32, String)
  nameWithType: Triforce<DataContextType>.ApplyTemplate<T>(IEnumerable<T>, Int32, Int32, String)
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.ApplyTemplate<T>(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Triforce/LINQTemplatizer.vb
    id: ApplyTemplate
    path: Triforce/LINQTemplatizer.vb
    startLine: 298
  assemblies:
  - InnerLibs
  namespace: InnerLibs.Triforce.LINQ
  summary: "\nAplica um template HTML a um objeto <xref href=\"System.Data.Linq.Table%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      public override TemplatePage<T> ApplyTemplate<T>(IEnumerable<T> List, int PageNumber = 1, int PageSize = 0, string Template = "")
          where T : class
    parameters:
    - id: List
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Lista de objetos
    - id: PageNumber
      type: System.Int32
      description: Pagina que será processada.
    - id: PageSize
      type: System.Int32
      description: "\nQuantidade de itens por página. Passar o valor 0 para trazer todos os itens\n"
    - id: Template
      type: System.String
      description: Template HTML ou nome do template HTML
    typeParameters:
    - id: T
      description: TIpo de objeto usado como fonte dos dados
    return:
      type: InnerLibs.Triforce.TemplatePage{{T}}
      description: ''
    content.vb: Public Overrides Function ApplyTemplate(Of T As Class)(List As IEnumerable(Of T), PageNumber As Integer = 1, PageSize As Integer = 0, Template As String = "") As TemplatePage(Of T)
  overridden: InnerLibs.Triforce.Triforce.ApplyTemplate``1(System.Collections.Generic.IEnumerable{{T}},System.Int32,System.Int32,System.String)
  overload: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate*
  nameWithType.vb: Triforce(Of DataContextType).ApplyTemplate(Of T)(IEnumerable(Of T), Int32, Int32, String)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).ApplyTemplate(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Int32, System.String)
  name.vb: ApplyTemplate(Of T)(IEnumerable(Of T), Int32, Int32, String)
- uid: InnerLibs.Triforce.LINQ.Triforce`1.GetCommand(System.String)
  commentId: M:InnerLibs.Triforce.LINQ.Triforce`1.GetCommand(System.String)
  id: GetCommand(System.String)
  parent: InnerLibs.Triforce.LINQ.Triforce`1
  langs:
  - csharp
  - vb
  name: GetCommand(String)
  nameWithType: Triforce<DataContextType>.GetCommand(String)
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.GetCommand(System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/Triforce/LINQTemplatizer.vb
    id: GetCommand
    path: Triforce/LINQTemplatizer.vb
    startLine: 307
  assemblies:
  - InnerLibs
  namespace: InnerLibs.Triforce.LINQ
  summary: "\nPega o comando SQL de um arquivo ou resource\n"
  example: []
  syntax:
    content: public string GetCommand(string CommandFile)
    parameters:
    - id: CommandFile
      type: System.String
      description: Nome do arquivo ou resource
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetCommand(CommandFile As String) As String
  overload: InnerLibs.Triforce.LINQ.Triforce`1.GetCommand*
  nameWithType.vb: Triforce(Of DataContextType).GetCommand(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).GetCommand(System.String)
references:
- uid: InnerLibs.Triforce.Triforce
  commentId: T:InnerLibs.Triforce.Triforce
  parent: InnerLibs.Triforce
  name: Triforce
  nameWithType: Triforce
  fullName: InnerLibs.Triforce.Triforce
- uid: InnerLibs.Triforce.LINQ
  commentId: N:InnerLibs.Triforce.LINQ
  name: InnerLibs.Triforce.LINQ
  nameWithType: InnerLibs.Triforce.LINQ
  fullName: InnerLibs.Triforce.LINQ
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: InnerLibs.Triforce.Triforce.ApplicationAssembly
  commentId: P:InnerLibs.Triforce.Triforce.ApplicationAssembly
  parent: InnerLibs.Triforce.Triforce
  name: ApplicationAssembly
  nameWithType: Triforce.ApplicationAssembly
  fullName: InnerLibs.Triforce.Triforce.ApplicationAssembly
- uid: InnerLibs.Triforce.Triforce.Culture
  commentId: P:InnerLibs.Triforce.Triforce.Culture
  parent: InnerLibs.Triforce.Triforce
  name: Culture
  nameWithType: Triforce.Culture
  fullName: InnerLibs.Triforce.Triforce.Culture
- uid: InnerLibs.Triforce.Triforce.CustomProperties
  commentId: P:InnerLibs.Triforce.Triforce.CustomProperties
  parent: InnerLibs.Triforce.Triforce
  name: CustomProperties
  nameWithType: Triforce.CustomProperties
  fullName: InnerLibs.Triforce.Triforce.CustomProperties
- uid: InnerLibs.Triforce.Triforce.CustomValues
  commentId: P:InnerLibs.Triforce.Triforce.CustomValues
  parent: InnerLibs.Triforce.Triforce
  name: CustomValues
  nameWithType: Triforce.CustomValues
  fullName: InnerLibs.Triforce.Triforce.CustomValues
- uid: InnerLibs.Triforce.Triforce.Selectors
  commentId: P:InnerLibs.Triforce.Triforce.Selectors
  parent: InnerLibs.Triforce.Triforce
  name: Selectors
  nameWithType: Triforce.Selectors
  fullName: InnerLibs.Triforce.Triforce.Selectors
- uid: InnerLibs.Triforce.Triforce.TemplateDirectory
  commentId: P:InnerLibs.Triforce.Triforce.TemplateDirectory
  parent: InnerLibs.Triforce.Triforce
  name: TemplateDirectory
  nameWithType: Triforce.TemplateDirectory
  fullName: InnerLibs.Triforce.Triforce.TemplateDirectory
- uid: InnerLibs.Triforce.Triforce.ApplyArrayTemplate(System.String,System.Object[])
  commentId: M:InnerLibs.Triforce.Triforce.ApplyArrayTemplate(System.String,System.Object[])
  parent: InnerLibs.Triforce.Triforce
  isExternal: true
  name: ApplyArrayTemplate(String, Object[])
  nameWithType: Triforce.ApplyArrayTemplate(String, Object[])
  fullName: InnerLibs.Triforce.Triforce.ApplyArrayTemplate(System.String, System.Object[])
  nameWithType.vb: Triforce.ApplyArrayTemplate(String, Object())
  fullName.vb: InnerLibs.Triforce.Triforce.ApplyArrayTemplate(System.String, System.Object())
  name.vb: ApplyArrayTemplate(String, Object())
  spec.csharp:
  - uid: InnerLibs.Triforce.Triforce.ApplyArrayTemplate(System.String,System.Object[])
    name: ApplyArrayTemplate
    nameWithType: Triforce.ApplyArrayTemplate
    fullName: InnerLibs.Triforce.Triforce.ApplyArrayTemplate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Triforce.Triforce.ApplyArrayTemplate(System.String,System.Object[])
    name: ApplyArrayTemplate
    nameWithType: Triforce.ApplyArrayTemplate
    fullName: InnerLibs.Triforce.Triforce.ApplyArrayTemplate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.Triforce.ClearNotFoundValues(System.String)
  commentId: M:InnerLibs.Triforce.Triforce.ClearNotFoundValues(System.String)
  parent: InnerLibs.Triforce.Triforce
  isExternal: true
  name: ClearNotFoundValues(String)
  nameWithType: Triforce.ClearNotFoundValues(String)
  fullName: InnerLibs.Triforce.Triforce.ClearNotFoundValues(System.String)
  spec.csharp:
  - uid: InnerLibs.Triforce.Triforce.ClearNotFoundValues(System.String)
    name: ClearNotFoundValues
    nameWithType: Triforce.ClearNotFoundValues
    fullName: InnerLibs.Triforce.Triforce.ClearNotFoundValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Triforce.Triforce.ClearNotFoundValues(System.String)
    name: ClearNotFoundValues
    nameWithType: Triforce.ClearNotFoundValues
    fullName: InnerLibs.Triforce.Triforce.ClearNotFoundValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.Triforce.CreatePaginarionUrlTemplate(System.String,System.String[])
  commentId: M:InnerLibs.Triforce.Triforce.CreatePaginarionUrlTemplate(System.String,System.String[])
  parent: InnerLibs.Triforce.Triforce
  isExternal: true
  name: CreatePaginarionUrlTemplate(String, String[])
  nameWithType: Triforce.CreatePaginarionUrlTemplate(String, String[])
  fullName: InnerLibs.Triforce.Triforce.CreatePaginarionUrlTemplate(System.String, System.String[])
  nameWithType.vb: Triforce.CreatePaginarionUrlTemplate(String, String())
  fullName.vb: InnerLibs.Triforce.Triforce.CreatePaginarionUrlTemplate(System.String, System.String())
  name.vb: CreatePaginarionUrlTemplate(String, String())
  spec.csharp:
  - uid: InnerLibs.Triforce.Triforce.CreatePaginarionUrlTemplate(System.String,System.String[])
    name: CreatePaginarionUrlTemplate
    nameWithType: Triforce.CreatePaginarionUrlTemplate
    fullName: InnerLibs.Triforce.Triforce.CreatePaginarionUrlTemplate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Triforce.Triforce.CreatePaginarionUrlTemplate(System.String,System.String[])
    name: CreatePaginarionUrlTemplate
    nameWithType: Triforce.CreatePaginarionUrlTemplate
    fullName: InnerLibs.Triforce.Triforce.CreatePaginarionUrlTemplate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.Triforce.CreateUrl``1({T},System.String)
  commentId: M:InnerLibs.Triforce.Triforce.CreateUrl``1(``0,System.String)
  parent: InnerLibs.Triforce.Triforce
  definition: InnerLibs.Triforce.Triforce.CreateUrl``1(``0,System.String)
  name: CreateUrl<T>(T, String)
  nameWithType: Triforce.CreateUrl<T>(T, String)
  fullName: InnerLibs.Triforce.Triforce.CreateUrl<T>(T, System.String)
  nameWithType.vb: Triforce.CreateUrl(Of T)(T, String)
  fullName.vb: InnerLibs.Triforce.Triforce.CreateUrl(Of T)(T, System.String)
  name.vb: CreateUrl(Of T)(T, String)
  spec.csharp:
  - uid: InnerLibs.Triforce.Triforce.CreateUrl``1(``0,System.String)
    name: CreateUrl<T>
    nameWithType: Triforce.CreateUrl<T>
    fullName: InnerLibs.Triforce.Triforce.CreateUrl<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Triforce.Triforce.CreateUrl``1(``0,System.String)
    name: CreateUrl(Of T)
    nameWithType: Triforce.CreateUrl(Of T)
    fullName: InnerLibs.Triforce.Triforce.CreateUrl(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.Triforce.GetTemplate``1(System.Boolean)
  commentId: M:InnerLibs.Triforce.Triforce.GetTemplate``1(System.Boolean)
  parent: InnerLibs.Triforce.Triforce
  isExternal: true
  name: GetTemplate<T>(Boolean)
  nameWithType: Triforce.GetTemplate<T>(Boolean)
  fullName: InnerLibs.Triforce.Triforce.GetTemplate<T>(System.Boolean)
  nameWithType.vb: Triforce.GetTemplate(Of T)(Boolean)
  fullName.vb: InnerLibs.Triforce.Triforce.GetTemplate(Of T)(System.Boolean)
  name.vb: GetTemplate(Of T)(Boolean)
  spec.csharp:
  - uid: InnerLibs.Triforce.Triforce.GetTemplate``1(System.Boolean)
    name: GetTemplate<T>
    nameWithType: Triforce.GetTemplate<T>
    fullName: InnerLibs.Triforce.Triforce.GetTemplate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Triforce.Triforce.GetTemplate``1(System.Boolean)
    name: GetTemplate(Of T)
    nameWithType: Triforce.GetTemplate(Of T)
    fullName: InnerLibs.Triforce.Triforce.GetTemplate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.Triforce.GetTemplate(System.Type,System.Boolean)
  commentId: M:InnerLibs.Triforce.Triforce.GetTemplate(System.Type,System.Boolean)
  parent: InnerLibs.Triforce.Triforce
  isExternal: true
  name: GetTemplate(Type, Boolean)
  nameWithType: Triforce.GetTemplate(Type, Boolean)
  fullName: InnerLibs.Triforce.Triforce.GetTemplate(System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.Triforce.Triforce.GetTemplate(System.Type,System.Boolean)
    name: GetTemplate
    nameWithType: Triforce.GetTemplate
    fullName: InnerLibs.Triforce.Triforce.GetTemplate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Triforce.Triforce.GetTemplate(System.Type,System.Boolean)
    name: GetTemplate
    nameWithType: Triforce.GetTemplate
    fullName: InnerLibs.Triforce.Triforce.GetTemplate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.Triforce.GetTemplateContent(System.String,InnerLibs.Triforce.TemplateTag)
  commentId: M:InnerLibs.Triforce.Triforce.GetTemplateContent(System.String,InnerLibs.Triforce.TemplateTag)
  parent: InnerLibs.Triforce.Triforce
  isExternal: true
  name: GetTemplateContent(String, TemplateTag)
  nameWithType: Triforce.GetTemplateContent(String, TemplateTag)
  fullName: InnerLibs.Triforce.Triforce.GetTemplateContent(System.String, InnerLibs.Triforce.TemplateTag)
  spec.csharp:
  - uid: InnerLibs.Triforce.Triforce.GetTemplateContent(System.String,InnerLibs.Triforce.TemplateTag)
    name: GetTemplateContent
    nameWithType: Triforce.GetTemplateContent
    fullName: InnerLibs.Triforce.Triforce.GetTemplateContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: InnerLibs.Triforce.TemplateTag
    name: TemplateTag
    nameWithType: TemplateTag
    fullName: InnerLibs.Triforce.TemplateTag
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Triforce.Triforce.GetTemplateContent(System.String,InnerLibs.Triforce.TemplateTag)
    name: GetTemplateContent
    nameWithType: Triforce.GetTemplateContent
    fullName: InnerLibs.Triforce.Triforce.GetTemplateContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: InnerLibs.Triforce.TemplateTag
    name: TemplateTag
    nameWithType: TemplateTag
    fullName: InnerLibs.Triforce.TemplateTag
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Finalize
  commentId: M:System.Object.Finalize
  parent: System.Object
  isExternal: true
  name: Finalize()
  nameWithType: Object.Finalize()
  fullName: System.Object.Finalize()
  spec.csharp:
  - uid: System.Object.Finalize
    name: Finalize
    nameWithType: Object.Finalize
    fullName: System.Object.Finalize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Finalize
    name: Finalize
    nameWithType: Object.Finalize
    fullName: System.Object.Finalize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.CreateDictionary
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary()
  nameWithType: ClassTools.CreateDictionary()
  fullName: InnerLibs.ClassTools.CreateDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  name: GetProperties(BindingFlags)
  nameWithType: ClassTools.GetProperties(BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object)
  name: GetProperties()
  nameWithType: ClassTools.GetProperties()
  fullName: InnerLibs.ClassTools.GetProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  name: GetPropertyValue(String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  name: GetPropertyValue<Type>(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  name: GetPropertyValue(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  name: HasProperty(String)
  nameWithType: ClassTools.HasProperty(String)
  fullName: InnerLibs.ClassTools.HasProperty(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsArrayOf``1
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  name: IsArrayOf<T>()
  nameWithType: ClassTools.IsArrayOf<T>()
  fullName: InnerLibs.ClassTools.IsArrayOf<T>()
  nameWithType.vb: ClassTools.IsArrayOf(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)()
  name.vb: IsArrayOf(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsDictionary
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsDictionary(System.Object)
  name: IsDictionary()
  nameWithType: ClassTools.IsDictionary()
  fullName: InnerLibs.ClassTools.IsDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}}},System.Collections.Generic.IEqualityComparer{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}}})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsIn(IEnumerable<Triforce<DataContextType>>, IEqualityComparer<Triforce<DataContextType>>)
  nameWithType: ClassTools.IsIn(IEnumerable<Triforce<DataContextType>>, IEqualityComparer<Triforce<DataContextType>>)
  fullName: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable<InnerLibs.Triforce.LINQ.Triforce<DataContextType>>, System.Collections.Generic.IEqualityComparer<InnerLibs.Triforce.LINQ.Triforce<DataContextType>>)
  nameWithType.vb: ClassTools.IsIn(IEnumerable(Of Triforce(Of DataContextType)), IEqualityComparer(Of Triforce(Of DataContextType)))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable(Of InnerLibs.Triforce.LINQ.Triforce(Of DataContextType)), System.Collections.Generic.IEqualityComparer(Of InnerLibs.Triforce.LINQ.Triforce(Of DataContextType)))
  name.vb: IsIn(IEnumerable(Of Triforce(Of DataContextType)), IEqualityComparer(Of Triforce(Of DataContextType)))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Triforce.LINQ.Triforce{`0}},System.Collections.Generic.IEqualityComparer{InnerLibs.Triforce.LINQ.Triforce{`0}})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: <
    nameWithType: <
    fullName: <
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: <
    nameWithType: <
    fullName: <
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.Triforce.LINQ.Triforce{`0}},System.Collections.Generic.IEqualityComparer{InnerLibs.Triforce.LINQ.Triforce{`0}})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}}}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}}})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  name: IsInAny(IEnumerable<Triforce<DataContextType>>[], IEqualityComparer<Triforce<DataContextType>>)
  nameWithType: ClassTools.IsInAny(IEnumerable<Triforce<DataContextType>>[], IEqualityComparer<Triforce<DataContextType>>)
  fullName: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable<InnerLibs.Triforce.LINQ.Triforce<DataContextType>>[], System.Collections.Generic.IEqualityComparer<InnerLibs.Triforce.LINQ.Triforce<DataContextType>>)
  nameWithType.vb: ClassTools.IsInAny(IEnumerable(Of Triforce(Of DataContextType))(), IEqualityComparer(Of Triforce(Of DataContextType)))
  fullName.vb: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable(Of InnerLibs.Triforce.LINQ.Triforce(Of DataContextType))(), System.Collections.Generic.IEqualityComparer(Of InnerLibs.Triforce.LINQ.Triforce(Of DataContextType)))
  name.vb: IsInAny(IEnumerable(Of Triforce(Of DataContextType))(), IEqualityComparer(Of Triforce(Of DataContextType)))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Triforce.LINQ.Triforce{`0}}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Triforce.LINQ.Triforce{`0}})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: <
    nameWithType: <
    fullName: <
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: <
    nameWithType: <
    fullName: <
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.Triforce.LINQ.Triforce{`0}}[],System.Collections.Generic.IEqualityComparer{InnerLibs.Triforce.LINQ.Triforce{`0}})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsList
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsList(System.Object)
  name: IsList()
  nameWithType: ClassTools.IsList()
  fullName: InnerLibs.ClassTools.IsList()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}}},System.Collections.Generic.IEqualityComparer{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}}})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsNotIn(IEnumerable<Triforce<DataContextType>>, IEqualityComparer<Triforce<DataContextType>>)
  nameWithType: ClassTools.IsNotIn(IEnumerable<Triforce<DataContextType>>, IEqualityComparer<Triforce<DataContextType>>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable<InnerLibs.Triforce.LINQ.Triforce<DataContextType>>, System.Collections.Generic.IEqualityComparer<InnerLibs.Triforce.LINQ.Triforce<DataContextType>>)
  nameWithType.vb: ClassTools.IsNotIn(IEnumerable(Of Triforce(Of DataContextType)), IEqualityComparer(Of Triforce(Of DataContextType)))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable(Of InnerLibs.Triforce.LINQ.Triforce(Of DataContextType)), System.Collections.Generic.IEqualityComparer(Of InnerLibs.Triforce.LINQ.Triforce(Of DataContextType)))
  name.vb: IsNotIn(IEnumerable(Of Triforce(Of DataContextType)), IEqualityComparer(Of Triforce(Of DataContextType)))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Triforce.LINQ.Triforce{`0}},System.Collections.Generic.IEqualityComparer{InnerLibs.Triforce.LINQ.Triforce{`0}})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: <
    nameWithType: <
    fullName: <
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: <
    nameWithType: <
    fullName: <
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.Triforce.LINQ.Triforce{`0}},System.Collections.Generic.IEqualityComparer{InnerLibs.Triforce.LINQ.Triforce{`0}})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsNotIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsType``1
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsType``1(System.Object)
  name: IsType<T>()
  nameWithType: ClassTools.IsType<T>()
  fullName: InnerLibs.ClassTools.IsType<T>()
  nameWithType.vb: ClassTools.IsType(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)()
  name.vb: IsType(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.NullCoalesce(InnerLibs.Triforce.LINQ.Triforce{{DataContextType}}[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce(Triforce<DataContextType>[])
  nameWithType: ClassTools.NullCoalesce(Triforce<DataContextType>[])
  fullName: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Triforce.LINQ.Triforce<DataContextType>[])
  nameWithType.vb: ClassTools.NullCoalesce(Triforce(Of DataContextType)())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Triforce.LINQ.Triforce(Of DataContextType)())
  name.vb: NullCoalesce(Triforce(Of DataContextType)())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Triforce.LINQ.Triforce{`0}[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: <
    nameWithType: <
    fullName: <
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.Triforce.LINQ.Triforce{`0}[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.ClassTools.NullifyProperties
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties()
  nameWithType: ClassTools.NullifyProperties()
  fullName: InnerLibs.ClassTools.NullifyProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  name: SetPropertyValue<Type>(String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.String, Type)
  name.vb: SetPropertyValue(Of Type)(String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  name: SetPropertyValueFromCollection<Type>(String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  name: ToFlatString(String)
  nameWithType: ClassTools.ToFlatString(String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.DataManipulation.GetDbType
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  parent: InnerLibs.DataManipulation
  definition: InnerLibs.DataManipulation.GetDbType(System.Object)
  name: GetDbType()
  nameWithType: DataManipulation.GetDbType()
  fullName: InnerLibs.DataManipulation.GetDbType()
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.Converter.DefineEmptyList
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList()
  nameWithType: Converter.DefineEmptyList()
  fullName: InnerLibs.Converter.DefineEmptyList()
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.Converter.ChangeType``1
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType>()
  nameWithType: Converter.ChangeType<ToType>()
  fullName: InnerLibs.Converter.ChangeType<ToType>()
  nameWithType.vb: Converter.ChangeType(Of ToType)()
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType)()
  name.vb: ChangeType(Of ToType)()
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType<ToType>
    nameWithType: Converter.ChangeType<ToType>
    fullName: InnerLibs.Converter.ChangeType<ToType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType(Of ToType)
    nameWithType: Converter.ChangeType(Of ToType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.JsonViewer.CreateNode
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  parent: InnerLibs.JsonViewer
  definition: InnerLibs.JsonViewer.CreateNode(System.Object)
  name: CreateNode()
  nameWithType: JsonViewer.CreateNode()
  fullName: InnerLibs.JsonViewer.CreateNode()
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  parent: InnerLibs.Mathematic
  definition: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  name: IsBetween(Object, Object)
  nameWithType: Mathematic.IsBetween(Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Text.SerializeJSON(System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  parent: InnerLibs.Text
  definition: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  name: SerializeJSON(String)
  nameWithType: Text.SerializeJSON(String)
  fullName: InnerLibs.Text.SerializeJSON(System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNumber
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNumber(System.Object)
  name: IsNumber()
  nameWithType: Verify.IsNumber()
  fullName: InnerLibs.Verify.IsNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNotNumber
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNotNumber(System.Object)
  name: IsNotNumber()
  nameWithType: Verify.IsNotNumber()
  fullName: InnerLibs.Verify.IsNotNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IfBlank``1({T})
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  name: IfBlank<T>(T)
  nameWithType: Verify.IfBlank<T>(T)
  fullName: InnerLibs.Verify.IfBlank<T>(T)
  nameWithType.vb: Verify.IfBlank(Of T)(T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(T)
  name.vb: IfBlank(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.Verify.NullIf(System.Func{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}},System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  name: NullIf(Func<Triforce<DataContextType>, Boolean>)
  nameWithType: Verify.NullIf(Func<Triforce<DataContextType>, Boolean>)
  fullName: InnerLibs.Verify.NullIf(System.Func<InnerLibs.Triforce.LINQ.Triforce<DataContextType>, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Func(Of Triforce(Of DataContextType), Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(System.Func(Of InnerLibs.Triforce.LINQ.Triforce(Of DataContextType), System.Boolean))
  name.vb: NullIf(Func(Of Triforce(Of DataContextType), Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.Triforce.LINQ.Triforce{`0},System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: <
    nameWithType: <
    fullName: <
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.Triforce.LINQ.Triforce{`0},System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.Verify.NullIf(InnerLibs.Triforce.LINQ.Triforce{{DataContextType}})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf(Triforce<DataContextType>)
  nameWithType: Verify.NullIf(Triforce<DataContextType>)
  fullName: InnerLibs.Verify.NullIf(InnerLibs.Triforce.LINQ.Triforce<DataContextType>)
  nameWithType.vb: Verify.NullIf(Triforce(Of DataContextType))
  fullName.vb: InnerLibs.Verify.NullIf(InnerLibs.Triforce.LINQ.Triforce(Of DataContextType))
  name.vb: NullIf(Triforce(Of DataContextType))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.Triforce.LINQ.Triforce{`0})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: <
    nameWithType: <
    fullName: <
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.Triforce.LINQ.Triforce{`0})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  parent: InnerLibs.Web
  definition: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  name: CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax(System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}},{TextType}},System.Func{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}},{ValueType}})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  parent: InnerLibs.Web
  definition: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  name: AsListItem<TextType, ValueType>(Func<Triforce<DataContextType>, TextType>, Func<Triforce<DataContextType>, ValueType>)
  nameWithType: Web.AsListItem<TextType, ValueType>(Func<Triforce<DataContextType>, TextType>, Func<Triforce<DataContextType>, ValueType>)
  fullName: InnerLibs.Web.AsListItem<TextType, ValueType>(System.Func<InnerLibs.Triforce.LINQ.Triforce<DataContextType>, TextType>, System.Func<InnerLibs.Triforce.LINQ.Triforce<DataContextType>, ValueType>)
  nameWithType.vb: Web.AsListItem(Of TextType, ValueType)(Func(Of Triforce(Of DataContextType), TextType), Func(Of Triforce(Of DataContextType), ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of TextType, ValueType)(System.Func(Of InnerLibs.Triforce.LINQ.Triforce(Of DataContextType), TextType), System.Func(Of InnerLibs.Triforce.LINQ.Triforce(Of DataContextType), ValueType))
  name.vb: AsListItem(Of TextType, ValueType)(Func(Of Triforce(Of DataContextType), TextType), Func(Of Triforce(Of DataContextType), ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Triforce.LINQ.Triforce{`0},``0},System.Func{InnerLibs.Triforce.LINQ.Triforce{`0},``1})
    name: AsListItem<TextType, ValueType>
    nameWithType: Web.AsListItem<TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: <
    nameWithType: <
    fullName: <
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: <
    nameWithType: <
    fullName: <
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.Triforce.LINQ.Triforce{`0},``0},System.Func{InnerLibs.Triforce.LINQ.Triforce{`0},``1})
    name: AsListItem(Of TextType, ValueType)
    nameWithType: Web.AsListItem(Of TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.GetCastedValue
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.GetCastedValue(System.Object)
  name: GetCastedValue()
  nameWithType: WinForms.GetCastedValue()
  fullName: InnerLibs.WinForms.GetCastedValue()
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  name: CastValueForControl(Object)
  nameWithType: WinForms.CastValueForControl(Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  name: ApplyToControls(HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls(HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Triforce.LINQ.Triforce{{DataContextType}},System.Func{InnerLibs.Triforce.LINQ.Triforce{{DataContextType}},System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  name: HasSamePropertyValues(Triforce<DataContextType>, Func<Triforce<DataContextType>, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues(Triforce<DataContextType>, Func<Triforce<DataContextType>, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Triforce.LINQ.Triforce<DataContextType>, System.Func<InnerLibs.Triforce.LINQ.Triforce<DataContextType>, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(Triforce(Of DataContextType), Func(Of Triforce(Of DataContextType), Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Triforce.LINQ.Triforce(Of DataContextType), System.Func(Of InnerLibs.Triforce.LINQ.Triforce(Of DataContextType), System.Object)())
  name.vb: HasSamePropertyValues(Triforce(Of DataContextType), Func(Of Triforce(Of DataContextType), Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Triforce.LINQ.Triforce{`0},System.Func{InnerLibs.Triforce.LINQ.Triforce{`0},System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: <
    nameWithType: <
    fullName: <
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: <
    nameWithType: <
    fullName: <
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.Triforce.LINQ.Triforce{`0},System.Func{InnerLibs.Triforce.LINQ.Triforce{`0},System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.Triforce.LINQ.Triforce`1
    name: Triforce
    nameWithType: Triforce
    fullName: InnerLibs.Triforce.LINQ.Triforce
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: DataContextType
    nameWithType: DataContextType
    fullName: DataContextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce
  commentId: N:InnerLibs.Triforce
  name: InnerLibs.Triforce
  nameWithType: InnerLibs.Triforce
  fullName: InnerLibs.Triforce
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: InnerLibs.Triforce.Triforce.CreateUrl``1(``0,System.String)
  commentId: M:InnerLibs.Triforce.Triforce.CreateUrl``1(``0,System.String)
  isExternal: true
  name: CreateUrl<T>(T, String)
  nameWithType: Triforce.CreateUrl<T>(T, String)
  fullName: InnerLibs.Triforce.Triforce.CreateUrl<T>(T, System.String)
  nameWithType.vb: Triforce.CreateUrl(Of T)(T, String)
  fullName.vb: InnerLibs.Triforce.Triforce.CreateUrl(Of T)(T, System.String)
  name.vb: CreateUrl(Of T)(T, String)
  spec.csharp:
  - uid: InnerLibs.Triforce.Triforce.CreateUrl``1(``0,System.String)
    name: CreateUrl<T>
    nameWithType: Triforce.CreateUrl<T>
    fullName: InnerLibs.Triforce.Triforce.CreateUrl<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Triforce.Triforce.CreateUrl``1(``0,System.String)
    name: CreateUrl(Of T)
    nameWithType: Triforce.CreateUrl(Of T)
    fullName: InnerLibs.Triforce.Triforce.CreateUrl(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary<Type>(Type)
  nameWithType: ClassTools.CreateDictionary<Type>(Type)
  fullName: InnerLibs.ClassTools.CreateDictionary<Type>(Type)
  nameWithType.vb: ClassTools.CreateDictionary(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.CreateDictionary(Of Type)(Type)
  name.vb: CreateDictionary(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary<Type>
    nameWithType: ClassTools.CreateDictionary<Type>
    fullName: InnerLibs.ClassTools.CreateDictionary<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary(Of Type)
    nameWithType: ClassTools.CreateDictionary(Of Type)
    fullName: InnerLibs.ClassTools.CreateDictionary(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools
  commentId: T:InnerLibs.ClassTools
  parent: InnerLibs
  name: ClassTools
  nameWithType: ClassTools
  fullName: InnerLibs.ClassTools
- uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  isExternal: true
  name: GetProperties(Object, BindingFlags)
  nameWithType: ClassTools.GetProperties(Object, BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object, System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetProperties(System.Object)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  isExternal: true
  name: GetProperties(Object)
  nameWithType: ClassTools.GetProperties(Object)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue<Type>(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.Object, System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(Object, String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.Object, System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(Object, String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  isExternal: true
  name: HasProperty(Object, String)
  nameWithType: ClassTools.HasProperty(Object, String)
  fullName: InnerLibs.ClassTools.HasProperty(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  isExternal: true
  name: IsArrayOf<T>(Object)
  nameWithType: ClassTools.IsArrayOf<T>(Object)
  fullName: InnerLibs.ClassTools.IsArrayOf<T>(System.Object)
  nameWithType.vb: ClassTools.IsArrayOf(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)(System.Object)
  name.vb: IsArrayOf(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsDictionary(System.Object)
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  isExternal: true
  name: IsDictionary(Object)
  nameWithType: ClassTools.IsDictionary(Object)
  fullName: InnerLibs.ClassTools.IsDictionary(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  nameWithType: ClassTools.IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsInAny<Type>(Type, System.Collections.Generic.IEnumerable<Type>[], System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsInAny(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type)(), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny<Type>
    nameWithType: ClassTools.IsInAny<Type>
    fullName: InnerLibs.ClassTools.IsInAny<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny(Of Type)
    nameWithType: ClassTools.IsInAny(Of Type)
    fullName: InnerLibs.ClassTools.IsInAny(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsList(System.Object)
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  isExternal: true
  name: IsList(Object)
  nameWithType: ClassTools.IsList(Object)
  fullName: InnerLibs.ClassTools.IsList(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsType``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  isExternal: true
  name: IsType<T>(Object)
  nameWithType: ClassTools.IsType<T>(Object)
  fullName: InnerLibs.ClassTools.IsType<T>(System.Object)
  nameWithType.vb: ClassTools.IsType(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)(System.Object)
  name.vb: IsType(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce<T>(T, T[])
  nameWithType: ClassTools.NullCoalesce<T>(T, T[])
  fullName: InnerLibs.ClassTools.NullCoalesce<T>(T, T[])
  nameWithType.vb: ClassTools.NullCoalesce(Of T)(T, T())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(Of T)(T, T())
  name.vb: NullCoalesce(Of T)(T, T())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce<T>
    nameWithType: ClassTools.NullCoalesce<T>
    fullName: InnerLibs.ClassTools.NullCoalesce<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce(Of T)
    nameWithType: ClassTools.NullCoalesce(Of T)
    fullName: InnerLibs.ClassTools.NullCoalesce(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties<Type>(Type)
  nameWithType: ClassTools.NullifyProperties<Type>(Type)
  fullName: InnerLibs.ClassTools.NullifyProperties<Type>(Type)
  nameWithType.vb: ClassTools.NullifyProperties(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.NullifyProperties(Of Type)(Type)
  name.vb: NullifyProperties(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties<Type>
    nameWithType: ClassTools.NullifyProperties<Type>
    fullName: InnerLibs.ClassTools.NullifyProperties<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties(Of Type)
    nameWithType: ClassTools.NullifyProperties(Of Type)
    fullName: InnerLibs.ClassTools.NullifyProperties(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  isExternal: true
  name: SetPropertyValue<Type>(Object, String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(Object, String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.Object, System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(Object, String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.Object, System.String, Type)
  name.vb: SetPropertyValue(Of Type)(Object, String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  isExternal: true
  name: SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.Object, System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.Object, System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  isExternal: true
  name: ToFlatString(Object, String)
  nameWithType: ClassTools.ToFlatString(Object, String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation.GetDbType(System.Object)
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  isExternal: true
  name: GetDbType(Object)
  nameWithType: DataManipulation.GetDbType(Object)
  fullName: InnerLibs.DataManipulation.GetDbType(System.Object)
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation
  commentId: T:InnerLibs.DataManipulation
  parent: InnerLibs
  name: DataManipulation
  nameWithType: DataManipulation
  fullName: InnerLibs.DataManipulation
- uid: InnerLibs.Converter.DefineEmptyList``1(``0)
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList<T>(T)
  nameWithType: Converter.DefineEmptyList<T>(T)
  fullName: InnerLibs.Converter.DefineEmptyList<T>(T)
  nameWithType.vb: Converter.DefineEmptyList(Of T)(T)
  fullName.vb: InnerLibs.Converter.DefineEmptyList(Of T)(T)
  name.vb: DefineEmptyList(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList<T>
    nameWithType: Converter.DefineEmptyList<T>
    fullName: InnerLibs.Converter.DefineEmptyList<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList(Of T)
    nameWithType: Converter.DefineEmptyList(Of T)
    fullName: InnerLibs.Converter.DefineEmptyList(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Converter
  commentId: T:InnerLibs.Converter
  parent: InnerLibs
  name: Converter
  nameWithType: Converter
  fullName: InnerLibs.Converter
- uid: InnerLibs.Converter.ChangeType``2(``1)
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType, FromType>(FromType)
  nameWithType: Converter.ChangeType<ToType, FromType>(FromType)
  fullName: InnerLibs.Converter.ChangeType<ToType, FromType>(FromType)
  nameWithType.vb: Converter.ChangeType(Of ToType, FromType)(FromType)
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType, FromType)(FromType)
  name.vb: ChangeType(Of ToType, FromType)(FromType)
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType<ToType, FromType>
    nameWithType: Converter.ChangeType<ToType, FromType>
    fullName: InnerLibs.Converter.ChangeType<ToType, FromType>
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType(Of ToType, FromType)
    nameWithType: Converter.ChangeType(Of ToType, FromType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType, FromType)
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer.CreateNode(System.Object)
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  isExternal: true
  name: CreateNode(Object)
  nameWithType: JsonViewer.CreateNode(Object)
  fullName: InnerLibs.JsonViewer.CreateNode(System.Object)
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer
  commentId: T:InnerLibs.JsonViewer
  parent: InnerLibs
  name: JsonViewer
  nameWithType: JsonViewer
  fullName: InnerLibs.JsonViewer
- uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  isExternal: true
  name: IsBetween<Type>(Type, Object, Object)
  nameWithType: Mathematic.IsBetween<Type>(Type, Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween<Type>(Type, System.Object, System.Object)
  nameWithType.vb: Mathematic.IsBetween(Of Type)(Type, Object, Object)
  fullName.vb: InnerLibs.Mathematic.IsBetween(Of Type)(Type, System.Object, System.Object)
  name.vb: IsBetween(Of Type)(Type, Object, Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween<Type>
    nameWithType: Mathematic.IsBetween<Type>
    fullName: InnerLibs.Mathematic.IsBetween<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween(Of Type)
    nameWithType: Mathematic.IsBetween(Of Type)
    fullName: InnerLibs.Mathematic.IsBetween(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic
  commentId: T:InnerLibs.Mathematic
  parent: InnerLibs
  name: Mathematic
  nameWithType: Mathematic
  fullName: InnerLibs.Mathematic
- uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  isExternal: true
  name: SerializeJSON(Object, String)
  nameWithType: Text.SerializeJSON(Object, String)
  fullName: InnerLibs.Text.SerializeJSON(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text
  commentId: T:InnerLibs.Text
  parent: InnerLibs
  name: Text
  nameWithType: Text
  fullName: InnerLibs.Text
- uid: InnerLibs.Verify.IsNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  isExternal: true
  name: IsNumber(Object)
  nameWithType: Verify.IsNumber(Object)
  fullName: InnerLibs.Verify.IsNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify
  commentId: T:InnerLibs.Verify
  parent: InnerLibs
  name: Verify
  nameWithType: Verify
  fullName: InnerLibs.Verify
- uid: InnerLibs.Verify.IsNotNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  isExternal: true
  name: IsNotNumber(Object)
  nameWithType: Verify.IsNotNumber(Object)
  fullName: InnerLibs.Verify.IsNotNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  isExternal: true
  name: IfBlank<T>(Object, T)
  nameWithType: Verify.IfBlank<T>(Object, T)
  fullName: InnerLibs.Verify.IfBlank<T>(System.Object, T)
  nameWithType.vb: Verify.IfBlank(Of T)(Object, T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(System.Object, T)
  name.vb: IfBlank(Of T)(Object, T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  isExternal: true
  name: NullIf<T>(T, Func<T, Boolean>)
  nameWithType: Verify.NullIf<T>(T, Func<T, Boolean>)
  fullName: InnerLibs.Verify.NullIf<T>(T, System.Func<T, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Of T)(T, Func(Of T, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, System.Func(Of T, System.Boolean))
  name.vb: NullIf(Of T)(T, Func(Of T, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,``0)
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf<T>(T, T)
  nameWithType: Verify.NullIf<T>(T, T)
  fullName: InnerLibs.Verify.NullIf<T>(T, T)
  nameWithType.vb: Verify.NullIf(Of T)(T, T)
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, T)
  name.vb: NullIf(Of T)(T, T)
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  isExternal: true
  name: CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax<Type>(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  nameWithType.vb: Web.CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  fullName.vb: InnerLibs.Web.CreateFromAjax(Of Type)(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  name.vb: CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax<Type>
    nameWithType: Web.CreateFromAjax<Type>
    fullName: InnerLibs.Web.CreateFromAjax<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax(Of Type)
    nameWithType: Web.CreateFromAjax(Of Type)
    fullName: InnerLibs.Web.CreateFromAjax(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web
  commentId: T:InnerLibs.Web
  parent: InnerLibs
  name: Web
  nameWithType: Web
  fullName: InnerLibs.Web
- uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  isExternal: true
  name: AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  nameWithType: Web.AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>(T, System.Func<T, TextType>, System.Func<T, ValueType>)
  nameWithType.vb: Web.AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)(T, System.Func(Of T, TextType), System.Func(Of T, ValueType))
  name.vb: AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem<T, TextType, ValueType>
    nameWithType: Web.AsListItem<T, TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem(Of T, TextType, ValueType)
    nameWithType: Web.AsListItem(Of T, TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms.GetCastedValue(System.Object)
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  isExternal: true
  name: GetCastedValue(Object)
  nameWithType: WinForms.GetCastedValue(Object)
  fullName: InnerLibs.WinForms.GetCastedValue(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms
  commentId: T:InnerLibs.WinForms
  parent: InnerLibs
  name: WinForms
  nameWithType: WinForms
  fullName: InnerLibs.WinForms
- uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  isExternal: true
  name: CastValueForControl(Object, Object)
  nameWithType: WinForms.CastValueForControl(Object, Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  isExternal: true
  name: ApplyToControls<T>(T, HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls<T>(T, HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>(T, System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(Of T)(T, HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)(T, System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(Of T)(T, HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls<T>
    nameWithType: LINQExtensions.ApplyToControls<T>
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls(Of T)
    nameWithType: LINQExtensions.ApplyToControls(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions
  commentId: T:InnerLibs.LINQ.LINQExtensions
  parent: InnerLibs.LINQ
  name: LINQExtensions
  nameWithType: LINQExtensions
  fullName: InnerLibs.LINQ.LINQExtensions
- uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  isExternal: true
  name: HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>(T, T, System.Func<T, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)(T, T, System.Func(Of T, System.Object)())
  name.vb: HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues<T>
    nameWithType: LINQExtensions.HasSamePropertyValues<T>
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues(Of T)
    nameWithType: LINQExtensions.HasSamePropertyValues(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs
  commentId: N:InnerLibs
  name: InnerLibs
  nameWithType: InnerLibs
  fullName: InnerLibs
- uid: InnerLibs.LINQ
  commentId: N:InnerLibs.LINQ
  name: InnerLibs.LINQ
  nameWithType: InnerLibs.LINQ
  fullName: InnerLibs.LINQ
- uid: InnerLibs.Triforce.LINQ.Triforce`1.#ctor*
  commentId: Overload:InnerLibs.Triforce.LINQ.Triforce`1.#ctor
  name: Triforce
  nameWithType: Triforce<DataContextType>.Triforce
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.Triforce
  nameWithType.vb: Triforce(Of DataContextType).Triforce
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).Triforce
- uid: System.IO.DirectoryInfo
  commentId: T:System.IO.DirectoryInfo
  parent: System.IO
  isExternal: true
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.String[]
  commentId: T:System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate*
  commentId: Overload:InnerLibs.Triforce.LINQ.Triforce`1.ApplyTemplate
  name: ApplyTemplate
  nameWithType: Triforce<DataContextType>.ApplyTemplate
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.ApplyTemplate
  nameWithType.vb: Triforce(Of DataContextType).ApplyTemplate
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).ApplyTemplate
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: InnerLibs.Triforce.TemplatePage{{T}}
  commentId: T:InnerLibs.Triforce.TemplatePage{``0}
  parent: InnerLibs.Triforce
  definition: InnerLibs.Triforce.TemplatePage`1
  name: TemplatePage<T>
  nameWithType: TemplatePage<T>
  fullName: InnerLibs.Triforce.TemplatePage<T>
  nameWithType.vb: TemplatePage(Of T)
  fullName.vb: InnerLibs.Triforce.TemplatePage(Of T)
  name.vb: TemplatePage(Of T)
  spec.csharp:
  - uid: InnerLibs.Triforce.TemplatePage`1
    name: TemplatePage
    nameWithType: TemplatePage
    fullName: InnerLibs.Triforce.TemplatePage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: InnerLibs.Triforce.TemplatePage`1
    name: TemplatePage
    nameWithType: TemplatePage
    fullName: InnerLibs.Triforce.TemplatePage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: InnerLibs.Triforce.TemplatePage`1
  commentId: T:InnerLibs.Triforce.TemplatePage`1
  parent: InnerLibs.Triforce
  name: TemplatePage<T>
  nameWithType: TemplatePage<T>
  fullName: InnerLibs.Triforce.TemplatePage<T>
  nameWithType.vb: TemplatePage(Of T)
  fullName.vb: InnerLibs.Triforce.TemplatePage(Of T)
  name.vb: TemplatePage(Of T)
  spec.csharp:
  - uid: InnerLibs.Triforce.TemplatePage`1
    name: TemplatePage
    nameWithType: TemplatePage
    fullName: InnerLibs.Triforce.TemplatePage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: InnerLibs.Triforce.TemplatePage`1
    name: TemplatePage
    nameWithType: TemplatePage
    fullName: InnerLibs.Triforce.TemplatePage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: InnerLibs.Triforce.Triforce.ApplyTemplate``1({T},System.String)
  commentId: M:InnerLibs.Triforce.Triforce.ApplyTemplate``1(``0,System.String)
  parent: InnerLibs.Triforce.Triforce
  definition: InnerLibs.Triforce.Triforce.ApplyTemplate``1(``0,System.String)
  name: ApplyTemplate<T>(T, String)
  nameWithType: Triforce.ApplyTemplate<T>(T, String)
  fullName: InnerLibs.Triforce.Triforce.ApplyTemplate<T>(T, System.String)
  nameWithType.vb: Triforce.ApplyTemplate(Of T)(T, String)
  fullName.vb: InnerLibs.Triforce.Triforce.ApplyTemplate(Of T)(T, System.String)
  name.vb: ApplyTemplate(Of T)(T, String)
  spec.csharp:
  - uid: InnerLibs.Triforce.Triforce.ApplyTemplate``1(``0,System.String)
    name: ApplyTemplate<T>
    nameWithType: Triforce.ApplyTemplate<T>
    fullName: InnerLibs.Triforce.Triforce.ApplyTemplate<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Triforce.Triforce.ApplyTemplate``1(``0,System.String)
    name: ApplyTemplate(Of T)
    nameWithType: Triforce.ApplyTemplate(Of T)
    fullName: InnerLibs.Triforce.Triforce.ApplyTemplate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:``0'
  definition: '``0'
  name: T
  nameWithType: T
  fullName: T
- uid: InnerLibs.Triforce.Template{{T}}
  commentId: T:InnerLibs.Triforce.Template{``0}
  parent: InnerLibs.Triforce
  definition: InnerLibs.Triforce.Template`1
  name: Template<T>
  nameWithType: Template<T>
  fullName: InnerLibs.Triforce.Template<T>
  nameWithType.vb: Template(Of T)
  fullName.vb: InnerLibs.Triforce.Template(Of T)
  name.vb: Template(Of T)
  spec.csharp:
  - uid: InnerLibs.Triforce.Template`1
    name: Template
    nameWithType: Template
    fullName: InnerLibs.Triforce.Template
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: InnerLibs.Triforce.Template`1
    name: Template
    nameWithType: Template
    fullName: InnerLibs.Triforce.Template
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.Triforce.ApplyTemplate``1(``0,System.String)
  commentId: M:InnerLibs.Triforce.Triforce.ApplyTemplate``1(``0,System.String)
  isExternal: true
  name: ApplyTemplate<T>(T, String)
  nameWithType: Triforce.ApplyTemplate<T>(T, String)
  fullName: InnerLibs.Triforce.Triforce.ApplyTemplate<T>(T, System.String)
  nameWithType.vb: Triforce.ApplyTemplate(Of T)(T, String)
  fullName.vb: InnerLibs.Triforce.Triforce.ApplyTemplate(Of T)(T, System.String)
  name.vb: ApplyTemplate(Of T)(T, String)
  spec.csharp:
  - uid: InnerLibs.Triforce.Triforce.ApplyTemplate``1(``0,System.String)
    name: ApplyTemplate<T>
    nameWithType: Triforce.ApplyTemplate<T>
    fullName: InnerLibs.Triforce.Triforce.ApplyTemplate<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Triforce.Triforce.ApplyTemplate``1(``0,System.String)
    name: ApplyTemplate(Of T)
    nameWithType: Triforce.ApplyTemplate(Of T)
    fullName: InnerLibs.Triforce.Triforce.ApplyTemplate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '``0'
  name: T
  nameWithType: T
  fullName: T
- uid: InnerLibs.Triforce.Template`1
  commentId: T:InnerLibs.Triforce.Template`1
  name: Template<T>
  nameWithType: Template<T>
  fullName: InnerLibs.Triforce.Template<T>
  nameWithType.vb: Template(Of T)
  fullName.vb: InnerLibs.Triforce.Template(Of T)
  name.vb: Template(Of T)
  spec.csharp:
  - uid: InnerLibs.Triforce.Template`1
    name: Template
    nameWithType: Template
    fullName: InnerLibs.Triforce.Template
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: InnerLibs.Triforce.Template`1
    name: Template
    nameWithType: Template
    fullName: InnerLibs.Triforce.Template
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])
  commentId: M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])
  isExternal: true
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Linq.IQueryable
  commentId: T:System.Linq.IQueryable
  isExternal: true
- uid: System.Linq.IQueryable{{T}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Data.Linq.EntitySet`1
  commentId: T:System.Data.Linq.EntitySet`1
  isExternal: true
  name: EntitySet<TEntity>
  nameWithType: EntitySet<TEntity>
  fullName: System.Data.Linq.EntitySet<TEntity>
  nameWithType.vb: EntitySet(Of TEntity)
  fullName.vb: System.Data.Linq.EntitySet(Of TEntity)
  name.vb: EntitySet(Of TEntity)
  spec.csharp:
  - uid: System.Data.Linq.EntitySet`1
    name: EntitySet
    nameWithType: EntitySet
    fullName: System.Data.Linq.EntitySet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Data.Linq.EntitySet`1
    name: EntitySet
    nameWithType: EntitySet
    fullName: System.Data.Linq.EntitySet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Linq.EntitySet{{T}}
  commentId: T:System.Data.Linq.EntitySet{``0}
  parent: System.Data.Linq
  definition: System.Data.Linq.EntitySet`1
  name: EntitySet<T>
  nameWithType: EntitySet<T>
  fullName: System.Data.Linq.EntitySet<T>
  nameWithType.vb: EntitySet(Of T)
  fullName.vb: System.Data.Linq.EntitySet(Of T)
  name.vb: EntitySet(Of T)
  spec.csharp:
  - uid: System.Data.Linq.EntitySet`1
    name: EntitySet
    nameWithType: EntitySet
    fullName: System.Data.Linq.EntitySet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Data.Linq.EntitySet`1
    name: EntitySet
    nameWithType: EntitySet
    fullName: System.Data.Linq.EntitySet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Linq
  commentId: N:System.Data.Linq
  isExternal: true
  name: System.Data.Linq
  nameWithType: System.Data.Linq
  fullName: System.Data.Linq
- uid: System.Data.Linq.ISingleResult`1
  commentId: T:System.Data.Linq.ISingleResult`1
  isExternal: true
  name: ISingleResult<T>
  nameWithType: ISingleResult<T>
  fullName: System.Data.Linq.ISingleResult<T>
  nameWithType.vb: ISingleResult(Of T)
  fullName.vb: System.Data.Linq.ISingleResult(Of T)
  name.vb: ISingleResult(Of T)
  spec.csharp:
  - uid: System.Data.Linq.ISingleResult`1
    name: ISingleResult
    nameWithType: ISingleResult
    fullName: System.Data.Linq.ISingleResult
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Data.Linq.ISingleResult`1
    name: ISingleResult
    nameWithType: ISingleResult
    fullName: System.Data.Linq.ISingleResult
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Linq.ISingleResult{{T}}
  commentId: T:System.Data.Linq.ISingleResult{``0}
  parent: System.Data.Linq
  definition: System.Data.Linq.ISingleResult`1
  name: ISingleResult<T>
  nameWithType: ISingleResult<T>
  fullName: System.Data.Linq.ISingleResult<T>
  nameWithType.vb: ISingleResult(Of T)
  fullName.vb: System.Data.Linq.ISingleResult(Of T)
  name.vb: ISingleResult(Of T)
  spec.csharp:
  - uid: System.Data.Linq.ISingleResult`1
    name: ISingleResult
    nameWithType: ISingleResult
    fullName: System.Data.Linq.ISingleResult
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Data.Linq.ISingleResult`1
    name: ISingleResult
    nameWithType: ISingleResult
    fullName: System.Data.Linq.ISingleResult
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object[]
  commentId: T:System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Data.Linq.Table`1
  commentId: T:System.Data.Linq.Table`1
  isExternal: true
  name: Table<TEntity>
  nameWithType: Table<TEntity>
  fullName: System.Data.Linq.Table<TEntity>
  nameWithType.vb: Table(Of TEntity)
  fullName.vb: System.Data.Linq.Table(Of TEntity)
  name.vb: Table(Of TEntity)
  spec.csharp:
  - uid: System.Data.Linq.Table`1
    name: Table
    nameWithType: Table
    fullName: System.Data.Linq.Table
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Data.Linq.Table`1
    name: Table
    nameWithType: Table
    fullName: System.Data.Linq.Table
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Linq.Table{{T}}
  commentId: T:System.Data.Linq.Table{``0}
  parent: System.Data.Linq
  definition: System.Data.Linq.Table`1
  name: Table<T>
  nameWithType: Table<T>
  fullName: System.Data.Linq.Table<T>
  nameWithType.vb: Table(Of T)
  fullName.vb: System.Data.Linq.Table(Of T)
  name.vb: Table(Of T)
  spec.csharp:
  - uid: System.Data.Linq.Table`1
    name: Table
    nameWithType: Table
    fullName: System.Data.Linq.Table
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Data.Linq.Table`1
    name: Table
    nameWithType: Table
    fullName: System.Data.Linq.Table
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.Triforce.ApplyTemplate``1(System.Collections.Generic.IEnumerable{{T}},System.Int32,System.Int32,System.String)
  commentId: M:InnerLibs.Triforce.Triforce.ApplyTemplate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.String)
  parent: InnerLibs.Triforce.Triforce
  definition: InnerLibs.Triforce.Triforce.ApplyTemplate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.String)
  name: ApplyTemplate<T>(IEnumerable<T>, Int32, Int32, String)
  nameWithType: Triforce.ApplyTemplate<T>(IEnumerable<T>, Int32, Int32, String)
  fullName: InnerLibs.Triforce.Triforce.ApplyTemplate<T>(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Int32, System.String)
  nameWithType.vb: Triforce.ApplyTemplate(Of T)(IEnumerable(Of T), Int32, Int32, String)
  fullName.vb: InnerLibs.Triforce.Triforce.ApplyTemplate(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Int32, System.String)
  name.vb: ApplyTemplate(Of T)(IEnumerable(Of T), Int32, Int32, String)
  spec.csharp:
  - uid: InnerLibs.Triforce.Triforce.ApplyTemplate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.String)
    name: ApplyTemplate<T>
    nameWithType: Triforce.ApplyTemplate<T>
    fullName: InnerLibs.Triforce.Triforce.ApplyTemplate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Triforce.Triforce.ApplyTemplate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.String)
    name: ApplyTemplate(Of T)
    nameWithType: Triforce.ApplyTemplate(Of T)
    fullName: InnerLibs.Triforce.Triforce.ApplyTemplate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.Triforce.ApplyTemplate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.String)
  commentId: M:InnerLibs.Triforce.Triforce.ApplyTemplate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.String)
  isExternal: true
  name: ApplyTemplate<T>(IEnumerable<T>, Int32, Int32, String)
  nameWithType: Triforce.ApplyTemplate<T>(IEnumerable<T>, Int32, Int32, String)
  fullName: InnerLibs.Triforce.Triforce.ApplyTemplate<T>(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Int32, System.String)
  nameWithType.vb: Triforce.ApplyTemplate(Of T)(IEnumerable(Of T), Int32, Int32, String)
  fullName.vb: InnerLibs.Triforce.Triforce.ApplyTemplate(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Int32, System.String)
  name.vb: ApplyTemplate(Of T)(IEnumerable(Of T), Int32, Int32, String)
  spec.csharp:
  - uid: InnerLibs.Triforce.Triforce.ApplyTemplate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.String)
    name: ApplyTemplate<T>
    nameWithType: Triforce.ApplyTemplate<T>
    fullName: InnerLibs.Triforce.Triforce.ApplyTemplate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Triforce.Triforce.ApplyTemplate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.String)
    name: ApplyTemplate(Of T)
    nameWithType: Triforce.ApplyTemplate(Of T)
    fullName: InnerLibs.Triforce.Triforce.ApplyTemplate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Triforce.LINQ.Triforce`1.GetCommand*
  commentId: Overload:InnerLibs.Triforce.LINQ.Triforce`1.GetCommand
  name: GetCommand
  nameWithType: Triforce<DataContextType>.GetCommand
  fullName: InnerLibs.Triforce.LINQ.Triforce<DataContextType>.GetCommand
  nameWithType.vb: Triforce(Of DataContextType).GetCommand
  fullName.vb: InnerLibs.Triforce.LINQ.Triforce(Of DataContextType).GetCommand
