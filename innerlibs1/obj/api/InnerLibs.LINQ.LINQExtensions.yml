### YamlMime:ManagedReference
items:
- uid: InnerLibs.LINQ.LINQExtensions
  commentId: T:InnerLibs.LINQ.LINQExtensions
  id: LINQExtensions
  parent: InnerLibs.LINQ
  children:
  - InnerLibs.LINQ.LINQExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  - InnerLibs.LINQ.LINQExtensions.ConvertGeneric``4(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - InnerLibs.LINQ.LINQExtensions.CreateExpression``1(System.Boolean)
  - InnerLibs.LINQ.LINQExtensions.CreateExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - InnerLibs.LINQ.LINQExtensions.CreateExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - InnerLibs.LINQ.LINQExtensions.DistinctBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Boolean)
  - InnerLibs.LINQ.LINQExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  - InnerLibs.LINQ.LINQExtensions.GetByPrimaryKey``1(System.Data.Linq.DataContext,System.Object,System.Boolean,System.Boolean@)
  - InnerLibs.LINQ.LINQExtensions.GetByPrimaryKeys``1(System.Data.Linq.DataContext,System.Object[])
  - InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Linq.IQueryable{``0},System.Int32)
  - InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  - InnerLibs.LINQ.LINQExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - InnerLibs.LINQ.LINQExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String[],System.Boolean)
  - InnerLibs.LINQ.LINQExtensions.OrderByLike``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])
  - InnerLibs.LINQ.LINQExtensions.OrderByLike``1(System.Linq.IQueryable{``0},System.String[],System.String,System.Boolean)
  - InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Collections.Generic.IEnumerable{``0})
  - InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Linq.IQueryable{``0})
  - InnerLibs.LINQ.LINQExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  - InnerLibs.LINQ.LINQExtensions.Page``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)
  - InnerLibs.LINQ.LINQExtensions.Search``1(System.Data.Linq.DataContext,System.String,System.String[])
  - InnerLibs.LINQ.LINQExtensions.Search``1(System.Data.Linq.DataContext,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.String}}[])
  - InnerLibs.LINQ.LINQExtensions.Search``1(System.Data.Linq.DataContext,System.String[],System.String[])
  - InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  - InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Linq.IQueryable{``0},System.Func{``0,System.String},System.String)
  - InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)
  - InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Linq.IQueryable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)
  - InnerLibs.LINQ.LINQExtensions.TakeAndOrder``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})
  - InnerLibs.LINQ.LINQExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String[],System.Boolean)
  - InnerLibs.LINQ.LINQExtensions.ThenByLike``1(System.Linq.IOrderedEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])
  - InnerLibs.LINQ.LINQExtensions.ThenByLike``1(System.Linq.IOrderedQueryable{``0},System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Boolean)
  - InnerLibs.LINQ.LINQExtensions.ThenByLike``1(System.Linq.IOrderedQueryable{``0},System.String[],System.String,System.Boolean)
  - InnerLibs.LINQ.LINQExtensions.UpdateObjectFromDictionary``2(System.Data.Linq.DataContext,System.Collections.Generic.IDictionary{System.String,System.Object})
  - InnerLibs.LINQ.LINQExtensions.UpdateObjectFromRequest``2(System.Data.Linq.DataContext,System.Web.HttpRequest,System.String[])
  langs:
  - csharp
  - vb
  name: LINQExtensions
  nameWithType: LINQExtensions
  fullName: InnerLibs.LINQ.LINQExtensions
  type: Class
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: LINQExtensions
    path: LinqPagination.vb
    startLine: 10
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  syntax:
    content: public class LINQExtensions
    content.vb: Public Module LINQExtensions
  extensionMethods:
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.CreateDictionary
  - System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  - System.Object.InnerLibs.ClassTools.GetProperties
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  - System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  - System.Object.InnerLibs.ClassTools.IsArrayOf``1
  - System.Object.InnerLibs.ClassTools.IsDictionary
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.LINQ.LINQExtensions},System.Collections.Generic.IEqualityComparer{InnerLibs.LINQ.LINQExtensions})
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.LINQ.LINQExtensions}[],System.Collections.Generic.IEqualityComparer{InnerLibs.LINQ.LINQExtensions})
  - System.Object.InnerLibs.ClassTools.IsList
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.LINQ.LINQExtensions},System.Collections.Generic.IEqualityComparer{InnerLibs.LINQ.LINQExtensions})
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  - System.Object.InnerLibs.ClassTools.IsType``1
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.NullCoalesce(InnerLibs.LINQ.LINQExtensions[])
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.NullifyProperties
  - System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  - System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  - System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  - System.Object.InnerLibs.DataManipulation.GetDbType
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.Converter.DefineEmptyList
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.Converter.ChangeType``1
  - System.Object.InnerLibs.JsonViewer.CreateNode
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  - System.Object.InnerLibs.Text.SerializeJSON(System.String)
  - System.Object.InnerLibs.Verify.IsNumber
  - System.Object.InnerLibs.Verify.IsNotNumber
  - System.Object.InnerLibs.Verify.IfBlank``1({T})
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.Verify.NullIf(System.Func{InnerLibs.LINQ.LINQExtensions,System.Boolean})
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.Verify.NullIf(InnerLibs.LINQ.LINQExtensions)
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.LINQ.LINQExtensions,{TextType}},System.Func{InnerLibs.LINQ.LINQExtensions,{ValueType}})
  - System.Object.InnerLibs.WinForms.GetCastedValue
  - System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  - InnerLibs.LINQ.LINQExtensions.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.LINQ.LINQExtensions,System.Func{InnerLibs.LINQ.LINQExtensions,System.Object}[])
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Module
- uid: InnerLibs.LINQ.LINQExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:InnerLibs.LINQ.LINQExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: And<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  nameWithType: LINQExtensions.And<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  fullName: InnerLibs.LINQ.LINQExtensions.And<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: And
    path: LinqPagination.vb
    startLine: 23
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  syntax:
    content: >-
      [Extension]

      public static Expression<Func<T, bool>> And<T>(this Expression<Func<T, bool>> expr1, Expression<Func<T, bool>> expr2)
    parameters:
    - id: expr1
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: expr2
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    typeParameters:
    - id: T
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function And(Of T)(expr1 As Expression(Of Func(Of T, Boolean)), expr2 As Expression(Of Func(Of T, Boolean))) As Expression(Of Func(Of T, Boolean))
  overload: InnerLibs.LINQ.LINQExtensions.And*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.And(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.And(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: And(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
- uid: InnerLibs.LINQ.LINQExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:InnerLibs.LINQ.LINQExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: Or<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  nameWithType: LINQExtensions.Or<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  fullName: InnerLibs.LINQ.LINQExtensions.Or<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: Or
    path: LinqPagination.vb
    startLine: 36
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nConcatena uma expressão com outra usando o operador OR (||)\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Expression<Func<T, bool>> Or<T>(this Expression<Func<T, bool>> expr1, Expression<Func<T, bool>> expr2)
    parameters:
    - id: expr1
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: ''
    - id: expr2
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Or(Of T)(expr1 As Expression(Of Func(Of T, Boolean)), expr2 As Expression(Of Func(Of T, Boolean))) As Expression(Of Func(Of T, Boolean))
  overload: InnerLibs.LINQ.LINQExtensions.Or*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.Or(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.Or(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Or(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
- uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  id: ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: ApplyToControls<T>(T, HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls<T>(T, HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>(T, System.Web.UI.HtmlControls.HtmlControl[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: ApplyToControls
    path: LinqPagination.vb
    startLine: 47
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nAplica os valores encontrados nas propriedades de uma entidade em controles com mesmo ID\ndas colunas. Se os conroles não existirem no resultado eles serão ignorados.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static HtmlControl[] ApplyToControls<T>(this T Obj, params HtmlControl[] Controls)
          where T : class
    parameters:
    - id: Obj
      type: '{T}'
    - id: Controls
      type: System.Web.UI.HtmlControls.HtmlControl[]
      description: Controles que serão Manipulados
    typeParameters:
    - id: T
    return:
      type: System.Web.UI.HtmlControls.HtmlControl[]
      description: Um array contendo os inputs manipulados
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ApplyToControls(Of T As Class)(Obj As T, ParamArray Controls As HtmlControl()) As HtmlControl()
  overload: InnerLibs.LINQ.LINQExtensions.ApplyToControls*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.ApplyToControls(Of T)(T, HtmlControl())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)(T, System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(Of T)(T, HtmlControl())
- uid: InnerLibs.LINQ.LINQExtensions.ConvertGeneric``4(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:InnerLibs.LINQ.LINQExtensions.ConvertGeneric``4(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: ConvertGeneric``4(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: ConvertGeneric<TParm, TReturn, TTargetParm, TTargetReturn>(Expression<Func<TParm, TReturn>>)
  nameWithType: LINQExtensions.ConvertGeneric<TParm, TReturn, TTargetParm, TTargetReturn>(Expression<Func<TParm, TReturn>>)
  fullName: InnerLibs.LINQ.LINQExtensions.ConvertGeneric<TParm, TReturn, TTargetParm, TTargetReturn>(System.Linq.Expressions.Expression<System.Func<TParm, TReturn>>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: ConvertGeneric
    path: LinqPagination.vb
    startLine: 73
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nRetorna uma express~zo genérica a partir de uma expressão tipada\n"
  example: []
  syntax:
    content: public static Expression<Func<TTargetParm, TTargetReturn>> ConvertGeneric<TParm, TReturn, TTargetParm, TTargetReturn>(Expression<Func<TParm, TReturn>> input)
    parameters:
    - id: input
      type: System.Linq.Expressions.Expression{System.Func{{TParm},{TReturn}}}
      description: ''
    typeParameters:
    - id: TParm
      description: ''
    - id: TReturn
      description: ''
    - id: TTargetParm
      description: ''
    - id: TTargetReturn
      description: ''
    return:
      type: System.Linq.Expressions.Expression{System.Func{{TTargetParm},{TTargetReturn}}}
      description: ''
    content.vb: Public Shared Function ConvertGeneric(Of TParm, TReturn, TTargetParm, TTargetReturn)(input As Expression(Of Func(Of TParm, TReturn))) As Expression(Of Func(Of TTargetParm, TTargetReturn))
  overload: InnerLibs.LINQ.LINQExtensions.ConvertGeneric*
  nameWithType.vb: LINQExtensions.ConvertGeneric(Of TParm, TReturn, TTargetParm, TTargetReturn)(Expression(Of Func(Of TParm, TReturn)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ConvertGeneric(Of TParm, TReturn, TTargetParm, TTargetReturn)(System.Linq.Expressions.Expression(Of System.Func(Of TParm, TReturn)))
  name.vb: ConvertGeneric(Of TParm, TReturn, TTargetParm, TTargetReturn)(Expression(Of Func(Of TParm, TReturn)))
- uid: InnerLibs.LINQ.LINQExtensions.CreateExpression``1(System.Boolean)
  commentId: M:InnerLibs.LINQ.LINQExtensions.CreateExpression``1(System.Boolean)
  id: CreateExpression``1(System.Boolean)
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: CreateExpression<T>(Boolean)
  nameWithType: LINQExtensions.CreateExpression<T>(Boolean)
  fullName: InnerLibs.LINQ.LINQExtensions.CreateExpression<T>(System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: CreateExpression
    path: LinqPagination.vb
    startLine: 88
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nCria uma <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> condicional a partir de um valor <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static Expression<Func<T, bool>> CreateExpression<T>(bool DefaultReturnValue = true)
    parameters:
    - id: DefaultReturnValue
      type: System.Boolean
      description: Valor padrão
    typeParameters:
    - id: T
      description: Tipo do objeto
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: ''
    content.vb: Public Shared Function CreateExpression(Of T)(DefaultReturnValue As Boolean = True) As Expression(Of Func(Of T, Boolean))
  overload: InnerLibs.LINQ.LINQExtensions.CreateExpression*
  nameWithType.vb: LINQExtensions.CreateExpression(Of T)(Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.CreateExpression(Of T)(System.Boolean)
  name.vb: CreateExpression(Of T)(Boolean)
- uid: InnerLibs.LINQ.LINQExtensions.CreateExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:InnerLibs.LINQ.LINQExtensions.CreateExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: CreateExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: CreateExpression<T>(Expression<Func<T, Boolean>>)
  nameWithType: LINQExtensions.CreateExpression<T>(Expression<Func<T, Boolean>>)
  fullName: InnerLibs.LINQ.LINQExtensions.CreateExpression<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: CreateExpression
    path: LinqPagination.vb
    startLine: 98
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nCria uma <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> condicional a partir de uma outra expressão\n"
  example: []
  syntax:
    content: public static Expression<Func<T, bool>> CreateExpression<T>(Expression<Func<T, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: Valor padrão
    typeParameters:
    - id: T
      description: Tipo do objeto
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: ''
    content.vb: Public Shared Function CreateExpression(Of T)(predicate As Expression(Of Func(Of T, Boolean))) As Expression(Of Func(Of T, Boolean))
  overload: InnerLibs.LINQ.LINQExtensions.CreateExpression*
  nameWithType.vb: LINQExtensions.CreateExpression(Of T)(Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.CreateExpression(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: CreateExpression(Of T)(Expression(Of Func(Of T, Boolean)))
- uid: InnerLibs.LINQ.LINQExtensions.CreateExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:InnerLibs.LINQ.LINQExtensions.CreateExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: CreateExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: CreateExpression<T, T2>(Expression<Func<T, T2>>)
  nameWithType: LINQExtensions.CreateExpression<T, T2>(Expression<Func<T, T2>>)
  fullName: InnerLibs.LINQ.LINQExtensions.CreateExpression<T, T2>(System.Linq.Expressions.Expression<System.Func<T, T2>>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: CreateExpression
    path: LinqPagination.vb
    startLine: 109
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nCria uma Expression a partir de uma outra Expression\n"
  example: []
  syntax:
    content: public static Expression<Func<T, T2>> CreateExpression<T, T2>(Expression<Func<T, T2>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},{T2}}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    - id: T2
      description: ''
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},{T2}}}
      description: ''
    content.vb: Public Shared Function CreateExpression(Of T, T2)(predicate As Expression(Of Func(Of T, T2))) As Expression(Of Func(Of T, T2))
  overload: InnerLibs.LINQ.LINQExtensions.CreateExpression*
  nameWithType.vb: LINQExtensions.CreateExpression(Of T, T2)(Expression(Of Func(Of T, T2)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.CreateExpression(Of T, T2)(System.Linq.Expressions.Expression(Of System.Func(Of T, T2)))
  name.vb: CreateExpression(Of T, T2)(Expression(Of Func(Of T, T2)))
- uid: InnerLibs.LINQ.LINQExtensions.DistinctBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Boolean)
  commentId: M:InnerLibs.LINQ.LINQExtensions.DistinctBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Boolean)
  id: DistinctBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: DistinctBy<T, TKey, TOrder>(IEnumerable<T>, Func<T, TKey>, Func<T, TOrder>, Boolean)
  nameWithType: LINQExtensions.DistinctBy<T, TKey, TOrder>(IEnumerable<T>, Func<T, TKey>, Func<T, TOrder>, Boolean)
  fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy<T, TKey, TOrder>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>, System.Func<T, TOrder>, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: DistinctBy
    path: LinqPagination.vb
    startLine: 124
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nDistingui os items de uma lista a partir de uma propriedade da classe\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IEnumerable<T> DistinctBy<T, TKey, TOrder>(this IEnumerable<T> Items, Func<T, TKey> Property, Func<T, TOrder> OrderBy, bool Descending = false)
    parameters:
    - id: Items
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: Property
      type: System.Func{{T},{TKey}}
    - id: OrderBy
      type: System.Func{{T},{TOrder}}
      description: Criterio que indica qual o objeto que deverá ser preservado na lista se encontrado mais de um
    - id: Descending
      type: System.Boolean
    typeParameters:
    - id: T
      description: Tipo da classe
    - id: TKey
      description: Tipo da propriedade
    - id: TOrder
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function DistinctBy(Of T, TKey, TOrder)(Items As IEnumerable(Of T), Property As Func(Of T, TKey), OrderBy As Func(Of T, TOrder), Descending As Boolean = False) As IEnumerable(Of T)
  overload: InnerLibs.LINQ.LINQExtensions.DistinctBy*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.DistinctBy(Of T, TKey, TOrder)(IEnumerable(Of T), Func(Of T, TKey), Func(Of T, TOrder), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.DistinctBy(Of T, TKey, TOrder)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey), System.Func(Of T, TOrder), System.Boolean)
  name.vb: DistinctBy(Of T, TKey, TOrder)(IEnumerable(Of T), Func(Of T, TKey), Func(Of T, TOrder), Boolean)
- uid: InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  nameWithType: LINQExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: DistinctBy
    path: LinqPagination.vb
    startLine: 136
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nDistingui os items de uma lista a partir de uma propriedade da classe\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IEnumerable<T> DistinctBy<T, TKey>(this IEnumerable<T> Items, Func<T, TKey> Property)
    parameters:
    - id: Items
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: Property
      type: System.Func{{T},{TKey}}
    typeParameters:
    - id: T
      description: Tipo da classe
    - id: TKey
      description: Tipo da propriedade
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function DistinctBy(Of T, TKey)(Items As IEnumerable(Of T), Property As Func(Of T, TKey)) As IEnumerable(Of T)
  overload: InnerLibs.LINQ.LINQExtensions.DistinctBy*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.DistinctBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.DistinctBy(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey))
  name.vb: DistinctBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
- uid: InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: DistinctBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: DistinctBy<T, TKey>(IQueryable<T>, Expression<Func<T, TKey>>)
  nameWithType: LINQExtensions.DistinctBy<T, TKey>(IQueryable<T>, Expression<Func<T, TKey>>)
  fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy<T, TKey>(System.Linq.IQueryable<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: DistinctBy
    path: LinqPagination.vb
    startLine: 148
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nDistingui os items de uma lista a partir de uma propriedade da classe\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IQueryable<T> DistinctBy<T, TKey>(this IQueryable<T> Items, Expression<Func<T, TKey>> Property)
    parameters:
    - id: Items
      type: System.Linq.IQueryable{{T}}
    - id: Property
      type: System.Linq.Expressions.Expression{System.Func{{T},{TKey}}}
    typeParameters:
    - id: T
      description: Tipo da classe
    - id: TKey
      description: Tipo da propriedade
    return:
      type: System.Linq.IQueryable{{T}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function DistinctBy(Of T, TKey)(Items As IQueryable(Of T), Property As Expression(Of Func(Of T, TKey))) As IQueryable(Of T)
  overload: InnerLibs.LINQ.LINQExtensions.DistinctBy*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.DistinctBy(Of T, TKey)(IQueryable(Of T), Expression(Of Func(Of T, TKey)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.DistinctBy(Of T, TKey)(System.Linq.IQueryable(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)))
  name.vb: DistinctBy(Of T, TKey)(IQueryable(Of T), Expression(Of Func(Of T, TKey)))
- uid: InnerLibs.LINQ.LINQExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  commentId: M:InnerLibs.LINQ.LINQExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: ForEach<T>(IEnumerable<T>, Action<T>)
  nameWithType: LINQExtensions.ForEach<T>(IEnumerable<T>, Action<T>)
  fullName: InnerLibs.LINQ.LINQExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: ForEach
    path: LinqPagination.vb
    startLine: 158
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nRealiza uma acão para cada item de uma lista.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IEnumerable<T> ForEach<T>(this IEnumerable<T> Items, Action<T> Action)
    parameters:
    - id: Items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    - id: Action
      type: System.Action{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ForEach(Of T)(Items As IEnumerable(Of T), Action As Action(Of T)) As IEnumerable(Of T)
  overload: InnerLibs.LINQ.LINQExtensions.ForEach*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.ForEach(Of T)(IEnumerable(Of T), Action(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ForEach(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T))
  name.vb: ForEach(Of T)(IEnumerable(Of T), Action(Of T))
- uid: InnerLibs.LINQ.LINQExtensions.GetByPrimaryKey``1(System.Data.Linq.DataContext,System.Object,System.Boolean,System.Boolean@)
  commentId: M:InnerLibs.LINQ.LINQExtensions.GetByPrimaryKey``1(System.Data.Linq.DataContext,System.Object,System.Boolean,System.Boolean@)
  id: GetByPrimaryKey``1(System.Data.Linq.DataContext,System.Object,System.Boolean,System.Boolean@)
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: GetByPrimaryKey<T>(DataContext, Object, Boolean, ref Boolean)
  nameWithType: LINQExtensions.GetByPrimaryKey<T>(DataContext, Object, Boolean, ref Boolean)
  fullName: InnerLibs.LINQ.LINQExtensions.GetByPrimaryKey<T>(System.Data.Linq.DataContext, System.Object, System.Boolean, ref System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: GetByPrimaryKey
    path: LinqPagination.vb
    startLine: 175
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nRetorna um objeto de uma tabela especifica de acordo com uma chave primária.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static T GetByPrimaryKey<T>(this DataContext Context, object ID, bool CreateIfNotExists = false, ref bool IsNew = false)
          where T : class
    parameters:
    - id: Context
      type: System.Data.Linq.DataContext
    - id: ID
      type: System.Object
      description: Valor da chave primária
    - id: CreateIfNotExists
      type: System.Boolean
      description: "\nSe true, cria o objeto e coloca o status de INSERT pendente para este\n"
    - id: IsNew
      type: System.Boolean
    typeParameters:
    - id: T
      description: Tipo do objeto
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetByPrimaryKey(Of T As Class)(Context As DataContext, ID As Object, CreateIfNotExists As Boolean = False, ByRef IsNew As Boolean = False) As T
  overload: InnerLibs.LINQ.LINQExtensions.GetByPrimaryKey*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.GetByPrimaryKey(Of T)(DataContext, Object, Boolean, ByRef Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.GetByPrimaryKey(Of T)(System.Data.Linq.DataContext, System.Object, System.Boolean, ByRef System.Boolean)
  name.vb: GetByPrimaryKey(Of T)(DataContext, Object, Boolean, ByRef Boolean)
- uid: InnerLibs.LINQ.LINQExtensions.GetByPrimaryKeys``1(System.Data.Linq.DataContext,System.Object[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.GetByPrimaryKeys``1(System.Data.Linq.DataContext,System.Object[])
  id: GetByPrimaryKeys``1(System.Data.Linq.DataContext,System.Object[])
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: GetByPrimaryKeys<T>(DataContext, Object[])
  nameWithType: LINQExtensions.GetByPrimaryKeys<T>(DataContext, Object[])
  fullName: InnerLibs.LINQ.LINQExtensions.GetByPrimaryKeys<T>(System.Data.Linq.DataContext, System.Object[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: GetByPrimaryKeys
    path: LinqPagination.vb
    startLine: 199
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nRetorna um objeto de uma tabela especifica de acordo com sua chave primaria. Pode\nopcionalmente criar o objeto se o mesmo não existir\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IEnumerable<T> GetByPrimaryKeys<T>(this DataContext Context, params object[] IDs)
          where T : class
    parameters:
    - id: Context
      type: System.Data.Linq.DataContext
    - id: IDs
      type: System.Object[]
      description: Valor da chave primárias
    typeParameters:
    - id: T
      description: Tipo do objeto
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GetByPrimaryKeys(Of T As Class)(Context As DataContext, ParamArray IDs As Object()) As IEnumerable(Of T)
  overload: InnerLibs.LINQ.LINQExtensions.GetByPrimaryKeys*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.GetByPrimaryKeys(Of T)(DataContext, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.GetByPrimaryKeys(Of T)(System.Data.Linq.DataContext, System.Object())
  name.vb: GetByPrimaryKeys(Of T)(DataContext, Object())
- uid: InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Linq.IQueryable{``0},System.Int32)
  commentId: M:InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Linq.IQueryable{``0},System.Int32)
  id: GroupByPage``1(System.Linq.IQueryable{``0},System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: GroupByPage<Tsource>(IQueryable<Tsource>, Int32)
  nameWithType: LINQExtensions.GroupByPage<Tsource>(IQueryable<Tsource>, Int32)
  fullName: InnerLibs.LINQ.LINQExtensions.GroupByPage<Tsource>(System.Linq.IQueryable<Tsource>, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: GroupByPage
    path: LinqPagination.vb
    startLine: 224
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nCriar um <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> agrupando os itens em páginas de um tamanho especifico\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Dictionary<long, List<Tsource>> GroupByPage<Tsource>(this IQueryable<Tsource> source, int PageSize)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{Tsource}}
      description: ''
    - id: PageSize
      type: System.Int32
      description: ''
    typeParameters:
    - id: Tsource
      description: ''
    return:
      type: System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{{Tsource}}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GroupByPage(Of Tsource)(source As IQueryable(Of Tsource), PageSize As Integer) As Dictionary(Of Long, List(Of Tsource))
  overload: InnerLibs.LINQ.LINQExtensions.GroupByPage*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.GroupByPage(Of Tsource)(IQueryable(Of Tsource), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.GroupByPage(Of Tsource)(System.Linq.IQueryable(Of Tsource), System.Int32)
  name.vb: GroupByPage(Of Tsource)(IQueryable(Of Tsource), Int32)
- uid: InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: GroupByPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: GroupByPage<Tsource>(IEnumerable<Tsource>, Int32)
  nameWithType: LINQExtensions.GroupByPage<Tsource>(IEnumerable<Tsource>, Int32)
  fullName: InnerLibs.LINQ.LINQExtensions.GroupByPage<Tsource>(System.Collections.Generic.IEnumerable<Tsource>, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: GroupByPage
    path: LinqPagination.vb
    startLine: 235
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nCriar um <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> agrupando os itens em páginas de um tamanho especifico\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static Dictionary<long, List<Tsource>> GroupByPage<Tsource>(this IEnumerable<Tsource> source, int PageSize)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{Tsource}}
      description: ''
    - id: PageSize
      type: System.Int32
      description: ''
    typeParameters:
    - id: Tsource
      description: ''
    return:
      type: System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{{Tsource}}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function GroupByPage(Of Tsource)(source As IEnumerable(Of Tsource), PageSize As Integer) As Dictionary(Of Long, List(Of Tsource))
  overload: InnerLibs.LINQ.LINQExtensions.GroupByPage*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.GroupByPage(Of Tsource)(IEnumerable(Of Tsource), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.GroupByPage(Of Tsource)(System.Collections.Generic.IEnumerable(Of Tsource), System.Int32)
  name.vb: GroupByPage(Of Tsource)(IEnumerable(Of Tsource), Int32)
- uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  id: HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>(T, T, System.Func<T, System.Object>[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: HasSamePropertyValues
    path: LinqPagination.vb
    startLine: 249
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nVerifica se uma instancia de uma classe possui propriedades especificas com valores igual\nas de outra instancia da mesma classe\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object HasSamePropertyValues<T>(this T Obj1, T Obj2, params Func<T, object>[] Properties)
          where T : class
    parameters:
    - id: Obj1
      type: '{T}'
      description: Instancia 1
    - id: Obj2
      type: '{T}'
      description: Instancia 2
    - id: Properties
      type: System.Func{{T},System.Object}[]
      description: Propriedades
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function HasSamePropertyValues(Of T As Class)(Obj1 As T, Obj2 As T, ParamArray Properties As Func(Of T, Object)()) As Object
  overload: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)(T, T, System.Func(Of T, System.Object)())
  name.vb: HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
- uid: InnerLibs.LINQ.LINQExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String[],System.Boolean)
  commentId: M:InnerLibs.LINQ.LINQExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String[],System.Boolean)
  id: OrderBy``1(System.Linq.IQueryable{``0},System.String[],System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: OrderBy<T>(IQueryable<T>, String[], Boolean)
  nameWithType: LINQExtensions.OrderBy<T>(IQueryable<T>, String[], Boolean)
  fullName: InnerLibs.LINQ.LINQExtensions.OrderBy<T>(System.Linq.IQueryable<T>, System.String[], System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: OrderBy
    path: LinqPagination.vb
    startLine: 262
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nOrdena um <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> a partir do nome de uma ou mais propriedades\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object OrderBy<T>(this IQueryable<T> source, string[] SortProperty, bool Ascending = true)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{T}}
      description: ''
    - id: SortProperty
      type: System.String[]
    - id: Ascending
      type: System.Boolean
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function OrderBy(Of T)(source As IQueryable(Of T), SortProperty As String(), Ascending As Boolean = True) As Object
  overload: InnerLibs.LINQ.LINQExtensions.OrderBy*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.OrderBy(Of T)(IQueryable(Of T), String(), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.OrderBy(Of T)(System.Linq.IQueryable(Of T), System.String(), System.Boolean)
  name.vb: OrderBy(Of T)(IQueryable(Of T), String(), Boolean)
- uid: InnerLibs.LINQ.LINQExtensions.OrderByLike``1(System.Linq.IQueryable{``0},System.String[],System.String,System.Boolean)
  commentId: M:InnerLibs.LINQ.LINQExtensions.OrderByLike``1(System.Linq.IQueryable{``0},System.String[],System.String,System.Boolean)
  id: OrderByLike``1(System.Linq.IQueryable{``0},System.String[],System.String,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: OrderByLike<T>(IQueryable<T>, String[], String, Boolean)
  nameWithType: LINQExtensions.OrderByLike<T>(IQueryable<T>, String[], String, Boolean)
  fullName: InnerLibs.LINQ.LINQExtensions.OrderByLike<T>(System.Linq.IQueryable<T>, System.String[], System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: OrderByLike
    path: LinqPagination.vb
    startLine: 276
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nOrdena um <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> a partir da aproximaçao de uma ou mais\n<xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> com o valor de um determinado campo\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static object OrderByLike<T>(this IQueryable<T> items, string[] Searches, string SortProperty, bool Ascending = true)
    parameters:
    - id: items
      type: System.Linq.IQueryable{{T}}
      description: ''
    - id: Searches
      type: System.String[]
      description: ''
    - id: SortProperty
      type: System.String
      description: ''
    - id: Ascending
      type: System.Boolean
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function OrderByLike(Of T)(items As IQueryable(Of T), Searches As String(), SortProperty As String, Ascending As Boolean = True) As Object
  overload: InnerLibs.LINQ.LINQExtensions.OrderByLike*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.OrderByLike(Of T)(IQueryable(Of T), String(), String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.OrderByLike(Of T)(System.Linq.IQueryable(Of T), System.String(), System.String, System.Boolean)
  name.vb: OrderByLike(Of T)(IQueryable(Of T), String(), String, Boolean)
- uid: InnerLibs.LINQ.LINQExtensions.OrderByLike``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.OrderByLike``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])
  id: OrderByLike``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: OrderByLike<T>(IEnumerable<T>, Func<T, String>, Boolean, String[])
  nameWithType: LINQExtensions.OrderByLike<T>(IEnumerable<T>, Func<T, String>, Boolean, String[])
  fullName: InnerLibs.LINQ.LINQExtensions.OrderByLike<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.String>, System.Boolean, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: OrderByLike
    path: LinqPagination.vb
    startLine: 289
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nOrderna uma lista a partir da aproximaçao de um deerminado campo com uma string\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IOrderedEnumerable<T> OrderByLike<T>(this IEnumerable<T> items, Func<T, string> PropertySelector, bool Ascending, params string[] Searches)
          where T : class
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    - id: PropertySelector
      type: System.Func{{T},System.String}
      description: ''
    - id: Ascending
      type: System.Boolean
      description: ''
    - id: Searches
      type: System.String[]
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Linq.IOrderedEnumerable{{T}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function OrderByLike(Of T As Class)(items As IEnumerable(Of T), PropertySelector As Func(Of T, String), Ascending As Boolean, ParamArray Searches As String()) As IOrderedEnumerable(Of T)
  overload: InnerLibs.LINQ.LINQExtensions.OrderByLike*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.OrderByLike(Of T)(IEnumerable(Of T), Func(Of T, String), Boolean, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.OrderByLike(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.String), System.Boolean, System.String())
  name.vb: OrderByLike(Of T)(IEnumerable(Of T), Func(Of T, String), Boolean, String())
- uid: InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Collections.Generic.IEnumerable{``0})
  id: OrderByRandom``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: OrderByRandom<T>(IEnumerable<T>)
  nameWithType: LINQExtensions.OrderByRandom<T>(IEnumerable<T>)
  fullName: InnerLibs.LINQ.LINQExtensions.OrderByRandom<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: OrderByRandom
    path: LinqPagination.vb
    startLine: 299
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nRandomiza a ordem de um <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IOrderedEnumerable<T> OrderByRandom<T>(this IEnumerable<T> items)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Linq.IOrderedEnumerable{{T}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function OrderByRandom(Of T)(items As IEnumerable(Of T)) As IOrderedEnumerable(Of T)
  overload: InnerLibs.LINQ.LINQExtensions.OrderByRandom*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.OrderByRandom(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.OrderByRandom(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: OrderByRandom(Of T)(IEnumerable(Of T))
- uid: InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Linq.IQueryable{``0})
  commentId: M:InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Linq.IQueryable{``0})
  id: OrderByRandom``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: OrderByRandom<T>(IQueryable<T>)
  nameWithType: LINQExtensions.OrderByRandom<T>(IQueryable<T>)
  fullName: InnerLibs.LINQ.LINQExtensions.OrderByRandom<T>(System.Linq.IQueryable<T>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: OrderByRandom
    path: LinqPagination.vb
    startLine: 309
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nRandomiza a ordem de um <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IOrderedQueryable<T> OrderByRandom<T>(this IQueryable<T> items)
    parameters:
    - id: items
      type: System.Linq.IQueryable{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Linq.IOrderedQueryable{{T}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function OrderByRandom(Of T)(items As IQueryable(Of T)) As IOrderedQueryable(Of T)
  overload: InnerLibs.LINQ.LINQExtensions.OrderByRandom*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.OrderByRandom(Of T)(IQueryable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.OrderByRandom(Of T)(System.Linq.IQueryable(Of T))
  name.vb: OrderByRandom(Of T)(IQueryable(Of T))
- uid: InnerLibs.LINQ.LINQExtensions.Page``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)
  commentId: M:InnerLibs.LINQ.LINQExtensions.Page``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)
  id: Page``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: Page<TSource>(IQueryable<TSource>, Int32, Int32)
  nameWithType: LINQExtensions.Page<TSource>(IQueryable<TSource>, Int32, Int32)
  fullName: InnerLibs.LINQ.LINQExtensions.Page<TSource>(System.Linq.IQueryable<TSource>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: Page
    path: LinqPagination.vb
    startLine: 321
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nReduz um <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> em uma página especifica\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IQueryable<TSource> Page<TSource>(this IQueryable<TSource> Source, int PageNumber, int PageSize)
    parameters:
    - id: Source
      type: System.Linq.IQueryable{{TSource}}
      description: ''
    - id: PageNumber
      type: System.Int32
      description: ''
    - id: PageSize
      type: System.Int32
      description: ''
    typeParameters:
    - id: TSource
      description: ''
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Page(Of TSource)(Source As IQueryable(Of TSource), PageNumber As Integer, PageSize As Integer) As IQueryable(Of TSource)
  overload: InnerLibs.LINQ.LINQExtensions.Page*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.Page(Of TSource)(IQueryable(Of TSource), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.Page(Of TSource)(System.Linq.IQueryable(Of TSource), System.Int32, System.Int32)
  name.vb: Page(Of TSource)(IQueryable(Of TSource), Int32, Int32)
- uid: InnerLibs.LINQ.LINQExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  commentId: M:InnerLibs.LINQ.LINQExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  id: Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: Page<TSource>(IEnumerable<TSource>, Int32, Int32)
  nameWithType: LINQExtensions.Page<TSource>(IEnumerable<TSource>, Int32, Int32)
  fullName: InnerLibs.LINQ.LINQExtensions.Page<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: Page
    path: LinqPagination.vb
    startLine: 333
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nReduz um <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> em uma página especifica\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IEnumerable<TSource> Page<TSource>(this IEnumerable<TSource> Source, int PageNumber, int PageSize)
    parameters:
    - id: Source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: ''
    - id: PageNumber
      type: System.Int32
      description: ''
    - id: PageSize
      type: System.Int32
      description: ''
    typeParameters:
    - id: TSource
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Page(Of TSource)(Source As IEnumerable(Of TSource), PageNumber As Integer, PageSize As Integer) As IEnumerable(Of TSource)
  overload: InnerLibs.LINQ.LINQExtensions.Page*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.Page(Of TSource)(IEnumerable(Of TSource), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.Page(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32, System.Int32)
  name.vb: Page(Of TSource)(IEnumerable(Of TSource), Int32, Int32)
- uid: InnerLibs.LINQ.LINQExtensions.Search``1(System.Data.Linq.DataContext,System.String,System.String[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.Search``1(System.Data.Linq.DataContext,System.String,System.String[])
  id: Search``1(System.Data.Linq.DataContext,System.String,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: Search<ClassType>(DataContext, String, String[])
  nameWithType: LINQExtensions.Search<ClassType>(DataContext, String, String[])
  fullName: InnerLibs.LINQ.LINQExtensions.Search<ClassType>(System.Data.Linq.DataContext, System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: Search
    path: LinqPagination.vb
    startLine: 346
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nRetorna um <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> procurando em varios campos diferentes de uma entidade\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IOrderedQueryable<ClassType> Search<ClassType>(this DataContext Context, string SearchTerm, params string[] Properties)
          where ClassType : class
    parameters:
    - id: Context
      type: System.Data.Linq.DataContext
      description: ''
    - id: SearchTerm
      type: System.String
      description: ''
    - id: Properties
      type: System.String[]
      description: ''
    typeParameters:
    - id: ClassType
      description: ''
    return:
      type: System.Linq.IOrderedQueryable{{ClassType}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Search(Of ClassType As Class)(Context As DataContext, SearchTerm As String, ParamArray Properties As String()) As IOrderedQueryable(Of ClassType)
  overload: InnerLibs.LINQ.LINQExtensions.Search*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.Search(Of ClassType)(DataContext, String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.Search(Of ClassType)(System.Data.Linq.DataContext, System.String, System.String())
  name.vb: Search(Of ClassType)(DataContext, String, String())
- uid: InnerLibs.LINQ.LINQExtensions.Search``1(System.Data.Linq.DataContext,System.String[],System.String[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.Search``1(System.Data.Linq.DataContext,System.String[],System.String[])
  id: Search``1(System.Data.Linq.DataContext,System.String[],System.String[])
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: Search<ClassType>(DataContext, String[], String[])
  nameWithType: LINQExtensions.Search<ClassType>(DataContext, String[], String[])
  fullName: InnerLibs.LINQ.LINQExtensions.Search<ClassType>(System.Data.Linq.DataContext, System.String[], System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: Search
    path: LinqPagination.vb
    startLine: 358
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nRetorna um <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> procurando em varios campos diferentes de uma entidade\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IOrderedQueryable<ClassType> Search<ClassType>(this DataContext Context, string[] SearchTerms, params string[] Properties)
          where ClassType : class
    parameters:
    - id: Context
      type: System.Data.Linq.DataContext
      description: ''
    - id: SearchTerms
      type: System.String[]
      description: ''
    - id: Properties
      type: System.String[]
      description: ''
    typeParameters:
    - id: ClassType
      description: ''
    return:
      type: System.Linq.IOrderedQueryable{{ClassType}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Search(Of ClassType As Class)(Context As DataContext, SearchTerms As String(), ParamArray Properties As String()) As IOrderedQueryable(Of ClassType)
  overload: InnerLibs.LINQ.LINQExtensions.Search*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.Search(Of ClassType)(DataContext, String(), String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.Search(Of ClassType)(System.Data.Linq.DataContext, System.String(), System.String())
  name.vb: Search(Of ClassType)(DataContext, String(), String())
- uid: InnerLibs.LINQ.LINQExtensions.Search``1(System.Data.Linq.DataContext,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.String}}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.Search``1(System.Data.Linq.DataContext,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.String}}[])
  id: Search``1(System.Data.Linq.DataContext,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.String}}[])
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: Search<ClassType>(DataContext, String[], Expression<Func<ClassType, String>>[])
  nameWithType: LINQExtensions.Search<ClassType>(DataContext, String[], Expression<Func<ClassType, String>>[])
  fullName: InnerLibs.LINQ.LINQExtensions.Search<ClassType>(System.Data.Linq.DataContext, System.String[], System.Linq.Expressions.Expression<System.Func<ClassType, System.String>>[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: Search
    path: LinqPagination.vb
    startLine: 403
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nRetorna um <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> procurando em varios campos diferentes de uma entidade\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IOrderedQueryable<ClassType> Search<ClassType>(this DataContext Context, string[] SearchTerms, params Expression<Func<ClassType, string>>[] Properties)
          where ClassType : class
    parameters:
    - id: Context
      type: System.Data.Linq.DataContext
      description: ''
    - id: SearchTerms
      type: System.String[]
      description: ''
    - id: Properties
      type: System.Linq.Expressions.Expression{System.Func{{ClassType},System.String}}[]
      description: ''
    typeParameters:
    - id: ClassType
      description: ''
    return:
      type: System.Linq.IOrderedQueryable{{ClassType}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function Search(Of ClassType As Class)(Context As DataContext, SearchTerms As String(), ParamArray Properties As Expression(Of Func(Of ClassType, String))()) As IOrderedQueryable(Of ClassType)
  overload: InnerLibs.LINQ.LINQExtensions.Search*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.Search(Of ClassType)(DataContext, String(), Expression(Of Func(Of ClassType, String))())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.Search(Of ClassType)(System.Data.Linq.DataContext, System.String(), System.Linq.Expressions.Expression(Of System.Func(Of ClassType, System.String))())
  name.vb: Search(Of ClassType)(DataContext, String(), Expression(Of Func(Of ClassType, String))())
- uid: InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  commentId: M:InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  id: SelectJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: SelectJoin<TSource>(IEnumerable<TSource>, Func<TSource, String>, String)
  nameWithType: LINQExtensions.SelectJoin<TSource>(IEnumerable<TSource>, Func<TSource, String>, String)
  fullName: InnerLibs.LINQ.LINQExtensions.SelectJoin<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.String>, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: SelectJoin
    path: LinqPagination.vb
    startLine: 438
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nSeleciona e une em uma unica string varios elementos\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string SelectJoin<TSource>(this IEnumerable<TSource> Source, Func<TSource, string> Selector = null, string Separator = ";")
    parameters:
    - id: Source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: ''
    - id: Selector
      type: System.Func{{TSource},System.String}
      description: ''
    - id: Separator
      type: System.String
      description: ''
    typeParameters:
    - id: TSource
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function SelectJoin(Of TSource)(Source As IEnumerable(Of TSource), Selector As Func(Of TSource, String) = Nothing, Separator As String = ";") As String
  overload: InnerLibs.LINQ.LINQExtensions.SelectJoin*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.SelectJoin(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, String), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.SelectJoin(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.String), System.String)
  name.vb: SelectJoin(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, String), String)
- uid: InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Linq.IQueryable{``0},System.Func{``0,System.String},System.String)
  commentId: M:InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Linq.IQueryable{``0},System.Func{``0,System.String},System.String)
  id: SelectJoin``1(System.Linq.IQueryable{``0},System.Func{``0,System.String},System.String)
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: SelectJoin<TSource>(IQueryable<TSource>, Func<TSource, String>, String)
  nameWithType: LINQExtensions.SelectJoin<TSource>(IQueryable<TSource>, Func<TSource, String>, String)
  fullName: InnerLibs.LINQ.LINQExtensions.SelectJoin<TSource>(System.Linq.IQueryable<TSource>, System.Func<TSource, System.String>, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: SelectJoin
    path: LinqPagination.vb
    startLine: 451
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nSeleciona e une em uma unica string varios elementos\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string SelectJoin<TSource>(this IQueryable<TSource> Source, Func<TSource, string> Selector = null, string Separator = ";")
    parameters:
    - id: Source
      type: System.Linq.IQueryable{{TSource}}
      description: ''
    - id: Selector
      type: System.Func{{TSource},System.String}
      description: ''
    - id: Separator
      type: System.String
      description: ''
    typeParameters:
    - id: TSource
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function SelectJoin(Of TSource)(Source As IQueryable(Of TSource), Selector As Func(Of TSource, String) = Nothing, Separator As String = ";") As String
  overload: InnerLibs.LINQ.LINQExtensions.SelectJoin*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.SelectJoin(Of TSource)(IQueryable(Of TSource), Func(Of TSource, String), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.SelectJoin(Of TSource)(System.Linq.IQueryable(Of TSource), System.Func(Of TSource, System.String), System.String)
  name.vb: SelectJoin(Of TSource)(IQueryable(Of TSource), Func(Of TSource, String), String)
- uid: InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)
  commentId: M:InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)
  id: SelectManyJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: SelectManyJoin<TSource>(IEnumerable<TSource>, Func<TSource, IEnumerable<String>>, String)
  nameWithType: LINQExtensions.SelectManyJoin<TSource>(IEnumerable<TSource>, Func<TSource, IEnumerable<String>>, String)
  fullName: InnerLibs.LINQ.LINQExtensions.SelectManyJoin<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<System.String>>, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: SelectManyJoin
    path: LinqPagination.vb
    startLine: 463
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nSeleciona e une em uma unica string varios elementos enumeraveis\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string SelectManyJoin<TSource>(this IEnumerable<TSource> Source, Func<TSource, IEnumerable<string>> Selector = null, string Separator = ";")
    parameters:
    - id: Source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: ''
    - id: Selector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{System.String}}
      description: ''
    - id: Separator
      type: System.String
      description: ''
    typeParameters:
    - id: TSource
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function SelectManyJoin(Of TSource)(Source As IEnumerable(Of TSource), Selector As Func(Of TSource, IEnumerable(Of String)) = Nothing, Separator As String = ";") As String
  overload: InnerLibs.LINQ.LINQExtensions.SelectManyJoin*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.SelectManyJoin(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of String)), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.SelectManyJoin(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of System.String)), System.String)
  name.vb: SelectManyJoin(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of String)), String)
- uid: InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Linq.IQueryable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)
  commentId: M:InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Linq.IQueryable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)
  id: SelectManyJoin``1(System.Linq.IQueryable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: SelectManyJoin<TSource>(IQueryable<TSource>, Func<TSource, IEnumerable<String>>, String)
  nameWithType: LINQExtensions.SelectManyJoin<TSource>(IQueryable<TSource>, Func<TSource, IEnumerable<String>>, String)
  fullName: InnerLibs.LINQ.LINQExtensions.SelectManyJoin<TSource>(System.Linq.IQueryable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<System.String>>, System.String)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: SelectManyJoin
    path: LinqPagination.vb
    startLine: 476
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nSeleciona e une em uma unica string varios elementos enumeraveis\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static string SelectManyJoin<TSource>(this IQueryable<TSource> Source, Func<TSource, IEnumerable<string>> Selector = null, string Separator = ";")
    parameters:
    - id: Source
      type: System.Linq.IQueryable{{TSource}}
      description: ''
    - id: Selector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{System.String}}
      description: ''
    - id: Separator
      type: System.String
      description: ''
    typeParameters:
    - id: TSource
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function SelectManyJoin(Of TSource)(Source As IQueryable(Of TSource), Selector As Func(Of TSource, IEnumerable(Of String)) = Nothing, Separator As String = ";") As String
  overload: InnerLibs.LINQ.LINQExtensions.SelectManyJoin*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.SelectManyJoin(Of TSource)(IQueryable(Of TSource), Func(Of TSource, IEnumerable(Of String)), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.SelectManyJoin(Of TSource)(System.Linq.IQueryable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of System.String)), System.String)
  name.vb: SelectManyJoin(Of TSource)(IQueryable(Of TSource), Func(Of TSource, IEnumerable(Of String)), String)
- uid: InnerLibs.LINQ.LINQExtensions.TakeAndOrder``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})
  commentId: M:InnerLibs.LINQ.LINQExtensions.TakeAndOrder``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})
  id: TakeAndOrder``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: TakeAndOrder<T, DefaultOrderType>(IEnumerable<T>, Func<T, Boolean>, Func<T, DefaultOrderType>)
  nameWithType: LINQExtensions.TakeAndOrder<T, DefaultOrderType>(IEnumerable<T>, Func<T, Boolean>, Func<T, DefaultOrderType>)
  fullName: InnerLibs.LINQ.LINQExtensions.TakeAndOrder<T, DefaultOrderType>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Boolean>, System.Func<T, DefaultOrderType>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: TakeAndOrder
    path: LinqPagination.vb
    startLine: 490
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nOrdena um <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> priorizando valores especificos a uma condição no\ninicio da coleção e então segue uma ordem padrão para os outros.\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IEnumerable<T> TakeAndOrder<T, DefaultOrderType>(this IEnumerable<T> items, Func<T, bool> Priority, Func<T, DefaultOrderType> DefaultOrder = null)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: colecao
    - id: Priority
      type: System.Func{{T},System.Boolean}
      description: Seletor que define a prioridade
    - id: DefaultOrder
      type: System.Func{{T},{DefaultOrderType}}
      description: ordenacao padrao para os outros itens
    typeParameters:
    - id: T
      description: ''
    - id: DefaultOrderType
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function TakeAndOrder(Of T, DefaultOrderType)(items As IEnumerable(Of T), Priority As Func(Of T, Boolean), DefaultOrder As Func(Of T, DefaultOrderType) = Nothing) As IEnumerable(Of T)
  overload: InnerLibs.LINQ.LINQExtensions.TakeAndOrder*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.TakeAndOrder(Of T, DefaultOrderType)(IEnumerable(Of T), Func(Of T, Boolean), Func(Of T, DefaultOrderType))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.TakeAndOrder(Of T, DefaultOrderType)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Boolean), System.Func(Of T, DefaultOrderType))
  name.vb: TakeAndOrder(Of T, DefaultOrderType)(IEnumerable(Of T), Func(Of T, Boolean), Func(Of T, DefaultOrderType))
- uid: InnerLibs.LINQ.LINQExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String[],System.Boolean)
  commentId: M:InnerLibs.LINQ.LINQExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String[],System.Boolean)
  id: ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String[],System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: ThenBy<T>(IOrderedQueryable<T>, String[], Boolean)
  nameWithType: LINQExtensions.ThenBy<T>(IOrderedQueryable<T>, String[], Boolean)
  fullName: InnerLibs.LINQ.LINQExtensions.ThenBy<T>(System.Linq.IOrderedQueryable<T>, System.String[], System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: ThenBy
    path: LinqPagination.vb
    startLine: 510
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nOrdena um <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> a partir do nome de uma ou mais propriedades\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IOrderedQueryable<T> ThenBy<T>(this IOrderedQueryable<T> source, string[] SortProperty, bool Ascending = true)
    parameters:
    - id: source
      type: System.Linq.IOrderedQueryable{{T}}
      description: ''
    - id: SortProperty
      type: System.String[]
    - id: Ascending
      type: System.Boolean
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Linq.IOrderedQueryable{{T}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ThenBy(Of T)(source As IOrderedQueryable(Of T), SortProperty As String(), Ascending As Boolean = True) As IOrderedQueryable(Of T)
  overload: InnerLibs.LINQ.LINQExtensions.ThenBy*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.ThenBy(Of T)(IOrderedQueryable(Of T), String(), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ThenBy(Of T)(System.Linq.IOrderedQueryable(Of T), System.String(), System.Boolean)
  name.vb: ThenBy(Of T)(IOrderedQueryable(Of T), String(), Boolean)
- uid: InnerLibs.LINQ.LINQExtensions.ThenByLike``1(System.Linq.IOrderedQueryable{``0},System.String[],System.String,System.Boolean)
  commentId: M:InnerLibs.LINQ.LINQExtensions.ThenByLike``1(System.Linq.IOrderedQueryable{``0},System.String[],System.String,System.Boolean)
  id: ThenByLike``1(System.Linq.IOrderedQueryable{``0},System.String[],System.String,System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: ThenByLike<T>(IOrderedQueryable<T>, String[], String, Boolean)
  nameWithType: LINQExtensions.ThenByLike<T>(IOrderedQueryable<T>, String[], String, Boolean)
  fullName: InnerLibs.LINQ.LINQExtensions.ThenByLike<T>(System.Linq.IOrderedQueryable<T>, System.String[], System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: ThenByLike
    path: LinqPagination.vb
    startLine: 536
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nOrdena um <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> a partir da aproximaçao de uma ou mais\n<xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> com o valor de um determinado campo\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IOrderedQueryable<T> ThenByLike<T>(this IOrderedQueryable<T> items, string[] Searches, string SortProperty, bool Ascending = true)
    parameters:
    - id: items
      type: System.Linq.IOrderedQueryable{{T}}
      description: ''
    - id: Searches
      type: System.String[]
      description: ''
    - id: SortProperty
      type: System.String
      description: ''
    - id: Ascending
      type: System.Boolean
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Linq.IOrderedQueryable{{T}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ThenByLike(Of T)(items As IOrderedQueryable(Of T), Searches As String(), SortProperty As String, Ascending As Boolean = True) As IOrderedQueryable(Of T)
  overload: InnerLibs.LINQ.LINQExtensions.ThenByLike*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.ThenByLike(Of T)(IOrderedQueryable(Of T), String(), String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ThenByLike(Of T)(System.Linq.IOrderedQueryable(Of T), System.String(), System.String, System.Boolean)
  name.vb: ThenByLike(Of T)(IOrderedQueryable(Of T), String(), String, Boolean)
- uid: InnerLibs.LINQ.LINQExtensions.ThenByLike``1(System.Linq.IOrderedQueryable{``0},System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Boolean)
  commentId: M:InnerLibs.LINQ.LINQExtensions.ThenByLike``1(System.Linq.IOrderedQueryable{``0},System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Boolean)
  id: ThenByLike``1(System.Linq.IOrderedQueryable{``0},System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Boolean)
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: ThenByLike<T>(IOrderedQueryable<T>, String[], Expression<Func<T, String>>, Boolean)
  nameWithType: LINQExtensions.ThenByLike<T>(IOrderedQueryable<T>, String[], Expression<Func<T, String>>, Boolean)
  fullName: InnerLibs.LINQ.LINQExtensions.ThenByLike<T>(System.Linq.IOrderedQueryable<T>, System.String[], System.Linq.Expressions.Expression<System.Func<T, System.String>>, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: ThenByLike
    path: LinqPagination.vb
    startLine: 575
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nOrdena um <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> a partir da aproximaçao de uma ou mais\n<xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> com o valor de um determinado campo\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IOrderedQueryable<T> ThenByLike<T>(this IOrderedQueryable<T> items, string[] Searches, Expression<Func<T, string>> SortProperty, bool Ascending = true)
    parameters:
    - id: items
      type: System.Linq.IOrderedQueryable{{T}}
      description: ''
    - id: Searches
      type: System.String[]
      description: ''
    - id: SortProperty
      type: System.Linq.Expressions.Expression{System.Func{{T},System.String}}
      description: ''
    - id: Ascending
      type: System.Boolean
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Linq.IOrderedQueryable{{T}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ThenByLike(Of T)(items As IOrderedQueryable(Of T), Searches As String(), SortProperty As Expression(Of Func(Of T, String)), Ascending As Boolean = True) As IOrderedQueryable(Of T)
  overload: InnerLibs.LINQ.LINQExtensions.ThenByLike*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.ThenByLike(Of T)(IOrderedQueryable(Of T), String(), Expression(Of Func(Of T, String)), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ThenByLike(Of T)(System.Linq.IOrderedQueryable(Of T), System.String(), System.Linq.Expressions.Expression(Of System.Func(Of T, System.String)), System.Boolean)
  name.vb: ThenByLike(Of T)(IOrderedQueryable(Of T), String(), Expression(Of Func(Of T, String)), Boolean)
- uid: InnerLibs.LINQ.LINQExtensions.ThenByLike``1(System.Linq.IOrderedEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ThenByLike``1(System.Linq.IOrderedEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])
  id: ThenByLike``1(System.Linq.IOrderedEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: ThenByLike<T>(IOrderedEnumerable<T>, Func<T, String>, Boolean, String[])
  nameWithType: LINQExtensions.ThenByLike<T>(IOrderedEnumerable<T>, Func<T, String>, Boolean, String[])
  fullName: InnerLibs.LINQ.LINQExtensions.ThenByLike<T>(System.Linq.IOrderedEnumerable<T>, System.Func<T, System.String>, System.Boolean, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: ThenByLike
    path: LinqPagination.vb
    startLine: 615
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nOrdena um <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> a partir da aproximaçao de uma ou mais\n<xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> com o valor de um determinado campo\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static IOrderedEnumerable<T> ThenByLike<T>(this IOrderedEnumerable<T> items, Func<T, string> PropertySelector, bool Ascending, params string[] Searches)
          where T : class
    parameters:
    - id: items
      type: System.Linq.IOrderedEnumerable{{T}}
      description: ''
    - id: PropertySelector
      type: System.Func{{T},System.String}
      description: ''
    - id: Ascending
      type: System.Boolean
      description: ''
    - id: Searches
      type: System.String[]
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Linq.IOrderedEnumerable{{T}}
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function ThenByLike(Of T As Class)(items As IOrderedEnumerable(Of T), PropertySelector As Func(Of T, String), Ascending As Boolean, ParamArray Searches As String()) As IOrderedEnumerable(Of T)
  overload: InnerLibs.LINQ.LINQExtensions.ThenByLike*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.ThenByLike(Of T)(IOrderedEnumerable(Of T), Func(Of T, String), Boolean, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ThenByLike(Of T)(System.Linq.IOrderedEnumerable(Of T), System.Func(Of T, System.String), System.Boolean, System.String())
  name.vb: ThenByLike(Of T)(IOrderedEnumerable(Of T), Func(Of T, String), Boolean, String())
- uid: InnerLibs.LINQ.LINQExtensions.UpdateObjectFromDictionary``2(System.Data.Linq.DataContext,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:InnerLibs.LINQ.LINQExtensions.UpdateObjectFromDictionary``2(System.Data.Linq.DataContext,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: UpdateObjectFromDictionary``2(System.Data.Linq.DataContext,System.Collections.Generic.IDictionary{System.String,System.Object})
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: UpdateObjectFromDictionary<T, PKType>(DataContext, IDictionary<String, Object>)
  nameWithType: LINQExtensions.UpdateObjectFromDictionary<T, PKType>(DataContext, IDictionary<String, Object>)
  fullName: InnerLibs.LINQ.LINQExtensions.UpdateObjectFromDictionary<T, PKType>(System.Data.Linq.DataContext, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: UpdateObjectFromDictionary
    path: LinqPagination.vb
    startLine: 646
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nAtualiza um objeto de entidade a partir de valores em um Dictionary\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static T UpdateObjectFromDictionary<T, PKType>(this DataContext Context, IDictionary<string, object> Dic)
          where T : class where PKType : struct
    parameters:
    - id: Context
      type: System.Data.Linq.DataContext
      description: ''
    - id: Dic
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: ''
    typeParameters:
    - id: T
      description: ''
    - id: PKType
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function UpdateObjectFromDictionary(Of T As Class, PKType As Structure)(Context As DataContext, Dic As IDictionary(Of String, Object)) As T
  overload: InnerLibs.LINQ.LINQExtensions.UpdateObjectFromDictionary*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.UpdateObjectFromDictionary(Of T, PKType)(DataContext, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.UpdateObjectFromDictionary(Of T, PKType)(System.Data.Linq.DataContext, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: UpdateObjectFromDictionary(Of T, PKType)(DataContext, IDictionary(Of String, Object))
- uid: InnerLibs.LINQ.LINQExtensions.UpdateObjectFromRequest``2(System.Data.Linq.DataContext,System.Web.HttpRequest,System.String[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.UpdateObjectFromRequest``2(System.Data.Linq.DataContext,System.Web.HttpRequest,System.String[])
  id: UpdateObjectFromRequest``2(System.Data.Linq.DataContext,System.Web.HttpRequest,System.String[])
  isExtensionMethod: true
  parent: InnerLibs.LINQ.LINQExtensions
  langs:
  - csharp
  - vb
  name: UpdateObjectFromRequest<T, PKType>(DataContext, HttpRequest, String[])
  nameWithType: LINQExtensions.UpdateObjectFromRequest<T, PKType>(DataContext, HttpRequest, String[])
  fullName: InnerLibs.LINQ.LINQExtensions.UpdateObjectFromRequest<T, PKType>(System.Data.Linq.DataContext, System.Web.HttpRequest, System.String[])
  type: Method
  source:
    remote:
      path: C:/SVN/InnerLibs/trunk/innerlibs1/LinqPagination.vb
    id: UpdateObjectFromRequest
    path: LinqPagination.vb
    startLine: 676
  assemblies:
  - InnerLibs
  namespace: InnerLibs.LINQ
  summary: "\nAtualiza um objeto de entidade a partir de valores em um HttpRequest\n"
  example: []
  syntax:
    content: >-
      [Extension]

      public static T UpdateObjectFromRequest<T, PKType>(this DataContext Context, HttpRequest Request, params string[] Keys)
          where T : class where PKType : struct
    parameters:
    - id: Context
      type: System.Data.Linq.DataContext
      description: ''
    - id: Request
      type: System.Web.HttpRequest
      description: ''
    - id: Keys
      type: System.String[]
      description: ''
    typeParameters:
    - id: T
      description: ''
    - id: PKType
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <Extension>

      <ExtensionAttribute>

      Public Shared Function UpdateObjectFromRequest(Of T As Class, PKType As Structure)(Context As DataContext, Request As HttpRequest, ParamArray Keys As String()) As T
  overload: InnerLibs.LINQ.LINQExtensions.UpdateObjectFromRequest*
  attributes:
  - type: System.Runtime.CompilerServices.ExtensionAttribute
    ctor: System.Runtime.CompilerServices.ExtensionAttribute.#ctor
    arguments: []
  nameWithType.vb: LINQExtensions.UpdateObjectFromRequest(Of T, PKType)(DataContext, HttpRequest, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InnerLibs.LINQ.LINQExtensions.UpdateObjectFromRequest(Of T, PKType)(System.Data.Linq.DataContext, System.Web.HttpRequest, System.String())
  name.vb: UpdateObjectFromRequest(Of T, PKType)(DataContext, HttpRequest, String())
references:
- uid: InnerLibs.LINQ
  commentId: N:InnerLibs.LINQ
  name: InnerLibs.LINQ
  nameWithType: InnerLibs.LINQ
  fullName: InnerLibs.LINQ
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.CreateDictionary
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary()
  nameWithType: ClassTools.CreateDictionary()
  fullName: InnerLibs.ClassTools.CreateDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary
    name: CreateDictionary
    nameWithType: ClassTools.CreateDictionary
    fullName: InnerLibs.ClassTools.CreateDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  name: GetProperties(BindingFlags)
  nameWithType: ClassTools.GetProperties(BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetProperties
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetProperties(System.Object)
  name: GetProperties()
  nameWithType: ClassTools.GetProperties()
  fullName: InnerLibs.ClassTools.GetProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  name: GetPropertyValue(String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  name: GetPropertyValue<Type>(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  name: GetPropertyValue(String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.HasProperty(System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  name: HasProperty(String)
  nameWithType: ClassTools.HasProperty(String)
  fullName: InnerLibs.ClassTools.HasProperty(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsArrayOf``1
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  name: IsArrayOf<T>()
  nameWithType: ClassTools.IsArrayOf<T>()
  fullName: InnerLibs.ClassTools.IsArrayOf<T>()
  nameWithType.vb: ClassTools.IsArrayOf(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)()
  name.vb: IsArrayOf(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsDictionary
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsDictionary(System.Object)
  name: IsDictionary()
  nameWithType: ClassTools.IsDictionary()
  fullName: InnerLibs.ClassTools.IsDictionary()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.LINQ.LINQExtensions},System.Collections.Generic.IEqualityComparer{InnerLibs.LINQ.LINQExtensions})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsIn(IEnumerable<LINQExtensions>, IEqualityComparer<LINQExtensions>)
  nameWithType: ClassTools.IsIn(IEnumerable<LINQExtensions>, IEqualityComparer<LINQExtensions>)
  fullName: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable<InnerLibs.LINQ.LINQExtensions>, System.Collections.Generic.IEqualityComparer<InnerLibs.LINQ.LINQExtensions>)
  nameWithType.vb: ClassTools.IsIn(IEnumerable(Of LINQExtensions), IEqualityComparer(Of LINQExtensions))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable(Of InnerLibs.LINQ.LINQExtensions), System.Collections.Generic.IEqualityComparer(Of InnerLibs.LINQ.LINQExtensions))
  name.vb: IsIn(IEnumerable(Of LINQExtensions), IEqualityComparer(Of LINQExtensions))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.LINQ.LINQExtensions},System.Collections.Generic.IEqualityComparer{InnerLibs.LINQ.LINQExtensions})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.Collections.Generic.IEnumerable{InnerLibs.LINQ.LINQExtensions},System.Collections.Generic.IEqualityComparer{InnerLibs.LINQ.LINQExtensions})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn
    nameWithType: ClassTools.IsIn
    fullName: InnerLibs.ClassTools.IsIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.LINQ.LINQExtensions}[],System.Collections.Generic.IEqualityComparer{InnerLibs.LINQ.LINQExtensions})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  name: IsInAny(IEnumerable<LINQExtensions>[], IEqualityComparer<LINQExtensions>)
  nameWithType: ClassTools.IsInAny(IEnumerable<LINQExtensions>[], IEqualityComparer<LINQExtensions>)
  fullName: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable<InnerLibs.LINQ.LINQExtensions>[], System.Collections.Generic.IEqualityComparer<InnerLibs.LINQ.LINQExtensions>)
  nameWithType.vb: ClassTools.IsInAny(IEnumerable(Of LINQExtensions)(), IEqualityComparer(Of LINQExtensions))
  fullName.vb: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable(Of InnerLibs.LINQ.LINQExtensions)(), System.Collections.Generic.IEqualityComparer(Of InnerLibs.LINQ.LINQExtensions))
  name.vb: IsInAny(IEnumerable(Of LINQExtensions)(), IEqualityComparer(Of LINQExtensions))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.LINQ.LINQExtensions}[],System.Collections.Generic.IEqualityComparer{InnerLibs.LINQ.LINQExtensions})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny(System.Collections.Generic.IEnumerable{InnerLibs.LINQ.LINQExtensions}[],System.Collections.Generic.IEqualityComparer{InnerLibs.LINQ.LINQExtensions})
    name: IsInAny
    nameWithType: ClassTools.IsInAny
    fullName: InnerLibs.ClassTools.IsInAny
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsList
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsList(System.Object)
  name: IsList()
  nameWithType: ClassTools.IsList()
  fullName: InnerLibs.ClassTools.IsList()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.LINQ.LINQExtensions},System.Collections.Generic.IEqualityComparer{InnerLibs.LINQ.LINQExtensions})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsNotIn(IEnumerable<LINQExtensions>, IEqualityComparer<LINQExtensions>)
  nameWithType: ClassTools.IsNotIn(IEnumerable<LINQExtensions>, IEqualityComparer<LINQExtensions>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable<InnerLibs.LINQ.LINQExtensions>, System.Collections.Generic.IEqualityComparer<InnerLibs.LINQ.LINQExtensions>)
  nameWithType.vb: ClassTools.IsNotIn(IEnumerable(Of LINQExtensions), IEqualityComparer(Of LINQExtensions))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable(Of InnerLibs.LINQ.LINQExtensions), System.Collections.Generic.IEqualityComparer(Of InnerLibs.LINQ.LINQExtensions))
  name.vb: IsNotIn(IEnumerable(Of LINQExtensions), IEqualityComparer(Of LINQExtensions))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.LINQ.LINQExtensions},System.Collections.Generic.IEqualityComparer{InnerLibs.LINQ.LINQExtensions})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.Collections.Generic.IEnumerable{InnerLibs.LINQ.LINQExtensions},System.Collections.Generic.IEqualityComparer{InnerLibs.LINQ.LINQExtensions})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  name: IsNotIn(String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn(String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn(System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn
    nameWithType: ClassTools.IsNotIn
    fullName: InnerLibs.ClassTools.IsNotIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.IsType``1
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.IsType``1(System.Object)
  name: IsType<T>()
  nameWithType: ClassTools.IsType<T>()
  fullName: InnerLibs.ClassTools.IsType<T>()
  nameWithType.vb: ClassTools.IsType(Of T)()
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)()
  name.vb: IsType(Of T)()
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.NullCoalesce(InnerLibs.LINQ.LINQExtensions[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce(LINQExtensions[])
  nameWithType: ClassTools.NullCoalesce(LINQExtensions[])
  fullName: InnerLibs.ClassTools.NullCoalesce(InnerLibs.LINQ.LINQExtensions[])
  nameWithType.vb: ClassTools.NullCoalesce(LINQExtensions())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(InnerLibs.LINQ.LINQExtensions())
  name.vb: NullCoalesce(LINQExtensions())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.LINQ.LINQExtensions[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce(InnerLibs.LINQ.LINQExtensions[])
    name: NullCoalesce
    nameWithType: ClassTools.NullCoalesce
    fullName: InnerLibs.ClassTools.NullCoalesce
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.ClassTools.NullifyProperties
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties()
  nameWithType: ClassTools.NullifyProperties()
  fullName: InnerLibs.ClassTools.NullifyProperties()
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties
    name: NullifyProperties
    nameWithType: ClassTools.NullifyProperties
    fullName: InnerLibs.ClassTools.NullifyProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValue``1(System.String,{Type})
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  name: SetPropertyValue<Type>(String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.String, Type)
  name.vb: SetPropertyValue(Of Type)(String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  name: SetPropertyValueFromCollection<Type>(String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.ClassTools.ToFlatString(System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  parent: InnerLibs.ClassTools
  definition: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  name: ToFlatString(String)
  nameWithType: ClassTools.ToFlatString(String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.DataManipulation.GetDbType
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  parent: InnerLibs.DataManipulation
  definition: InnerLibs.DataManipulation.GetDbType(System.Object)
  name: GetDbType()
  nameWithType: DataManipulation.GetDbType()
  fullName: InnerLibs.DataManipulation.GetDbType()
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.Converter.DefineEmptyList
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList()
  nameWithType: Converter.DefineEmptyList()
  fullName: InnerLibs.Converter.DefineEmptyList()
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList
    name: DefineEmptyList
    nameWithType: Converter.DefineEmptyList
    fullName: InnerLibs.Converter.DefineEmptyList
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.Converter.ChangeType``1
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  parent: InnerLibs.Converter
  definition: InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType>()
  nameWithType: Converter.ChangeType<ToType>()
  fullName: InnerLibs.Converter.ChangeType<ToType>()
  nameWithType.vb: Converter.ChangeType(Of ToType)()
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType)()
  name.vb: ChangeType(Of ToType)()
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType<ToType>
    nameWithType: Converter.ChangeType<ToType>
    fullName: InnerLibs.Converter.ChangeType<ToType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``1
    name: ChangeType(Of ToType)
    nameWithType: Converter.ChangeType(Of ToType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.JsonViewer.CreateNode
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  parent: InnerLibs.JsonViewer
  definition: InnerLibs.JsonViewer.CreateNode(System.Object)
  name: CreateNode()
  nameWithType: JsonViewer.CreateNode()
  fullName: InnerLibs.JsonViewer.CreateNode()
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  parent: InnerLibs.Mathematic
  definition: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  name: IsBetween(Object, Object)
  nameWithType: Mathematic.IsBetween(Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween(System.Object,System.Object)
    name: IsBetween
    nameWithType: Mathematic.IsBetween
    fullName: InnerLibs.Mathematic.IsBetween
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Text.SerializeJSON(System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  parent: InnerLibs.Text
  definition: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  name: SerializeJSON(String)
  nameWithType: Text.SerializeJSON(String)
  fullName: InnerLibs.Text.SerializeJSON(System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNumber
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNumber(System.Object)
  name: IsNumber()
  nameWithType: Verify.IsNumber()
  fullName: InnerLibs.Verify.IsNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IsNotNumber
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IsNotNumber(System.Object)
  name: IsNotNumber()
  nameWithType: Verify.IsNotNumber()
  fullName: InnerLibs.Verify.IsNotNumber()
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.Verify.IfBlank``1({T})
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  name: IfBlank<T>(T)
  nameWithType: Verify.IfBlank<T>(T)
  fullName: InnerLibs.Verify.IfBlank<T>(T)
  nameWithType.vb: Verify.IfBlank(Of T)(T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(T)
  name.vb: IfBlank(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.Verify.NullIf(System.Func{InnerLibs.LINQ.LINQExtensions,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  name: NullIf(Func<LINQExtensions, Boolean>)
  nameWithType: Verify.NullIf(Func<LINQExtensions, Boolean>)
  fullName: InnerLibs.Verify.NullIf(System.Func<InnerLibs.LINQ.LINQExtensions, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Func(Of LINQExtensions, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(System.Func(Of InnerLibs.LINQ.LINQExtensions, System.Boolean))
  name.vb: NullIf(Func(Of LINQExtensions, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.LINQ.LINQExtensions,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(System.Func{InnerLibs.LINQ.LINQExtensions,System.Boolean})
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.Verify.NullIf(InnerLibs.LINQ.LINQExtensions)
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  parent: InnerLibs.Verify
  definition: InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf(LINQExtensions)
  nameWithType: Verify.NullIf(LINQExtensions)
  fullName: InnerLibs.Verify.NullIf(InnerLibs.LINQ.LINQExtensions)
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.LINQ.LINQExtensions)
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf(InnerLibs.LINQ.LINQExtensions)
    name: NullIf
    nameWithType: Verify.NullIf
    fullName: InnerLibs.Verify.NullIf
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  parent: InnerLibs.Web
  definition: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  name: CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax(String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax(System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax
    nameWithType: Web.CreateFromAjax
    fullName: InnerLibs.Web.CreateFromAjax
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.LINQ.LINQExtensions,{TextType}},System.Func{InnerLibs.LINQ.LINQExtensions,{ValueType}})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  parent: InnerLibs.Web
  definition: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  name: AsListItem<TextType, ValueType>(Func<LINQExtensions, TextType>, Func<LINQExtensions, ValueType>)
  nameWithType: Web.AsListItem<TextType, ValueType>(Func<LINQExtensions, TextType>, Func<LINQExtensions, ValueType>)
  fullName: InnerLibs.Web.AsListItem<TextType, ValueType>(System.Func<InnerLibs.LINQ.LINQExtensions, TextType>, System.Func<InnerLibs.LINQ.LINQExtensions, ValueType>)
  nameWithType.vb: Web.AsListItem(Of TextType, ValueType)(Func(Of LINQExtensions, TextType), Func(Of LINQExtensions, ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of TextType, ValueType)(System.Func(Of InnerLibs.LINQ.LINQExtensions, TextType), System.Func(Of InnerLibs.LINQ.LINQExtensions, ValueType))
  name.vb: AsListItem(Of TextType, ValueType)(Func(Of LINQExtensions, TextType), Func(Of LINQExtensions, ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.LINQ.LINQExtensions,``0},System.Func{InnerLibs.LINQ.LINQExtensions,``1})
    name: AsListItem<TextType, ValueType>
    nameWithType: Web.AsListItem<TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``2(System.Func{InnerLibs.LINQ.LINQExtensions,``0},System.Func{InnerLibs.LINQ.LINQExtensions,``1})
    name: AsListItem(Of TextType, ValueType)
    nameWithType: Web.AsListItem(Of TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.GetCastedValue
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.GetCastedValue(System.Object)
  name: GetCastedValue()
  nameWithType: WinForms.GetCastedValue()
  fullName: InnerLibs.WinForms.GetCastedValue()
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.InnerLibs.WinForms.CastValueForControl(System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  parent: InnerLibs.WinForms
  definition: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  name: CastValueForControl(Object)
  nameWithType: WinForms.CastValueForControl(Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  name: ApplyToControls(HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls(HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls
    nameWithType: LINQExtensions.ApplyToControls
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.LINQ.LINQExtensions,System.Func{InnerLibs.LINQ.LINQExtensions,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  parent: InnerLibs.LINQ.LINQExtensions
  definition: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  name: HasSamePropertyValues(LINQExtensions, Func<LINQExtensions, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues(LINQExtensions, Func<LINQExtensions, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.LINQ.LINQExtensions, System.Func<InnerLibs.LINQ.LINQExtensions, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(LINQExtensions, Func(Of LINQExtensions, Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.LINQ.LINQExtensions, System.Func(Of InnerLibs.LINQ.LINQExtensions, System.Object)())
  name.vb: HasSamePropertyValues(LINQExtensions, Func(Of LINQExtensions, Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.LINQ.LINQExtensions,System.Func{InnerLibs.LINQ.LINQExtensions,System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(InnerLibs.LINQ.LINQExtensions,System.Func{InnerLibs.LINQ.LINQExtensions,System.Object}[])
    name: HasSamePropertyValues
    nameWithType: LINQExtensions.HasSamePropertyValues
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InnerLibs.LINQ.LINQExtensions
    name: LINQExtensions
    nameWithType: LINQExtensions
    fullName: InnerLibs.LINQ.LINQExtensions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
  commentId: M:InnerLibs.ClassTools.CreateDictionary``1(``0)
  name: CreateDictionary<Type>(Type)
  nameWithType: ClassTools.CreateDictionary<Type>(Type)
  fullName: InnerLibs.ClassTools.CreateDictionary<Type>(Type)
  nameWithType.vb: ClassTools.CreateDictionary(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.CreateDictionary(Of Type)(Type)
  name.vb: CreateDictionary(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary<Type>
    nameWithType: ClassTools.CreateDictionary<Type>
    fullName: InnerLibs.ClassTools.CreateDictionary<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.CreateDictionary``1(``0)
    name: CreateDictionary(Of Type)
    nameWithType: ClassTools.CreateDictionary(Of Type)
    fullName: InnerLibs.ClassTools.CreateDictionary(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools
  commentId: T:InnerLibs.ClassTools
  parent: InnerLibs
  name: ClassTools
  nameWithType: ClassTools
  fullName: InnerLibs.ClassTools
- uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
  isExternal: true
  name: GetProperties(Object, BindingFlags)
  nameWithType: ClassTools.GetProperties(Object, BindingFlags)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object, System.Reflection.BindingFlags)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object,System.Reflection.BindingFlags)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetProperties(System.Object)
  commentId: M:InnerLibs.ClassTools.GetProperties(System.Object)
  isExternal: true
  name: GetProperties(Object)
  nameWithType: ClassTools.GetProperties(Object)
  fullName: InnerLibs.ClassTools.GetProperties(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetProperties(System.Object)
    name: GetProperties
    nameWithType: ClassTools.GetProperties
    fullName: InnerLibs.ClassTools.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Type, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Type, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Type, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Type,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue<Type>(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue<Type>(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue<Type>(System.Object, System.String, System.Boolean)
  nameWithType.vb: ClassTools.GetPropertyValue(Of Type)(Object, String, Boolean)
  fullName.vb: InnerLibs.ClassTools.GetPropertyValue(Of Type)(System.Object, System.String, System.Boolean)
  name.vb: GetPropertyValue(Of Type)(Object, String, Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue<Type>
    nameWithType: ClassTools.GetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.GetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue``1(System.Object,System.String,System.Boolean)
    name: GetPropertyValue(Of Type)
    nameWithType: ClassTools.GetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.GetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  commentId: M:InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
  isExternal: true
  name: GetPropertyValue(Object, String, Boolean)
  nameWithType: ClassTools.GetPropertyValue(Object, String, Boolean)
  fullName: InnerLibs.ClassTools.GetPropertyValue(System.Object, System.String, System.Boolean)
  spec.csharp:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.GetPropertyValue(System.Object,System.String,System.Boolean)
    name: GetPropertyValue
    nameWithType: ClassTools.GetPropertyValue
    fullName: InnerLibs.ClassTools.GetPropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)
  isExternal: true
  name: HasProperty(Object, String)
  nameWithType: ClassTools.HasProperty(Object, String)
  fullName: InnerLibs.ClassTools.HasProperty(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.HasProperty(System.Object,System.String)
    name: HasProperty
    nameWithType: ClassTools.HasProperty
    fullName: InnerLibs.ClassTools.HasProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)
  isExternal: true
  name: IsArrayOf<T>(Object)
  nameWithType: ClassTools.IsArrayOf<T>(Object)
  fullName: InnerLibs.ClassTools.IsArrayOf<T>(System.Object)
  nameWithType.vb: ClassTools.IsArrayOf(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsArrayOf(Of T)(System.Object)
  name.vb: IsArrayOf(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf<T>
    nameWithType: ClassTools.IsArrayOf<T>
    fullName: InnerLibs.ClassTools.IsArrayOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsArrayOf``1(System.Object)
    name: IsArrayOf(Of T)
    nameWithType: ClassTools.IsArrayOf(Of T)
    fullName: InnerLibs.ClassTools.IsArrayOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsDictionary(System.Object)
  commentId: M:InnerLibs.ClassTools.IsDictionary(System.Object)
  isExternal: true
  name: IsDictionary(Object)
  nameWithType: ClassTools.IsDictionary(Object)
  fullName: InnerLibs.ClassTools.IsDictionary(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsDictionary(System.Object)
    name: IsDictionary
    nameWithType: ClassTools.IsDictionary
    fullName: InnerLibs.ClassTools.IsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn<Type>
    nameWithType: ClassTools.IsIn<Type>
    fullName: InnerLibs.ClassTools.IsIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsIn(Of Type)
    nameWithType: ClassTools.IsIn(Of Type)
    fullName: InnerLibs.ClassTools.IsIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  nameWithType: ClassTools.IsInAny<Type>(Type, IEnumerable<Type>[], IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsInAny<Type>(Type, System.Collections.Generic.IEnumerable<Type>[], System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsInAny(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type)(), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsInAny(Of Type)(Type, IEnumerable(Of Type)(), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny<Type>
    nameWithType: ClassTools.IsInAny<Type>
    fullName: InnerLibs.ClassTools.IsInAny<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})
    name: IsInAny(Of Type)
    nameWithType: ClassTools.IsInAny(Of Type)
    fullName: InnerLibs.ClassTools.IsInAny(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsList(System.Object)
  commentId: M:InnerLibs.ClassTools.IsList(System.Object)
  isExternal: true
  name: IsList(Object)
  nameWithType: ClassTools.IsList(Object)
  fullName: InnerLibs.ClassTools.IsList(System.Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsList(System.Object)
    name: IsList
    nameWithType: ClassTools.IsList
    fullName: InnerLibs.ClassTools.IsList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, IEnumerable<Type>, IEqualityComparer<Type>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.Collections.Generic.IEnumerable<Type>, System.Collections.Generic.IEqualityComparer<Type>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.Collections.Generic.IEnumerable(Of Type), System.Collections.Generic.IEqualityComparer(Of Type))
  name.vb: IsNotIn(Of Type)(Type, IEnumerable(Of Type), IEqualityComparer(Of Type))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  commentId: M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
  isExternal: true
  name: IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  nameWithType: ClassTools.IsNotIn<Type>(Type, String, IEqualityComparer<Char>)
  fullName: InnerLibs.ClassTools.IsNotIn<Type>(Type, System.String, System.Collections.Generic.IEqualityComparer<System.Char>)
  nameWithType.vb: ClassTools.IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  fullName.vb: InnerLibs.ClassTools.IsNotIn(Of Type)(Type, System.String, System.Collections.Generic.IEqualityComparer(Of System.Char))
  name.vb: IsNotIn(Of Type)(Type, String, IEqualityComparer(Of Char))
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn<Type>
    nameWithType: ClassTools.IsNotIn<Type>
    fullName: InnerLibs.ClassTools.IsNotIn<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})
    name: IsNotIn(Of Type)
    nameWithType: ClassTools.IsNotIn(Of Type)
    fullName: InnerLibs.ClassTools.IsNotIn(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.IsType``1(System.Object)
  commentId: M:InnerLibs.ClassTools.IsType``1(System.Object)
  isExternal: true
  name: IsType<T>(Object)
  nameWithType: ClassTools.IsType<T>(Object)
  fullName: InnerLibs.ClassTools.IsType<T>(System.Object)
  nameWithType.vb: ClassTools.IsType(Of T)(Object)
  fullName.vb: InnerLibs.ClassTools.IsType(Of T)(System.Object)
  name.vb: IsType(Of T)(Object)
  spec.csharp:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType<T>
    nameWithType: ClassTools.IsType<T>
    fullName: InnerLibs.ClassTools.IsType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.IsType``1(System.Object)
    name: IsType(Of T)
    nameWithType: ClassTools.IsType(Of T)
    fullName: InnerLibs.ClassTools.IsType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  commentId: M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
  name: NullCoalesce<T>(T, T[])
  nameWithType: ClassTools.NullCoalesce<T>(T, T[])
  fullName: InnerLibs.ClassTools.NullCoalesce<T>(T, T[])
  nameWithType.vb: ClassTools.NullCoalesce(Of T)(T, T())
  fullName.vb: InnerLibs.ClassTools.NullCoalesce(Of T)(T, T())
  name.vb: NullCoalesce(Of T)(T, T())
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce<T>
    nameWithType: ClassTools.NullCoalesce<T>
    fullName: InnerLibs.ClassTools.NullCoalesce<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])
    name: NullCoalesce(Of T)
    nameWithType: ClassTools.NullCoalesce(Of T)
    fullName: InnerLibs.ClassTools.NullCoalesce(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
  commentId: M:InnerLibs.ClassTools.NullifyProperties``1(``0)
  name: NullifyProperties<Type>(Type)
  nameWithType: ClassTools.NullifyProperties<Type>(Type)
  fullName: InnerLibs.ClassTools.NullifyProperties<Type>(Type)
  nameWithType.vb: ClassTools.NullifyProperties(Of Type)(Type)
  fullName.vb: InnerLibs.ClassTools.NullifyProperties(Of Type)(Type)
  name.vb: NullifyProperties(Of Type)(Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties<Type>
    nameWithType: ClassTools.NullifyProperties<Type>
    fullName: InnerLibs.ClassTools.NullifyProperties<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.NullifyProperties``1(``0)
    name: NullifyProperties(Of Type)
    nameWithType: ClassTools.NullifyProperties(Of Type)
    fullName: InnerLibs.ClassTools.NullifyProperties(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  commentId: M:InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
  isExternal: true
  name: SetPropertyValue<Type>(Object, String, Type)
  nameWithType: ClassTools.SetPropertyValue<Type>(Object, String, Type)
  fullName: InnerLibs.ClassTools.SetPropertyValue<Type>(System.Object, System.String, Type)
  nameWithType.vb: ClassTools.SetPropertyValue(Of Type)(Object, String, Type)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValue(Of Type)(System.Object, System.String, Type)
  name.vb: SetPropertyValue(Of Type)(Object, String, Type)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue<Type>
    nameWithType: ClassTools.SetPropertyValue<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValue<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValue``1(System.Object,System.String,``0)
    name: SetPropertyValue(Of Type)
    nameWithType: ClassTools.SetPropertyValue(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValue(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  commentId: M:InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
  isExternal: true
  name: SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  nameWithType: ClassTools.SetPropertyValueFromCollection<Type>(Object, String, CollectionBase)
  fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>(System.Object, System.String, System.Collections.CollectionBase)
  nameWithType.vb: ClassTools.SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  fullName.vb: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)(System.Object, System.String, System.Collections.CollectionBase)
  name.vb: SetPropertyValueFromCollection(Of Type)(Object, String, CollectionBase)
  spec.csharp:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection<Type>
    nameWithType: ClassTools.SetPropertyValueFromCollection<Type>
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection<Type>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.SetPropertyValueFromCollection``1(System.Object,System.String,System.Collections.CollectionBase)
    name: SetPropertyValueFromCollection(Of Type)
    nameWithType: ClassTools.SetPropertyValueFromCollection(Of Type)
    fullName: InnerLibs.ClassTools.SetPropertyValueFromCollection(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.CollectionBase
    name: CollectionBase
    nameWithType: CollectionBase
    fullName: System.Collections.CollectionBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  commentId: M:InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
  isExternal: true
  name: ToFlatString(Object, String)
  nameWithType: ClassTools.ToFlatString(Object, String)
  fullName: InnerLibs.ClassTools.ToFlatString(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.ClassTools.ToFlatString(System.Object,System.String)
    name: ToFlatString
    nameWithType: ClassTools.ToFlatString
    fullName: InnerLibs.ClassTools.ToFlatString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation.GetDbType(System.Object)
  commentId: M:InnerLibs.DataManipulation.GetDbType(System.Object)
  isExternal: true
  name: GetDbType(Object)
  nameWithType: DataManipulation.GetDbType(Object)
  fullName: InnerLibs.DataManipulation.GetDbType(System.Object)
  spec.csharp:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.DataManipulation.GetDbType(System.Object)
    name: GetDbType
    nameWithType: DataManipulation.GetDbType
    fullName: InnerLibs.DataManipulation.GetDbType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.DataManipulation
  commentId: T:InnerLibs.DataManipulation
  parent: InnerLibs
  name: DataManipulation
  nameWithType: DataManipulation
  fullName: InnerLibs.DataManipulation
- uid: InnerLibs.Converter.DefineEmptyList``1(``0)
  commentId: M:InnerLibs.Converter.DefineEmptyList``1(``0)
  name: DefineEmptyList<T>(T)
  nameWithType: Converter.DefineEmptyList<T>(T)
  fullName: InnerLibs.Converter.DefineEmptyList<T>(T)
  nameWithType.vb: Converter.DefineEmptyList(Of T)(T)
  fullName.vb: InnerLibs.Converter.DefineEmptyList(Of T)(T)
  name.vb: DefineEmptyList(Of T)(T)
  spec.csharp:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList<T>
    nameWithType: Converter.DefineEmptyList<T>
    fullName: InnerLibs.Converter.DefineEmptyList<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.DefineEmptyList``1(``0)
    name: DefineEmptyList(Of T)
    nameWithType: Converter.DefineEmptyList(Of T)
    fullName: InnerLibs.Converter.DefineEmptyList(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Converter
  commentId: T:InnerLibs.Converter
  parent: InnerLibs
  name: Converter
  nameWithType: Converter
  fullName: InnerLibs.Converter
- uid: InnerLibs.Converter.ChangeType``2(``1)
  commentId: M:InnerLibs.Converter.ChangeType``2(``1)
  name: ChangeType<ToType, FromType>(FromType)
  nameWithType: Converter.ChangeType<ToType, FromType>(FromType)
  fullName: InnerLibs.Converter.ChangeType<ToType, FromType>(FromType)
  nameWithType.vb: Converter.ChangeType(Of ToType, FromType)(FromType)
  fullName.vb: InnerLibs.Converter.ChangeType(Of ToType, FromType)(FromType)
  name.vb: ChangeType(Of ToType, FromType)(FromType)
  spec.csharp:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType<ToType, FromType>
    nameWithType: Converter.ChangeType<ToType, FromType>
    fullName: InnerLibs.Converter.ChangeType<ToType, FromType>
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Converter.ChangeType``2(``1)
    name: ChangeType(Of ToType, FromType)
    nameWithType: Converter.ChangeType(Of ToType, FromType)
    fullName: InnerLibs.Converter.ChangeType(Of ToType, FromType)
  - name: (
    nameWithType: (
    fullName: (
  - name: FromType
    nameWithType: FromType
    fullName: FromType
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer.CreateNode(System.Object)
  commentId: M:InnerLibs.JsonViewer.CreateNode(System.Object)
  isExternal: true
  name: CreateNode(Object)
  nameWithType: JsonViewer.CreateNode(Object)
  fullName: InnerLibs.JsonViewer.CreateNode(System.Object)
  spec.csharp:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.JsonViewer.CreateNode(System.Object)
    name: CreateNode
    nameWithType: JsonViewer.CreateNode
    fullName: InnerLibs.JsonViewer.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.JsonViewer
  commentId: T:InnerLibs.JsonViewer
  parent: InnerLibs
  name: JsonViewer
  nameWithType: JsonViewer
  fullName: InnerLibs.JsonViewer
- uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  commentId: M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
  isExternal: true
  name: IsBetween<Type>(Type, Object, Object)
  nameWithType: Mathematic.IsBetween<Type>(Type, Object, Object)
  fullName: InnerLibs.Mathematic.IsBetween<Type>(Type, System.Object, System.Object)
  nameWithType.vb: Mathematic.IsBetween(Of Type)(Type, Object, Object)
  fullName.vb: InnerLibs.Mathematic.IsBetween(Of Type)(Type, System.Object, System.Object)
  name.vb: IsBetween(Of Type)(Type, Object, Object)
  spec.csharp:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween<Type>
    nameWithType: Mathematic.IsBetween<Type>
    fullName: InnerLibs.Mathematic.IsBetween<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)
    name: IsBetween(Of Type)
    nameWithType: Mathematic.IsBetween(Of Type)
    fullName: InnerLibs.Mathematic.IsBetween(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Mathematic
  commentId: T:InnerLibs.Mathematic
  parent: InnerLibs
  name: Mathematic
  nameWithType: Mathematic
  fullName: InnerLibs.Mathematic
- uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
  commentId: M:InnerLibs.Text.SerializeJSON(System.Object,System.String)
  isExternal: true
  name: SerializeJSON(Object, String)
  nameWithType: Text.SerializeJSON(Object, String)
  fullName: InnerLibs.Text.SerializeJSON(System.Object, System.String)
  spec.csharp:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Text.SerializeJSON(System.Object,System.String)
    name: SerializeJSON
    nameWithType: Text.SerializeJSON
    fullName: InnerLibs.Text.SerializeJSON
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Text
  commentId: T:InnerLibs.Text
  parent: InnerLibs
  name: Text
  nameWithType: Text
  fullName: InnerLibs.Text
- uid: InnerLibs.Verify.IsNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNumber(System.Object)
  isExternal: true
  name: IsNumber(Object)
  nameWithType: Verify.IsNumber(Object)
  fullName: InnerLibs.Verify.IsNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNumber(System.Object)
    name: IsNumber
    nameWithType: Verify.IsNumber
    fullName: InnerLibs.Verify.IsNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify
  commentId: T:InnerLibs.Verify
  parent: InnerLibs
  name: Verify
  nameWithType: Verify
  fullName: InnerLibs.Verify
- uid: InnerLibs.Verify.IsNotNumber(System.Object)
  commentId: M:InnerLibs.Verify.IsNotNumber(System.Object)
  isExternal: true
  name: IsNotNumber(Object)
  nameWithType: Verify.IsNotNumber(Object)
  fullName: InnerLibs.Verify.IsNotNumber(System.Object)
  spec.csharp:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IsNotNumber(System.Object)
    name: IsNotNumber
    nameWithType: Verify.IsNotNumber
    fullName: InnerLibs.Verify.IsNotNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
  commentId: M:InnerLibs.Verify.IfBlank``1(System.Object,``0)
  isExternal: true
  name: IfBlank<T>(Object, T)
  nameWithType: Verify.IfBlank<T>(Object, T)
  fullName: InnerLibs.Verify.IfBlank<T>(System.Object, T)
  nameWithType.vb: Verify.IfBlank(Of T)(Object, T)
  fullName.vb: InnerLibs.Verify.IfBlank(Of T)(System.Object, T)
  name.vb: IfBlank(Of T)(Object, T)
  spec.csharp:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank<T>
    nameWithType: Verify.IfBlank<T>
    fullName: InnerLibs.Verify.IfBlank<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.IfBlank``1(System.Object,``0)
    name: IfBlank(Of T)
    nameWithType: Verify.IfBlank(Of T)
    fullName: InnerLibs.Verify.IfBlank(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  commentId: M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
  isExternal: true
  name: NullIf<T>(T, Func<T, Boolean>)
  nameWithType: Verify.NullIf<T>(T, Func<T, Boolean>)
  fullName: InnerLibs.Verify.NullIf<T>(T, System.Func<T, System.Boolean>)
  nameWithType.vb: Verify.NullIf(Of T)(T, Func(Of T, Boolean))
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, System.Func(Of T, System.Boolean))
  name.vb: NullIf(Of T)(T, Func(Of T, Boolean))
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Verify.NullIf``1(``0,``0)
  commentId: M:InnerLibs.Verify.NullIf``1(``0,``0)
  name: NullIf<T>(T, T)
  nameWithType: Verify.NullIf<T>(T, T)
  fullName: InnerLibs.Verify.NullIf<T>(T, T)
  nameWithType.vb: Verify.NullIf(Of T)(T, T)
  fullName.vb: InnerLibs.Verify.NullIf(Of T)(T, T)
  name.vb: NullIf(Of T)(T, T)
  spec.csharp:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf<T>
    nameWithType: Verify.NullIf<T>
    fullName: InnerLibs.Verify.NullIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Verify.NullIf``1(``0,``0)
    name: NullIf(Of T)
    nameWithType: Verify.NullIf(Of T)
    fullName: InnerLibs.Verify.NullIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  commentId: M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
  isExternal: true
  name: CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  nameWithType: Web.CreateFromAjax<Type>(Type, String, String, NameValueCollection, String, Encoding)
  fullName: InnerLibs.Web.CreateFromAjax<Type>(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  nameWithType.vb: Web.CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  fullName.vb: InnerLibs.Web.CreateFromAjax(Of Type)(Type, System.String, System.String, System.Collections.Specialized.NameValueCollection, System.String, System.Text.Encoding)
  name.vb: CreateFromAjax(Of Type)(Type, String, String, NameValueCollection, String, Encoding)
  spec.csharp:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax<Type>
    nameWithType: Web.CreateFromAjax<Type>
    fullName: InnerLibs.Web.CreateFromAjax<Type>
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)
    name: CreateFromAjax(Of Type)
    nameWithType: Web.CreateFromAjax(Of Type)
    fullName: InnerLibs.Web.CreateFromAjax(Of Type)
  - name: (
    nameWithType: (
    fullName: (
  - name: Type
    nameWithType: Type
    fullName: Type
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NameValueCollection
    name: NameValueCollection
    nameWithType: NameValueCollection
    fullName: System.Collections.Specialized.NameValueCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.Web
  commentId: T:InnerLibs.Web
  parent: InnerLibs
  name: Web
  nameWithType: Web
  fullName: InnerLibs.Web
- uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
  isExternal: true
  name: AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  nameWithType: Web.AsListItem<T, TextType, ValueType>(T, Func<T, TextType>, Func<T, ValueType>)
  fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>(T, System.Func<T, TextType>, System.Func<T, ValueType>)
  nameWithType.vb: Web.AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  fullName.vb: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)(T, System.Func(Of T, TextType), System.Func(Of T, ValueType))
  name.vb: AsListItem(Of T, TextType, ValueType)(T, Func(Of T, TextType), Func(Of T, ValueType))
  spec.csharp:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem<T, TextType, ValueType>
    nameWithType: Web.AsListItem<T, TextType, ValueType>
    fullName: InnerLibs.Web.AsListItem<T, TextType, ValueType>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.Web.AsListItem``3(``0,System.Func{``0,``1},System.Func{``0,``2})
    name: AsListItem(Of T, TextType, ValueType)
    nameWithType: Web.AsListItem(Of T, TextType, ValueType)
    fullName: InnerLibs.Web.AsListItem(Of T, TextType, ValueType)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TextType
    nameWithType: TextType
    fullName: TextType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ValueType
    nameWithType: ValueType
    fullName: ValueType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms.GetCastedValue(System.Object)
  commentId: M:InnerLibs.WinForms.GetCastedValue(System.Object)
  isExternal: true
  name: GetCastedValue(Object)
  nameWithType: WinForms.GetCastedValue(Object)
  fullName: InnerLibs.WinForms.GetCastedValue(System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.GetCastedValue(System.Object)
    name: GetCastedValue
    nameWithType: WinForms.GetCastedValue
    fullName: InnerLibs.WinForms.GetCastedValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.WinForms
  commentId: T:InnerLibs.WinForms
  parent: InnerLibs
  name: WinForms
  nameWithType: WinForms
  fullName: InnerLibs.WinForms
- uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  commentId: M:InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
  isExternal: true
  name: CastValueForControl(Object, Object)
  nameWithType: WinForms.CastValueForControl(Object, Object)
  fullName: InnerLibs.WinForms.CastValueForControl(System.Object, System.Object)
  spec.csharp:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.WinForms.CastValueForControl(System.Object@,System.Object)
    name: CastValueForControl
    nameWithType: WinForms.CastValueForControl
    fullName: InnerLibs.WinForms.CastValueForControl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
  isExternal: true
  name: ApplyToControls<T>(T, HtmlControl[])
  nameWithType: LINQExtensions.ApplyToControls<T>(T, HtmlControl[])
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>(T, System.Web.UI.HtmlControls.HtmlControl[])
  nameWithType.vb: LINQExtensions.ApplyToControls(Of T)(T, HtmlControl())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)(T, System.Web.UI.HtmlControls.HtmlControl())
  name.vb: ApplyToControls(Of T)(T, HtmlControl())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls<T>
    nameWithType: LINQExtensions.ApplyToControls<T>
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])
    name: ApplyToControls(Of T)
    nameWithType: LINQExtensions.ApplyToControls(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions
  commentId: T:InnerLibs.LINQ.LINQExtensions
  parent: InnerLibs.LINQ
  name: LINQExtensions
  nameWithType: LINQExtensions
  fullName: InnerLibs.LINQ.LINQExtensions
- uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  commentId: M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
  isExternal: true
  name: HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  nameWithType: LINQExtensions.HasSamePropertyValues<T>(T, T, Func<T, Object>[])
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>(T, T, System.Func<T, System.Object>[])
  nameWithType.vb: LINQExtensions.HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  fullName.vb: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)(T, T, System.Func(Of T, System.Object)())
  name.vb: HasSamePropertyValues(Of T)(T, T, Func(Of T, Object)())
  spec.csharp:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues<T>
    nameWithType: LINQExtensions.HasSamePropertyValues<T>
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])
    name: HasSamePropertyValues(Of T)
    nameWithType: LINQExtensions.HasSamePropertyValues(Of T)
    fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs
  commentId: N:InnerLibs
  name: InnerLibs
  nameWithType: InnerLibs
  fullName: InnerLibs
- uid: InnerLibs.LINQ.LINQExtensions.And*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.And
  name: And
  nameWithType: LINQExtensions.And
  fullName: InnerLibs.LINQ.LINQExtensions.And
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: InnerLibs.LINQ.LINQExtensions.Or*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.Or
  name: Or
  nameWithType: LINQExtensions.Or
  fullName: InnerLibs.LINQ.LINQExtensions.Or
- uid: InnerLibs.LINQ.LINQExtensions.ApplyToControls*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.ApplyToControls
  name: ApplyToControls
  nameWithType: LINQExtensions.ApplyToControls
  fullName: InnerLibs.LINQ.LINQExtensions.ApplyToControls
- uid: '{T}'
  commentId: '!:``0'
  definition: '``0'
  name: T
  nameWithType: T
  fullName: T
- uid: System.Web.UI.HtmlControls.HtmlControl[]
  commentId: T:System.Web.UI.HtmlControls.HtmlControl[]
  isExternal: true
  name: HtmlControl[]
  nameWithType: HtmlControl[]
  fullName: System.Web.UI.HtmlControls.HtmlControl[]
  nameWithType.vb: HtmlControl()
  fullName.vb: System.Web.UI.HtmlControls.HtmlControl()
  name.vb: HtmlControl()
  spec.csharp:
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Web.UI.HtmlControls.HtmlControl
    name: HtmlControl
    nameWithType: HtmlControl
    fullName: System.Web.UI.HtmlControls.HtmlControl
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '``0'
  name: T
  nameWithType: T
  fullName: T
- uid: InnerLibs.LINQ.LINQExtensions.ConvertGeneric*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.ConvertGeneric
  name: ConvertGeneric
  nameWithType: LINQExtensions.ConvertGeneric
  fullName: InnerLibs.LINQ.LINQExtensions.ConvertGeneric
- uid: System.Linq.Expressions.Expression{System.Func{{TParm},{TReturn}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TParm, TReturn>>
  nameWithType: Expression<Func<TParm, TReturn>>
  fullName: System.Linq.Expressions.Expression<System.Func<TParm, TReturn>>
  nameWithType.vb: Expression(Of Func(Of TParm, TReturn))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TParm, TReturn))
  name.vb: Expression(Of Func(Of TParm, TReturn))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParm
    nameWithType: TParm
    fullName: TParm
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReturn
    nameWithType: TReturn
    fullName: TReturn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParm
    nameWithType: TParm
    fullName: TParm
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReturn
    nameWithType: TReturn
    fullName: TReturn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TTargetParm},{TTargetReturn}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``2,``3}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TTargetParm, TTargetReturn>>
  nameWithType: Expression<Func<TTargetParm, TTargetReturn>>
  fullName: System.Linq.Expressions.Expression<System.Func<TTargetParm, TTargetReturn>>
  nameWithType.vb: Expression(Of Func(Of TTargetParm, TTargetReturn))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TTargetParm, TTargetReturn))
  name.vb: Expression(Of Func(Of TTargetParm, TTargetReturn))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TTargetParm
    nameWithType: TTargetParm
    fullName: TTargetParm
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTargetReturn
    nameWithType: TTargetReturn
    fullName: TTargetReturn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTargetParm
    nameWithType: TTargetParm
    fullName: TTargetParm
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTargetReturn
    nameWithType: TTargetReturn
    fullName: TTargetReturn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  isExternal: true
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: InnerLibs.LINQ.LINQExtensions.CreateExpression*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.CreateExpression
  name: CreateExpression
  nameWithType: LINQExtensions.CreateExpression
  fullName: InnerLibs.LINQ.LINQExtensions.CreateExpression
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Linq.Expressions.Expression{System.Func{{T},{T2}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, T2>>
  nameWithType: Expression<Func<T, T2>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, T2>>
  nameWithType.vb: Expression(Of Func(Of T, T2))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, T2))
  name.vb: Expression(Of Func(Of T, T2))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.DistinctBy*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.DistinctBy
  name: DistinctBy
  nameWithType: LINQExtensions.DistinctBy
  fullName: InnerLibs.LINQ.LINQExtensions.DistinctBy
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},{TKey}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<T, TKey>
  nameWithType: Func<T, TKey>
  fullName: System.Func<T, TKey>
  nameWithType.vb: Func(Of T, TKey)
  fullName.vb: System.Func(Of T, TKey)
  name.vb: Func(Of T, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},{TOrder}}
  commentId: T:System.Func{``0,``2}
  parent: System
  definition: System.Func`2
  name: Func<T, TOrder>
  nameWithType: Func<T, TOrder>
  fullName: System.Func<T, TOrder>
  nameWithType.vb: Func(Of T, TOrder)
  fullName.vb: System.Func(Of T, TOrder)
  name.vb: Func(Of T, TOrder)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOrder
    nameWithType: TOrder
    fullName: TOrder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOrder
    nameWithType: TOrder
    fullName: TOrder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{{T}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TKey}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, TKey>>
  nameWithType: Expression<Func<T, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TKey>>
  nameWithType.vb: Expression(Of Func(Of T, TKey))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TKey))
  name.vb: Expression(Of Func(Of T, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: InnerLibs.LINQ.LINQExtensions.ForEach*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.ForEach
  name: ForEach
  nameWithType: LINQExtensions.ForEach
  fullName: InnerLibs.LINQ.LINQExtensions.ForEach
- uid: System.Action{{T}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.GetByPrimaryKey*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.GetByPrimaryKey
  name: GetByPrimaryKey
  nameWithType: LINQExtensions.GetByPrimaryKey
  fullName: InnerLibs.LINQ.LINQExtensions.GetByPrimaryKey
- uid: System.Data.Linq.DataContext
  commentId: T:System.Data.Linq.DataContext
  parent: System.Data.Linq
  isExternal: true
  name: DataContext
  nameWithType: DataContext
  fullName: System.Data.Linq.DataContext
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Linq
  commentId: N:System.Data.Linq
  isExternal: true
  name: System.Data.Linq
  nameWithType: System.Data.Linq
  fullName: System.Data.Linq
- uid: InnerLibs.LINQ.LINQExtensions.GetByPrimaryKeys*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.GetByPrimaryKeys
  name: GetByPrimaryKeys
  nameWithType: LINQExtensions.GetByPrimaryKeys
  fullName: InnerLibs.LINQ.LINQExtensions.GetByPrimaryKeys
- uid: System.Object[]
  commentId: T:System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.GroupByPage*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.GroupByPage
  name: GroupByPage
  nameWithType: LINQExtensions.GroupByPage
  fullName: InnerLibs.LINQ.LINQExtensions.GroupByPage
- uid: System.Linq.IQueryable{{Tsource}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<Tsource>
  nameWithType: IQueryable<Tsource>
  fullName: System.Linq.IQueryable<Tsource>
  nameWithType.vb: IQueryable(Of Tsource)
  fullName.vb: System.Linq.IQueryable(Of Tsource)
  name.vb: IQueryable(Of Tsource)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Tsource
    nameWithType: Tsource
    fullName: Tsource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Tsource
    nameWithType: Tsource
    fullName: Tsource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{{Tsource}}}
  commentId: T:System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Int64, List<Tsource>>
  nameWithType: Dictionary<Int64, List<Tsource>>
  fullName: System.Collections.Generic.Dictionary<System.Int64, System.Collections.Generic.List<Tsource>>
  nameWithType.vb: Dictionary(Of Int64, List(Of Tsource))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Int64, System.Collections.Generic.List(Of Tsource))
  name.vb: Dictionary(Of Int64, List(Of Tsource))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Tsource
    nameWithType: Tsource
    fullName: Tsource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Tsource
    nameWithType: Tsource
    fullName: Tsource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{Tsource}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Tsource>
  nameWithType: IEnumerable<Tsource>
  fullName: System.Collections.Generic.IEnumerable<Tsource>
  nameWithType.vb: IEnumerable(Of Tsource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Tsource)
  name.vb: IEnumerable(Of Tsource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: Tsource
    nameWithType: Tsource
    fullName: Tsource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Tsource
    nameWithType: Tsource
    fullName: Tsource
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
  name: HasSamePropertyValues
  nameWithType: LINQExtensions.HasSamePropertyValues
  fullName: InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues
- uid: System.Func{{T},System.Object}[]
  commentId: T:System.Func{``0,System.Object}[]
  definition: System.Func{`0,System.Object}[]
  name: Func<T, Object>[]
  nameWithType: Func<T, Object>[]
  fullName: System.Func<T, System.Object>[]
  nameWithType.vb: Func(Of T, Object)()
  fullName.vb: System.Func(Of T, System.Object)()
  name.vb: Func(Of T, Object)()
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Func{`0,System.Object}[]
  commentId: T:System.Func{`0,System.Object}[]
  isExternal: true
  name: Func<T, Object>[]
  nameWithType: Func<T, Object>[]
  fullName: System.Func<T, System.Object>[]
  nameWithType.vb: Func(Of T, Object)()
  fullName.vb: System.Func(Of T, System.Object)()
  name.vb: Func(Of T, Object)()
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.LINQ.LINQExtensions.OrderBy*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.OrderBy
  name: OrderBy
  nameWithType: LINQExtensions.OrderBy
  fullName: InnerLibs.LINQ.LINQExtensions.OrderBy
- uid: System.String[]
  commentId: T:System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: InnerLibs.LINQ.LINQExtensions.OrderByLike*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.OrderByLike
  name: OrderByLike
  nameWithType: LINQExtensions.OrderByLike
  fullName: InnerLibs.LINQ.LINQExtensions.OrderByLike
- uid: System.Func{{T},System.String}
  commentId: T:System.Func{``0,System.String}
  parent: System
  definition: System.Func`2
  name: Func<T, String>
  nameWithType: Func<T, String>
  fullName: System.Func<T, System.String>
  nameWithType.vb: Func(Of T, String)
  fullName.vb: System.Func(Of T, System.String)
  name.vb: Func(Of T, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IOrderedEnumerable{{T}}
  commentId: T:System.Linq.IOrderedEnumerable{``0}
  parent: System.Linq
  definition: System.Linq.IOrderedEnumerable`1
  name: IOrderedEnumerable<T>
  nameWithType: IOrderedEnumerable<T>
  fullName: System.Linq.IOrderedEnumerable<T>
  nameWithType.vb: IOrderedEnumerable(Of T)
  fullName.vb: System.Linq.IOrderedEnumerable(Of T)
  name.vb: IOrderedEnumerable(Of T)
  spec.csharp:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IOrderedEnumerable`1
  commentId: T:System.Linq.IOrderedEnumerable`1
  isExternal: true
  name: IOrderedEnumerable<TElement>
  nameWithType: IOrderedEnumerable<TElement>
  fullName: System.Linq.IOrderedEnumerable<TElement>
  nameWithType.vb: IOrderedEnumerable(Of TElement)
  fullName.vb: System.Linq.IOrderedEnumerable(Of TElement)
  name.vb: IOrderedEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: InnerLibs.LINQ.LINQExtensions.OrderByRandom*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.OrderByRandom
  name: OrderByRandom
  nameWithType: LINQExtensions.OrderByRandom
  fullName: InnerLibs.LINQ.LINQExtensions.OrderByRandom
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Linq.IQueryable
  commentId: T:System.Linq.IQueryable
  isExternal: true
- uid: System.Linq.IOrderedQueryable{{T}}
  commentId: T:System.Linq.IOrderedQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IOrderedQueryable`1
  name: IOrderedQueryable<T>
  nameWithType: IOrderedQueryable<T>
  fullName: System.Linq.IOrderedQueryable<T>
  nameWithType.vb: IOrderedQueryable(Of T)
  fullName.vb: System.Linq.IOrderedQueryable(Of T)
  name.vb: IOrderedQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IOrderedQueryable`1
  commentId: T:System.Linq.IOrderedQueryable`1
  isExternal: true
  name: IOrderedQueryable<T>
  nameWithType: IOrderedQueryable<T>
  fullName: System.Linq.IOrderedQueryable<T>
  nameWithType.vb: IOrderedQueryable(Of T)
  fullName.vb: System.Linq.IOrderedQueryable(Of T)
  name.vb: IOrderedQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.Page*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.Page
  name: Page
  nameWithType: LINQExtensions.Page
  fullName: InnerLibs.LINQ.LINQExtensions.Page
- uid: System.Linq.IQueryable{{TSource}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TSource>
  nameWithType: IQueryable<TSource>
  fullName: System.Linq.IQueryable<TSource>
  nameWithType.vb: IQueryable(Of TSource)
  fullName.vb: System.Linq.IQueryable(Of TSource)
  name.vb: IQueryable(Of TSource)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.Search*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.Search
  name: Search
  nameWithType: LINQExtensions.Search
  fullName: InnerLibs.LINQ.LINQExtensions.Search
- uid: System.Linq.IOrderedQueryable{{ClassType}}
  commentId: T:System.Linq.IOrderedQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IOrderedQueryable`1
  name: IOrderedQueryable<ClassType>
  nameWithType: IOrderedQueryable<ClassType>
  fullName: System.Linq.IOrderedQueryable<ClassType>
  nameWithType.vb: IOrderedQueryable(Of ClassType)
  fullName.vb: System.Linq.IOrderedQueryable(Of ClassType)
  name.vb: IOrderedQueryable(Of ClassType)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ClassType
    nameWithType: ClassType
    fullName: ClassType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ClassType
    nameWithType: ClassType
    fullName: ClassType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{ClassType},System.String}}[]
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.String}}[]
  definition: System.Linq.Expressions.Expression{System.Func{``0,System.String}}[]
  name: Expression<Func<ClassType, String>>[]
  nameWithType: Expression<Func<ClassType, String>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<ClassType, System.String>>[]
  nameWithType.vb: Expression(Of Func(Of ClassType, String))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of ClassType, System.String))()
  name.vb: Expression(Of Func(Of ClassType, String))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ClassType
    nameWithType: ClassType
    fullName: ClassType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ClassType
    nameWithType: ClassType
    fullName: ClassType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Linq.Expressions.Expression{System.Func{``0,System.String}}[]
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.String}}[]
  isExternal: true
  name: Expression<Func<ClassType, String>>[]
  nameWithType: Expression<Func<ClassType, String>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<ClassType, System.String>>[]
  nameWithType.vb: Expression(Of Func(Of ClassType, String))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of ClassType, System.String))()
  name.vb: Expression(Of Func(Of ClassType, String))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ClassType
    nameWithType: ClassType
    fullName: ClassType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ClassType
    nameWithType: ClassType
    fullName: ClassType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InnerLibs.LINQ.LINQExtensions.SelectJoin*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.SelectJoin
  name: SelectJoin
  nameWithType: LINQExtensions.SelectJoin
  fullName: InnerLibs.LINQ.LINQExtensions.SelectJoin
- uid: System.Func{{TSource},System.String}
  commentId: T:System.Func{``0,System.String}
  parent: System
  definition: System.Func`2
  name: Func<TSource, String>
  nameWithType: Func<TSource, String>
  fullName: System.Func<TSource, System.String>
  nameWithType.vb: Func(Of TSource, String)
  fullName.vb: System.Func(Of TSource, System.String)
  name.vb: Func(Of TSource, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.SelectManyJoin*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.SelectManyJoin
  name: SelectManyJoin
  nameWithType: LINQExtensions.SelectManyJoin
  fullName: InnerLibs.LINQ.LINQExtensions.SelectManyJoin
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{System.String}}
  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{System.String}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, IEnumerable<String>>
  nameWithType: Func<TSource, IEnumerable<String>>
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<System.String>>
  nameWithType.vb: Func(Of TSource, IEnumerable(Of String))
  fullName.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Func(Of TSource, IEnumerable(Of String))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.TakeAndOrder*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.TakeAndOrder
  name: TakeAndOrder
  nameWithType: LINQExtensions.TakeAndOrder
  fullName: InnerLibs.LINQ.LINQExtensions.TakeAndOrder
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<T, Boolean>
  nameWithType: Func<T, Boolean>
  fullName: System.Func<T, System.Boolean>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, System.Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},{DefaultOrderType}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<T, DefaultOrderType>
  nameWithType: Func<T, DefaultOrderType>
  fullName: System.Func<T, DefaultOrderType>
  nameWithType.vb: Func(Of T, DefaultOrderType)
  fullName.vb: System.Func(Of T, DefaultOrderType)
  name.vb: Func(Of T, DefaultOrderType)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: DefaultOrderType
    nameWithType: DefaultOrderType
    fullName: DefaultOrderType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: DefaultOrderType
    nameWithType: DefaultOrderType
    fullName: DefaultOrderType
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.ThenBy*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.ThenBy
  name: ThenBy
  nameWithType: LINQExtensions.ThenBy
  fullName: InnerLibs.LINQ.LINQExtensions.ThenBy
- uid: InnerLibs.LINQ.LINQExtensions.ThenByLike*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.ThenByLike
  name: ThenByLike
  nameWithType: LINQExtensions.ThenByLike
  fullName: InnerLibs.LINQ.LINQExtensions.ThenByLike
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.String}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.String}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, String>>
  nameWithType: Expression<Func<T, String>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.String>>
  nameWithType.vb: Expression(Of Func(Of T, String))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.String))
  name.vb: Expression(Of Func(Of T, String))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.UpdateObjectFromDictionary*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.UpdateObjectFromDictionary
  name: UpdateObjectFromDictionary
  nameWithType: LINQExtensions.UpdateObjectFromDictionary
  fullName: InnerLibs.LINQ.LINQExtensions.UpdateObjectFromDictionary
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: InnerLibs.LINQ.LINQExtensions.UpdateObjectFromRequest*
  commentId: Overload:InnerLibs.LINQ.LINQExtensions.UpdateObjectFromRequest
  name: UpdateObjectFromRequest
  nameWithType: LINQExtensions.UpdateObjectFromRequest
  fullName: InnerLibs.LINQ.LINQExtensions.UpdateObjectFromRequest
- uid: System.Web.HttpRequest
  commentId: T:System.Web.HttpRequest
  parent: System.Web
  isExternal: true
  name: HttpRequest
  nameWithType: HttpRequest
  fullName: System.Web.HttpRequest
- uid: System.Web
  commentId: N:System.Web
  isExternal: true
  name: System.Web
  nameWithType: System.Web
  fullName: System.Web
