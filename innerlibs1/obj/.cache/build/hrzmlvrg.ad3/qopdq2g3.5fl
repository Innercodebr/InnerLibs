<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class LINQExtensions
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class LINQExtensions
   ">
    <meta name="generator" content="docfx 2.37.2.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="InnerLibs.LINQ.LINQExtensions">
  
  
  <h1 id="InnerLibs_LINQ_LINQExtensions" data-uid="InnerLibs.LINQ.LINQExtensions" class="text-break">Class LINQExtensions
  </h1>
  <div class="markdown level0 summary"></div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">LINQExtensions</span></div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="InnerLibs.LINQ.html">InnerLibs.LINQ</a></h6>
  <h6><strong>Assembly</strong>: InnerLibs.dll</h6>
  <h5 id="InnerLibs_LINQ_LINQExtensions_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public class LINQExtensions</code></pre>
  </div>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_And_" data-uid="InnerLibs.LINQ.LINQExtensions.And*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_And__1_System_Linq_Expressions_Expression_System_Func___0_System_Boolean___System_Linq_Expressions_Expression_System_Func___0_System_Boolean___" data-uid="InnerLibs.LINQ.LINQExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">And&lt;T&gt;(Expression&lt;Func&lt;T, Boolean&gt;&gt;, Expression&lt;Func&lt;T, Boolean&gt;&gt;)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static Expression&lt;Func&lt;T, bool&gt;&gt; And&lt;T&gt;(this Expression&lt;Func&lt;T, bool&gt;&gt; expr1, Expression&lt;Func&lt;T, bool&gt;&gt; expr2)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;T, <span class="xref">System.Boolean</span>&gt;&gt;</td>
        <td><span class="parametername">expr1</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;T, <span class="xref">System.Boolean</span>&gt;&gt;</td>
        <td><span class="parametername">expr2</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;T, <span class="xref">System.Boolean</span>&gt;&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_ApplyToControls_" data-uid="InnerLibs.LINQ.LINQExtensions.ApplyToControls*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_ApplyToControls__1___0_System_Web_UI_HtmlControls_HtmlControl___" data-uid="InnerLibs.LINQ.LINQExtensions.ApplyToControls``1(``0,System.Web.UI.HtmlControls.HtmlControl[])">ApplyToControls&lt;T&gt;(T, HtmlControl[])</h4>
  <div class="markdown level1 summary"><p>Aplica os valores encontrados nas propriedades de uma entidade em controles com mesmo ID
das colunas. Se os conroles não existirem no resultado eles serão ignorados.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static HtmlControl[] ApplyToControls&lt;T&gt;(this T Obj, params HtmlControl[] Controls)
    where T : class</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><span class="parametername">Obj</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Web.UI.HtmlControls.HtmlControl</span>[]</td>
        <td><span class="parametername">Controls</span></td>
        <td><p>Controles que serão Manipulados</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Web.UI.HtmlControls.HtmlControl</span>[]</td>
        <td><p>Um array contendo os inputs manipulados</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_ConvertGeneric_" data-uid="InnerLibs.LINQ.LINQExtensions.ConvertGeneric*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_ConvertGeneric__4_System_Linq_Expressions_Expression_System_Func___0___1___" data-uid="InnerLibs.LINQ.LINQExtensions.ConvertGeneric``4(System.Linq.Expressions.Expression{System.Func{``0,``1}})">ConvertGeneric&lt;TParm, TReturn, TTargetParm, TTargetReturn&gt;(Expression&lt;Func&lt;TParm, TReturn&gt;&gt;)</h4>
  <div class="markdown level1 summary"><p>Retorna uma express~zo genérica a partir de uma expressão tipada</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static Expression&lt;Func&lt;TTargetParm, TTargetReturn&gt;&gt; ConvertGeneric&lt;TParm, TReturn, TTargetParm, TTargetReturn&gt;(Expression&lt;Func&lt;TParm, TReturn&gt;&gt; input)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;TParm, TReturn&gt;&gt;</td>
        <td><span class="parametername">input</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;TTargetParm, TTargetReturn&gt;&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">TParm</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="parametername">TReturn</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="parametername">TTargetParm</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="parametername">TTargetReturn</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_CreateExpression_" data-uid="InnerLibs.LINQ.LINQExtensions.CreateExpression*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_CreateExpression__1_System_Boolean_" data-uid="InnerLibs.LINQ.LINQExtensions.CreateExpression``1(System.Boolean)">CreateExpression&lt;T&gt;(Boolean)</h4>
  <div class="markdown level1 summary"><p>Cria uma <span class="xref">System.Linq.Expressions.Expression</span> condicional a partir de um valor <span class="xref">System.Boolean</span></p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static Expression&lt;Func&lt;T, bool&gt;&gt; CreateExpression&lt;T&gt;(bool DefaultReturnValue = true)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">DefaultReturnValue</span></td>
        <td><p>Valor padrão</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;T, <span class="xref">System.Boolean</span>&gt;&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td><p>Tipo do objeto</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_CreateExpression_" data-uid="InnerLibs.LINQ.LINQExtensions.CreateExpression*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_CreateExpression__1_System_Linq_Expressions_Expression_System_Func___0_System_Boolean___" data-uid="InnerLibs.LINQ.LINQExtensions.CreateExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">CreateExpression&lt;T&gt;(Expression&lt;Func&lt;T, Boolean&gt;&gt;)</h4>
  <div class="markdown level1 summary"><p>Cria uma <span class="xref">System.Linq.Expressions.Expression</span> condicional a partir de uma outra expressão</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static Expression&lt;Func&lt;T, bool&gt;&gt; CreateExpression&lt;T&gt;(Expression&lt;Func&lt;T, bool&gt;&gt; predicate)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;T, <span class="xref">System.Boolean</span>&gt;&gt;</td>
        <td><span class="parametername">predicate</span></td>
        <td><p>Valor padrão</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;T, <span class="xref">System.Boolean</span>&gt;&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td><p>Tipo do objeto</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_CreateExpression_" data-uid="InnerLibs.LINQ.LINQExtensions.CreateExpression*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_CreateExpression__2_System_Linq_Expressions_Expression_System_Func___0___1___" data-uid="InnerLibs.LINQ.LINQExtensions.CreateExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">CreateExpression&lt;T, T2&gt;(Expression&lt;Func&lt;T, T2&gt;&gt;)</h4>
  <div class="markdown level1 summary"><p>Cria uma Expression a partir de uma outra Expression</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static Expression&lt;Func&lt;T, T2&gt;&gt; CreateExpression&lt;T, T2&gt;(Expression&lt;Func&lt;T, T2&gt;&gt; predicate)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;T, T2&gt;&gt;</td>
        <td><span class="parametername">predicate</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;T, T2&gt;&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="parametername">T2</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_DistinctBy_" data-uid="InnerLibs.LINQ.LINQExtensions.DistinctBy*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_DistinctBy__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__" data-uid="InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">DistinctBy&lt;T, TKey&gt;(IEnumerable&lt;T&gt;, Func&lt;T, TKey&gt;)</h4>
  <div class="markdown level1 summary"><p>Distingui os items de uma lista a partir de uma propriedade da classe</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IEnumerable&lt;T&gt; DistinctBy&lt;T, TKey&gt;(this IEnumerable&lt;T&gt; Items, Func&lt;T, TKey&gt; Property)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td><span class="parametername">Items</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Func</span>&lt;T, TKey&gt;</td>
        <td><span class="parametername">Property</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td><p>Tipo da classe</p>
</td>
      </tr>
      <tr>
        <td><span class="parametername">TKey</span></td>
        <td><p>Tipo da propriedade</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_DistinctBy_" data-uid="InnerLibs.LINQ.LINQExtensions.DistinctBy*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_DistinctBy__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___" data-uid="InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">DistinctBy&lt;T, TKey&gt;(IQueryable&lt;T&gt;, Expression&lt;Func&lt;T, TKey&gt;&gt;)</h4>
  <div class="markdown level1 summary"><p>Distingui os items de uma lista a partir de uma propriedade da classe</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IQueryable&lt;T&gt; DistinctBy&lt;T, TKey&gt;(this IQueryable&lt;T&gt; Items, Expression&lt;Func&lt;T, TKey&gt;&gt; Property)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IQueryable</span>&lt;T&gt;</td>
        <td><span class="parametername">Items</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;T, TKey&gt;&gt;</td>
        <td><span class="parametername">Property</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IQueryable</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td><p>Tipo da classe</p>
</td>
      </tr>
      <tr>
        <td><span class="parametername">TKey</span></td>
        <td><p>Tipo da propriedade</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_DistinctBy_" data-uid="InnerLibs.LINQ.LINQExtensions.DistinctBy*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_DistinctBy__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__System_Boolean_" data-uid="InnerLibs.LINQ.LINQExtensions.DistinctBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Boolean)">DistinctBy&lt;T, TKey, TOrder&gt;(IEnumerable&lt;T&gt;, Func&lt;T, TKey&gt;, Func&lt;T, TOrder&gt;, Boolean)</h4>
  <div class="markdown level1 summary"><p>Distingui os items de uma lista a partir de uma propriedade da classe</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IEnumerable&lt;T&gt; DistinctBy&lt;T, TKey, TOrder&gt;(this IEnumerable&lt;T&gt; Items, Func&lt;T, TKey&gt; Property, Func&lt;T, TOrder&gt; OrderBy, bool Descending = false)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td><span class="parametername">Items</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Func</span>&lt;T, TKey&gt;</td>
        <td><span class="parametername">Property</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Func</span>&lt;T, TOrder&gt;</td>
        <td><span class="parametername">OrderBy</span></td>
        <td><p>Criterio que indica qual o objeto que deverá ser preservado na lista se encontrado mais de um</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">Descending</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td><p>Tipo da classe</p>
</td>
      </tr>
      <tr>
        <td><span class="parametername">TKey</span></td>
        <td><p>Tipo da propriedade</p>
</td>
      </tr>
      <tr>
        <td><span class="parametername">TOrder</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_ForEach_" data-uid="InnerLibs.LINQ.LINQExtensions.ForEach*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_ForEach__1_System_Collections_Generic_IEnumerable___0__System_Action___0__" data-uid="InnerLibs.LINQ.LINQExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">ForEach&lt;T&gt;(IEnumerable&lt;T&gt;, Action&lt;T&gt;)</h4>
  <div class="markdown level1 summary"><p>Realiza uma acão para cada item de uma lista.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IEnumerable&lt;T&gt; ForEach&lt;T&gt;(this IEnumerable&lt;T&gt; Items, Action&lt;T&gt; Action)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td><span class="parametername">Items</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Action</span>&lt;T&gt;</td>
        <td><span class="parametername">Action</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_GetByPrimaryKey_" data-uid="InnerLibs.LINQ.LINQExtensions.GetByPrimaryKey*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_GetByPrimaryKey__1_System_Data_Linq_DataContext_System_Object_System_Boolean_System_Boolean__" data-uid="InnerLibs.LINQ.LINQExtensions.GetByPrimaryKey``1(System.Data.Linq.DataContext,System.Object,System.Boolean,System.Boolean@)">GetByPrimaryKey&lt;T&gt;(DataContext, Object, Boolean, ref Boolean)</h4>
  <div class="markdown level1 summary"><p>Retorna um objeto de uma tabela especifica de acordo com uma chave primária.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static T GetByPrimaryKey&lt;T&gt;(this DataContext Context, object ID, bool CreateIfNotExists = false, ref bool IsNew = false)
    where T : class</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Data.Linq.DataContext</span></td>
        <td><span class="parametername">Context</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Object</span></td>
        <td><span class="parametername">ID</span></td>
        <td><p>Valor da chave primária</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">CreateIfNotExists</span></td>
        <td><p>Se true, cria o objeto e coloca o status de INSERT pendente para este</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">IsNew</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td><p>Tipo do objeto</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_GetByPrimaryKeys_" data-uid="InnerLibs.LINQ.LINQExtensions.GetByPrimaryKeys*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_GetByPrimaryKeys__1_System_Data_Linq_DataContext_System_Object___" data-uid="InnerLibs.LINQ.LINQExtensions.GetByPrimaryKeys``1(System.Data.Linq.DataContext,System.Object[])">GetByPrimaryKeys&lt;T&gt;(DataContext, Object[])</h4>
  <div class="markdown level1 summary"><p>Retorna um objeto de uma tabela especifica de acordo com sua chave primaria. Pode
opcionalmente criar o objeto se o mesmo não existir</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IEnumerable&lt;T&gt; GetByPrimaryKeys&lt;T&gt;(this DataContext Context, params object[] IDs)
    where T : class</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Data.Linq.DataContext</span></td>
        <td><span class="parametername">Context</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Object</span>[]</td>
        <td><span class="parametername">IDs</span></td>
        <td><p>Valor da chave primárias</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td><p>Tipo do objeto</p>
</td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_GroupByPage_" data-uid="InnerLibs.LINQ.LINQExtensions.GroupByPage*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_GroupByPage__1_System_Collections_Generic_IEnumerable___0__System_Int32_" data-uid="InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">GroupByPage&lt;Tsource&gt;(IEnumerable&lt;Tsource&gt;, Int32)</h4>
  <div class="markdown level1 summary"><p>Criar um <span class="xref">System.Collections.Generic.Dictionary&lt;TKey, TValue&gt;</span> agrupando os itens em páginas de um tamanho especifico</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static Dictionary&lt;long, List&lt;Tsource&gt;&gt; GroupByPage&lt;Tsource&gt;(this IEnumerable&lt;Tsource&gt; source, int PageSize)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;Tsource&gt;</td>
        <td><span class="parametername">source</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td><span class="parametername">PageSize</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.Int64</span>, <span class="xref">System.Collections.Generic.List</span>&lt;Tsource&gt;&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">Tsource</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_GroupByPage_" data-uid="InnerLibs.LINQ.LINQExtensions.GroupByPage*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_GroupByPage__1_System_Linq_IQueryable___0__System_Int32_" data-uid="InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Linq.IQueryable{``0},System.Int32)">GroupByPage&lt;Tsource&gt;(IQueryable&lt;Tsource&gt;, Int32)</h4>
  <div class="markdown level1 summary"><p>Criar um <span class="xref">System.Collections.Generic.Dictionary&lt;TKey, TValue&gt;</span> agrupando os itens em páginas de um tamanho especifico</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static Dictionary&lt;long, List&lt;Tsource&gt;&gt; GroupByPage&lt;Tsource&gt;(this IQueryable&lt;Tsource&gt; source, int PageSize)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IQueryable</span>&lt;Tsource&gt;</td>
        <td><span class="parametername">source</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td><span class="parametername">PageSize</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.Dictionary</span>&lt;<span class="xref">System.Int64</span>, <span class="xref">System.Collections.Generic.List</span>&lt;Tsource&gt;&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">Tsource</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_HasSamePropertyValues_" data-uid="InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_HasSamePropertyValues__1___0___0_System_Func___0_System_Object____" data-uid="InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])">HasSamePropertyValues&lt;T&gt;(T, T, Func&lt;T, Object&gt;[])</h4>
  <div class="markdown level1 summary"><p>Verifica se uma instancia de uma classe possui propriedades especificas com valores igual
as de outra instancia da mesma classe</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static object HasSamePropertyValues&lt;T&gt;(this T Obj1, T Obj2, params Func&lt;T, object&gt;[] Properties)
    where T : class</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><span class="parametername">Obj1</span></td>
        <td><p>Instancia 1</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">T</span></td>
        <td><span class="parametername">Obj2</span></td>
        <td><p>Instancia 2</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Func</span>&lt;T, <span class="xref">System.Object</span>&gt;[]</td>
        <td><span class="parametername">Properties</span></td>
        <td><p>Propriedades</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Object</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_Or_" data-uid="InnerLibs.LINQ.LINQExtensions.Or*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_Or__1_System_Linq_Expressions_Expression_System_Func___0_System_Boolean___System_Linq_Expressions_Expression_System_Func___0_System_Boolean___" data-uid="InnerLibs.LINQ.LINQExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">Or&lt;T&gt;(Expression&lt;Func&lt;T, Boolean&gt;&gt;, Expression&lt;Func&lt;T, Boolean&gt;&gt;)</h4>
  <div class="markdown level1 summary"><p>Concatena uma expressão com outra usando o operador OR (||)</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static Expression&lt;Func&lt;T, bool&gt;&gt; Or&lt;T&gt;(this Expression&lt;Func&lt;T, bool&gt;&gt; expr1, Expression&lt;Func&lt;T, bool&gt;&gt; expr2)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;T, <span class="xref">System.Boolean</span>&gt;&gt;</td>
        <td><span class="parametername">expr1</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;T, <span class="xref">System.Boolean</span>&gt;&gt;</td>
        <td><span class="parametername">expr2</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;T, <span class="xref">System.Boolean</span>&gt;&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_OrderBy_" data-uid="InnerLibs.LINQ.LINQExtensions.OrderBy*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_OrderBy__1_System_Linq_IQueryable___0__System_String___System_Boolean_" data-uid="InnerLibs.LINQ.LINQExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String[],System.Boolean)">OrderBy&lt;T&gt;(IQueryable&lt;T&gt;, String[], Boolean)</h4>
  <div class="markdown level1 summary"><p>Ordena um <span class="xref">System.Linq.IQueryable&lt;T&gt;</span> a partir do nome de uma ou mais propriedades</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static object OrderBy&lt;T&gt;(this IQueryable&lt;T&gt; source, string[] SortProperty, bool Ascending = true)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IQueryable</span>&lt;T&gt;</td>
        <td><span class="parametername">source</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><span class="parametername">SortProperty</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">Ascending</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Object</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_OrderByLike_" data-uid="InnerLibs.LINQ.LINQExtensions.OrderByLike*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_OrderByLike__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_String__System_Boolean_System_String___" data-uid="InnerLibs.LINQ.LINQExtensions.OrderByLike``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])">OrderByLike&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, String&gt;, Boolean, String[])</h4>
  <div class="markdown level1 summary"><p>Orderna uma lista a partir da aproximaçao de um deerminado campo com uma string</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IOrderedEnumerable&lt;T&gt; OrderByLike&lt;T&gt;(this IEnumerable&lt;T&gt; items, Func&lt;T, string&gt; PropertySelector, bool Ascending, params string[] Searches)
    where T : class</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td><span class="parametername">items</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Func</span>&lt;T, <span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">PropertySelector</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">Ascending</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><span class="parametername">Searches</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IOrderedEnumerable</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_OrderByLike_" data-uid="InnerLibs.LINQ.LINQExtensions.OrderByLike*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_OrderByLike__1_System_Linq_IQueryable___0__System_String___System_String_System_Boolean_" data-uid="InnerLibs.LINQ.LINQExtensions.OrderByLike``1(System.Linq.IQueryable{``0},System.String[],System.String,System.Boolean)">OrderByLike&lt;T&gt;(IQueryable&lt;T&gt;, String[], String, Boolean)</h4>
  <div class="markdown level1 summary"><p>Ordena um <span class="xref">System.Collections.Generic.IEnumerable&lt;T&gt;</span> a partir da aproximaçao de uma ou mais
<span class="xref">System.String</span> com o valor de um determinado campo</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static object OrderByLike&lt;T&gt;(this IQueryable&lt;T&gt; items, string[] Searches, string SortProperty, bool Ascending = true)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IQueryable</span>&lt;T&gt;</td>
        <td><span class="parametername">items</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><span class="parametername">Searches</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">SortProperty</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">Ascending</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Object</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_OrderByRandom_" data-uid="InnerLibs.LINQ.LINQExtensions.OrderByRandom*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_OrderByRandom__1_System_Collections_Generic_IEnumerable___0__" data-uid="InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Collections.Generic.IEnumerable{``0})">OrderByRandom&lt;T&gt;(IEnumerable&lt;T&gt;)</h4>
  <div class="markdown level1 summary"><p>Randomiza a ordem de um <span class="xref">System.Collections.IEnumerable</span></p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IOrderedEnumerable&lt;T&gt; OrderByRandom&lt;T&gt;(this IEnumerable&lt;T&gt; items)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td><span class="parametername">items</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IOrderedEnumerable</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_OrderByRandom_" data-uid="InnerLibs.LINQ.LINQExtensions.OrderByRandom*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_OrderByRandom__1_System_Linq_IQueryable___0__" data-uid="InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Linq.IQueryable{``0})">OrderByRandom&lt;T&gt;(IQueryable&lt;T&gt;)</h4>
  <div class="markdown level1 summary"><p>Randomiza a ordem de um <span class="xref">System.Linq.IQueryable</span></p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IOrderedQueryable&lt;T&gt; OrderByRandom&lt;T&gt;(this IQueryable&lt;T&gt; items)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IQueryable</span>&lt;T&gt;</td>
        <td><span class="parametername">items</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IOrderedQueryable</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_Page_" data-uid="InnerLibs.LINQ.LINQExtensions.Page*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_Page__1_System_Collections_Generic_IEnumerable___0__System_Int32_System_Int32_" data-uid="InnerLibs.LINQ.LINQExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">Page&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Int32, Int32)</h4>
  <div class="markdown level1 summary"><p>Reduz um <span class="xref">System.Collections.IEnumerable</span> em uma página especifica</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IEnumerable&lt;TSource&gt; Page&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; Source, int PageNumber, int PageSize)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;TSource&gt;</td>
        <td><span class="parametername">Source</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td><span class="parametername">PageNumber</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td><span class="parametername">PageSize</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;TSource&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">TSource</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_Page_" data-uid="InnerLibs.LINQ.LINQExtensions.Page*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_Page__1_System_Linq_IQueryable___0__System_Int32_System_Int32_" data-uid="InnerLibs.LINQ.LINQExtensions.Page``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">Page&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Int32, Int32)</h4>
  <div class="markdown level1 summary"><p>Reduz um <span class="xref">System.Linq.IQueryable</span> em uma página especifica</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IQueryable&lt;TSource&gt; Page&lt;TSource&gt;(this IQueryable&lt;TSource&gt; Source, int PageNumber, int PageSize)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IQueryable</span>&lt;TSource&gt;</td>
        <td><span class="parametername">Source</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td><span class="parametername">PageNumber</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td><span class="parametername">PageSize</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IQueryable</span>&lt;TSource&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">TSource</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_Search_" data-uid="InnerLibs.LINQ.LINQExtensions.Search*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_Search__1_System_Data_Linq_DataContext_System_String_System_String___" data-uid="InnerLibs.LINQ.LINQExtensions.Search``1(System.Data.Linq.DataContext,System.String,System.String[])">Search&lt;ClassType&gt;(DataContext, String, String[])</h4>
  <div class="markdown level1 summary"><p>Retorna um <span class="xref">System.Linq.IQueryable&lt;T&gt;</span> procurando em varios campos diferentes de uma entidade</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IOrderedQueryable&lt;ClassType&gt; Search&lt;ClassType&gt;(this DataContext Context, string SearchTerm, params string[] Properties)
    where ClassType : class</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Data.Linq.DataContext</span></td>
        <td><span class="parametername">Context</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">SearchTerm</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><span class="parametername">Properties</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IOrderedQueryable</span>&lt;ClassType&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">ClassType</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_Search_" data-uid="InnerLibs.LINQ.LINQExtensions.Search*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_Search__1_System_Data_Linq_DataContext_System_String___System_Linq_Expressions_Expression_System_Func___0_System_String_____" data-uid="InnerLibs.LINQ.LINQExtensions.Search``1(System.Data.Linq.DataContext,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.String}}[])">Search&lt;ClassType&gt;(DataContext, String[], Expression&lt;Func&lt;ClassType, String&gt;&gt;[])</h4>
  <div class="markdown level1 summary"><p>Retorna um <span class="xref">System.Linq.IQueryable&lt;T&gt;</span> procurando em varios campos diferentes de uma entidade</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IOrderedQueryable&lt;ClassType&gt; Search&lt;ClassType&gt;(this DataContext Context, string[] SearchTerms, params Expression&lt;Func&lt;ClassType, string&gt;&gt;[] Properties)
    where ClassType : class</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Data.Linq.DataContext</span></td>
        <td><span class="parametername">Context</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><span class="parametername">SearchTerms</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;ClassType, <span class="xref">System.String</span>&gt;&gt;[]</td>
        <td><span class="parametername">Properties</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IOrderedQueryable</span>&lt;ClassType&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">ClassType</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_Search_" data-uid="InnerLibs.LINQ.LINQExtensions.Search*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_Search__1_System_Data_Linq_DataContext_System_String___System_String___" data-uid="InnerLibs.LINQ.LINQExtensions.Search``1(System.Data.Linq.DataContext,System.String[],System.String[])">Search&lt;ClassType&gt;(DataContext, String[], String[])</h4>
  <div class="markdown level1 summary"><p>Retorna um <span class="xref">System.Linq.IQueryable&lt;T&gt;</span> procurando em varios campos diferentes de uma entidade</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IOrderedQueryable&lt;ClassType&gt; Search&lt;ClassType&gt;(this DataContext Context, string[] SearchTerms, params string[] Properties)
    where ClassType : class</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Data.Linq.DataContext</span></td>
        <td><span class="parametername">Context</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><span class="parametername">SearchTerms</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><span class="parametername">Properties</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IOrderedQueryable</span>&lt;ClassType&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">ClassType</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_SelectJoin_" data-uid="InnerLibs.LINQ.LINQExtensions.SelectJoin*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_SelectJoin__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_String__System_String_" data-uid="InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">SelectJoin&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, String&gt;, String)</h4>
  <div class="markdown level1 summary"><p>Seleciona e une em uma unica string varios elementos</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static string SelectJoin&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; Source, Func&lt;TSource, string&gt; Selector = null, string Separator = &quot;;&quot;)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;TSource&gt;</td>
        <td><span class="parametername">Source</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Func</span>&lt;TSource, <span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">Selector</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">Separator</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">TSource</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_SelectJoin_" data-uid="InnerLibs.LINQ.LINQExtensions.SelectJoin*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_SelectJoin__1_System_Linq_IQueryable___0__System_Func___0_System_String__System_String_" data-uid="InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Linq.IQueryable{``0},System.Func{``0,System.String},System.String)">SelectJoin&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Func&lt;TSource, String&gt;, String)</h4>
  <div class="markdown level1 summary"><p>Seleciona e une em uma unica string varios elementos</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static string SelectJoin&lt;TSource&gt;(this IQueryable&lt;TSource&gt; Source, Func&lt;TSource, string&gt; Selector = null, string Separator = &quot;;&quot;)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IQueryable</span>&lt;TSource&gt;</td>
        <td><span class="parametername">Source</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Func</span>&lt;TSource, <span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">Selector</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">Separator</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">TSource</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_SelectManyJoin_" data-uid="InnerLibs.LINQ.LINQExtensions.SelectManyJoin*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_SelectManyJoin__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Collections_Generic_IEnumerable_System_String___System_String_" data-uid="InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)">SelectManyJoin&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, IEnumerable&lt;String&gt;&gt;, String)</h4>
  <div class="markdown level1 summary"><p>Seleciona e une em uma unica string varios elementos enumeraveis</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static string SelectManyJoin&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; Source, Func&lt;TSource, IEnumerable&lt;string&gt;&gt; Selector = null, string Separator = &quot;;&quot;)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;TSource&gt;</td>
        <td><span class="parametername">Source</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Func</span>&lt;TSource, <span class="xref">System.Collections.Generic.IEnumerable</span>&lt;<span class="xref">System.String</span>&gt;&gt;</td>
        <td><span class="parametername">Selector</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">Separator</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">TSource</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_SelectManyJoin_" data-uid="InnerLibs.LINQ.LINQExtensions.SelectManyJoin*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_SelectManyJoin__1_System_Linq_IQueryable___0__System_Func___0_System_Collections_Generic_IEnumerable_System_String___System_String_" data-uid="InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Linq.IQueryable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)">SelectManyJoin&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Func&lt;TSource, IEnumerable&lt;String&gt;&gt;, String)</h4>
  <div class="markdown level1 summary"><p>Seleciona e une em uma unica string varios elementos enumeraveis</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static string SelectManyJoin&lt;TSource&gt;(this IQueryable&lt;TSource&gt; Source, Func&lt;TSource, IEnumerable&lt;string&gt;&gt; Selector = null, string Separator = &quot;;&quot;)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IQueryable</span>&lt;TSource&gt;</td>
        <td><span class="parametername">Source</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Func</span>&lt;TSource, <span class="xref">System.Collections.Generic.IEnumerable</span>&lt;<span class="xref">System.String</span>&gt;&gt;</td>
        <td><span class="parametername">Selector</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">Separator</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">TSource</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_TakeAndOrder_" data-uid="InnerLibs.LINQ.LINQExtensions.TakeAndOrder*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_TakeAndOrder__2_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__System_Func___0___1__" data-uid="InnerLibs.LINQ.LINQExtensions.TakeAndOrder``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})">TakeAndOrder&lt;T, DefaultOrderType&gt;(IEnumerable&lt;T&gt;, Func&lt;T, Boolean&gt;, Func&lt;T, DefaultOrderType&gt;)</h4>
  <div class="markdown level1 summary"><p>Ordena um <span class="xref">System.Collections.IEnumerable</span> priorizando valores especificos a uma condição no
inicio da coleção e então segue uma ordem padrão para os outros.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IEnumerable&lt;T&gt; TakeAndOrder&lt;T, DefaultOrderType&gt;(this IEnumerable&lt;T&gt; items, Func&lt;T, bool&gt; Priority, Func&lt;T, DefaultOrderType&gt; DefaultOrder = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td><span class="parametername">items</span></td>
        <td><p>colecao</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Func</span>&lt;T, <span class="xref">System.Boolean</span>&gt;</td>
        <td><span class="parametername">Priority</span></td>
        <td><p>Seletor que define a prioridade</p>
</td>
      </tr>
      <tr>
        <td><span class="xref">System.Func</span>&lt;T, DefaultOrderType&gt;</td>
        <td><span class="parametername">DefaultOrder</span></td>
        <td><p>ordenacao padrao para os outros itens</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="parametername">DefaultOrderType</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_ThenBy_" data-uid="InnerLibs.LINQ.LINQExtensions.ThenBy*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_ThenBy__1_System_Linq_IOrderedQueryable___0__System_String___System_Boolean_" data-uid="InnerLibs.LINQ.LINQExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String[],System.Boolean)">ThenBy&lt;T&gt;(IOrderedQueryable&lt;T&gt;, String[], Boolean)</h4>
  <div class="markdown level1 summary"><p>Ordena um <span class="xref">System.Linq.IQueryable&lt;T&gt;</span> a partir do nome de uma ou mais propriedades</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IOrderedQueryable&lt;T&gt; ThenBy&lt;T&gt;(this IOrderedQueryable&lt;T&gt; source, string[] SortProperty, bool Ascending = true)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IOrderedQueryable</span>&lt;T&gt;</td>
        <td><span class="parametername">source</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><span class="parametername">SortProperty</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">Ascending</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IOrderedQueryable</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_ThenByLike_" data-uid="InnerLibs.LINQ.LINQExtensions.ThenByLike*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_ThenByLike__1_System_Linq_IOrderedEnumerable___0__System_Func___0_System_String__System_Boolean_System_String___" data-uid="InnerLibs.LINQ.LINQExtensions.ThenByLike``1(System.Linq.IOrderedEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])">ThenByLike&lt;T&gt;(IOrderedEnumerable&lt;T&gt;, Func&lt;T, String&gt;, Boolean, String[])</h4>
  <div class="markdown level1 summary"><p>Ordena um <span class="xref">System.Collections.Generic.IEnumerable&lt;T&gt;</span> a partir da aproximaçao de uma ou mais
<span class="xref">System.String</span> com o valor de um determinado campo</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IOrderedEnumerable&lt;T&gt; ThenByLike&lt;T&gt;(this IOrderedEnumerable&lt;T&gt; items, Func&lt;T, string&gt; PropertySelector, bool Ascending, params string[] Searches)
    where T : class</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IOrderedEnumerable</span>&lt;T&gt;</td>
        <td><span class="parametername">items</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Func</span>&lt;T, <span class="xref">System.String</span>&gt;</td>
        <td><span class="parametername">PropertySelector</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">Ascending</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><span class="parametername">Searches</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IOrderedEnumerable</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_ThenByLike_" data-uid="InnerLibs.LINQ.LINQExtensions.ThenByLike*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_ThenByLike__1_System_Linq_IOrderedQueryable___0__System_String___System_Linq_Expressions_Expression_System_Func___0_System_String___System_Boolean_" data-uid="InnerLibs.LINQ.LINQExtensions.ThenByLike``1(System.Linq.IOrderedQueryable{``0},System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Boolean)">ThenByLike&lt;T&gt;(IOrderedQueryable&lt;T&gt;, String[], Expression&lt;Func&lt;T, String&gt;&gt;, Boolean)</h4>
  <div class="markdown level1 summary"><p>Ordena um <span class="xref">System.Collections.Generic.IEnumerable&lt;T&gt;</span> a partir da aproximaçao de uma ou mais
<span class="xref">System.String</span> com o valor de um determinado campo</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IOrderedQueryable&lt;T&gt; ThenByLike&lt;T&gt;(this IOrderedQueryable&lt;T&gt; items, string[] Searches, Expression&lt;Func&lt;T, string&gt;&gt; SortProperty, bool Ascending = true)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IOrderedQueryable</span>&lt;T&gt;</td>
        <td><span class="parametername">items</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><span class="parametername">Searches</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Linq.Expressions.Expression</span>&lt;<span class="xref">System.Func</span>&lt;T, <span class="xref">System.String</span>&gt;&gt;</td>
        <td><span class="parametername">SortProperty</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">Ascending</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IOrderedQueryable</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_ThenByLike_" data-uid="InnerLibs.LINQ.LINQExtensions.ThenByLike*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_ThenByLike__1_System_Linq_IOrderedQueryable___0__System_String___System_String_System_Boolean_" data-uid="InnerLibs.LINQ.LINQExtensions.ThenByLike``1(System.Linq.IOrderedQueryable{``0},System.String[],System.String,System.Boolean)">ThenByLike&lt;T&gt;(IOrderedQueryable&lt;T&gt;, String[], String, Boolean)</h4>
  <div class="markdown level1 summary"><p>Ordena um <span class="xref">System.Collections.Generic.IEnumerable&lt;T&gt;</span> a partir da aproximaçao de uma ou mais
<span class="xref">System.String</span> com o valor de um determinado campo</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static IOrderedQueryable&lt;T&gt; ThenByLike&lt;T&gt;(this IOrderedQueryable&lt;T&gt; items, string[] Searches, string SortProperty, bool Ascending = true)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IOrderedQueryable</span>&lt;T&gt;</td>
        <td><span class="parametername">items</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><span class="parametername">Searches</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">SortProperty</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">Ascending</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Linq.IOrderedQueryable</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_UpdateObjectFromDictionary_" data-uid="InnerLibs.LINQ.LINQExtensions.UpdateObjectFromDictionary*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_UpdateObjectFromDictionary__2_System_Data_Linq_DataContext_System_Collections_Generic_IDictionary_System_String_System_Object__" data-uid="InnerLibs.LINQ.LINQExtensions.UpdateObjectFromDictionary``2(System.Data.Linq.DataContext,System.Collections.Generic.IDictionary{System.String,System.Object})">UpdateObjectFromDictionary&lt;T, PKType&gt;(DataContext, IDictionary&lt;String, Object&gt;)</h4>
  <div class="markdown level1 summary"><p>Atualiza um objeto de entidade a partir de valores em um Dictionary</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static T UpdateObjectFromDictionary&lt;T, PKType&gt;(this DataContext Context, IDictionary&lt;string, object&gt; Dic)
    where T : class where PKType : struct</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Data.Linq.DataContext</span></td>
        <td><span class="parametername">Context</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Collections.Generic.IDictionary</span>&lt;<span class="xref">System.String</span>, <span class="xref">System.Object</span>&gt;</td>
        <td><span class="parametername">Dic</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="parametername">PKType</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="InnerLibs_LINQ_LINQExtensions_UpdateObjectFromRequest_" data-uid="InnerLibs.LINQ.LINQExtensions.UpdateObjectFromRequest*"></a>
  <h4 id="InnerLibs_LINQ_LINQExtensions_UpdateObjectFromRequest__2_System_Data_Linq_DataContext_System_Web_HttpRequest_System_String___" data-uid="InnerLibs.LINQ.LINQExtensions.UpdateObjectFromRequest``2(System.Data.Linq.DataContext,System.Web.HttpRequest,System.String[])">UpdateObjectFromRequest&lt;T, PKType&gt;(DataContext, HttpRequest, String[])</h4>
  <div class="markdown level1 summary"><p>Atualiza um objeto de entidade a partir de valores em um HttpRequest</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">[Extension]
public static T UpdateObjectFromRequest&lt;T, PKType&gt;(this DataContext Context, HttpRequest Request, params string[] Keys)
    where T : class where PKType : struct</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Data.Linq.DataContext</span></td>
        <td><span class="parametername">Context</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Web.HttpRequest</span></td>
        <td><span class="parametername">Request</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span>[]</td>
        <td><span class="parametername">Keys</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="parametername">PKType</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="extensionmethods">Extension Methods</h3>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_CreateDictionary__1___0_">ClassTools.CreateDictionary&lt;Type&gt;(Type)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_GetProperties_System_Object_System_Reflection_BindingFlags_">ClassTools.GetProperties(Object, BindingFlags)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_GetProperties_System_Object_">ClassTools.GetProperties(Object)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_GetPropertyValue_System_Object_System_String_System_Type_System_Boolean_">ClassTools.GetPropertyValue(Object, String, Type, Boolean)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_GetPropertyValue__1_System_Object_System_String_System_Boolean_">ClassTools.GetPropertyValue&lt;Type&gt;(Object, String, Boolean)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_GetPropertyValue_System_Object_System_String_System_Boolean_">ClassTools.GetPropertyValue(Object, String, Boolean)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_HasProperty_System_Object_System_String_">ClassTools.HasProperty(Object, String)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_IsArrayOf__1_System_Object_">ClassTools.IsArrayOf&lt;T&gt;(Object)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_IsDictionary_System_Object_">ClassTools.IsDictionary(Object)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_IsIn__1___0_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__">ClassTools.IsIn&lt;Type&gt;(Type, IEnumerable&lt;Type&gt;, IEqualityComparer&lt;Type&gt;)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_IsIn__1___0_System_String_System_Collections_Generic_IEqualityComparer_System_Char__">ClassTools.IsIn&lt;Type&gt;(Type, String, IEqualityComparer&lt;Char&gt;)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_IsInAny__1___0_System_Collections_Generic_IEnumerable___0____System_Collections_Generic_IEqualityComparer___0__">ClassTools.IsInAny&lt;Type&gt;(Type, IEnumerable&lt;Type&gt;[], IEqualityComparer&lt;Type&gt;)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_IsList_System_Object_">ClassTools.IsList(Object)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_IsNotIn__1___0_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__">ClassTools.IsNotIn&lt;Type&gt;(Type, IEnumerable&lt;Type&gt;, IEqualityComparer&lt;Type&gt;)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_IsNotIn__1___0_System_String_System_Collections_Generic_IEqualityComparer_System_Char__">ClassTools.IsNotIn&lt;Type&gt;(Type, String, IEqualityComparer&lt;Char&gt;)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_IsType__1_System_Object_">ClassTools.IsType&lt;T&gt;(Object)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_NullCoalesce__1___0___0___">ClassTools.NullCoalesce&lt;T&gt;(T, T[])</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_NullifyProperties__1___0_">ClassTools.NullifyProperties&lt;Type&gt;(Type)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_SetPropertyValue__1_System_Object_System_String___0_">ClassTools.SetPropertyValue&lt;Type&gt;(Object, String, Type)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_SetPropertyValueFromCollection__1_System_Object_System_String_System_Collections_CollectionBase_">ClassTools.SetPropertyValueFromCollection&lt;Type&gt;(Object, String, CollectionBase)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.ClassTools.html#InnerLibs_ClassTools_ToFlatString_System_Object_System_String_">ClassTools.ToFlatString(Object, String)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.DataManipulation.html#InnerLibs_DataManipulation_GetDbType_System_Object_">DataManipulation.GetDbType(Object)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.Converter.html#InnerLibs_Converter_DefineEmptyList__1___0_">Converter.DefineEmptyList&lt;T&gt;(T)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.Converter.html#InnerLibs_Converter_ChangeType__2___1_">Converter.ChangeType&lt;ToType, FromType&gt;(FromType)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.JsonViewer.html#InnerLibs_JsonViewer_CreateNode_System_Object_">JsonViewer.CreateNode(Object)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.Mathematic.html#InnerLibs_Mathematic_IsBetween__1___0_System_Object_System_Object_">Mathematic.IsBetween&lt;Type&gt;(Type, Object, Object)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.Text.html#InnerLibs_Text_SerializeJSON_System_Object_System_String_">Text.SerializeJSON(Object, String)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.Verify.html#InnerLibs_Verify_IsNumber_System_Object_">Verify.IsNumber(Object)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.Verify.html#InnerLibs_Verify_IsNotNumber_System_Object_">Verify.IsNotNumber(Object)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.Verify.html#InnerLibs_Verify_IfBlank__1_System_Object___0_">Verify.IfBlank&lt;T&gt;(Object, T)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.Verify.html#InnerLibs_Verify_NullIf__1___0_System_Func___0_System_Boolean__">Verify.NullIf&lt;T&gt;(T, Func&lt;T, Boolean&gt;)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.Verify.html#InnerLibs_Verify_NullIf__1___0___0_">Verify.NullIf&lt;T&gt;(T, T)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.Web.html#InnerLibs_Web_CreateFromAjax__1___0__System_String_System_String_System_Collections_Specialized_NameValueCollection_System_String_System_Text_Encoding_">Web.CreateFromAjax&lt;Type&gt;(ref Type, String, String, NameValueCollection, String, Encoding)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.Web.html#InnerLibs_Web_AsListItem__3___0_System_Func___0___1__System_Func___0___2__">Web.AsListItem&lt;T, TextType, ValueType&gt;(T, Func&lt;T, TextType&gt;, Func&lt;T, ValueType&gt;)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.WinForms.html#InnerLibs_WinForms_GetCastedValue_System_Object_">WinForms.GetCastedValue(Object)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.WinForms.html#InnerLibs_WinForms_CastValueForControl_System_Object__System_Object_">WinForms.CastValueForControl(ref Object, Object)</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.LINQ.LINQExtensions.html#InnerLibs_LINQ_LINQExtensions_ApplyToControls__1___0_System_Web_UI_HtmlControls_HtmlControl___">LINQExtensions.ApplyToControls&lt;T&gt;(T, HtmlControl[])</a>
  </div>
  <div>
      <a class="xref" href="InnerLibs.LINQ.LINQExtensions.html#InnerLibs_LINQ_LINQExtensions_HasSamePropertyValues__1___0___0_System_Func___0_System_Object____">LINQExtensions.HasSamePropertyValues&lt;T&gt;(T, T, Func&lt;T, Object&gt;[])</a>
  </div>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>
