<?xml version="1.0"?>
<doc>
<assembly>
<name>
InnerLibs
</name>
</assembly>
<members>
<member name="T:InnerLibs.My.Resources.Resources">
<summary>
  Uma classe de recurso de tipo de alta segurança, para pesquisar cadeias de caracteres localizadas etc.
</summary>
</member>
<member name="P:InnerLibs.My.Resources.Resources.ResourceManager">
<summary>
  Retorna a instância de ResourceManager armazenada em cache usada por essa classe.
</summary>
</member>
<member name="P:InnerLibs.My.Resources.Resources.Culture">
<summary>
  Substitui a propriedade CurrentUICulture do thread atual para todas as
  pesquisas de recursos que usam essa classe de recurso de tipo de alta segurança.
</summary>
</member>
<member name="T:InnerLibs.Alphabet">
 <summary>
 Classe para encodar IDs numéricos em hashs curtas
 </summary>
</member>
<member name="M:InnerLibs.Alphabet.CreateLink(System.String,System.Int32)">
 <summary>
 Gera um link com a hash
 </summary>
 <param name="ID">Valor da Hash</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Arrays">
 <summary>
 Arrays de uso comum da biblioteca
 </summary>
</member>
<member name="P:InnerLibs.Arrays.WordWrappers">
 <summary>
 Caracteres usado para encapsular palavras em textos
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Arrays.WhiteSpaceChars">
 <summary>
 Caracteres em branco
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Arrays.WordSplitters">
 <summary>
 Strings utilizadas para descobrir as palavras em uma string
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.DataURI">
 <summary>
 Classe para Extrair informaçoes de uma DATAURL
 </summary>
</member>
<member name="M:InnerLibs.DataURI.#ctor(System.String)">
 <summary>
 Cria um novo DATAURL a aprtir de uma string
 </summary>
 <param name="DataURI"></param>
</member>
<member name="P:InnerLibs.DataURI.Data">
 <summary>
 String Base64 ou Base32
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.DataURI.Encoding">
 <summary>
 Tipo de encoding (32 ou 64)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.DataURI.Mime">
 <summary>
 Tipo do arquivo encontrado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.DataURI.Extension">
 <summary>
 Extensão do tipo do arquivo
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.DataURI.FullMimeType">
 <summary>
 MIME type completo
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataURI.ToFileType">
 <summary>
 Informaçoes referentes ao tipo do arquivo
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataURI.ToString">
 <summary>
 Retorna uma string da dataURL
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataURI.ToBytes">
 <summary>
 Converte esta dataURI em Bytes()
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataURI.WriteToFile(System.String)">
 <summary>
 Transforma este datauri em arquivo
 </summary>
 <param name="Path"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Base64">
 <summary>
 Modulo para manipulação de imagens e Strings Base64
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Base64.IsDataURL(System.String)">
 <summary>
 Retorna TRUE se o texto for um dataurl valido
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Base64.Btoa(System.String,System.Text.Encoding)">
 <summary>
 Encoda uma string em Base64
 </summary>
 <param name="Text"></param>
 <param name="Encoding"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Base64.Atob(System.String,System.Text.Encoding)">
 <summary>
 Decoda uma string em Base64
 </summary>
 <param name="Base"></param>
 <param name="Encoding"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Base64.FixBase64(System.String)">
 <summary>
 Arruma os caracteres de uma string Base64
 </summary>
 <param name="Base64StringOrDataUrl">Base64String ou DataURL</param>
 <returns>Retorna apenas a Base64</returns>
</member>
<member name="M:InnerLibs.Base64.ToBase64(System.Byte[])">
 <summary>
 Converte um Array de Bytes em uma string Base64
 </summary>
 <param name="Bytes">Array de Bytes</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Base64.ToDataURL(System.Byte[],InnerLibs.FileType)">
 <summary>
 Converte um Array de Bytes em uma DATA URL Completa
 </summary>
 <param name="Bytes">Array de Bytes</param>
 <param name="Type">Tipo de arquivo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Base64.ToDataURL(System.Byte[],System.String)">
 <summary>
 Converte um Array de Bytes em uma DATA URL Completa
 </summary>
 <param name="Bytes">Array de Bytes</param>
 <param name="MimeType">Tipo de arquivo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Base64.ToDataURL(System.IO.FileInfo)">
 <summary>
 Converte um arquivo uma DATA URL Completa
 </summary>
 <param name="File">Arquivo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Base64.ToDataURL(System.Drawing.Image)">
 <summary>
 Transforma uma imagem em uma URL Base64
 </summary>
 <param name="Image">Imagem</param>
 <returns>Uma DataURI em string</returns>
</member>
<member name="M:InnerLibs.Base64.ToBase64(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
 <summary>
 Converte uma Imagem para String Base64
 </summary>
 <param name="OriginalImage">Imagem original, tipo Image() (Picturebox.Image, Picturebox.BackgroundImage etc.)</param>
 <param name="OriginalImageFormat">Formato da imagem de acordo com sua extensão (JPG, PNG, GIF etc.)</param>
 <returns>Uma string em formato Base64</returns>
</member>
<member name="M:InnerLibs.Base64.ToDataURL(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
 <summary>
 Converte uma imagem para DataURI trocando o MIME Type
 </summary>
 <param name="OriginalImage">Imagem</param>
 <param name="OriginalImageFormat">Formato da Imagem</param>
 <returns>Uma data URI com a imagem convertida</returns>
</member>
<member name="M:InnerLibs.Base64.ToBase64(System.Drawing.Image)">
 <summary>
 Converte uma Imagem para String Base64
 </summary>
 <param name="OriginalImage">Imagem original, tipo Image() (Picturebox.Image, Picturebox.BackgroundImage etc.)</param>
 <returns>Uma string em formato Base64</returns>
</member>
<member name="M:InnerLibs.Base64.ToBase64(System.Uri)">
 <summary>
 Converte uma Imagem da WEB para String Base64
 </summary>
 <param name="ImageURL">Caminho da imagem</param>
 <returns>Uma string em formato Base64</returns>
</member>
<member name="M:InnerLibs.Base64.ToBase64(System.String,System.Drawing.Imaging.ImageFormat)">
 <summary>
 Converte uma Imagem da WEB para String Base64
 </summary>
 <param name="ImageURL">Caminho da imagem</param>
 <param name="OriginalImageFormat">Formato da imagem de acordo com sua extensão (JPG, PNG, GIF etc.)</param>
 <returns>Uma string em formato Base64</returns>
</member>
<member name="M:InnerLibs.Base64.Base64ToImage(System.String,System.Int32,System.Int32)">
 <summary>
 Converte uma String DataURL ou Base64 para Imagem
 </summary>
 <param name="DataUrlOrBase64String">A string Base64 a ser convertida</param>
 <param name="Width">Altura da nova imagem (não preencher retorna o tamanho original da imagem)</param>
 <param name="Height">Largura da nova imagem (não preencher retorna o tamanho original da imagem)</param>
 <returns>Uma imagem (componente Image)</returns>
</member>
<member name="M:InnerLibs.Base64.ToImage(System.Byte[])">
 <summary>
 Converte um array de bytes para imagem
 </summary>
 <param name="Bytes">Bytes</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Base64.Base64ToBytes(System.String)">
 <summary>
 Converte uma DATAURL ou Base64 String em um array de Bytes
 </summary>
 <param name="Base64StringOrDataURL">Base64 String ou DataURL</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Base64.CreateFileFromDataURL(System.String,System.String)">
 <summary>
 Cria um arquivo fisico a partir de uma Base64 ou DataURL
 </summary>
 <param name="Base64StringOrDataURL"></param>
 <param name="FilePath"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Locations.State">
 <summary>
 Objeto que representa um estado do Brasil e seus respectivos detalhes
 </summary>
</member>
<member name="P:InnerLibs.Locations.State.StateCode">
 <summary>
 Sigla do estado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Locations.State.Name">
 <summary>
 Nome do estado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Locations.State.Region">
 <summary>
 Região do Estado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Locations.State.Cities">
 <summary>
 Lista de cidades do estado
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.State.#ctor">
 <summary>
 inicializa um estado vazio
 </summary>
</member>
<member name="M:InnerLibs.Locations.State.#ctor(System.String)">
 <summary>
 Inicializa um objeto Estado a partir de uma sigla
 </summary>
 <param name="NameOrStateCode"></param>
</member>
<member name="M:InnerLibs.Locations.State.ToString">
 <summary>
 Retorna a String correspondente ao estado
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.Locations.Brasil">
 <summary>
 Objeto para manipular cidades e estados do Brasil
 </summary>
</member>
<member name="P:InnerLibs.Locations.Brasil.States">
 <summary>
 Retorna uma lista com todos os estados do Brasil e seus respectivos detalhes
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Locations.Brasil.Regions">
 <summary>
 Retorna as Regiões dos estados brasileiros
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Locations.Brasil.Cities">
 <summary>
 Retorna todas as Cidades dos estados brasileiros
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.Brasil.FindStateByCity(System.String)">
 <summary>
 Retorna o estado de uma cidade especifa. Pode trazer mais de um estado caso o nome da cidade seja igual em 2 ou mais estados
 </summary>
 <param name="CityName"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.Brasil.GetStatesOf(System.String)">
 <summary>
 Retorna os estados de uma região
 </summary>
 <param name="Region"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.Brasil.GetCitiesOf(System.String)">
 <summary>
 Retorna as cidades de um estado a partir do nome ou sigla do estado
 </summary>
 <param name="NameOrStateCode">Nome ou sigla do estado</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.Brasil.GetClosestCity(System.String,System.String)">
 <summary>
 Retorna as cidades de um estado a partir do nome ou sigla do estado
 </summary>
 <param name="NameOrStateCode">Nome ou sigla do estado</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.Brasil.GetNameOf(System.String)">
 <summary>
 Retorna o nome do estado a partir da sigla
 </summary>
 <param name="NameOrStateCode"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.Brasil.GetStateCodeOf(System.String)">
 <summary>
 Retorna a Sigla a partir de um nome de estado
 </summary>
 <param name="NameOrStateCode"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.Brasil.GetRegionOf(System.String)">
 <summary>
 Retorna a região a partir de um nome de estado
 </summary>
 <param name="NameOrStateCode"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.Brasil.GetState(System.String)">
 <summary>
 Retorna a as informações do estado a partir de um nome de estado ou sua sigla
 </summary>
 <param name="NameOrStateCode">Nome ou UF</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.Brasil.CreateAddressInfo(System.String,System.String)">
 <summary>
 Retorna um <see cref="T:InnerLibs.Locations.AddressInfo"/> da cidade e estado correspondentes
 </summary>
 <param name="NameOrStateCode"></param>
 <param name="City"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.Brasil.CreateAddressInfo``1(System.String,System.String)">
 <summary>
 Retorna um <see cref="T:InnerLibs.Locations.AddressInfo"/> da cidade e estado correspondentes
 </summary>
 <param name="NameOrStateCode"></param>
 <param name="City"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Locations.AddressInfo">
 <summary>
 Representa um deteminado local com suas Informações
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.#ctor">
 <summary>
 Cria um novo objeto de localização
 </summary>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.Type">
 <summary>
 Tipo do Endereço
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.Name">
 <summary>
 O nome do endereço
 </summary>
 <value></value>
 <returns></returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.Street">
 <summary>
 Logradouro
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.Number">
 <summary>
 Numero da casa, predio etc.
 </summary>
 <value></value>
 <returns>Numero</returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.Complement">
 <summary>
 Complemento
 </summary>
 <value></value>
 <returns>Complemento</returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.Neighborhood">
 <summary>
 Bairro
 </summary>
 <value></value>
 <returns>Bairro</returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.PostalCode">
 <summary>
 CEP - Codigo de Endereçamento Postal
 </summary>
 <value></value>
 <returns>CEP</returns>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.FormatPostalCode(System.String)">
 <summary>
 Formata uma string de CEP
 </summary>
 <param name="CEP"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.ZipCode">
 <summary>
 CEP - Codigo de Endereçamento Postal. Alias de <see cref="P:InnerLibs.Locations.AddressInfo.PostalCode"/>
 </summary>
 <value></value>
 <returns>CEP</returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.City">
 <summary>
 Cidade
 </summary>
 <value></value>
 <returns>Cidade</returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.State">
 <summary>
 Estado
 </summary>
 <value></value>
 <returns>Estado</returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.StateCode">
 <summary>
 Unidade federativa
 </summary>
 <value></value>
 <returns>Sigla do estado</returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.Region">
 <summary>
 País
 </summary>
 <value></value>
 <returns>País</returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.Country">
 <summary>
 País
 </summary>
 <value></value>
 <returns>País</returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.CountryCode">
 <summary>
 País
 </summary>
 <value></value>
 <returns>País</returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.Latitude">
 <summary>
 Coordenada geográfica LATITUDE
 </summary>
 <value></value>
 <returns>Latitude</returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.Longitude">
 <summary>
 Coordenada geográfica LONGITUDE
 </summary>
 <value></value>
 <returns>Longitude</returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.FullAddress">
 <summary>
 Retorna o endereço completo
 </summary>
 <returns>Uma String com o endereço completo devidamente formatado</returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.LocationInfo">
 <summary>
 Retorna o Logradouro e numero
 </summary>
 <returns>Uma String com o endereço completo devidamente formatado</returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.FullLocationInfo">
 <summary>
 Logradouro, Numero e Complemento
 </summary>
 <returns>Uma String com o endereço completo devidamente formatado</returns>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.ToString">
 <summary>
 Retorna uma String contendo as informações do Local
 </summary>
 <returns>string</returns>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.ToString(System.Collections.Generic.IEnumerable{InnerLibs.Locations.AddressPart})">
 <summary>
 Retorna uma string com as partes dos endereço especificas
 </summary>
 <param name="Parts"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.ToString(InnerLibs.Locations.AddressPart[])">
 <summary>
 Retorna uma string com as partes dos endereço especificas
 </summary>
 <param name="Parts"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.ToString(System.Int32)">
 <summary>
 Retorna uma string com as partes dos endereço especificas pelo codigo da formataçao
 </summary>
 <param name="FormatCode"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.ToString(InnerLibs.Locations.AddressPart)">
 <summary>
 Retorna uma string com as partes dos endereço especificas
 </summary>
 <param name="Parts"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.FromViaCEP(System.Int64,System.String,System.String)">
 <summary>
 Cria um objeto de localização e imadiatamente pesquisa as informações de um local através do CEP usando as APIs ViaCEP
 </summary>
 <param name="PostalCode"></param>
 <param name="Number">Numero da casa</param>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.FromViaCEP(System.String,System.String,System.String)">
 <summary>
 Cria um objeto de localização e imadiatamente pesquisa as informações de um local através do CEP usando as APIs ViaCEP
 </summary>
 <param name="PostalCode"></param>
 <param name="Number">Numero da casa</param>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.FromViaCEP``1(System.Int64,System.String,System.String)">
 <summary>
 Cria um objeto de localização e imadiatamente pesquisa as informações de um local através do CEP usando as APIs ViaCEP
 </summary>
 <param name="PostalCode"></param>
 <param name="Number">Numero da casa</param>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.FromViaCEP``1(System.String,System.String,System.String)">
 <summary>
 Cria um objeto de localização e imadiatamente pesquisa as informações de um local através do CEP usando as APIs ViaCEP
 </summary>
 <param name="PostalCode"></param>
 <param name="Number">Numero da casa</param>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.TryParse(System.String)">
 <summary>
 Tenta extrair as partes de um endereço de uma string
 </summary>
 <param name="Address"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.TryParse``1(System.String)">
 <summary>
 Tenta extrair as partes de um endereço de uma string
 </summary>
 <param name="Address"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.FromGoogleMaps(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
 <summary>
 Retorna um <see cref="T:InnerLibs.Locations.AddressInfo"/> usando a api de geocode do Google Maps para completar as informações
 </summary>
 <param name="Address">Endereço para Busca</param>
 <param name="Key">Chave de acesso da API</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.FromGoogleMaps``1(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
 <summary>
 Retorna um <see cref="T:InnerLibs.Locations.AddressInfo"/> usando a api de geocode do Google Maps para completar as informações
 </summary>
 <param name="Address">Endereço para Busca</param>
 <param name="Key">Chave de acesso da API</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.CreateLocation(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Cria uma localização a partir de partes de endereço
 </summary>
 <param name="Address"></param>
 <param name="Number"></param>
 <param name="Complement"></param>
 <param name="Neighborhood"></param>
 <param name="City"></param>
 <param name="State"></param>
 <param name="Country"></param>
 <param name="PostalCode"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.CreateLocation``1(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Cria uma localização a partir de partes de endereço
 </summary>
 <param name="Address"></param>
 <param name="Number"></param>
 <param name="Complement"></param>
 <param name="Neighborhood"></param>
 <param name="City"></param>
 <param name="State"></param>
 <param name="Country"></param>
 <param name="PostalCode"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.FormatAddress(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Retorna uma string de endereço a partir de varias partes de endereco
 </summary>
 <param name="Address"></param>
 <param name="Number"></param>
 <param name="Complement"></param>
 <param name="Neighborhood"></param>
 <param name="City"></param>
 <param name="State"></param>
 <param name="Country"></param>
 <param name="PostalCode"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Locations.AddressInfo.LatitudeLongitude">
 <summary>
 Retorna as coordenadas geográficas do Local
 </summary>
 <returns>Uma String contendo LATITUDE e LONGITUDE separados por virgula</returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.Format">
 <summary>
 Formato desta instancia de <see cref="T:InnerLibs.Locations.AddressInfo"/> quando chamada pelo <see cref="M:InnerLibs.Locations.AddressInfo.ToString"/>
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.GlobalFormat">
 <summary>
 Formato global de todas as intancias de <see cref="T:InnerLibs.Locations.AddressInfo"/> quando chamadas pelo <see cref="M:InnerLibs.Locations.AddressInfo.ToString"/>
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Locations.AddressInfo.Detail(System.String)">
 <summary>
 Retona uma informação deste endereço
 </summary>
 <param name="Key"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Locations.AddressPart">
 <summary>
 Partes de um Endereço
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.Default">
 <summary>
 Formato default definido pela propriedade <see cref="P:InnerLibs.Locations.AddressInfo.Format"/> ou <see cref="P:InnerLibs.Locations.AddressInfo.GlobalFormat"/>
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.StreetType">
 <summary>
 Tipo do Lograoduro
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.StreetName">
 <summary>
 Nome do Logradouro
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.Street">
 <summary>
 Logradouro
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.Number">
 <summary>
 Numero do local
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.Complement">
 <summary>
 Complemento do local
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.LocationInfo">
 <summary>
 Numero e complemento
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.FullLocationInfo">
 <summary>
 Logradouro, Numero e complemento
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.Neighborhood">
 <summary>
 Bairro
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.City">
 <summary>
 Cidade
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.State">
 <summary>
 Estado
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.CityState">
 <summary>
 Cidade e Estado
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.StateCode">
 <summary>
 UF
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.CityStateCode">
 <summary>
 Cidade e UF
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.Country">
 <summary>
 País
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.CountryCode">
 <summary>
 País
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.PostalCode">
 <summary>
 CEP
 </summary>
</member>
<member name="F:InnerLibs.Locations.AddressPart.FullAddress">
 <summary>
 Endereço completo
 </summary>
</member>
<member name="T:InnerLibs.DateRange">
 <summary>
 Classe que representa um periodo entre 2 datas
 </summary>
</member>
<member name="P:InnerLibs.DateRange.ForceFirstAndLastMoments">
 <summary>
 Se true, ajusta as horas de <see cref="P:InnerLibs.DateRange.StartDate"/> para o primeiro momento do dia e as horas de <see cref="P:InnerLibs.DateRange.EndDate"/> para o último momento do dia
 </summary>
</member>
<member name="M:InnerLibs.DateRange.IsDefaultDateRange">
 <summary>
 Indica se este <see cref="T:InnerLibs.DateRange"/> foi construido sem nenhuma data definida
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.#ctor">
 <summary>
 Instancia um novo periodo do dia de hoje
 </summary>
</member>
<member name="M:InnerLibs.DateRange.#ctor(System.DateTime,System.DateTime)">
 <summary>
 Instancia um novo periodo entre 2 datas
 </summary>
 <param name="StartDate"></param>
 <param name="EndDate"></param>
</member>
<member name="M:InnerLibs.DateRange.#ctor(System.DateTime,System.DateTime,System.Boolean)">
 <summary>
 Instancia um novo periodo entre 2 datas
 </summary>
 <param name="StartDate"></param>
 <param name="EndDate"></param>
 <param name="ForceFirstAndLastMoments"> Ajusta as horas de <see cref="P:InnerLibs.DateRange.StartDate"/> para o primeiro momento do dia e as horas de <see cref="P:InnerLibs.DateRange.EndDate"/> para o último momento do dia</param>
</member>
<member name="M:InnerLibs.DateRange.GetDays(System.DayOfWeek[])">
 <summary>
 Retorna uma lista de dias entre <see cref="P:InnerLibs.DateRange.StartDate"/> e <see cref="P:InnerLibs.DateRange.EndDate"/>
 </summary>
 <param name="DaysOfWeek"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.GetPeriodAs(InnerLibs.DateRangeInterval)">
 <summary>
 Retorna o periodo em um total especificado por <see cref="T:InnerLibs.DateRangeInterval"/>
 </summary>
 <param name="DateRangeInterval"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.MovePeriod(InnerLibs.DateRangeInterval,System.Decimal)">
 <summary>
 Move um periodo a partir de um <paramref name="Total"/> especificado por <paramref name="DateRangeInterval"/>
 </summary>
 <param name="DateRangeInterval"></param>
 <param name="Total"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.Clone">
 <summary>
 Clona este DateRange
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.JumpPeriod(System.Int32,InnerLibs.DateRangeInterval)">
 <summary>
 Pula um determinado numero de periodos
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.PreviousPeriod(InnerLibs.DateRangeInterval)">
 <summary>
 Move para o periodo equivalente anterior
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.NextPeriod(InnerLibs.DateRangeInterval)">
 <summary>
 Move para ao proximo periodo equivalente
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.GetLessAccurateDateRangeInterval">
 <summary>
 Retorna o <see cref="T:InnerLibs.DateRangeInterval"/> menos preciso para calcular periodos
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.IsSingleDate">
 <summary>
 Retorna TRUE se a data de inicio e fim for a mesma
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.IsSingleDateTime">
 <summary>
 Retorna TRUE se a data e hora de inicio e fim for a mesma
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.Difference">
 <summary>
 Retorna um <see cref="T:InnerLibs.TimeMachine.LongTimeSpan"/> contendo a diferença entre as datas
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.CreateFortnightGroup">
 <summary>
 Cria um grupo de quinzenas que contenham este periodo
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.ToString">
 <summary>
 Retorna uma strin representando a diferença das datas
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.FilterList``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.DateTime}})">
 <summary>
 Filtra uma lista considerando o periodo deste DateRange
 </summary>
 <typeparam name="T"></typeparam>
 <param name="List"></param>
 <param name="PropertyExpression"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.FilterList``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.DateTime}})">
 <summary>
 Filtra uma lista considerando o periodo deste DateRange
 </summary>
 <typeparam name="T"></typeparam>
 <param name="List"></param>
 <param name="PropertyExpression"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.FilterList``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.DateTime}}})">
 <summary>
 Filtra uma lista considerando o periodo deste DateRange
 </summary>
 <typeparam name="T"></typeparam>
 <param name="List"></param>
 <param name="PropertyExpression"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.FilterList``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.DateTime}}})">
 <summary>
 Filtra uma lista considerando o periodo deste DateRange
 </summary>
 <typeparam name="T"></typeparam>
 <param name="List"></param>
 <param name="PropertyExpression"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.GroupList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.DateTime},System.Func{System.DateTime,System.String},InnerLibs.DateRangeInterval)">
 <summary>
 Agrupa itens de uma lista de acordo com uma propriedade e uma expressão de agrugrupamento de datas
 </summary>
 <typeparam name="T"></typeparam>
 <param name="List"></param>
 <param name="PropertyExpression"></param>
 <param name="GroupByExpression"></param>
 <param name="DateRangeInterval"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.Overlaps(InnerLibs.DateRange)">
 <summary>
 Verifica se 2 periodos possuem interseção de datas
 </summary>
 <param name="Period">Periodo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.MatchAny(InnerLibs.DateRange)">
 <summary>
 Verifica se 2 periodos coincidem datas (interseção, esta dentro de um periodo de ou contém um periodo)
 </summary>
 <param name="Period"></param>
 <returns></returns>

</member>
<member name="M:InnerLibs.DateRange.Contains(InnerLibs.DateRange)">
 <summary>
 Verifica se este periodo contém um outro periodo
 </summary>
 <param name="Period"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.Contains(System.DateTime)">
 <summary>
 Verifica se este periodo contém uma data
 </summary>
 <param name="Day"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.IsNow">
 <summary>
 Verifica se hoje está dentro deste periodo
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.IsIn(InnerLibs.DateRange)">
 <summary>
 Verifica se este periodo está dentro de outro periodo
 </summary>
 <param name="Period"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.CalculatePercent(System.Nullable{System.DateTime})">
 <summary>
 Verifica quantos porcento uma data representa  em distancia dentro deste periodo
 </summary>
 <param name="[Date]">Data correspondente</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DateRange.GetBetween(InnerLibs.DateRangeInterval)">
 <summary>
 Retorna uma lista com as datas entre <see cref="P:InnerLibs.DateRange.StartDate"/> e <see cref="P:InnerLibs.DateRange.EndDate"/> utilizando um Intervalo
 </summary>
 <param name="DateRangeInterval"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Calendars">
 <summary>
 Modulo para manipulação de calendário
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Calendars.GetWeekNumberOfMonth(System.DateTime)">
 <summary>
 Pega o numero da semana a partir de uma data
 </summary>
 <param name="DateAndTime"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetWeekInfoOfMonth(System.DateTime)">
 <summary>
 Pega o numero da semana, do mês e ano pertencente
 </summary>
 <param name="DateAndTime"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetDoubleMonthOfYear(System.DateTime)">
 <summary>
 Pega o numero do Bimestre a partir de uma data
 </summary>
 <param name="DateAndtime"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetQuarterOfYear(System.DateTime)">
 <summary>
 Pega o numero do trimestre a partir de uma data
 </summary>
 <param name="DateAndTime"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetHalfOfYear(System.DateTime)">
 <summary>
 Pega o numero do semestre a partir de uma data
 </summary>
 <param name="DateAndTime"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetAge(System.DateTime,System.Nullable{System.DateTime})">
 <summary>
 Retorna a idade
 </summary>
 <param name="BirthDate"></param>
 <param name="FromDate"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.ToTimeZoneUtc(System.DateTime,System.TimeZoneInfo)">
 <summary>
 Converte um <see cref="T:System.DateTime"/> para um timezone Especifico
 </summary>
 <param name="[Date]"></param>
 <param name="TimeZone"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.ToTimeZone(System.DateTime,System.String)">
 <summary>
 Converte um <see cref="T:System.DateTime"/> para um timezone Especifico
 </summary>
 <param name="[Date]"></param>
 <param name="TimeZoneId"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.ConvertDateString(System.String,System.String,System.Globalization.CultureInfo)">
 <summary>
 Converte uma string em datetime a partir de um formato especifico
 </summary>
 <param name="DateString">String original</param>
 <param name="Format"></param>
 <param name="Culture"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.ChangeFormat(System.String,System.String,System.String,System.Globalization.CultureInfo)">
 <summary>
 Converte uma string de data para outra string de data com formato diferente
 </summary>
 <param name="DateString">String original</param>
 <param name="InputFormat"></param>
 <param name="Culture"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.NextFortnight(System.DateTime,System.Int32)">
 <summary>
 Pula para a data inicial da proxima quinzena
 </summary>
 <param name="FromDate">Data de partida</param>
 <param name="Num">Numero de quinzenas para adiantar</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetFirstDayOfWeek(System.DateTime,System.DayOfWeek)">
 <summary>
 Retorna o primeiro dia da semana da data especificada
 </summary>
 <param name="[Date]">Data</param>
 <param name="FirstDayOfWeek">Primeiro dia da semana (DEFAULT é Domingo)</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetLastDayOfWeek(System.DateTime,System.DayOfWeek)">
 <summary>
 Retorna o ultimo dia da semana da data especificada
 </summary>
 <param name="[Date]">Data</param>
 <param name="FirstDayOfWeek">Primeiro dia da semana (DEFAULT é Domingo)</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetWeek(System.DateTime,System.DayOfWeek)">
 <summary>
 Retorna um DateRange equivalente a semana de uma data especifica
 </summary>
 <param name="[Date]">Data</param>
 <param name="FirstDayOfWeek">Primeiro dia da semana (DEFAULT é domingo)</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetLastDayOfMonth(System.DateTime)">
 <summary>
 Retorna a ultima data do mes a partir de uma outra data
 </summary>
 <param name="[Date]">Data</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetLastDayOfMonth(System.Int32,System.Nullable{System.Int32})">
 <summary>
 Retorna a ultima data do mes a partir de uma outra data
 </summary>
 <param name="MonthNumber">Data</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetFirstDayOfMonth(System.Int32,System.Nullable{System.Int32})">
 <summary>
 Retorna a ultima data do mes a partir de uma outra data
 </summary>
 <param name="MonthNumber">Data</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetFirstDayOfMonth(System.DateTime)">
 <summary>
 Retorna a primeira data do mes a partir de uma outra data
 </summary>
 <param name="[Date]">Data</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetFirstDayOfFortnight(System.DateTime)">
 <summary>
 Retorna a primeira data da quinzena a partir de uma outra data
 </summary>
 <param name="[Date]">Data</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetLastDayOfFortnight(System.DateTime)">
 <summary>
 Retorna a ultima data da quinzena a partir de uma outra data
 </summary>
 <param name="[Date]">Data</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetFirstDayOfYear(System.DateTime)">
 <summary>
 Retorna o prmeiro dia de um ano especifico de outra data
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetLastDayOfYear(System.DateTime)">
 <summary>
 Retorna o ultimo dia de um ano especifico de outra data
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetFirstDayOfHalf(System.DateTime)">
 <summary>
 Retorna o prmeiro dia de um semestre a partir da data
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetLastDayOfHalf(System.DateTime)">
 <summary>
 Retorna o ultimo dia de um semestre a partir da data
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetLastDayOfQuarter(System.DateTime)">
 <summary>
 Retorna o ultimo dia de um trimestre a partir da data
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetFirstDayOfQuarter(System.DateTime)">
 <summary>
 Retorna o ultimo dia de um trimestre a partir da data
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetLastDayOfDoubleMonth(System.DateTime)">
 <summary>
 Retorna o ultimo dia de um bimestre a partir da data
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetFirstDayOfDoubleMonth(System.DateTime)">
 <summary>
 Retorna o ultimo dia de um bimestre a partir da data
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetWeekOfYear(System.DateTime,System.Globalization.CultureInfo,System.DayOfWeek)">
 <summary>
 Retorna o numero da semana relativa ao ano
 </summary>
 <param name="[Date]"></param>
 <param name="Culture"></param>
 <param name="FirstDayOfWeek"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.IsSameMonthAndYear(System.DateTime,System.DateTime)">
 <summary>
 Verifica se uma data é do mesmo mês e ano que outra data
 </summary>
 <param name="[Date]">Primeira data</param>
 <param name="AnotherDate">Segunda data</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.IsAnniversary(System.DateTime,System.Nullable{System.DateTime})">
 <summary>
 Verifica se a Data de hoje é um aniversário
 </summary>
 <param name="BirthDate">  Data de nascimento</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetLongMonthName(System.DateTime,System.Globalization.CultureInfo)">
 <summary>
 Retorna o nome do mês a partir da data
 </summary>
 <param name="[Date]"></param>
 <param name="Culture"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetShortMonthName(System.DateTime,System.Globalization.CultureInfo)">
 <summary>
 Retorna o nome do mês a partir da data
 </summary>
 <param name="[Date]"></param>
 <param name="Culture"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.ToSQLDateString(System.DateTime)">
 <summary>
 COnverte um datetime para o formato de string do SQL server ou Mysql
 </summary>
 <param name="[Date]">Data</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.ToSQLDateString(System.String,System.String)">
 <summary>
 Converte uma string dd/mm/aaaa hh:mm:ss.llll para o formato de string do SQL server ou Mysql
 </summary>
 <param name="[Date]">Data</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetDifference(System.DateTime,System.DateTime)">
 <summary>
 Retorna uma <see cref="T:InnerLibs.TimeMachine.LongTimeSpan"/> com a diferença entre 2 Datas
 </summary>
 <param name="InitialDate"></param>
 <param name="SecondDate"> </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.FixDateOrder(System.DateTime@,System.DateTime@)">
 <summary>
 Troca ou não a ordem das variaveis de inicio e fim de um periodo fazendo com que a StartDate
 sempre seja uma data menor que a EndDate, prevenindo que o calculo entre 2 datas resulte em um
 <see cref="T:System.TimeSpan"/> negativo
 </summary>
 <param name="StartDate">Data Inicial</param>
 <param name="EndDate">  Data Final</param>
</member>
<member name="M:InnerLibs.Calendars.IsBetween(System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
 <summary>
 Verifica se uma data se encontra entre 2 datas
 </summary>
 <param name="MidDate">   Data</param>
 <param name="StartDate"> Data Inicial</param>
 <param name="EndDate">   Data final</param>
 <param name="IgnoreTime">Indica se o tempo deve ser ignorado na comparação</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetDaysBetween(System.DateTime,System.DateTime,System.DayOfWeek[])">
 <summary>
 Retorna as datas entre um periodo
 </summary>
 <param name="StartDate"></param>
 <param name="EndDate"></param>
 <param name="DaysOfWeek"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.ClearTime(System.Collections.Generic.IEnumerable{System.DateTime})">
 <summary>
 Remove o tempo de todas as datas de uma lista e retorna uma nova lista
 </summary>
 <param name="List">Lista que será alterada</param>
</member>
<member name="M:InnerLibs.Calendars.ToTimeElapsedString(System.TimeSpan,System.String,System.String,System.String,System.String)">
 <summary>
 Retorna uma String no formato "W dias, X horas, Y minutos e Z segundos"
 </summary>
 <param name="TimeElapsed">TimeSpan com o intervalo</param>
 <returns>string</returns>
</member>
<member name="M:InnerLibs.Calendars.ToLongMonthName(System.Int32)">
 <summary>
 Retorna uma String baseado no numero do Mês Ex.: 1 -&gt; Janeiro
 </summary>
 <param name="MonthNumber">Numero do Mês</param>
 <returns>String com nome do Mês</returns>
</member>
<member name="M:InnerLibs.Calendars.ToLongMonthName(System.DateTime)">
 <summary>
 Retorna uma String com o nome do mes baseado na data
 </summary>
 <param name="DateTime">Data</param>
 <returns>String com nome do Mês</returns>
</member>
<member name="M:InnerLibs.Calendars.ToShortMonthName(System.Int32)">
 <summary>
 Retorna uma String curta baseado no numero do Mês Ex.: 1 -&gt; Jan
 </summary>
 <param name="MonthNumber">Numero do Mês</param>
 <returns>String com nome curto do Mês</returns>
</member>
<member name="M:InnerLibs.Calendars.ToLongDayOfWeekName(System.Int32)">
 <summary>
 Retorna uma String baseado no numero do Dia da Semana Ex.: 2 -&gt; Segunda-Feira
 </summary>
 <param name="DayNumber">Numero do Dia</param>
 <returns>String com nome do Dia</returns>
</member>
<member name="M:InnerLibs.Calendars.ToShortDayOfWeekName(System.Int32)">
 <summary>
 Retorna uma String baseado no numero do Dia da Semana Ex.: 2 -&gt; Seg
 </summary>
 <param name="DayNumber">Numero do Dia</param>
 <returns>String com nome curto do Dia</returns>
</member>
<member name="P:InnerLibs.Calendars.Tomorrow">
 <summary>
 Retorna a data de amanhã
 </summary>
 <returns>Data de amanhã</returns>
</member>
<member name="P:InnerLibs.Calendars.Yesterday">
 <summary>
 Retorna a data de ontem
 </summary>
 <returns>Data de ontem</returns>
</member>
<member name="P:InnerLibs.Calendars.LastSunday(System.Nullable{System.DateTime})">
 <summary>
 Retorna o ultimo domingo
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Calendars.NextSunday(System.Nullable{System.DateTime})">
 <summary>
 Retorna o proximo domingo
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.IsWeekend(System.DateTime)">
 <summary>
 Verifica se o dia se encontra no fim de semana
 </summary>
 <param name="YourDate">Uma data qualquer</param>
 <returns>TRUE se for sabado ou domingo, caso contrario FALSE</returns>
</member>
<member name="M:InnerLibs.Calendars.ToFarewell(System.DateTime,System.String)">
 <summary>
 Transforma um DateTime em uma despedida (Bom dia, Boa tarde, Boa noite)
 </summary>
 <param name="Time">    Horario</param>
 <param name="Language">Idioma da saudação (pt, en, es)</param>
 <returns>Uma string com a despedida</returns>
</member>
<member name="M:InnerLibs.Calendars.ToGreeting(System.DateTime,System.String)">
 <summary>
 Transforma um DateTime em uma saudação (Bom dia, Boa tarde, Boa noite)
 </summary>
 <param name="Time">    Horario</param>
 <param name="Language">Idioma da saudação (pt, en, es)</param>
 <returns>Uma string com a despedida</returns>
</member>
<member name="P:InnerLibs.Calendars.Greeting(System.String)">
 <summary>
 Retorna uma saudação
 </summary>
 <param name="Language">Idioma da saudação (pt, en, es)</param>
 <returns>Uma string com a saudação</returns>
</member>
<member name="P:InnerLibs.Calendars.Farewell(System.String)">
 <summary>
 Retorna uma despedida
 </summary>
 <param name="Language">Idioma da despedida (pt, en, es)</param>
 <returns>Uma string com a despedida</returns>
</member>
<member name="P:InnerLibs.Calendars.Months(InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)">
 <summary>
 Returna uma lista dupla com os meses
 </summary>
 <param name="ValueType">Apresentação dos meses no valor</param>
<param name="TextType">Apresentação dos meses no texto</param>
</member>
<member name="P:InnerLibs.Calendars.WeekDays(InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)">
 <summary>
 Returna uma lista dupla com os meses
 </summary>
 <param name="ValueType">Apresentação dos meses no valor</param>
<param name="TextType">Apresentação dos meses no texto</param>
</member>
<member name="T:InnerLibs.Calendars.TypeOfFill">
 <summary>
 Tipo de Apresentação dos Meses/Dias da Semana/Estado
 </summary>
</member>
<member name="F:InnerLibs.Calendars.TypeOfFill.Number">
 <summary>
 Numerico
 </summary>
</member>
<member name="F:InnerLibs.Calendars.TypeOfFill.ShortName">
 <summary>
 Abreviado
 </summary>
</member>
<member name="F:InnerLibs.Calendars.TypeOfFill.LongName">
 <summary>
 Completo
 </summary>
</member>
<member name="T:InnerLibs.Calendars.CalendarType">
 <summary>
 Elemento do calendário
 </summary>
</member>
<member name="M:InnerLibs.Calendars.CalculatePercent(System.DateTime,System.DateTime,System.DateTime)">
 <summary>
 Calcula a porcentagem de diferenca entre duas datas de acordo com a data inicial especificada
 </summary>
 <param name="MidDate">  Data do meio a ser verificada (normalmente Now)</param>
 <param name="StartDate">Data Inicial</param>
 <param name="EndDate">  Data Final</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.With``1(``0,System.Action{``0})">
 <summary>
 Metodo de extensão para utilizar qualquer objeto usando FluentAPI
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Obj"></param>
 <param name="a"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.NullPropertiesAsDefault``1(``0,System.Boolean)">
 <summary>
 Substitui todas as propriedades nulas de uma classe pelos seus valores Default
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.Set``4(System.Collections.Generic.IDictionary{``0,``1},``2,``3)">
 <summary>
 Adciona ou substitui um valor a este <see cref="T:System.Collections.Generic.Dictionary`2"/> e retorna a mesma instancia deste <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
 <typeparam name="KeyType">Tipo da Key</typeparam>
 <typeparam name="ValueType">Tipo do valor</typeparam>
 <param name="Key">Valor da key</param>
 <param name="Value">Valor do Value</param>
 <returns>o mesmo objeto do tipo <see cref="T:System.Collections.Generic.Dictionary`2"/> que chamou este método</returns>
</member>
<member name="M:InnerLibs.ClassTools.IsBetween(System.IComparable,System.IComparable,System.IComparable)">
 <summary>
 Verifica se um valor numerico ou data está entre outros 2 valores
 </summary>
 <param name="Value">      Numero</param>
 <param name="Value1"> Primeiro numero comparador</param>
 <param name="Value2">Segundo numero comparador</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsBetweenOrEqual(System.IComparable,System.IComparable,System.IComparable)">
 <summary>
 Verifica se um valor numerico ou data está entre outros 2 valores
 </summary>
 <param name="Value">      Numero</param>
 <param name="Value1"> Primeiro numero comparador</param>
 <param name="Value2">Segundo numero comparador</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.FixOrder``1(``0@,``0@)">
 <summary>
 Troca ou não a ordem das variaveis de inicio e fim  fazendo com que a Value1
 sempre seja menor que a Value2. Util para tratar ranges
 </summary>
</member>
<member name="M:InnerLibs.ClassTools.CreateXmlFile(System.Object,System.String)">
 <summary>
 Cria um arquivo a partir de qualquer objeto usando o <see cref="!:ClassTools.CreateXML()"/>
 </summary>
 <param name="obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetTypesFromNamespace(System.Reflection.Assembly,System.String)">
 <summary>
 Retorna as classes de um Namespace
 </summary>
 <param name="assembly"></param>
 <param name="desiredNamespace"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetTypesFromNamespace(System.String)">
 <summary>
 Retorna as classes de um Namespace
 </summary>
 <param name="desiredNamespace"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.CreateGuidOrDefault(System.String)">
 <summary>
 Cria um <see cref="T:System.Guid"/> a partir de uma string ou um novo <see cref="T:System.Guid"/> se a conversão falhar
 </summary>
 <param name="Source"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.ToFullExceptionString(System.Exception,System.String)">
 <summary>
 Concatena todas as  <see cref="P:System.Exception.InnerException"/> em uma única string
 </summary>
 <param name="ex"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.ToQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
 <summary>
 Retorna um dicionário em QueryString
 </summary>
 <param name="Dic"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.ToQueryString(System.Collections.Specialized.NameValueCollection)">
 <summary>
 Retorna um <see cref="T:System.Collections.Specialized.NameValueCollection"/> em QueryString
 </summary>
 <param name="NVC"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.Detach``1(System.Collections.Generic.List{``0},System.Int32)">
 <summary>
 Remove um item de uma lista e retorna este item
 </summary>
 <typeparam name="T">Tipo do item</typeparam>
 <param name="List">Lista</param>
 <param name="Index">Posicao do item</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.ToTableArray``4(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Func{``1,``3})">
 <summary>
 Projeta um unico array os valores sub-agrupados e unifica todos num unico array de arrays
 </summary>
 <typeparam name="GroupKey"></typeparam>
 <typeparam name="SubGroupKey"></typeparam>
 <typeparam name="SubGroupValue"></typeparam>
 <param name="Groups"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.ToTableArray``2(System.Collections.Generic.Dictionary{``0,``1})">
 <summary>
 Projeta um unico array os valores sub-agrupados e unifica todos num unico array de arrays
 </summary>
</member>
<member name="M:InnerLibs.ClassTools.GroupByFlag``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
 <summary>
 Agrupa itens por ocorrencias em uma Enum Flag
 </summary>
 <typeparam name="Type"></typeparam>
 <typeparam name="Group"></typeparam>
 <param name="List"></param>
 <param name="GroupSelector"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GroupAndCountSubGroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
 <summary>
 Agrupa itens de uma lista a partir de uma propriedade e conta os resultados de cada grupo a partir de outra propriedade do mesmo objeto
 </summary>
 <typeparam name="Type"></typeparam>
 <typeparam name="Group"></typeparam>
 <typeparam name="Count"></typeparam>
 <param name="obj"></param>
 <param name="GroupSelector"></param>
 <param name="CountObjectBy"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GroupAndCountBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
 <summary>
 Agrupa e conta os itens de uma lista a partir de uma propriedade
 </summary>
 <typeparam name="Type"></typeparam>
 <typeparam name="Group"></typeparam>
 <param name="obj"></param>
 <param name="GroupSelector"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GroupFirstAndCountBy``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},``1)">
 <summary>
 Agrupa e conta os itens de uma lista a partir de uma propriedade
 </summary>
 <typeparam name="Type"></typeparam>
 <typeparam name="Group"></typeparam>
 <param name="obj"></param>
 <param name="GroupSelector"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GroupAndSubGroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
 <summary>
 Agrupa itens de uma lista a partir de duas propriedades de um objeto resultado em um grupo com subgrupos daquele objeto
 </summary>
 <typeparam name="Type"></typeparam>
 <typeparam name="Group"></typeparam>
 <typeparam name="SubGroup"></typeparam>
 <param name="obj"></param>
 <param name="GroupSelector"></param>
 <param name="SubGroupSelector"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.AsIf``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``1,``1)">
 <summary>
 Retorna um valor de um tipo especifico de acordo com um valor boolean
 </summary>
 <typeparam name="T"></typeparam>
 <param name="BoolExp">Expressão de teste de Valor boolean</param>
 <param name="TrueValue"> Valor se verdadeiro</param>
 <param name="FalseValue">valor se falso</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.AsIf``1(System.Boolean,``0,``0)">
 <summary>
 Retorna um valor de um tipo especifico de acordo com um valor boolean
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Bool">      Valor boolean</param>
 <param name="TrueValue"> Valor se verdadeiro</param>
 <param name="FalseValue">valor se falso</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.AsIf``1(System.Nullable{System.Boolean},``0,``0)">
 <summary>
 Retorna um valor de um tipo especifico de acordo com um valor boolean
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Bool">      Valor boolean</param>
 <param name="TrueValue"> Valor se verdadeiro</param>
 <param name="FalseValue">valor se falso</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.BlankCoalesce(System.String,System.String[])">
 <summary>
 Verifica se dois ou mais string estão nulas ou em branco e retorna o primeiro elemento que
 possuir um valor
 </summary>
 <param name="First">Primeiro Item</param>
 <param name="N">    Outros itens</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.BlankCoalesce(System.String[])">
 <summary>
 Verifica se dois ou mais string estão nulas ou em branco e retorna o primeiro elemento que
 possuir um valor
 </summary>
 <param name="N">Itens</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IfExpression``1(System.String,``0,``0)">
 <summary>
 Escolhe um valor de acordo com o resultado de uma expressão
 </summary>
 <param name="Expression">   Resultado da expressão booliana</param>
 <param name="ChooseIfTrue"> Valor retornado se a expressão for verdadeira</param>
 <param name="ChooseIfFalse">Valor retornado se a expressão for falsa</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
 <summary>
 Verifica se uma lista, coleção ou array contem todos os itens de outra lista, coleção ou array.
 </summary>
 <typeparam name="Type">Tipo do objeto</typeparam>
 <param name="List1">Lista 1</param>
 <param name="List2">Lista2</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.OnlyOneOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
 <summary>
 Verifica se somente um unico elemento corresponde a condição
 </summary>
 <typeparam name="Type"></typeparam>
 <param name="List"></param>
 <param name="predicate"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
 <summary>
 Verifica se uma lista, coleção ou array contem um dos itens de outra lista, coleção ou array.
 </summary>
 <typeparam name="Type">Tipo do objeto</typeparam>
 <param name="List1">Lista 1</param>
 <param name="List2">Lista2</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.CreateDictionary``1(``0)">
 <summary>
 Converte uma classe para um <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
 <typeparam name="Type">Tipo da classe</typeparam>
 <param name="Obj">Object</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.CreateDictionaryEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Converte uma classe para um <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
 <typeparam name="Type">Tipo da classe</typeparam>
 <param name="Obj">Object</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.DistinctCount``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Conta de maneira distinta items de uma coleçao
 </summary>
 <typeparam name="Type">TIpo de Objeto</typeparam>
 <param name="Arr">colecao</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.DistinctCountTop``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
 <summary>
 Conta de maneira distinta N items de uma coleçao e agrupa o resto
 </summary>
 <typeparam name="Type">TIpo de Objeto</typeparam>
 <param name="Arr">colecao</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.TakeTop``2(System.Collections.Generic.IDictionary{``0,``1},System.Int32,``0)">
 <summary>
 traz os top N valores de um dicionario e agrupa os outros
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Dic"></param>
 <param name="Top"></param>
 <param name="GroupOthersLabel"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.TakeTop``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.IEnumerable{``1}},System.Int32,``0)">
 <summary>
 traz os top N valores de um dicionario e agrupa os outros
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Dic"></param>
 <param name="Top"></param>
 <param name="GroupOthersLabel"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.DistinctCount``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
 <summary>
 Conta de maneira distinta items de uma coleçao a partir de uma propriedade
 </summary>
 <typeparam name="Type">TIpo de Objeto</typeparam>
 <param name="Arr">colecao</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.DistinctCountTop``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Int32,``1)">
 <summary>
 Conta de maneira distinta N items de uma coleçao a partir de uma propriedade e agrupa o resto em outra
 </summary>
 <typeparam name="Type">TIpo de Objeto</typeparam>
 <param name="Arr">colecao</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)">
 <summary>
 Retorna o primeiro objeto de uma lista ou um objeto especifico se a lista estiver vazia
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source">   </param>
 <param name="alternate"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.FirstOr``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
 <summary>
 Retorna o primeiro objeto de uma lista ou um objeto especifico se a lista estiver vazia
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source">   </param>
 <param name="alternate"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.FirstAny``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
 <summary>
 O primeiro valor não nulo de acordo com uma lista de predicados executados nesta lista
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
 <param name="predicate"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.FirstAnyOr``1(System.Collections.Generic.IEnumerable{``0},``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
 <summary>
 O primeiro valor não nulo de acordo com uma lista de predicados executados nesta lista
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
 <param name="predicate"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.HasAttribute(System.Reflection.PropertyInfo,System.Type)">
 <summary>
 Verifica se um atributo foi definido em uma propriedade de uma classe
 </summary>
 <param name="target"></param>
 <param name="attribType"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.HasAttribute``1(System.Reflection.PropertyInfo)">
 <summary>
 Verifica se um atributo foi definido em uma propriedade de uma classe
 </summary>
 <param name="target"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetEnumValue``1(System.String)">
 <summary>
 Traz o valor de uma enumeração a partir de uma string
 </summary>
 <typeparam name="T"></typeparam>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetEnumValueAsString``1(``0)">
 <summary>
 Traz o valor de uma enumeração a partir de uma string
 </summary>
 <typeparam name="T"></typeparam>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetEnumValues``1">
 <summary>
 Traz todos os Valores de uma enumeração
 </summary>
 <typeparam name="T"></typeparam>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetProperties``1(``0,System.Reflection.BindingFlags)">
 <summary>
 Traz uma Lista com todas as propriedades de um objeto
 </summary>
 <param name="MyObject">Objeto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetProperties``1(``0)">
 <summary>
 Traz uma Lista com todas as propriedades de um objeto
 </summary>
 <param name="MyObject">Objeto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetFields``1(``0)">
 <summary>
 Traz uma Lista com todas as propriedades de um objeto
 </summary>
 <param name="MyObject">Objeto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetProperty``1(``0,System.String)">
 <summary>
 Traz uma propriedade de um objeto
 </summary>
 <param name="MyObject">Objeto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetField``1(``0,System.String)">
 <summary>
 Traz uma propriedade de um objeto
 </summary>
 <param name="MyObject">Objeto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetPropertyValue``2(``1,System.String)">
 <summary>
 Traz uma propriedade de um objeto
 </summary>
 <param name="MyObject">Objeto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetResourceBytes(System.Reflection.Assembly,System.String)">
 <summary>
 Pega os bytes de um arquivo embutido no assembly
 </summary>
 <param name="FileName"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetResourceFileText(System.Reflection.Assembly,System.String)">
 <summary>
 Pega o texto de um arquivo embutido no assembly
 </summary>
 <param name="FileName">Nome do arquivo embutido dentro do assembly (Embedded Resource)</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.HasProperty(System.Type,System.String,System.Boolean)">
 <summary>
 Verifica se um tipo possui uma propriedade
 </summary>
 <param name="Type">        </param>
 <param name="PropertyName"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.HasProperty(System.Object,System.String)">
 <summary>
 Verifica se um tipo possui uma propriedade
 </summary>
 <param name="Obj"> </param>
 <param name="Name"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsArrayOf``1(System.Type)">
 <summary>
 Verifica se o tipo é um array de um objeto especifico
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Type"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)">
 <summary>
 Verifica se o tipo é um array de um objeto especifico
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsDictionary(System.Object)">
 <summary>
 Verifica se o objeto é um iDictionary
 </summary>
 <param name="obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsIn``1(``0,``0[])">
 <summary>
 Verifica se o objeto existe dentro de uma Lista, coleção ou array.
 </summary>
 <typeparam name="Type">Tipo do objeto</typeparam>
 <param name="Obj"> objeto</param>
 <param name="List">Lista</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
 <summary>
 Verifica se o objeto existe dentro de uma Lista, coleção ou array.
 </summary>
 <typeparam name="Type">Tipo do objeto</typeparam>
 <param name="Obj"> objeto</param>
 <param name="List">Lista</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})">
 <summary>
 Verifica se o objeto existe dentro de um texto
 </summary>
 <typeparam name="Type">Tipo do objeto</typeparam>
 <param name="Obj"> objeto</param>
 <param name="TExt">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsInAny``1(``0,System.Collections.Generic.IEnumerable{``0}[],System.Collections.Generic.IEqualityComparer{``0})">
 <summary>
 Verifica se o objeto existe dentro de uma ou mais Listas, coleções ou arrays.
 </summary>
 <typeparam name="Type">Tipo do objeto</typeparam>
 <param name="Obj"> objeto</param>
 <param name="List">Lista</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsGenericOf(System.Type,System.Type)">
 <summary>
 Verifica se um tipo e generico de outro
 </summary>
 <param name="MainType"></param>
 <param name="Type"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsList(System.Object)">
 <summary>
 Verifica se o objeto é uma lista
 </summary>
 <param name="obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsEnumerable(System.Object)">
 <summary>
 Verifica se o objeto é uma lista
 </summary>
 <param name="obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
 <summary>
 Verifica se o não objeto existe dentro de uma Lista, coleção ou array.
 </summary>
 <typeparam name="Type">Tipo do objeto</typeparam>
 <param name="Obj"> objeto</param>
 <param name="List">Lista</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsNotIn``1(``0,System.String,System.Collections.Generic.IEqualityComparer{System.Char})">
 <summary>
 Verifica se o objeto não existe dentro de um texto
 </summary>
 <typeparam name="Type">Tipo do objeto</typeparam>
 <param name="Obj"> objeto</param>
 <param name="TExt">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsNumericType``1(``0)">
 <summary>
 Verifica se o objeto é do tipo numérico.
 </summary>
 <remarks>
 Boolean is not considered numeric.
 </remarks>
</member>
<member name="M:InnerLibs.ClassTools.IsTypeOf``2(``0)">
 <summary>
 Verifica se um objeto é de um determinado tipo
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsTypeOf``1(``0,System.Type)">
 <summary>
 Verifica se um objeto é de um determinado tipo
 </summary>
 <typeparam name="O"></typeparam>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsNullableTypeOf``2(``0)">
 <summary>
 Verifica se um objeto é de um determinado tipo
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsNullableTypeOf``1(``0,System.Type)">
 <summary>
 Verifica se um objeto é de um determinado tipo
 </summary>
 <typeparam name="O"></typeparam>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetTypeOf``1(``0)">
 <summary>
 Retorna o <see cref="T:System.Type"/> do objeto mesmo se ele for nulo
 </summary>
 <typeparam name="O"></typeparam>
 <param name="Obj"></param>
 <returns>o tipo do objeto ou o prorio objeto se ele for um <see cref="T:System.Type"/></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetNullableTypeOf``1(``0)">
 <summary>
 Retorna o <see cref="T:System.Type"/> equivalente a <typeparamref name="T"/>   ou o <see cref="T:System.Type"/> do objeto <see cref="T:System.Nullable`1"/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Obj"></param>
 <returns>o tipo do objeto ou o tipo do objeto anulavel ou o prorio objeto se ele for um <see cref="T:System.Type"/></returns>
</member>
<member name="M:InnerLibs.ClassTools.LastOr``1(System.Collections.Generic.IEnumerable{``0},``0)">
 <summary>
 Retorna o primeiro objeto de uma lista ou um objeto especifico se a lista estiver vazia
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source">   </param>
 <param name="alternate"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.Merge(System.Collections.Specialized.NameValueCollection[])">
 <summary>
 Mescla varios <see cref="T:System.Collections.Specialized.NameValueCollection"/> em um unico <see cref="T:System.Collections.Specialized.NameValueCollection"/>
 </summary>
 <param name="NVC"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.NullCoalesce``1(System.Nullable{``0},System.Nullable{``0}[])">
 <summary>
 Verifica se dois ou mais valores são nulos e retorna o primeiro elemento que possuir um valor
 </summary>
 <typeparam name="T">Tipo</typeparam>
 <param name="First">Primeiro Item</param>
 <param name="N">    Outros itens</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.NullCoalesce``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
 <summary>
 Verifica se dois ou mais valores são nulos e retorna o primeiro elemento que possuir um valor
 </summary>
 <typeparam name="T">Tipo</typeparam>
 <param name="List">Outros itens</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.NullCoalesce``1(``0,``0[])">
 <summary>
 Verifica se dois ou mais valores são nulos e retorna o primeiro elemento que possuir um valor
 </summary>
 <typeparam name="T">Tipo</typeparam>
 <param name="First">Primeiro Item</param>
 <param name="N">    Outros itens</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.NullCoalesce``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Verifica se dois ou mais valores são nulos e retorna o primeiro elemento que possuir um valor
 </summary>
 <typeparam name="T">Tipo</typeparam>
 <param name="List">Outros itens</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.RemoveIfExist``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
 <summary>
 Remove de um dicionario as respectivas Keys se as mesmas existirem
 </summary>
 <typeparam name="TKey"></typeparam>
 <typeparam name="Tvalue"></typeparam>
 <param name="dic"> </param>
 <param name="Keys"></param>
</member>
<member name="M:InnerLibs.ClassTools.RemoveIfExist``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
 <summary>
 Remove de um dicionario os valores encontrados pelo predicate
 </summary>
 <typeparam name="TKey"></typeparam>
 <typeparam name="Tvalue"></typeparam>
 <param name="dic">      </param>
 <param name="predicate"></param>
</member>
<member name="M:InnerLibs.ClassTools.SetPropertyValue``1(``0,System.String,System.Object)">
 <summary>
 Seta o valor de uma propriedade de um objeto
 </summary>
 <param name="MyObject">    Objeto</param>
 <param name="PropertyName">Nome da properiedade</param>
 <param name="Value">       Valor da propriedade definida por <paramref name="PropertyName"/></param>
 <typeparam name="Type">
 Tipo do <paramref name="Value"/> da propriedade definida por <paramref name="PropertyName"/>
 </typeparam>
</member>
<member name="M:InnerLibs.ClassTools.Toggle``1(``0,``0,``0)">
 <summary>
 Alterna uma variavel ente 2 valores diferentes
 </summary>
 <param name="Current">Objeto contendo o primeiro ou segundo valor</param>
 <param name="TrueValue">Primeiro valor</param>
 <param name="FalseValue">Segundo Valor</param>
</member>
<member name="T:InnerLibs.ColorExtensions">
 <summary>
 Modulo de Conversão de Cores
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.ColorExtensions.ToConsoleColor(System.Drawing.Color)">
 <summary>
 Retorna a <see cref="T:System.ConsoleColor"/> mais proxima de uma <see cref="T:System.Drawing.Color"/>
 </summary>
 <param name="Color"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.ToColor(System.ConsoleColor)">
 <summary>
 Retorna a <see cref="T:System.Drawing.Color"/> a partir de uma <see cref="T:System.ConsoleColor"/>
 </summary>
 <param name="Color"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.ToHSVColor(System.ConsoleColor)">
 <summary>
 Retorna a <see cref="T:System.Drawing.Color"/> a partir de uma <see cref="T:System.ConsoleColor"/>
 </summary>
 <param name="Color"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.MonochromaticPallete(System.Drawing.Color,System.Int32,System.Boolean)">
 <summary>
 Gera uma paleta de cores monocromatica com <paramref name="Amount"/> amostras a partir de uma <paramref name="Color"/> base.
 </summary>
 <param name="Color"></param>
 <param name="Amount"></param>
 <returns></returns>
 <remarks>A distancia entre as cores será maior se a quantidade de amostras for pequena</remarks>
</member>
<member name="M:InnerLibs.ColorExtensions.GetNegativeColor(System.Drawing.Color)">
 <summary>
 Retorna  a cor negativa de uma cor
 </summary>
 <param name="TheColor">Cor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.GetContrastColor(System.Drawing.Color,System.Single)">
 <summary>
 Retorna uma cor de contraste baseado na iluminacao da primeira cor: Uma cor clara se a primeira for escura. Uma cor escura se a primeira for clara
 </summary>
 <param name="TheColor">Primeira cor</param>
 <param name="Percent">Grau de mesclagem da cor escura ou clara</param>
 <returns>Uma cor clara se a primeira cor for escura, uma cor escura se a primeira for clara</returns>
</member>
<member name="M:InnerLibs.ColorExtensions.IsDark(System.Drawing.Color)">
 <summary>
 Verifica se uma cor é escura
 </summary>
 <param name="TheColor">Cor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.IsLight(System.Drawing.Color)">
 <summary>
 Verifica se uma clor é clara
 </summary>
 <param name="TheColor">Cor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.MergeWith(System.Drawing.Color,System.Drawing.Color,System.Single)">
 <summary>
 Mescla duas cores a partir de uma porcentagem
 </summary>
 <param name="TheColor">Cor principal</param>
 <param name="AnotherColor">Cor de mesclagem</param>
 <param name="percent">Porcentagem de mescla</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.MakeDarker(System.Drawing.Color,System.Single)">
 <summary>
 Escurece a cor mesclando ela com preto
 </summary>
 <param name="TheColor">Cor</param>
 <param name="percent">porcentagem de mesclagem</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.MakeLighter(System.Drawing.Color,System.Single)">
 <summary>
 Clareia a cor mistuando ela com branco
 </summary>
 <param name="TheColor">Cor</param>
 <param name="percent">Porcentagem de mesclagem</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.Lerp(System.Drawing.Color,System.Drawing.Color,System.Single)">
 <summary>
 Mescla duas cores usando Lerp
 </summary>
 <param name="FromColor">Cor</param>
 <param name="ToColor">Outra cor</param>
 <param name="amount">Indice de mesclagem</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.ToHexadecimal(System.Drawing.Color,System.Boolean)">
 <summary>
 Converte uma cor de sistema para hexadecimal
 </summary>
 <param name="Color">Cor do sistema</param>
 <param name="Hash">parametro indicando se a cor deve ser retornada com ou sem hashsign (#)</param>
 <returns>string contendo o hexadecimal da cor</returns>
</member>
<member name="M:InnerLibs.ColorExtensions.ToCssRGB(System.Drawing.Color,System.Boolean)">
 <summary>
 Converte uma cor de sistema para CSS RGB
 </summary>
 <param name="Color">Cor do sistema</param>
 <returns>String contendo a cor em RGB</returns>
</member>
<member name="M:InnerLibs.ColorExtensions.ToColor(System.String)">
 <summary>
 Gera uma cor a partir de uma palavra
 </summary>
 <param name="Text">Pode ser um texto em branco (Cor aleatória), uma <see cref="T:System.Drawing.KnownColor"/> (retorna aquela cor exata) ou uma palavra qualquer (gera proceduralmente uma cor)</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.RandomColor(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Gera uma cor aleatória misturandoo ou não os canais RGB
 </summary>
 <param name="Red">-1 para Random ou de 0 a 255 para especificar o valor</param>
 <param name="Green">-1 para Random ou de 0 a 255 para especificar o valor</param>
 <param name="Blue">-1 para Random ou de 0 a 255 para especificar o valor</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.ColorExtensions.KnowColors">
 <summary>
 Lista com todas as <see cref="T:System.Drawing.KnownColor"/> convertidas em <see cref="T:System.Drawing.Color"/> (Igonora as systemcolors)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.GetClosestKnowColor(System.Drawing.Color)">
 <summary>
 Retorna uma <see cref="T:System.Drawing.KnownColor"/> mais proxima de outra cor
 </summary>
 <param name="Color"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.EuclideanDistance(System.Drawing.Color,System.Drawing.Color)">
 <summary>
 Retorna a distancia euclideana
 </summary>
 <param name="Color"></param>
 <param name="OtherColor"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.GetClosestColorName(System.Drawing.Color)">
 <summary>
 Retorna o nome comum mais proximo a esta cor
 </summary>
 <param name="Color"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.GetColorName(System.Drawing.Color)">
 <summary>
 Retorna o nome da cor
 </summary>
 <param name="Color"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorExtensions.IsReadable(System.Drawing.Color,System.Drawing.Color,System.Int32)">
 <summary>
 Verifica se uma cor é legivel sobre outra
 </summary>
 <param name="Color"></param>
 <param name="BackgroundColor"></param>
 <param name="Size"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Console.ConsoleExtensions">
 <summary>
 Métodos para manipulação de aplicações baseadas em Console (System.Console)
 </summary>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ConsoleWrite(System.String,System.Collections.Generic.Dictionary{System.String,System.ConsoleColor},System.Int32)">
 <summary>
 Escreve no console colorindo palavras especificas
 </summary>
 <param name="Text">Texto</param>
 <param name="CustomColoredWords">Lista com as palavras e suas respectivas cores</param>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ConsoleWrite(System.String,System.Collections.Generic.Dictionary{System.String,System.ConsoleColor},System.StringComparison,System.Int32)">
 <summary>
 Escreve no console colorindo palavras especificas
 </summary>
 <param name="Text">Texto</param>
 <param name="CustomColoredWords">Lista com as palavras e suas respectivas cores</param>
 <param name="Comparison">Tipo de comparação</param>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ConsoleWrite(System.String,System.Int32)">
 <summary>
 Escreve no console usando uma cor especifica
 </summary>
 <param name="Text">Texto</param>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ConsoleWrite(System.String,System.ConsoleColor,System.Int32)">
 <summary>
 Escreve no console usando uma cor especifica
 </summary>
 <param name="Text">Texto</param>
 <param name="Color">Cor</param>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ConsoleWriteLine(System.String,System.Collections.Generic.Dictionary{System.String,System.ConsoleColor},System.Int32)">
 <summary>
 Escreve uma linha no console colorindo palavras especificas
 </summary>
 <param name="Text">Texto</param>
 <param name="CustomColoredWords">Lista com as palavras e suas respectivas cores</param>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ConsoleWriteLine(System.String,System.ConsoleColor,System.Int32)">
 <summary>
 Escreve uma linha no console usando uma cor especifica
 </summary>
 <param name="Text">Texto</param>
 <param name="Color">Cor</param>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ConsoleWriteLine(System.String,System.Int32)">
 <summary>
 Escreve uma linha no console usando uma cor especifica
 </summary>
 <param name="Text">Texto</param>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ConsoleWriteError``1(``0,System.String,System.String,System.ConsoleColor,System.Int32)">
 <summary>
 Escreve o texto de uma exception no console
 </summary>
 <param name="Exception">Texto</param>
 <param name="Message">Mensagem Adicional de erro</param>
 <param name="Color">Cor</param>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ConsoleWriteError``1(``0,System.String,System.ConsoleColor,System.Int32)">
 <summary>
 Escreve o texto de uma exception no console
 </summary>
 <param name="Exception">Texto</param>
 <param name="Color">Cor</param>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ConsoleWriteError``1(``0,System.String)">
 <summary>
 Escreve o texto de uma exception no console
 </summary>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ConsoleWriteError``1(``0)">
 <summary>
 Escreve o texto de uma exception no console
 </summary>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ConsoleBreakLine(System.Int32)">
 <summary>
 Pula uma ou mais linhas no console
 </summary>
 <param name="Lines">Numero de linhas</param>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ConsoleBreakLine(System.String,System.Int32)">
 <summary>
 Pula uma ou mais linhas no console e retorna a mesma string (usada como chaining)
 </summary>
 <param name="Lines">Numero de linhas</param>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ReadLine">
 <summary>
 Le a proxima linha inserida no console pelo usuário
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ReadChar">
 <summary>
 Le o proximo caractere inserido no console pelo usuário
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.ReadKey">
 <summary>
 Le a proxima tecla pressionada pelo usuário
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.Beep(System.Int32)">
 <summary>
 Toca um Beep
 </summary>
 <param name="Times">Numero de beeps</param>
</member>
<member name="M:InnerLibs.Console.ConsoleExtensions.Beep(System.Int32,System.Int32,System.Int32)">
 <summary>
 Toca um beep especifico
 </summary>
 <param name="Frequency">Frequencia</param>
 <param name="Duration">Duracao em milisegundos</param>
</member>
<member name="M:InnerLibs.Converter.DefineEmptyList``1(``0)">
 <summary>
 Cria uma lista vazia usando um objeto como o tipo da lista. Util para tipos anonimos
 </summary>
 <typeparam name="T"></typeparam>
 <param name="ObjectForDefinition">Objeto que definirá o tipo da lista</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.DefineEmptyList``1">
 <summary>
 Cria uma lista vazia usando um objeto como o tipo da lista. Util para tipos anonimos
 </summary>
 <typeparam name="T"></typeparam>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.StartList``1(``0)">
 <summary>
 Cria uma e adciona um objeto a ela. Util para tipos anonimos
 </summary>
 <typeparam name="T"></typeparam>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.ForceArray(System.Object,System.Type)">
 <summary>
 Verifica se um objeto é um array, e se negativo, cria um array de um unico item com o valor do objeto
 </summary>
 <param name="Obj">Objeto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.ForceArray``1(System.Object)">
 <summary>
 Verifica se um objeto é um array, e se não, cria um array com oeste objeto
 </summary>
 <param name="Obj">Objeto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.MergeKeys``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{``0,``1}},``0[])">
 <summary>
 Aplica as mesmas keys a todos os dicionarios de uma lista
 </summary>
 <typeparam name="TKey">Tipo da key</typeparam>
 <typeparam name="TValue">Tipo do Valor</typeparam>
 <param name="Dics">Dicionarios</param>
<param name="AditionalKeys">Chaves para serem incluidas nos dicionários mesmo se não existirem em nenhum deles</param>
</member>
<member name="M:InnerLibs.Converter.ToBoolean``1(``0)">
 <summary>
 Converte um tipo para Boolean. Retorna Nothing (NULL) se a conversão falhar
 </summary>
 <typeparam name="FromType">Tipo de origem</typeparam>
 <param name="Value">Variavel com valor</param>
 <returns>Valor convertido em novo tipo</returns>
</member>
<member name="M:InnerLibs.Converter.ToInteger``1(``0)">
 <summary>
 Converte um tipo para Integer. Retorna Nothing (NULL) se a conversão falhar
 </summary>
 <typeparam name="FromType">Tipo de origem</typeparam>
 <param name="Value">Variavel com valor</param>
 <returns>Valor convertido em novo tipo</returns>
</member>
<member name="M:InnerLibs.Converter.ToDecimal``1(``0)">
 <summary>
 Converte um tipo para Decimal. Retorna Nothing (NULL) se a conversão falhar
 </summary>
 <typeparam name="FromType">Tipo de origem</typeparam>
 <param name="Value">Variavel com valor</param>
 <returns>Valor convertido em novo tipo</returns>
</member>
<member name="M:InnerLibs.Converter.ToSingle``1(``0)">
 <summary>
 Converte um tipo para Single. Retorna Nothing (NULL) se a conversão falhar
 </summary>
 <typeparam name="FromType">Tipo de origem</typeparam>
 <param name="Value">Variavel com valor</param>
 <returns>Valor convertido em novo tipo</returns>
</member>
<member name="M:InnerLibs.Converter.ToDateTime``1(``0)">
 <summary>
 Converte um tipo para DateTime. Retorna Nothing (NULL) se a conversão falhar
 </summary>
 <typeparam name="FromType">Tipo de origem</typeparam>
 <param name="Value">Variavel com valor</param>
 <returns>Valor convertido em novo tipo</returns>
</member>
<member name="M:InnerLibs.Converter.ToDateTime``1(``0,System.String)">
 <summary>
 Converte um tipo para DateTime. Retorna Nothing (NULL) se a conversão falhar
 </summary>
 <typeparam name="FromType">Tipo de origem</typeparam>
 <param name="Value">Variavel com valor</param>
 <returns>Valor convertido em novo tipo</returns>
</member>
<member name="M:InnerLibs.Converter.ToDateTime``1(``0,System.Globalization.CultureInfo)">
 <summary>
 Converte um tipo para DateTime. Retorna Nothing (NULL) se a conversão falhar
 </summary>
 <typeparam name="FromType">Tipo de origem</typeparam>
 <param name="Value">Variavel com valor</param>
 <returns>Valor convertido em novo tipo</returns>
</member>
<member name="M:InnerLibs.Converter.ToDouble``1(``0)">
 <summary>
 Converte um tipo para Double. Retorna Nothing (NULL) se a conversão falhar
 </summary>
 <typeparam name="FromType">Tipo de origem</typeparam>
 <param name="Value">Variavel com valor</param>
 <returns>Valor convertido em novo tipo</returns>
</member>
<member name="M:InnerLibs.Converter.ToLong``1(``0)">
 <summary>
 Converte um tipo para Integer. Retorna Nothing (NULL) se a conversão falhar
 </summary>
 <typeparam name="FromType">Tipo de origem</typeparam>
 <param name="Value">Variavel com valor</param>
 <returns>Valor convertido em novo tipo</returns>
</member>
<member name="M:InnerLibs.Converter.ChangeType``2(``1)">
 <summary>
 Converte um tipo para outro. Retorna Nothing (NULL) se a conversão falhar
 </summary>
 <typeparam name="ToType">Tipo</typeparam>
 <typeparam name="FromType">Tipo de origem</typeparam>
 <param name="Value">Variavel com valor</param>
 <returns>Valor convertido em novo tipo ou null se a conversão falhar</returns>
</member>
<member name="M:InnerLibs.Converter.ChangeType``1(System.Object)">
 <summary>
 Converte um tipo para outro. Retorna Nothing (NULL) se a conversão falhar
 </summary>
 <typeparam name="ToType">Tipo</typeparam>
 <param name="Value">Variavel com valor</param>
 <returns>Valor convertido em novo tipo ou null se a conversão falhar</returns>
</member>
<member name="M:InnerLibs.Converter.ChangeType``1(``0,System.Type)">
 <summary>
 Converte um tipo para outro. Retorna Nothing (NULL) ou DEFAULT se a conversão falhar
 </summary>
 <typeparam name="FromType">Tipo de origem</typeparam>
 <param name="Value">Variavel com valor</param>
 <returns>Valor convertido em novo tipo ou null (ou default) se a conversão falhar</returns>
</member>
<member name="M:InnerLibs.Converter.ChangeArrayType``2(``1[])">
 <summary>
 Converte um array de um tipo para outro
 </summary>
 <typeparam name="ToType">Tipo do array</typeparam>
 <param name="Value">Array com elementos</param>
 <returns>Array convertido em novo tipo</returns>
</member>
<member name="M:InnerLibs.Converter.ChangeArrayType``1(``0[],System.Type)">
 <summary>
 Converte um array de um tipo para outro
 </summary>
 <param name="Value">Array com elementos</param>
 <returns>Array convertido em novo tipo</returns>
</member>
<member name="M:InnerLibs.Converter.ChangeIEnumerableType``2(System.Collections.Generic.IEnumerable{``1})">
 <summary>
 Converte um IEnumerable de um tipo para outro
 </summary>
 <typeparam name="ToType">Tipo do array</typeparam>
 <param name="Value">Array com elementos</param>
 <returns>Array convertido em novo tipo</returns>
</member>
<member name="M:InnerLibs.Converter.ChangeIEnumerableType``1(System.Collections.Generic.IEnumerable{``0},System.Type)">
 <summary>
 Converte um IEnumerable de um tipo para outro
 </summary>
 <param name="Value">Array com elementos</param>
 <returns>Array convertido em novo tipo</returns>
</member>
<member name="M:InnerLibs.Converter.Merge``1(System.Collections.Generic.Dictionary{``0,System.Object},System.Collections.Generic.Dictionary{``0,System.Object}[])">
 <summary>
 Mescla varios dicionarios em um unico dicionario. Quando uma key existir em mais de um dicionario os valores sao agrupados em arrays
 </summary>
 <typeparam name="Tkey">Tipo da Key, Deve ser igual para todos os dicionarios</typeparam>
 <param name="FirstDictionary">Dicionario Principal</param>
 <param name="Dictionaries">Outros dicionarios</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}})">
 <summary>
 Returna um <see cref="T:System.Collections.Generic.Dictionary`2"/> a partir de um <see cref="T:System.Linq.IGrouping`2"/>
 </summary>
 <typeparam name="TKey"></typeparam>
 <typeparam name="TValue"></typeparam>
 <param name="groupings"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.SetValuesIn``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 Seta as propriedades de uma classe a partir de um dictionary
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Dic"></param>
</member>
<member name="M:InnerLibs.Converter.SetValuesIn``1(System.Collections.Generic.Dictionary{System.String,System.Object},``0,System.Object[])">
 <summary>
 Seta as propriedades e campos de uma classe a partir de um dictionary
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Dic"></param>
 <param name="Obj"></param>
</member>
<member name="M:InnerLibs.Converter.SetValuesIn``1(System.Collections.Generic.Dictionary{System.String,System.Object},``0)">
 <summary>
 Seta as propriedades e campos de uma classe a partir de um dictionary
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Dic"></param>
 <param name="Obj"></param>
</member>
<member name="M:InnerLibs.Converter.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
 <summary>
 Transforma uma lista de pares em um Dictionary
 </summary>
 <typeparam name="TKey"></typeparam>
 <typeparam name="TValue"></typeparam>
 <param name="items"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.ToDictionary(System.Collections.Specialized.NameValueCollection,System.String[])">
 <summary>
 Converte um NameValueCollection para um <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
 <param name="[NameValueCollection]">Formulario</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.FromImage(System.Drawing.Image,System.Int32)">
 <summary>
 Retorna a cor vibrante de uma imagem
 </summary>
 <param name="Img"></param>
 <param name="Reduce"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.RandomColor(System.Drawing.Image,System.Int32)">
 <summary>
 Retorna uma cor aleatoria a partir da paleta de cores de uma imagem
 </summary>
 <param name="Img"></param>
 <param name="Reduce"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.RandomColor(System.Collections.Generic.IEnumerable{System.Drawing.Color})">
 <summary>
 Retorna uma cor aleatória a partir de uma lista de cores
 </summary>
 <param name="Colors"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.RandomColor(System.String)">
 <summary>
 Gera uma <see cref="T:InnerLibs.HSVColor"/> opaca aleatoria
 </summary>
 <param name="Name"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.RandomColor(InnerLibs.ColorMood)">
 <summary>
 Gera uma <see cref="T:InnerLibs.HSVColor"/> opaca aleatoria dentro de um Mood especifico
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.RandomColor(System.Linq.Expressions.Expression{System.Func{InnerLibs.HSVColor,System.Boolean}})">
 <summary>
 Gera uma <see cref="T:InnerLibs.HSVColor"/> opaca aleatoria dentro de uma especificacao
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.RandomColorList(System.Int32,InnerLibs.ColorMood)">
 <summary>
 Gera uma lista com <see cref="T:InnerLibs.HSVColor"/>   aleatorias
 </summary>
 <param name="Quantity"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.RandomColorList(System.Int32,System.Linq.Expressions.Expression{System.Func{InnerLibs.HSVColor,System.Boolean}})">
 <summary>
 Gera uma lista com <see cref="T:InnerLibs.HSVColor"/>   aleatorias
 </summary>
 <param name="Quantity"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.RandomTransparentColor(System.String)">
 <summary>
 Gera uma <see cref="T:InnerLibs.HSVColor"/>  aleatoria com transparencia
 </summary>
 <param name="Name"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.#ctor(System.Int32)">
 <summary>
 Instancia uma nova <see cref="T:InnerLibs.HSVColor"/> a aprtir de seu ARGB
 </summary>
</member>
<member name="M:InnerLibs.HSVColor.#ctor">
 <summary>
 Instancia uma nova <see cref="T:InnerLibs.HSVColor"/> transparente
 </summary>
</member>
<member name="M:InnerLibs.HSVColor.#ctor(System.Drawing.Color)">
 <summary>
 Instancia uma nova <see cref="T:InnerLibs.HSVColor"/> a partir de uma <see cref="T:System.Drawing.Color"/>
 </summary>
 <param name="Color">Cor do sistema</param>
</member>
<member name="M:InnerLibs.HSVColor.#ctor(System.String)">
 <summary>
 Instancia uma nova <see cref="T:InnerLibs.HSVColor"/> a partir de uma string de cor (colorname, hexadecimal ou string aleatoria)
 </summary>
 <param name="Color">Cor</param>
</member>
<member name="M:InnerLibs.HSVColor.#ctor(System.String,System.String)">
 <summary>
 Instancia uma nova HSVColor a partir de uma string de cor (colorname, hexadecimal ou  string aleatoria) e um Nome
 </summary>
 <param name="Color">Cor</param>
 <param name="Name">Nome da cor</param>
</member>
<member name="M:InnerLibs.HSVColor.#ctor(System.Drawing.Color,System.String)">
 <summary>
 Instancia uma nova HSVColor a partir de uma <see cref="T:System.Drawing.Color"/> e um Nome
 </summary>
 <param name="Color">Cor</param>
 <param name="Name">Nome da cor</param>
</member>
<member name="P:InnerLibs.HSVColor.ARGB">
 <summary>
 Retorna ou seta o valor ARGB de 32 bits dessa cor
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HSVColor.Hue">
 <summary>
 Hue (Matiz)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HSVColor.Saturation">
 <summary>
 Saturation (Saturação)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HSVColor.Luminance">
 <summary>
 Luminância
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HSVColor.Brightness">
 <summary>
 Brilho
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HSVColor.Red">
 <summary>
 Red (Vermelho)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HSVColor.Green">
 <summary>
 Green (Verde)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HSVColor.Blue">
 <summary>
 Blue (Azul)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HSVColor.Alpha">
 <summary>
 Alpha (Transparencia)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HSVColor.Opacity">
 <summary>
 Opacidade (de 1 a 100%)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HSVColor.Hexadecimal">
 <summary>
 Valor hexadecimal desta cor
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HSVColor.CSS">
 <summary>
 Valor RGBA() desta cor
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HSVColor.Mood">
 <summary>
 Mood da cor
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.GradientLevel(InnerLibs.HSVColor,System.Int32,System.Int32)">
 <summary>
 Retorna a cor intermediaria de um gradiente
 </summary>
 <param name="ToColor"></param>
 <param name="Position"></param>
 <param name="Size"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.HSVColor.Name">
 <summary>
 Nome atribuido a esta cor
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HSVColor.ClosestColorName">
 <summary>
 Nome original mais proximo desta cor
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.ToSystemColor">
 <summary>
 Retorna uma <see cref="T:System.Drawing.Color"/> desta <see cref="T:InnerLibs.HSVColor"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.IsReadable(InnerLibs.HSVColor,System.Int32)">
 <summary>
 Verifica se uma cor é legivel sobre outra cor
 </summary>
 <param name="BackgroundColor"></param>
 <param name="Size"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.MakeLighter(System.Single)">
 <summary>
 Retorna uma cor mais clara a partir desta cor
 </summary>
 <param name="Percent"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.MakeDarker(System.Single)">
 <summary>
 Retorna uma cor mais escura a partir desta cor
 </summary>
 <param name="Percent"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.IsLight">
 <summary>
 Verifica se uma cor e considerada clara
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.IsDark">
 <summary>
 Verifica se uma cor e considerada escura
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.IsMediumLight">
 <summary>
 Verifica se uma cor e considerada Medio Clara
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.IsMediumDark">
 <summary>
 Verifica se uma cor e considerada Medio Escura
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.IsMedium">
 <summary>
 Verifica se uma cor e considerada média
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Clone">
 <summary>
 Retorna uma cópia desta cor
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Combine(InnerLibs.HSVColor)">
 <summary>
 Retorna a combinação de 2 cores
 </summary>
 <param name="Color"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Distance(InnerLibs.HSVColor)">
 <summary>
 Retorna a distancia entre 2 cores
 </summary>
 <param name="Color"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Multiply(InnerLibs.HSVColor)">
 <summary>
 Retorna uma nova cor a partir da mistura multiplicativa de 2 cores
 </summary>
 <param name="Color"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Subtractive(InnerLibs.HSVColor)">
 <summary>
 Retorna uma nova cor a partir da mistura subtrativa de 2 cores
 </summary>
 <param name="Color"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Addictive(InnerLibs.HSVColor)">
 <summary>
 Retorna uma nova cor a partir da mistura aditiva de 2 cores
 </summary>
 <param name="Color"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Difference(InnerLibs.HSVColor)">
 <summary>
 Retorna uma nova cor a partir da diferença de 2 cores
 </summary>
 <param name="Color"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Average(InnerLibs.HSVColor)">
 <summary>
 Retorna a cor media entre 2 cores
 </summary>
 <param name="Color"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Sepia">
 <summary>
 Extrai os tons marrons de uma cor (filtro sépia)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.ContrastColor">
 <summary>
 Retorna a cor contrastante desta HSVColor
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Negative">
 <summary>
 Extrai a cor negativa desta cor
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.GrayFilter">
 <summary>
 Extrai o cinza desta cor
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.ModColor(System.Boolean,System.Int32[])">
 <summary>
 Retorna  novas HSVColor a partir da cor atual, movendo ela N graus na roda de cores
 </summary>
 <param name="excludeMe">Inclui esta cor no array</param>
 <param name="Degrees">Lista contendo os graus que serão movidos na roda de cores.</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.ModColor(System.Int32[])">
 <summary>
 Retorna  novas HSVColor a partir da cor atual, movendo ela N graus na roda de cores
 </summary>
 <param name="Degrees">Lista contendo os graus que serão movidos na roda de cores.</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Tetradic(System.Boolean)">
 <summary>
 Retorna as cores Quadraadas (tetradicas) desta cor
 </summary>
 <param name="ExcludeMe"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Analogous(System.Boolean)">
 <summary>
 Retorna as cores análogas desta cor
 </summary>
 <param name="ExcludeMe"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Square(System.Boolean)">
 <summary>
 Retorna as cores Quadraadas (tetradicas) desta cor
 </summary>
 <param name="ExcludeMe"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Triadic(System.Boolean)">
 <summary>
 Retorna as cores triadicas desta cor
 </summary>
 <param name="ExcludeMe"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Complementary(System.Boolean)">
 <summary>
 Retorna as cores complementares desta cor
 </summary>
 <param name="ExcludeMe"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.SplitComplementary(System.Boolean)">
 <summary>
  Retorna as cores split-complementares desta cor
 </summary>
 <param name="IncludeMe"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.Monochromatic(System.Decimal)">
 <summary>
 Retorna <paramref name="Amount"/> variacoes cores a partir da cor atual
 </summary>
 <param name="Amount"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.TetradicPallete(System.Int32)">
 <summary>
 Retorna uma paleta de cores tetradica (Monochromatica + Tetradica)
 </summary>
 <param name="Amount"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.TriadicPallete(System.Int32)">
 <summary>
 Retorna uma paleta de cores triadica (Monochromatica + Triadica)
 </summary>
 <param name="Amount"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.ComplementaryPallete(System.Int32)">
 <summary>
 Retorna uma paleta de cores complementares (complementares + monocromatica)
 </summary>
 <param name="Amount"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.HSVColor.SplitComplementaryPallete(System.Int32)">
 <summary>
 Retorna uma paleta de cores split-complementares (split-complementares + monocromatica)
 </summary>
 <param name="Amount"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.MicroORM.DbExtensions.DbTypes">
 <summary>
 Dicionario com os <see cref="T:System.Type"/> e seu <see cref="T:System.Data.DbType"/> correspondente
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.GetDbType``1(``0,System.Data.DbType)">
 <summary>
 Retorna um <see cref="T:System.Data.DbType"/> de um <see cref="T:System.Type"/>
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.GetTypeFromDb``1(System.Data.DbType,System.Type)">
 <summary>
 Retorna um <see cref="T:System.Type"/> de um <see cref="T:System.Data.DbType"/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Type"></param>
 <param name="Def"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.CreateCommand(System.Data.Common.DbConnection,System.String,System.Collections.Specialized.NameValueCollection)">
 <summary>
 Cria um <see cref="T:System.Data.Common.DbCommand"/> a partir de uma string SQL e um <see cref="T:System.Collections.Specialized.NameValueCollection"/>, tratando os parametros desta string como parametros SQL
 </summary>
 <param name="Connection"></param>
 <param name="SQL"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.CreateCommand(System.Data.Common.DbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 Cria um <see cref="T:System.Data.Common.DbCommand"/> a partir de uma string SQL e um <see cref="T:System.Collections.Generic.Dictionary`2"/>, tratando os parametros desta string como parametros SQL
 </summary>
 <param name="Connection"></param>
 <param name="SQL"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.CreateCommand(System.Data.Common.DbConnection,System.String,System.String[])">
 <summary>
 Cria um <see cref="T:System.Data.Common.DbCommand"/> a partir de uma string ou arquivo SQL, tratando os parametros {p} desta string como parametros SQL
 </summary>
 <param name="Connection"></param>
 <param name="FilePathOrSQL"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.CreateCommand(System.Data.Common.DbConnection,System.FormattableString)">
 <summary>
 Cria um <see cref="T:System.Data.Common.DbCommand"/> a partir de uma string interpolada, tratando os parametros desta string como parametros SQL
 </summary>
 <param name="Connection"></param>
 <param name="SQL"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.ToSQLString(System.Object)">
 <summary>
 Converte um objeto para uma string SQL, utilizando o objeto como parametro
 </summary>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.ToSQLString(System.FormattableString)">
 <summary>
 Converte uma <see cref="T:System.FormattableString"/> para uma string SQL, tratando seus parametros como parametros da query
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.ToProcedure(System.Data.Common.DbConnection,System.String,System.Collections.Specialized.NameValueCollection,System.String[])">
 <summary>
 Monta um Comando SQL para executar uma procedure especifica e trata valores especificos de
 um NameValueCollection como parametros da procedure
 </summary>
 <param name="NVC">Objeto</param>
 <param name="ProcedureName">  Nome da Procedure</param>
 <param name="Keys">Valores do nameValueCollection o que devem ser utilizados</param>
 <returns>Um DbCommand parametrizado</returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.ToProcedure``1(System.Data.Common.DbConnection,System.String,``0,System.String[])">
 <summary>
 Monta um Comando SQL para executar uma procedure especifica e trata propriedades espicificas de
 um objeto como parametros da procedure
 </summary>
 <param name="Obj">Objeto</param>
 <param name="ProcedureName">  Nome da Procedure</param>
 <param name="Keys">propriedades do objeto que devem ser utilizados</param>
 <returns>Um DbCommand parametrizado</returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.ToProcedure(System.Data.Common.DbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String[])">
 <summary>
 Monta um Comando SQL para executar uma procedure especifica e utiliza os pares de um dicionario como parametros da procedure
 </summary>
 <param name="Dic">Dicionario com os parametros</param>
 <param name="ProcedureName">  Nome da Procedure</param>
 <param name="Keys">CHaves de Dicionário que devem ser utilizadas</param>
 <returns>Um DbCommand parametrizado</returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.ToSQLFilter(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,InnerLibs.MicroORM.DbExtensions.LogicConcatenationOperator,System.String[])">
 <summary>
 Monta um Comando SQL para executar um SELECT com filtros a partir de um <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
 <param name="Dic">        Dicionario</param>
 <param name="TableName">  Nome da Tabela</param>
 <param name="FilterKeys">Parametros da URL que devem ser utilizados</param>
 <returns>Uma string com o comando montado</returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.CreateINSERTCommand``1(System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{``0},System.String)">
 <summary>
 Cria comandos de INSERT para cada objeto do tipo <typeparamref name="T"/> em uma lista
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Connection"></param>
 <param name="obj"></param>
 <param name="TableName"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.CreateINSERTCommand``1(System.Data.Common.DbConnection,``0,System.String)">
 <summary>
 Cria um comando de INSERT para o objeto do tipo <typeparamref name="T"/>
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.CreateUPDATECommand``1(System.Data.Common.DbConnection,``0,System.String,System.String)">
 <summary>
 Cria um comando de INSERT para o objeto do tipo <typeparamref name="T"/>
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLNone(System.Data.Common.DbConnection,System.FormattableString)">
 <summary>
 Executa um comando SQL e retorna o numero de linhas afetadas
 </summary>
 <param name="Connection"></param>
 <param name="SQL"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLNone(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
 <summary>
 Executa um comando SQL e retorna o numero de linhas afetadas
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLValue(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
 <summary>
 Retorna o primeiro resultado da primeira coluna de uma consulta SQL
 </summary>
 <param name="Connection"></param>
 <param name="Command"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLValue(System.Data.Common.DbConnection,System.FormattableString)">
 <summary>
 Retorna o primeiro resultado da primeira coluna de uma consulta SQL
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLValue``1(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
 <summary>
 Retorna o primeiro resultado da primeira coluna de uma consulta SQL como um tipo <typeparamref name="V"/>
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLValue``1(System.Data.Common.DbConnection,System.FormattableString)">
 <summary>
 Retorna o primeiro resultado da primeira coluna de uma consulta SQL como um tipo <typeparamref name="V"/>
 </summary>
</member>
<member name="P:InnerLibs.MicroORM.DbExtensions.LogWriter">
 <summary>
 Quando Configurado, escreve os parametros e queries executadas no TextWriterEspecifico
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLArray``1(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
 <summary>
 Retorna os resultado da primeira coluna de uma consulta SQL como um array do tipo <typeparamref name="T"/>
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLArray``1(System.Data.Common.DbConnection,System.FormattableString)">
 <summary>
 Retorna os resultado da primeira coluna de uma consulta SQL como um array do tipo <typeparamref name="T"/>
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLArray(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
 <summary>
 Retorna os resultado da primeira coluna de uma consulta SQL como um array
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLArray(System.Data.Common.DbConnection,System.FormattableString)">
 <summary>
 Retorna os resultado da primeira coluna de uma consulta SQL como um array
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLPairs(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
 <summary>
 Retorna os resultado das primeiras e ultimas colunas de uma consulta SQL como pares em um <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLPairs(System.Data.Common.DbConnection,System.FormattableString)">
 <summary>
 Retorna os resultado das primeiras e ultimas colunas de uma consulta SQL como pares em um <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLPairs``2(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
 <summary>
 Retorna os resultado das primeiras e ultimas colunas de uma consulta SQL como pares em um <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLPairs``2(System.Data.Common.DbConnection,System.FormattableString)">
 <summary>
 Retorna os resultado das primeiras e ultimas colunas de uma consulta SQL como pares em um <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLSet``1(System.Data.Common.DbConnection,InnerLibs.MicroORM.Select{``0},System.Boolean)">
 <summary>
 Executa uma query SQL parametrizada e retorna os resultados do primeiro resultset mapeados para uma lista de  <typeparamref name="T"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLRow``1(System.Data.Common.DbConnection,InnerLibs.MicroORM.Select{``0},System.Boolean)">
 <summary>
 Executa uma query SQL parametrizada e retorna os resultados da primeira linha como um <typeparamref name="T"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLSet(System.Data.Common.DbConnection,System.FormattableString)">
 <summary>
 Executa uma query SQL parametrizada e retorna os resultados do primeiro resultset mapeados para uma lista de  <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
 <param name="Connection"></param>
 <param name="SQL"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLRow(System.Data.Common.DbConnection,System.FormattableString)">
 <summary>
 Executa uma query SQL parametrizada e retorna o resultado da primeira linha mapeada para um  <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLSet(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
 <summary>
 Executa uma query SQL parametrizada e retorna os resultados do primeiro resultset mapeados para uma lista de  <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLRow(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
 <summary>
 Executa uma query SQL parametrizada e retorna o resultado da primeira linha mapeada para um  <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLRow``1(System.Data.Common.DbConnection,System.Data.Common.DbCommand,System.Boolean)">
 <summary>
 Executa uma query SQL parametrizada e retorna o resultado da primeira linha mapeada para uma classe POCO do tipo <typeparamref name="T"/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Connection"></param>
 <param name="SQL"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLRow``1(System.Data.Common.DbConnection,System.FormattableString,System.Boolean)">
 <summary>
 Executa uma query SQL parametrizada e retorna o resultado da primeira linha mapeada para uma classe POCO do tipo <typeparamref name="T"/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Connection"></param>
 <param name="SQL"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLSet``1(System.Data.Common.DbConnection,System.FormattableString,System.Boolean)">
 <summary>
 Executa uma query SQL parametrizada e retorna os resultados do primeiro resultset mapeados para uma lista de classe POCO do tipo <typeparamref name="T"/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Connection"></param>
 <param name="SQL"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLSet``1(System.Data.Common.DbConnection,System.Data.Common.DbCommand,System.Boolean)">
 <summary>
 Executa uma query SQL parametrizada e retorna os resultados do primeiro resultset mapeados para uma lista de classe POCO do tipo <typeparamref name="T"/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Connection"></param>
 <param name="SQL"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLMany(System.Data.Common.DbConnection,System.FormattableString)">
 <summary>
 Executa uma query SQL parametrizada e retorna os resultados mapeados em listas de <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
 <param name="Connection"></param>
 <param name="SQL"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLMany(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
 <summary>
 Executa uma query SQL e retorna todos os seus resultsets mapeados em uma <see cref="T:System.Collections.Generic.IEnumerable`1"/>
 </summary>
 <param name="Connection"></param>
 <param name="Command"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLMany``5(System.Data.Common.DbConnection,System.FormattableString)">
 <summary>
 Executa uma query SQL parametrizada e retorna os resultados mapeados em uma tupla de tipos especificos
 </summary>
 <param name="Connection"></param>
 <param name="SQL"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLMany``5(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
 <summary>
 Executa uma query SQL parametrizada e retorna os resultados mapeados em uma tupla de tipos especificos
 </summary>
 <param name="Connection"></param>
 <param name="Command"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLMany``4(System.Data.Common.DbConnection,System.FormattableString)">
 <summary>
 Executa uma query SQL parametrizada e retorna os resultados mapeados em uma tupla de tipos especificos
 </summary>
 <param name="Connection"></param>
 <param name="SQL"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLMany``4(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
 <summary>
 Executa uma query SQL parametrizada e retorna os resultados mapeados em uma tupla de tipos especificos
 </summary>
 <param name="Connection"></param>
 <param name="Command"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLMany``3(System.Data.Common.DbConnection,System.FormattableString)">
 <summary>
 Executa uma query SQL parametrizada e retorna os resultados mapeados em uma tupla de tipos especificos
 </summary>
 <param name="Connection"></param>
 <param name="SQL"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLMany``3(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
 <summary>
 Executa uma query SQL parametrizada e retorna os resultados mapeados em uma tupla de tipos especificos
 </summary>
 <param name="Connection"></param>
 <param name="Command"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLMany``2(System.Data.Common.DbConnection,System.FormattableString)">
 <summary>
 Executa uma query SQL parametrizada e retorna os resultados mapeados em uma tupla de tipos especificos
 </summary>
 <param name="Connection"></param>
 <param name="SQL"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.RunSQLMany``2(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
 <summary>
 Executa uma query SQL parametrizada e retorna os resultados mapeados em uma tupla de tipos especificos
 </summary>
 <param name="Connection"></param>
 <param name="Command"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.Map``1(System.Data.Common.DbDataReader,System.Object[])">
 <summary>
 Mapeia os objetos de um datareader para uma classe, Dictionary ou NameValueCollection
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Reader"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.ProccessSubQuery``1(System.Data.Common.DbConnection,``0@,System.String,System.Boolean)">
 <summary>
 Processa uma propriedade de uma classe marcada com <see cref="T:InnerLibs.MicroORM.FromSQL"/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Connection"></param>
 <param name="d"></param>
 <param name="PropertyName"></param>
 <param name="Recursive"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.ProccessSubQuery``1(System.Data.Common.DbConnection,``0@,System.Boolean)">
 <summary>
 Processa todas as propriedades de uma classe marcadas com <see cref="T:InnerLibs.MicroORM.FromSQL"/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Connection"></param>
 <param name="d"></param>
 <param name="Recursive"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.MapFirst``1(System.Data.Common.DbDataReader,System.Object[])">
 <summary>
 Mapeia a primeira linha de um datareader para uma classe POCO do tipo <typeparamref name="T"/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Reader"></param>
 <param name="args">argumentos para o construtor da classe</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.MapMany(System.Data.Common.DbDataReader)">
 <summary>
 Mapeia os resultsets de um datareader para um <see cref="T:System.Collections.Generic.IEnumerable`1"/>
 </summary>
 <param name="Reader"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.MapMany``5(System.Data.Common.DbDataReader)">
 <summary>
 Mapeia os resultsets de um datareader para uma tupla de tipos especificos
 </summary>
 <param name="Reader"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.MapMany``4(System.Data.Common.DbDataReader)">
 <summary>
 Mapeia os resultsets de um datareader para uma tupla de tipos especificos
 </summary>
 <param name="Reader"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.MapMany``3(System.Data.Common.DbDataReader)">
 <summary>
 Mapeia os resultsets de um datareader para uma tupla de tipos especificos
 </summary>
 <param name="Reader"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.DbExtensions.MapMany``2(System.Data.Common.DbDataReader)">
 <summary>
 Mapeia os resultsets de um datareader para uma tupla de tipos especificos
 </summary>
 <param name="Reader"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.#ctor(System.String[])">
 <summary>
 Class that aids building a SELECT clause.
 </summary>
 <param name="columns">Columns to be selected</param>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.From(System.String)">
 <summary>
 Sets the FROM clause in the SELECT being built.
 </summary>
 <param name="TableOrSubQuery">Table to be selected from</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.From``1(InnerLibs.MicroORM.Select{``0},System.String)">
 <summary>
 Sets the FROM clause in the SELECT being built.
 </summary>
 <param name="SubQuery">Subquery to be selected from</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.From``1(System.Action{InnerLibs.MicroORM.Select{``0}},System.String)">
 <summary>
 Sets the FROM clause in the SELECT being built.
 </summary>
 <param name="SubQuery">Subquery to be selected from</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.From(System.Action{InnerLibs.MicroORM.Select})">
 <summary>
 Sets the FROM clause in the SELECT being built.
 </summary>
 <param name="SubQuery">Subquery to be selected from</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.From``1">
 <summary>
 Sets the FROM clause in the SELECT being built.
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.Join(System.String,System.FormattableString)">
 <summary>
 Sets a JOIN clause in the SELECT being built.
 </summary>
 <param name="table">Table to be join</param>
 <param name="on">Condition of the join (ON clause)</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.InnerJoin(System.String,System.FormattableString)">
 <summary>
 Sets a INNER JOIN clause in the SELECT being built.
 </summary>
 <param name="table">Table to be join</param>
 <param name="on">Condition of the join (ON clause)</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.InnerJoin(System.String,InnerLibs.MicroORM.Condition)">
 <summary>
 Sets a INNER JOIN clause in the SELECT being built.
 </summary>
 <param name="table">Table to be join</param>
 <param name="on">Condition of the join (ON clause)</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.Join(System.String,InnerLibs.MicroORM.Condition)">
 <summary>
 Sets a JOIN clause in the SELECT being built.
 </summary>
 <param name="table">Table to be join</param>
 <param name="on">Condition of the join (ON clause)</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.LeftOuterJoin(System.String,System.FormattableString)">
 <summary>
 Sets a LEFT OUTER JOIN clause in the SELECT being built.
 </summary>
 <param name="table">Table to be join</param>
 <param name="on">Condition of the join (ON clause)</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.LeftOuterJoin(System.String,InnerLibs.MicroORM.Condition)">
 <summary>
 Sets a LEFT OUTER JOIN clause in the SELECT being built.
 </summary>
 <param name="table">Table to be join</param>
 <param name="on">Condition of the join (ON clause)</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.RightOuterJoin(System.String,System.FormattableString)">
 <summary>
 Sets a RIGHT OUTER JOIN clause in the SELECT being built.
 </summary>
 <param name="table">Table to be join</param>
 <param name="on">Condition of the join (ON clause)</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.RightOuterJoin(System.String,InnerLibs.MicroORM.Condition)">
 <summary>
 Sets a RIGHT OUTER JOIN clause in the SELECT being built.
 </summary>
 <param name="table">Table to be join</param>
 <param name="on">Condition of the join (ON clause)</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.FullOuterJoin(System.String,System.FormattableString)">
 <summary>
 Sets a FULL OUTER JOIN clause in the SELECT being built.
 </summary>
 <param name="table">Table to be join</param>
 <param name="on">Condition of the join (ON clause)</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.FullOuterJoin(System.String,InnerLibs.MicroORM.Condition)">
 <summary>
 Sets a FULL OUTER JOIN clause in the SELECT being built.
 </summary>
 <param name="table">Table to be join</param>
 <param name="on">Condition of the join (ON clause)</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.CrossJoin(System.String)">
 <summary>
 Sets a CROSS JOIN clause in the SELECT being built.
 </summary>
 <param name="table">Table to be join</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.CrossApply(System.String)">
 <summary>
 Sets a CROSS JOIN clause in the SELECT being built.
 </summary>
 <param name="table">Table to be join</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.Where(System.FormattableString)">
 <summary>
 Sets the WHERE clause in the SELECT being built.
 </summary>
 <param name="condition">Condition to set</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.Where(System.String,System.Collections.Generic.IEnumerable{System.FormattableString})">
 <summary>
 Sets the WHERE clause in the SELECT being built.
 </summary>
 <param name="conditions">Condition to set</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.Where(System.String,System.Collections.Generic.IEnumerable{InnerLibs.MicroORM.Condition})">
 <summary>
 Sets the WHERE clause in the SELECT being built.
 </summary>
 <param name="conditions">Condition to set</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
 <summary>
 Sets the WHERE clause in the SELECT being built using a lambda expression. This method is experimental
 </summary>
 <param name="predicate">Condition to set</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.Where(InnerLibs.MicroORM.Condition)">
 <summary>
 Sets the WHERE clause in the SELECT being built.
 </summary>
 <param name="condition">Condition to set</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.Where(InnerLibs.MicroORM.Condition[])">
 <summary>
 Sets the WHERE clause in the SELECT being built.
 If WHERE is already set, appends the condition with an AND clause.
 </summary>
 <param name="conditions">Conditions to set</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.Where(System.Collections.Generic.Dictionary{System.String,System.Object},InnerLibs.MicroORM.DbExtensions.LogicConcatenationOperator,System.String[])">
 <summary>
 Sets the WHERE clause in the SELECT being built using a <see cref="T:System.Collections.Generic.Dictionary`2"/> as column/value
 </summary>
 <param name="Dic"></param>
 <param name="FilterKeys"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.Where(System.Collections.Specialized.NameValueCollection,System.String[])">
 <summary>
 Sets the WHERE clause in the SELECT being built using a <see cref="T:System.Collections.Specialized.NameValueCollection"/> as column/operator/value
 </summary>
 <param name="NVC"></param>
 <param name="FilterKeys"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.And(System.FormattableString[])">
 <summary>
 Sets the WHERE clause in the SELECT being built.
 If WHERE is already set, appends the condition with an AND clause.
 </summary>
 <param name="conditions">Condition to set</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.And(InnerLibs.MicroORM.Condition[])">
 <summary>
 Sets the WHERE clause in the SELECT being built.
 If WHERE is already set, appends the condition with an AND clause.
 </summary>
 <param name="conditions">Condition to set</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.AndAny(System.FormattableString[])">
 <summary>
 Sets the WHERE clause in the SELECT being built.
 If WHERE is already set, appends the condition with an AND clause.
 </summary>
 <param name="conditions">Condition to set</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.OrAny(System.FormattableString[])">
 <summary>
 Sets the WHERE clause in the SELECT being built.
 If WHERE is already set, appends the condition with an AND clause.
 </summary>
 <param name="conditions">Condition to set</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.AndAll(System.FormattableString[])">
 <summary>
 Sets the WHERE clause in the SELECT being built.
 If WHERE is already set, appends the condition with an AND clause.
 </summary>
 <param name="conditions">Condition to set</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.OrAll(System.FormattableString[])">
 <summary>
 Sets the WHERE clause in the SELECT being built.
 If WHERE is already set, appends the condition with an AND clause.
 </summary>
 <param name="conditions">Condition to set</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.Or(System.FormattableString[])">
 <summary>
 Sets the WHERE clause in the SELECT being built.
 If WHERE is already set, appends the condition with an OR clause.
 </summary>
 <param name="conditions">Condition to set</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.Or(InnerLibs.MicroORM.Condition[])">
 <summary>
 Sets the WHERE clause in the SELECT being built.
 If WHERE is already set, appends the condition with an OR clause.
 </summary>
 <param name="conditions">Condition of the WHERE clause</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.GroupBy(System.String[])">
 <summary>
 Sets the GROUP BY clause in the SELECT being built.
 </summary>
 <param name="columns">Columns to be grouped by</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.Having(System.String)">
 <summary>
 Sets or overwrite the HAVING clause in the SELECT being built.
 </summary>
 <param name="condition">Condition to set</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.OrderBy(System.String[])">
 <summary>
 Sets the ORDER BY clause in the SELECT being built.
 </summary>
 <param name="columns">Columns to be ordered by</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.op_Implicit(InnerLibs.MicroORM.Select{`0})~System.String">
 <summary>
 Operator overload that allows using the class wherever a string is expected.
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.op_Implicit(InnerLibs.MicroORM.Select{`0})~System.FormattableString">
 <summary>
 Operator overload that allows using the class wherever a string is expected.
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.Select`1.ToString(System.Boolean)">
 <summary>
 Returns the SELECT statement as a SQL query.
 </summary>
 <returns>The SELECT statement as a SQL query</returns>
</member>
<member name="T:InnerLibs.MicroORM.Condition">
 <summary>
 A condition with optional AND and OR clauses that can be used in WHERE or JOIN ON statements.
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.Condition.#ctor(System.FormattableString)">
 <summary>
 Select class constructor
 </summary>
 <param name="condition">Condition to set in this instance</param>
</member>
<member name="M:InnerLibs.MicroORM.Condition.#ctor(InnerLibs.MicroORM.Condition)">
 <summary>
 Select class constructor
 </summary>
 <param name="condition">Copies to the condition being constructed</param>
</member>
<member name="M:InnerLibs.MicroORM.Condition.#ctor(System.String,System.Object,System.String)">
 <summary>
 Select class constructor
 </summary>
</member>
<member name="M:InnerLibs.MicroORM.Condition.And(System.FormattableString)">
 <summary>
 Appends the given condition with AND in this condition.
 </summary>
 <param name="condition">Condition to be appended</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Condition.And(InnerLibs.MicroORM.Condition)">
 <summary>
 Appends the given condition with AND in this condition.
 </summary>
 <param name="condition">Condition to be appended</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Condition.Or(System.FormattableString)">
 <summary>
 Appends the given condition with OR in this condition.
 </summary>
 <param name="condition">Condition to be appended</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Condition.Or(InnerLibs.MicroORM.Condition)">
 <summary>
 Appends the given condition with OR in this condition.
 </summary>
 <param name="condition">Condition to be appended</param>
 <returns>This instance, so you can use it in a fluent fashion</returns>
</member>
<member name="M:InnerLibs.MicroORM.Condition.ParenthesisToString">
 <summary>
 Returns the condition statement as a SQL query in parenthesis.
 </summary>
 <returns>The condition statement as a SQL query in parenthesis</returns>
</member>
<member name="M:InnerLibs.MicroORM.Condition.ToString">
 <summary>
 Returns the condition statement as a SQL query.
 </summary>
 <returns>The condition statement as a SQL query</returns>
</member>
<member name="T:InnerLibs.RolePlayingGame.DiceRoller">
 <summary>
 Combinação de varios dados de RPG que podem ser rolados ao mesmo tempo
 </summary>
</member>
<member name="M:InnerLibs.RolePlayingGame.DiceRoller.#ctor(InnerLibs.RolePlayingGame.Dice[])">
 <summary>
 Cria uma nova combinação de Dados
 </summary>
 <param name="Dices">Dados de RPG</param>
</member>
<member name="M:InnerLibs.RolePlayingGame.DiceRoller.#ctor(InnerLibs.RolePlayingGame.DiceRoller[])">
 <summary>
 Cria uma nova combinação de Dados
 </summary>
 <param name="DiceRollers">Dados de RPG</param>
</member>
<member name="M:InnerLibs.RolePlayingGame.DiceRoller.#ctor(System.Collections.Generic.List{InnerLibs.RolePlayingGame.Dice}[])">
 <summary>
 Cria uma nova combinação de Dados
 </summary>
 <param name="ListOfDices">Lista de dados de RPG</param>
</member>
<member name="M:InnerLibs.RolePlayingGame.DiceRoller.#ctor(InnerLibs.RolePlayingGame.DiceType[])">
 <summary>
 Cria uma nova combinação de novos dados a criados a partir de varios tipos
 </summary>
 <param name="DiceType">Tipos Dados de RPG</param>
</member>
<member name="P:InnerLibs.RolePlayingGame.DiceRoller.Value">
 <summary>
 Retorna a soma de todos os valores dos dados
 </summary>
 <returns>Integer</returns>
</member>
<member name="M:InnerLibs.RolePlayingGame.DiceRoller.Roll">
 <summary>
 Rola todos os dados (não travados) e retorna a soma de seus valores
 </summary>
 <returns>Retorna a soma de todos os valores dos dados após a rolagem</returns>
</member>
<member name="M:InnerLibs.RolePlayingGame.DiceRoller.op_Addition(InnerLibs.RolePlayingGame.DiceRoller,InnerLibs.RolePlayingGame.Dice)">
 <summary>
 Combina um dado com DiceRoller
 </summary>
 <param name="Combo">Dado 1</param>
 <param name="Dice">Dado 2</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.RolePlayingGame.DiceRoller.op_Addition(InnerLibs.RolePlayingGame.Dice,InnerLibs.RolePlayingGame.DiceRoller)">
 <summary>
 Combina um dado com DiceRoller
 </summary>
 <param name="Combo">Dado 1</param>
 <param name="Dice">Dado 2</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.RolePlayingGame.DiceRoller.op_Addition(InnerLibs.RolePlayingGame.DiceRoller,InnerLibs.RolePlayingGame.DiceRoller)">
 <summary>
 Combina um dado com DiceRoller
 </summary>
 <param name="Combo1">Combo de Dados 1</param>
 <param name="Combo2">Combo de Dados 2</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.RolePlayingGame.Dice">
 <summary>
 Dado de RPG
 </summary>
</member>
<member name="M:InnerLibs.RolePlayingGame.Dice.op_Addition(InnerLibs.RolePlayingGame.Dice,InnerLibs.RolePlayingGame.Dice)">
 <summary>
 Combina 2 dados em um DiceRoller
 </summary>
 <param name="Dice1">Dado 1</param>
 <param name="Dice2">Dado 2</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.RolePlayingGame.Dice.Type">
 <summary>
 Tipo do dado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.RolePlayingGame.Dice.IsCustom">
 <summary>
 Indica se o dado é um dado com faces customizadas
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.RolePlayingGame.Dice.IsVicious">
 <summary>
 Verifica se o dado possui algum lado viciado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.RolePlayingGame.Dice.Locked">
 <summary>
 Se TRUE, Impede este dado de ser rolado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.RolePlayingGame.Dice.Value">
 <summary>
 Valor atual deste dado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.RolePlayingGame.Dice.RolledTimes">
 <summary>
 Numero de vezes que este dado já foi rolado
 </summary>
 <returns>Integer</returns>
</member>
<member name="M:InnerLibs.RolePlayingGame.Dice.Roll">
 <summary>
 Rola o dado e retorna seu valor
 </summary>
 <returns>Integer</returns>
</member>
<member name="P:InnerLibs.RolePlayingGame.Dice.History">
 <summary>
 Historico de valores rolados para este dado
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.RolePlayingGame.Dice.Flip">
 <summary>
 Se este Dice for uma moeda (2 lados apenas) retorna true ou false baseado no lado da moeda qua saiu, caso seja um dado com mais de 2 lados retorna sempre true
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.RolePlayingGame.Dice.Face(System.Int32)">
 <summary>
 Retorna a face correspondente ao numero
 </summary>
 <param name="FaceNumber">Numero da face</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.RolePlayingGame.Dice.GetFace(System.Int32)">
 <summary>
 Retorna a face correspondente ao numero
 </summary>
 <param name="FaceNumber">Numero da face</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.RolePlayingGame.Dice.NormalizeWeight(System.Decimal)">
 <summary>
 Normaliza o peso das faces do dado
 </summary>
</member>
<member name="P:InnerLibs.RolePlayingGame.Dice.Weight">
 <summary>
 Peso do dado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.RolePlayingGame.Dice.Faces">
 <summary>
 Faces do dado
 </summary>
 <returns>Um array com a cópia das faces do dado</returns>
</member>
<member name="M:InnerLibs.RolePlayingGame.Dice.#ctor(InnerLibs.RolePlayingGame.DiceType)">
 <summary>
 Cria um novo dado de um tipo especifico
 </summary>
 <param name="Type">Tipo de dado</param>
</member>
<member name="M:InnerLibs.RolePlayingGame.Dice.#ctor(System.Int32)">
 <summary>
 Cria um novo dado com um numero customizado de faces
 </summary>
 <param name="CustomFaces">Numero de faces do dado (Minimo de 2 faces)</param>
</member>
<member name="T:InnerLibs.RolePlayingGame.Dice.DiceFace">
 <summary>
 Face de um dado. Pode ser viciada ou não
 </summary>
</member>
<member name="P:InnerLibs.RolePlayingGame.Dice.DiceFace.Number">
 <summary>
 Valor Da Face (numero)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.RolePlayingGame.Dice.DiceFace.Weight">
 <summary>
 Peso da face (vicia o dado)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.RolePlayingGame.Dice.DiceFace.WeightPercent">
 <summary>
 Porcetagem do peso da face (vicia o dado)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.RolePlayingGame.Dice.DiceFace.IsVicious">
 <summary>
 Valor que indica se a face está viciada
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.RolePlayingGame.DiceType">
 <summary>
 Tipos de Dados
 </summary>
</member>
<member name="F:InnerLibs.RolePlayingGame.DiceType.Custom">
 <summary>
 Dado customizado
 </summary>
</member>
<member name="F:InnerLibs.RolePlayingGame.DiceType.Coin">
 <summary>
 Moeda
 </summary>
</member>
<member name="F:InnerLibs.RolePlayingGame.DiceType.D4">
 <summary>
 Dado de 4 Lados (Tetraedro/Pirâmide)
 </summary>
</member>
<member name="F:InnerLibs.RolePlayingGame.DiceType.D6">
 <summary>
 Dado de 6 Lados (Pentalátero/Cubo/Dado Tradicional)
 </summary>
</member>
<member name="F:InnerLibs.RolePlayingGame.DiceType.D8">
 <summary>
 Dado de 8 Lados (Octaedro)
 </summary>
</member>
<member name="F:InnerLibs.RolePlayingGame.DiceType.D10">
 <summary>
 Dado de 10 Lados (Decaedro)
 </summary>
</member>
<member name="F:InnerLibs.RolePlayingGame.DiceType.D12">
 <summary>
 Dado de 12 Lados (Dodecaedro)
 </summary>
</member>
<member name="F:InnerLibs.RolePlayingGame.DiceType.D20">
 <summary>
 Dado de 20 Lados (Icosaedro)
 </summary>
</member>
<member name="F:InnerLibs.RolePlayingGame.DiceType.D100">
 <summary>
 Dado de 100 Lados (Esfera/Bola - Particulamente util para porcentagem)
 </summary>
</member>
<member name="T:InnerLibs.SelfKeyDictionary`2">
 <summary>
 Uma estrutura <see cref="T:System.Collections.IDictionary"/> que utiliza como Key uma propriedade de Value
 </summary>
 <typeparam name="KeyType">Tipo da Key</typeparam>
 <typeparam name="ClassType">Tipo da</typeparam>
</member>
<member name="T:InnerLibs.Directories">
 <summary>
 Funções para trabalhar com diretorios
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Directories.FixPathSeparator(System.String,System.Boolean)">
 <summary>
 Ajusta um caminho de arquivo ou diretório colocando o mesmo <see cref="F:System.IO.Path.DirectorySeparatorChar"/> evitando barras duplas ou alternativas
 </summary>
 <param name="Path">String contendo o caminho</param>
 <param name="Alternative">Se TRUE, utiliza <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> ao invés de  <see cref="F:System.IO.Path.DirectorySeparatorChar"/> </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.DeleteIfExist(System.String)">
 <summary>
 Deleta um arquivo ou diretório se o mesmo existir e retorna TURE se o arquivo puder ser criado novamente
 </summary>
 <param name="Path">Camingo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.DeleteIfExist(System.IO.FileSystemInfo)">
 <summary>
 Deleta um arquivo ou diretório se o mesmo existir e retorna TRUE se o arquivo puder ser criado novamente
 </summary>
 <param name="Path">Camingo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.ToDirectoryInfo(System.String)">
 <summary>
 Cria um diretório se o mesmo nao existir e retorna um DirectoryInfo deste diretório
 </summary>
 <param name="DirectoryName">o nome(s) do(s) diretorio(s) Ex.: "dir1/dir2/dir3" </param>
 <returns>Um DirectoryInfo contendo as informacoes do diretório criado</returns>
 <remarks>Caso o <paramref name="DirectoryName"/> for um caminho de arquivo, é utilizado o diretório deste aruqivo.</remarks>
</member>
<member name="M:InnerLibs.Directories.ToFileInfo(System.String,InnerLibs.FileType)">
 <summary>
 Cria um arquivo em branco se o mesmo nao existir e retorna um Fileinfo deste arquivo
 </summary>
 <param name="FileName">o nome do arquivo Ex.: "dir1/dir2/dir3/file.txt" </param>
 <returns>Um FileInfo contendo as informacoes do arquivo criado</returns>
</member>
<member name="M:InnerLibs.Directories.ToFileInfo(System.String)">
 <summary>
 Cria um arquivo em branco se o mesmo nao existir e retorna um Fileinfo deste arquivo
 </summary>
 <param name="FileName">o nome do arquivo Ex.: "dir1/dir2/dir3/file.txt" </param>
 <returns>Um FileInfo contendo as informacoes do arquivo criado</returns>
</member>
<member name="M:InnerLibs.Directories.ToZipFile(System.IO.DirectoryInfo,System.String,System.IO.Compression.CompressionLevel)">
 <summary>
 Cria um arquivo .ZIP de um diretório
 </summary>
 <param name="FilesDirectory">Um diretório contendo arquivos</param>
 <param name="OutputFile">O caminho onde será exportado o arquivo ZIP, Mesmo caminho do diretório se não especificado</param>
 <param name="CompressionLevel">Nivel de compressão do arquivo Zip</param>
 <returns>Um FileInfo contendo as informações do arquivo gerado</returns>
</member>
<member name="M:InnerLibs.Directories.ToZipFile(System.IO.DirectoryInfo,System.String,System.IO.Compression.CompressionLevel,System.IO.SearchOption,System.String[])">
 <summary>
 Cria um arquivo .ZIP a partir de arquivos selecionados de uma pesquisa em um diretório
 </summary>
 <param name="FilesDirectory">Um diretório contendo arquivos</param>
 <param name="OutputFile">O caminho onde será exportado o arquivo ZIP, Mesmo caminho do diretório se não especificado</param>
 <param name="SearchOption">Especifica se a busca ocorrerá apenas no diretório pai ou em subdiretórios também</param>
 <param name="Searches">Padrões de pesquisa (*.extensao, nome.*, *nome*.*, *.*)</param>
 <param name="CompressionLevel">Nivel de compressão do arquivo Zip</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.ExtractZipFile(System.IO.FileInfo,System.IO.DirectoryInfo)">
 <summary>
 Extrai um arquivo zip em um diretório
 </summary>
 <param name="File">Arquivo ZIp</param>
 <param name="Directory">Diretório</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.SearchFiles(System.IO.DirectoryInfo,System.IO.SearchOption,System.String[])">
 <summary>
 Retorna uma lista de arquivos baseado em um ou mais padrões de pesquisas
 </summary>
 <param name="Directory">Diretório</param>
 <param name="SearchOption">Especifica se a pesquisa ocorrerá apenas no diretório ou em todos os subdiretórios também</param>
 <param name="Searches">Padrões de pesquisa (*.txt, arquivo.*, *)</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.SearchDirectories(System.IO.DirectoryInfo,System.IO.SearchOption,System.String[])">
 <summary>
 Retorna uma lista de diretórios baseado em um ou mais padrões de pesquisas
 </summary>
 <param name="Directory">Diretório</param>
 <param name="SearchOption">Especifica se a pesquisa ocorrerá apenas no diretório ou em todos os subdiretórios também</param>
 <param name="Searches">Padrões de pesquisa (*.txt, arquivo.*, *)</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.Search(System.IO.DirectoryInfo,System.IO.SearchOption,System.String[])">
 <summary>
 Retorna uma lista de arquivos ou diretórios baseado em um ou mais padrões de pesquisas
 </summary>
 <param name="Directory">Diretório</param>
 <param name="SearchOption">Especifica se a pesquisa ocorrerá apenas no diretório ou em todos os subdiretórios também</param>
 <param name="Searches">Padrões de pesquisa (*.txt, arquivo.*, *)</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.Find``1(System.IO.DirectoryInfo,System.Func{``0,System.Boolean},System.IO.SearchOption)">
 <summary>
 Retorna uma lista de arquivos ou diretórios baseado em uma busca usando predicate
 </summary>
 <param name="Directory">Diretório</param>
 <param name="predicate">Funcao LINQ utilizada para a busca</param>
 <param name="SearchOption">Indica se apenas o diretorio atual ou todos os subdiretorios devem ser percorridos pela busca</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.SearchBetween(System.IO.DirectoryInfo,System.DateTime,System.DateTime,System.IO.SearchOption,System.String[])">
 <summary>
 Retorna uma lista de arquivos ou diretórios baseado em um ou mais padrões de pesquisas dentro de um range de 2 datas
 </summary>
 <param name="Directory">Diretório</param>
 <param name="SearchOption">Especifica se a pesquisa ocorrerá apenas no diretório ou em todos os subdiretórios também</param>
 <param name="Searches">Padrões de pesquisa (*.txt, arquivo.*, *)</param>
 <param name="FirstDate">Data Inicial</param>
 <param name="SecondDate">Data Final</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.SearchFilesBetween(System.IO.DirectoryInfo,System.DateTime,System.DateTime,System.IO.SearchOption,System.String[])">
 <summary>
 Retorna uma lista de arquivos baseado em um ou mais padrões de pesquisas dentro de um range de 2 datas
 </summary>
 <param name="Directory">Diretório</param>
 <param name="SearchOption">Especifica se a pesquisa ocorrerá apenas no diretório ou em todos os subdiretórios também</param>
 <param name="Searches">Padrões de pesquisa (*.txt, arquivo.*, *)</param>
 <param name="FirstDate">Data Inicial</param>
 <param name="SecondDate">Data Final</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.SearchDirectoriesBetween(System.IO.DirectoryInfo,System.DateTime,System.DateTime,System.IO.SearchOption,System.String[])">
 <summary>
 Retorna uma lista de arquivos baseado em um ou mais padrões de pesquisas dentro de um range de 2 datas
 </summary>
 <param name="Directory">Diretório</param>
 <param name="SearchOption">Especifica se a pesquisa ocorrerá apenas no diretório ou em todos os subdiretórios também</param>
 <param name="Searches">Padrões de pesquisa (*.txt, arquivo.*, *)</param>
 <param name="FirstDate">Data Inicial</param>
 <param name="SecondDate">Data Final</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.CopyTo(System.Collections.Generic.List{System.IO.FileInfo},System.IO.DirectoryInfo)">
 <summary>
 Copia arquivos para dentro de outro diretório
 </summary>
 <param name="List">Arquivos</param>
 <param name="DestinationDirectory">Diretório de destino</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.HasFiles(System.IO.DirectoryInfo)">
 <summary>
 Verifica se um diretório possui arquivos
 </summary>
 <param name="Directory">Diretório</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.HasDirectories(System.IO.DirectoryInfo)">
 <summary>
 Verifica se um diretório possui subdiretórios
 </summary>
 <param name="Directory">Diretório</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.IsEmpty(System.IO.DirectoryInfo)">
 <summary>
 Verifica se um diretório está vazio
 </summary>
 <param name="Directory">Diretório</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.IsNotEmpty(System.IO.DirectoryInfo)">
 <summary>
 Verifica se um diretório não está vazio
 </summary>
 <param name="Directory">Diretório</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.CleanDirectory(System.IO.DirectoryInfo,System.Boolean)">
 <summary>
 Remove todos os subdiretorios vazios
 </summary>
 <param name="TopDirectory">Diretorio da operação</param>
</member>
<member name="F:InnerLibs.DOTLanguage.GraphType.Graph">
 <summary>
 Gráficos não orientados
 </summary>
</member>
<member name="F:InnerLibs.DOTLanguage.GraphType.Digraph">
 <summary>
 Gráficos orientados
 </summary>
</member>
<member name="T:InnerLibs.DOTLanguage.Graph">
 <summary>
 Wrapper para criaçao de gráficos em DOT Language
 </summary>
</member>
<member name="P:InnerLibs.DOTLanguage.Graph.GraphType">
 <summary>
 Tipo do Grafico (graph, digraph)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.DOTLanguage.Graph.ID">
 <summary>
 Nome do Gráfico
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DOTLanguage.Graph.ToString">
 <summary>
 Escreve a DOT string correspondente a este gráfico
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.DOTLanguage.DotNode">
 <summary>
 Representa um nó de um grafico em DOT Language
 </summary>
</member>
<member name="M:InnerLibs.DOTLanguage.DotNode.#ctor(System.String)">
 <summary>
 Cria um novo nó
 </summary>
 <param name="ID"></param>
</member>
<member name="P:InnerLibs.DOTLanguage.DotNode.ID">
 <summary>
 ID deste nó
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DOTLanguage.DotNode.ToString">
 <summary>
 Escreve a DOT string deste nó e seus respectivos nós filhos
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.DOTLanguage.DotEdge">
 <summary>
 Representa uma ligação entre nós de um grafico em DOT Language
 </summary>
</member>
<member name="M:InnerLibs.DOTLanguage.DotEdge.#ctor(InnerLibs.DOTLanguage.DotNode,InnerLibs.DOTLanguage.DotNode,System.Boolean)">
 <summary>
 Cria uma nova ligaçao
 </summary>
 <param name="Oriented">Relação orientada</param>
</member>
<member name="P:InnerLibs.DOTLanguage.DotEdge.Oriented">
 <summary>
 Indica se esta ligação é orientada ou não
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DOTLanguage.DotEdge.ToString">
 <summary>
 Escreve a DOT String desta ligaçao
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.Encryption">
 <summary>
 Modulo de Criptografia
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Encryption.ToMD5String(System.String)">
 <summary>
 Criptografa um Texto em MD5
 </summary>
 <param name="Text">Texto a ser Criptografado</param>
 <returns>Uma String MD5</returns>
</member>
<member name="M:InnerLibs.Encryption.EncryptRSA(System.String,System.String)">
 <summary>
 Criptografa um string em RSA
 </summary>
 <param name="Text"></param>
 <param name="Key"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Encryption.DecryptRSA(System.String,System.String)">
 <summary>
 Descriptografa uma string encriptada em RSA
 </summary>
 <param name="Text"></param>
 <param name="Key"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Encryption.Encrypt(System.String,System.String)">
 <summary>
 Criptografa uma string
 </summary>
 <param name="Text">Texto descriptografado</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Encryption.Decrypt(System.String,System.String)">
 <summary>
 Descriptografa uma string
 </summary>
 <param name="Text">Texto Criptografado</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Encryption.Encrypt(System.String,System.String,System.String)">
 <summary>
 Criptografa uma string
 </summary>
 <param name="Text">Texto descriptografado</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Encryption.Decrypt(System.String,System.String,System.String)">
 <summary>
 Descriptografa uma string
 </summary>
 <param name="Text">Texto Criptografado</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Files">
 <summary>
 Módulo para criação de arquivos baseados em Array de Bytes()
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Files.SaveMailAttachment(System.Net.Mail.Attachment,System.IO.DirectoryInfo)">
 <summary>
 Salva um anexo para um diretório
 </summary>
 <param name="attachment"></param>
 <param name="Directory"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Files.SaveMailAttachment(System.Net.Mail.Attachment,System.String)">
 <summary>
 Salva um anexo para um caminho
 </summary>
 <param name="attachment"></param>
 <param name="Path"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Files.ToBytes(System.Net.Mail.Attachment)">
 <summary>
 Salva um anexo para Byte()
 </summary>
 <param name="attachment"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Files.ToBytes(System.IO.Stream)">
 <summary>
 Converte um stream em Bytes
 </summary>
 <param name="stream"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Files.WriteToFile(System.Byte[],System.String)">
 <summary>
 Transforma um  Array de Bytes em um arquivo
 </summary>
 <param name="Bytes">A MAtriz com os Bytes  a ser escrita</param>
 <param name="FilePath">Caminho onde o arquivo será gravado</param>
 <returns>Um Fileinfo contendo as informações do arquivo criado</returns>
</member>
<member name="M:InnerLibs.Files.WriteToFile(System.Byte[],System.String,System.DateTime)">
 <summary>
 Transforma um  Array de Bytes em um arquivo
 </summary>
 <param name="Bytes">A MAtriz com os Bytes  a ser escrita</param>
 <param name="FilePath">Caminho onde o arquivo será gravado</param>
 <returns>Um Fileinfo contendo as informações do arquivo criado</returns>
</member>
<member name="M:InnerLibs.Files.ToBytes(System.IO.FileInfo)">
 <summary>
 Transforma um arquivo em um Array de Bytes
 </summary>
 <param name="File">O arquivo a ser convertido</param>
 <returns>Um array do tipo Byte()</returns>
</member>
<member name="M:InnerLibs.Files.WriteToFile(System.String,System.String,System.Boolean,System.Text.Encoding)">
 <summary>
 Salva um texto em um arquivo
 </summary>
 <param name="Text">TExto</param>
 <param name="FilePath">Caminho do arquivo</param>
 <returns>Um Fileinfo contendo as informações do arquivo criado</returns>
</member>
<member name="M:InnerLibs.Files.WriteToFile(System.String,System.IO.FileInfo,System.Boolean,System.Text.Encoding)">
 <summary>
 Salva um texto em um arquivo
 </summary>
 <param name="Text">TExto</param>
 <param name="File">Arquivo</param>
 <returns>Um Fileinfo contendo as informações do arquivo criado</returns>
</member>
<member name="M:InnerLibs.Files.GetLatestDirectoryName(System.IO.FileInfo)">
 <summary>
 Retorna o nome do diretorio onde o arquivo se encontra
 </summary>
 <param name="Path">Caminho do arquivo</param>
 <returns>o nome do diretório sem o caminho</returns>
</member>
<member name="M:InnerLibs.FontAwesome.GetIconByFileType(System.IO.FileSystemInfo,System.Boolean,System.Boolean)">
 <summary>
 Retorna a classe do icone do FontAwesome que representa melhor o arquivo ou diretório
 </summary>
 <param name="File">Arquivo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.FontAwesome.GetIconByFileType(InnerLibs.FileType)">
 <summary>
 Retorna a classe do icone do FontAwesome que representa melhor o arquivo
 </summary>
 <param name="MIME">MIME Type do Arquivo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.FontAwesome.GetIconByFileExtension(System.String)">
 <summary>
 Retorna a classe do icone do FontAwesome que representa melhor o arquivo
 </summary>
 <param name="Extension">Arquivo</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Generate">
 <summary>
 Geradores de conteudo
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Generate.RandomWord(System.Int32)">
 <summary>
 Gera uma palavra aleatória com o numero de caracteres
 </summary>
 <param name="Length">Tamanho da palavra</param>
 <returns>Uma string contendo uma palavra aleatória</returns>
</member>
<member name="M:InnerLibs.Generate.RandomWord(System.String)">
 <summary>
 Gera uma palavra aleatória a partir de uma outra palavra
 </summary>
 <param name="BaseText">Texto base</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Generate.Password(System.Int32,System.Int32,System.Int32)">
 <summary>
 Gera uma senha
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Generate.ToGoogleMapsURL(InnerLibs.Locations.AddressInfo,System.Boolean)">
 <summary>
 Gera uma URL do google MAPs baseado na localização
 </summary>
 <param name="local">Uma variavel do tipo InnerLibs.Location onde estão as informações como endereço e as coordenadas geográficas</param>
 <param name="LatLong">Gerar URL baseado na latitude e Longitude. Padrão FALSE retorna a URL baseada no Logradouro</param>
 <returns>Uma URI do Google Maps</returns>
</member>
<member name="M:InnerLibs.Generate.RandomBoolean(System.Int32)">
 <summary>
 Gera um valor boolean aleatorio considerando uma porcentagem de chance
 </summary>
 <returns>TRUE ou FALSE.</returns>
</member>
<member name="M:InnerLibs.Generate.RandomBoolean(System.Func{System.Int64,System.Boolean},System.Int64,System.Int64)">
 <summary>
 Gera um valor boolean aleatorio considerando uma condiçao
 </summary>
 <param name="Min">Numero minimo, Padrão 0 </param>
 <param name="Max">Numero Maximo, Padrão 999999</param>
 <returns>TRUE ou FALSE</returns>
</member>
<member name="M:InnerLibs.Generate.RandomBoolean">
 <summary>
 Gera um valor boolean aleatorio
 </summary>
 <returns>TRUE ou FALSE</returns>
</member>
<member name="M:InnerLibs.Generate.RandomNumber(System.Int32,System.Int32)">
 <summary>
 Gera um numero Aleatório entre 2 números
 </summary>
 <param name="Min">Numero minimo, Padrão 0 </param>
 <param name="Max">Numero Maximo, Padrão 999999</param>
 <returns>Um numero Inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.Generate.RandomColorList(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Gera uma lista com <paramref name="Quantity"/> cores diferentes
 </summary>
 <param name="Quantity">Quantidade máxima de cores</param>
 <param name="Red"></param>
 <param name="Green"></param>
 <param name="Blue"></param>
 <remarks></remarks>
 <returns></returns>
</member>
<member name="M:InnerLibs.Generate.RandomIpsum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Gera um texto aleatorio
 </summary>
 <param name="ParagraphCount">Quantidade de paragrafos</param>
 <param name="SentenceCount">QUantidade de sentecas por paragrafo</param>
 <param name="MinWordCount"></param>
 <param name="MaxWordCount"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Generate.ToQRCode(System.String,System.Int32)">
 <summary>
 Converte uma String para um QR Code usando uma API (Nescessita de Internet)
 </summary>
 <param name="Data">Informações do QR Code</param>
 <param name="Size">Tamanho do QR code</param>
 <returns>Um componente Image() com o QR code</returns>
</member>
<member name="T:InnerLibs.Images">
 <summary>
 Modulo de Imagem
 </summary>
 <remarks></remarks>

</member>
<member name="M:InnerLibs.Images.ToBitmap(System.Drawing.Image)">
 <summary>
 Retorna uma <see cref="T:System.Drawing.Bitmap"/> a partir de um Image
 </summary>
 <param name="Image"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.CropToSquare(System.Drawing.Image,System.Int32)">
 <summary>
 Corta uma imagem para um quadrado perfeito a partir do centro
 </summary>
 <param name="img">Imagem</param>
 <param name="WidthHeight">Tamanho do quadrado em pixels</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.CropToCircle(System.Drawing.Image,System.Nullable{System.Drawing.Color})">
 <summary>
 Corta a imagem em um circulo
 </summary>
 <param name="Img">Imagem</param>
 <param name="Background">Cor do fundo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.CropToEllipsis(System.Drawing.Image,System.Nullable{System.Drawing.Color})">
 <summary>
 Corta a imagem em uma elipse
 </summary>
 <param name="Img">Imagem</param>
 <param name="Background">Cor do fundo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.TestAndRotate(System.Drawing.Image@)">
 <summary>
 Rotaciona uma imagem para sua pocisão original caso ela já tenha sido rotacionada (EXIF)
 </summary>
 <param name="Img">Imagem</param>
 <returns>TRUE caso a imagem ja tenha sido rotacionada</returns>
</member>
<member name="M:InnerLibs.Images.Watermark(System.Drawing.Image,System.Drawing.Image,System.Int32,System.Int32)">
 <summary>
 Insere uma imagem de marca Dágua na imagem
 </summary>
 <param name="Image">Imagem</param>
 <param name="WaterMarkImage">Imagem de Marca Dagua</param>
 <param name="X">Posição X</param>
 <param name="Y">Posição Y</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.Insert(System.Drawing.Image,System.Drawing.Image,System.Int32,System.Int32)">
 <summary>
 Insere uma imagem em outra imagem
 </summary>
 <param name="Image">Imagem</param>
 <param name="InsertedImage">Imagem de Marca Dagua</param>
 <param name="X">Posição X</param>
 <param name="Y">Posição Y</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.Negative(System.Drawing.Image)">
 <summary>
 Inverte as cores de uma imagem
 </summary>
 <param name="Img"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.Grayscale(System.Drawing.Image)">
 <summary>
 Converte uma Imagem para Escala de cinza
 </summary>
 <param name="img">imagem original</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.Trim(System.Drawing.Image,System.Nullable{System.Drawing.Color})">
 <summary>
 Remove os excessos de uma cor de fundo de uma imagem deixando apenas seu conteudo
 </summary>
 <param name="Img"></param>
 <param name="Color"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.Crop(System.Drawing.Image,System.Drawing.Size)">
 <summary>
 Cropa uma imagem a patir do centro
 </summary>
 <param name="Image">Imagem</param>
 <param name="Size">Tamanho</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.Crop(System.Drawing.Image,System.Int32,System.Int32)">
 <summary>
 Cropa uma imagem a patir do centro
 </summary>
 <param name="Image">Imagem</param>
 <param name="maxWidth">Largura maxima</param>
 <param name="maxHeight">Altura maxima</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.ResizePercent(System.Drawing.Image,System.String,System.Boolean)">
 <summary>
 Redimensiona uma imagem para o tamanho definido por uma porcentagem
 </summary>
 <param name="Original"></param>
 <param name="Percent">Porcentagem ( no formato '30% 'ou '20% x 10%')</param>
 <param name="OnlyResizeIfWider"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.Resize(System.Drawing.Image,System.String,System.Boolean)">
 <summary>
 Redimensiona e converte uma Imagem
 </summary>
 <param name="Original">Imagem Original</param>
 <param name="ResizeExpression">uma string contendo uma expressão de tamanho</param>
 <param name="OnlyResizeIfWider">Indica se a imagem deve ser redimensionada apenas se sua largura for maior que a especificada</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.Resize(System.Drawing.Image,System.Drawing.Size,System.Boolean)">
 <summary>
 Redimensiona e converte uma Imagem
 </summary>
 <param name="Original">Imagem Original</param>
 <param name="Size">Tamanho</param>
 <param name="OnlyResizeIfWider">Indica se a imagem deve ser redimensionada apenas se sua largura for maior que a especificada</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.Resize(System.Drawing.Image,System.Int32,System.Int32,System.Boolean)">
 <summary>
 Redimensiona e converte uma Imagem
 </summary>
 <param name="Original">Imagem Original</param>
 <param name="NewWidth">Nova Largura</param>
 <param name="MaxHeight">Altura máxima</param>
 <param name="OnlyResizeIfWider">Indica se a imagem deve ser redimensionada apenas se sua largura for maior que a especificada</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.ParseSize(System.String)">
 <summary>
 Interperta uma string de diversas formas e a transforma em um <see cref="T:System.Drawing.Size"/>
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.Images.ImageTypes">
 <summary>
 Lista com todos os formatos de imagem
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.GetImageFormat(System.Drawing.Image)">
 <summary>
 Retorna o formato da imagem correspondente a aquela imagem
 </summary>
 <param name="OriginalImage"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.GetEncoderInfo(System.Drawing.Imaging.ImageFormat)">
 <summary>
 Pega o encoder a partir de um formato de imagem
 </summary>
 <param name="RawFormat">Image format</param>
 <returns>image codec info.</returns>
</member>
<member name="M:InnerLibs.Images.CombineImages(System.Boolean,System.Drawing.Image[])">
 <summary>
 Combina 2 ou mais imagens em uma única imagem
 </summary>
 <param name="Images">Lista de Imagens para combinar</param>
 <param name="VerticalFlow">Se TRUE, combina as Imagens verticalmente (Uma em baixo da outra), caso contrario as imagens serão combinadas horizontalmente (Uma do lado da outra da esquerda para a direita)</param>
 <returns>Um Bitmap com a combinaçao de todas as imagens da Lista</returns>
</member>
<member name="M:InnerLibs.Images.CombineImages(System.Collections.Generic.IEnumerable{System.Drawing.Image},System.Boolean)">
 <summary>
 Combina 2 ou mais imagens em uma única imagem
 </summary>
 <param name="Images">Array de Imagens para combinar</param>
 <param name="VerticalFlow">Se TRUE, combina as Imagens verticalmente (Uma em baixo da outra), caso contrario as imagens serão combinadas horizontalmente (Uma do lado da outra da esquerda para a direita)</param>
 <returns>Um Bitmap com a combinaçao de todas as imagens do Array</returns>
</member>
<member name="M:InnerLibs.Images.GetMostUsedColors(System.Drawing.Image,System.Int32)">
 <summary>
 Retorna uma lista com as N cores mais utilizadas na imagem
 </summary>
 <param name="Image">Imagem</param>
 <returns>uma lista de Color</returns>
</member>
<member name="M:InnerLibs.Images.GetMostUsedColors(System.Drawing.Image)">
 <summary>
 Retorna uma lista com as cores utilizadas na imagem
 </summary>
 <param name="Image">Imagem</param>
 <returns>uma lista de Color</returns>
</member>
<member name="M:InnerLibs.Images.ColorPallette(System.Drawing.Image,System.Int32)">
 <summary>
 Retorna uma lista com as cores utilizadas na imagem
 </summary>
 <param name="Img">Imagem</param>
 <returns>uma lista de Color</returns>
</member>
<member name="M:InnerLibs.Images.Pixelate(System.Drawing.Image,System.Int32)">
 <summary>
 Pixeliza uma imagem
 </summary>
 <param name="Image"></param>
 <param name="PixelateSize"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.ToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
 <summary>
 Transforma uma imagem em um stream
 </summary>
 <param name="Image">Imagem</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.ToBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
 <summary>
 Transforma uma imagem em array de bytes
 </summary>
 <param name="Image">Imagem</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.ResizeCrop(System.Drawing.Image,System.Int32,System.Int32)">
 <summary>
 redimensiona e Cropa uma imagem, aproveitando a maior parte dela
 </summary>
 <param name="Image"></param>
 <param name="Width"></param>
 <param name="Height"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.ResizeCrop(System.Drawing.Image,System.Int32,System.Int32,System.Boolean)">
 <summary>
 redimensiona e Cropa uma imagem, aproveitando a maior parte dela
 </summary>
 <param name="Image"></param>
 <param name="Width"></param>
 <param name="Height"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.InnerCrypt.InnCrypt(System.String,System.Int32)">
 <summary>
 Criptografa uma suma string usando a logica InnerCrypt
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.InnerCrypt.UnnCrypt(System.String,System.Int32)">
 <summary>
 Descriptografa uma string previamente criptografada com InnerCrypt
 </summary>
 <param name="EncryptedText">Texto Criptografado</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.MenuBuilder.MenuList`1">
 <summary>
 Estrutura para criação de menus com submenus
 </summary>
</member>
<member name="P:InnerLibs.MenuBuilder.MenuList`1.HasItems">
 <summary>
 Verifica se este menu possui itens
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.MenuBuilder.MenuItem`1">
 <summary>
 Item de um InnerMenu
 </summary>
</member>
<member name="P:InnerLibs.MenuBuilder.MenuItem`1.Icon">
 <summary>
 Icone correspondente a este menu
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.MenuBuilder.MenuItem`1.Title">
 <summary>
 Titulo do menu
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.MenuBuilder.MenuItem`1.URL">
 <summary>
 URL do menu
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.MenuBuilder.MenuItem`1.Target">
 <summary>
 Target do menu
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.MenuBuilder.MenuItem`1.SubItems">
 <summary>
 Subitens do menu
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.MenuBuilder.MenuItem`1.Data">
 <summary>
 Informações relacionadas a este item
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.MenuBuilder.MenuItem`1.Active">
 <summary>
 Indica se o menu está ativo (selecionado)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.MenuBuilder.MenuItem`1.Enabled">
 <summary>
 Indica se o menu está habilitado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.MenuBuilder.MenuItem`1.Visible">
 <summary>
 Indica se o menu está visivel
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.MenuBuilder.MenuItem`1.HasItems">
 <summary>
 Verifica se este item possui subitens
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.MenuBuilder.MenuItem`1.#ctor(System.String,System.String,System.String,System.String)">
 <summary>
 Inicializa um novo MenuBuilderItem
 </summary>
 <param name="Title">Titulo do menu</param>
 <param name="URL">URL do menu</param>
 <param name="Target">Alvo do menu, nomralmente _self</param>
 <param name="Icon">icone do menu</param>
</member>
<member name="M:InnerLibs.MenuBuilder.MenuItem`1.#ctor(System.String,System.Collections.Generic.List{InnerLibs.MenuBuilder.MenuItem{`0}},System.String)">
 <summary>
 Inicializa um novo MenuBuilderItem
 </summary>
 <param name="Title">Titulo do Menu</param>
 <param name="SubItems">Subitens do menu</param>
</member>
<member name="M:InnerLibs.MenuBuilder.MenuItem`1.#ctor">
 <summary>
 Construtor padrão
 </summary>
</member>
<member name="T:InnerLibs.LINQ.PaginationFilter`2">
 <summary>
 Classe para criação de paginação e filtros dinâmicos para listas de classes
 </summary>
 <typeparam name="ClassType"></typeparam>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.#ctor(System.Func{`0,`1})">
 <summary>
 Cria uma nova instancia e seta a exclusividade de filtro
 </summary>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.Compute">
 <summary>
 Força o <see cref="T:System.Linq.IQueryable"/> a executar (sem paginação)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.PageNumber">
 <summary>
 Numero da pagina
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.Filters">
 <summary>
 Filtros
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.Parameter">
 <summary>
 Parametro utilizado na contrução da expressão lambda
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.Filter">
 <summary>
 Expressão binária contendo todos os filtros
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.GetFilterQueryString(System.Boolean)">
 <summary>
 Cria uma querystring com os filtros ativos
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.CreateQueryString(System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Cria uma querystring com  paginacao e os filtros ativos
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.SetPaginationQueryParameters(System.String,System.String,System.String)">
 <summary>
 Seta os parametros utilizados na querystring para a paginação
 </summary>
 <param name="PageNumber"></param>
 <param name="PageSize"></param>
 <param name="PaginationOffset"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.GetPaginationQueryString(System.Nullable{System.Int32},System.Boolean,System.Boolean)">
 <summary>
 Retorna a parte da querystring usada para paginacao
 </summary>
 <param name="PageNumber"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.ToString">
 <summary>
 Retorna uma QueryString que representa este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.CreateUrl(System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Cria uma Url com a query string deste filtro
 </summary>
 <param name="Url"></param>
 <param name="PageNumber"></param>
 <param name="ForceEnabled"></param>
 <param name="IncludePageSize"></param>
 <param name="IncludePaginationOffset"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.CreateUrlFromPattern(System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Cria uma url a partir de um pattern de Url e concatena a query string
 </summary>
 <param name="UrlPattern"></param>
 <param name="ForceEnabled"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.RemapExpression">
 <summary>
 Expressão de remapeamento da coleção
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.Data">
 <summary>
 Fonte de Dados deste filtro
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.Page(System.Int32)">
 <summary>
 Dados da Pagina Atual
 </summary>
 <param name="PageNumber"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.LambdaExpression">
 <summary>
 Expressão lambda deste filtro
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.LastPage">
 <summary>
 Numero da ultima pagina
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.FirstPage">
 <summary>
 Numero da primeira pagina
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.NextPage">
 <summary>
 Numero da proxima pagina
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.PreviousPage">
 <summary>
 Numero da pagina anterior
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.IsFirstPage">
 <summary>
 Retorna true se esta pagina é a primeira
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.IsLastPage">
 <summary>
 Retorna true se esta pagina é a ultima
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.IsPaginationNecessary">
 <summary>
 Retorna true se existir mais de uma pagina
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.IsFirstPageNecessary">
 <summary>
 Retorna true se existir o botão de primeira página for necessário
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.IsLastPageNecessary">
 <summary>
 Retorna true se existir o botão de primeira página for necessário
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.IsPreviousPageNecessary">
 <summary>
 Retorna true se existir o botão de pagina anterior for necessário
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.IsNextPageNecessary">
 <summary>
 Retorna true se existir o botão de proxima pagina for necessário
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.Total">
 <summary>
 Total de itens da Lista
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.PageSize">
 <summary>
 Quantidade de itens por página
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.PageCount">
 <summary>
 Quantidade de páginas
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.PaginationOffset">
 <summary>
 Quantidade média de "botões de paginação" contidas no <see cref="P:InnerLibs.LINQ.PaginationFilter`2.PageRange"/>
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.PageRange">
 <summary>
 Retorna um range de páginas a partir da pagina atual
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.ButtonCount(System.Object)">
 <summary>
 Quantidade de botões de paginação
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.ContainsPage(System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Verifica se o <see cref="P:InnerLibs.LINQ.PaginationFilter`2.PageRange"/> contém algumas páginas especificas
 </summary>
 <param name="PageNumbers"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.ContainsPage(System.Int32[])">
 <summary>
 Verifica se o <see cref="P:InnerLibs.LINQ.PaginationFilter`2.PageRange"/> contém algumas páginas especificas
 </summary>
 <param name="PageNumbers"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.IsFirstTraillingNecessary">
 <summary>
 Indica se o primeiro botão de reticencias é necessário
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.IsLastTraillingNecessary">
 <summary>
 Indica se o ultimo botão de reticencias é necessário
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.PageButtons">
 <summary>
 Botões de paginação
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.CreatePaginationButtons(System.String)">
 <summary>
 Cria uma lista de strings utilizadas nos botões de paginação
 </summary>
 <param name="Trailling"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.PageButtonsFromTemplate(System.String,System.String,System.String,System.String)">
 <summary>
 Aplica a paginação a um template
 </summary>
 <param name="Template">Template de pagina</param>
 <param name="TraillingTemplate">emplate de botoes de reticencias</param>
 <param name="Trailling">botao de reticencias</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.PageButtonsFromTemplate(System.String,System.String)">
 <summary>
 Aplica a paginação a um template
 </summary>
 <param name="Template">Template de pagina</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.Config(System.Action{InnerLibs.LINQ.PaginationFilter{`0,`1}})">
 <summary>
 Configura este Filtro
 </summary>
 <param name="options"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.UseQueryString(System.String,System.String)">
 <summary>
 Configura este Filtro para utilizar uma querystring.
 </summary>
 <param name="Query">QueryString</param>
 <remarks> Utiliza os names como propriedade e os values como valores do filtro. Propriedade que não existirem na classe serão ignoradas. Valores nulos serão ignorados por padrão</remarks>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.UseArrayDictionary(System.Collections.Generic.IDictionary{System.String,System.IComparable[]},System.String)">
 <summary>
 Configura este LambDafilter para utilizar um Dictionary como Filtro.
 </summary>
 <param name="Collection">Collection</param>
 <remarks> Utiliza os names como propriedade e os values como valores do filtro. Propriedade que não existirem na classe serão ignoradas. Valores nulos serão ignorados por padrão</remarks>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.UseDictionary(System.Collections.Generic.IDictionary{System.String,System.IComparable},System.String)">
 <summary>
 Configura este LambDafilter para utilizar um Dictionary como Filtro.
 </summary>
 <param name="Collection">Collection</param>
 <remarks> Utiliza os names como propriedade e os values como valores do filtro. Propriedade que não existirem na classe serão ignoradas. Valores nulos serão ignorados por padrão</remarks>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.SetData(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 Seta a lista com os dados a serem filtrados nesse filtro
 </summary>
 <param name="List"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.SetData(System.Linq.IQueryable{`0})">
 <summary>
 Seta a lista com os dados a serem filtrados nesse filtro
 </summary>
 <param name="List"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
 <summary>
 Ordena os resultados da lista
 </summary>
 <typeparam name="t"></typeparam>
 <param name="Selector"></param>
 <param name="Descending"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.OrderBy(System.String[],System.Boolean)">
 <summary>
 Ordena os resultados da lista
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.OrderBy(System.String,System.Boolean)">
 <summary>
 Ordena os resultados da lista
 </summary>
 <param name="Selector"></param>
 <param name="Descending"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.UseNameValueCollection(System.Collections.Specialized.NameValueCollection,System.String)">
 <summary>
 Extrai os parametros de um <see cref="T:System.Collections.Specialized.NameValueCollection"/> e seta os membros usando as Keys como membros
 </summary>
 <param name="Collection"></param>
 <param name="DefaultOperator"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.GetPage(System.Int32)">
 <summary>
 Executa o Filtro e retorna os dados paginados
 </summary>
 <param name="PageNumber"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PaginationFilter`2.WhereFilters">
 <summary>
 Expressões adicionadas a clausula where junto com os filtros
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
 <summary>
 Adciona Expressões a clausula where junto com os filtros
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.WhereIf(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
 <summary>
 Adciona Expressões a clausula where junto com os filtros se uma condiçao for cumprida
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.GetPage">
 <summary>
 Retorna a pagina atual
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.GetQueryablePage">
 <summary>
 Retorna <see cref="P:InnerLibs.LINQ.PaginationFilter`2.Data"/> com os filtros aplicados
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.GetQueryablePage(System.Int32)">
 <summary>
 Retorna <see cref="P:InnerLibs.LINQ.PaginationFilter`2.Data"/> com os filtros aplicados
 </summary>
 <param name="PageNumber"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.GetEnumerablePage">
 <summary>
 Retorna <see cref="P:InnerLibs.LINQ.PaginationFilter`2.Data"/> com os filtros aplicados
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.GetEnumerablePage(System.Int32)">
 <summary>
 Retorna <see cref="P:InnerLibs.LINQ.PaginationFilter`2.Data"/> com os filtros aplicados
 </summary>
 <param name="PageNumber"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.SetPagination(System.Int32,System.Int32)">
 <summary>
 Configura a paginação do filtro
 </summary>
 <param name="PageSize"></param>
 <param name="PaginationOffset"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.SetPagination(System.Int32)">
 <summary>
 Configura a paginação do filtro
 </summary>
 <param name="PageSize"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.SetPage(System.Int32)">
 <summary>
 Seta a pagina atual
 </summary>
 <param name="PageNumber"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.SetMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},InnerLibs.LINQ.FilterConditional,System.Boolean)">
 <summary>
 Configura um novo membro para este filtro
 </summary>
 <param name="PropertyName"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.CreateSearch``1(System.Collections.Generic.IEnumerable{System.IComparable},System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
 <summary>
 Seta uma busca usando <see cref="!:Contains()"/> em <paramref name="PropertyValues"/> para cada propriedade em <paramref name="PropertyNames"/>
 </summary>
 <param name="PropertyValues"></param>
 <param name="PropertyNames"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.CreateSearch(System.Collections.Generic.IEnumerable{System.IComparable},System.String[])">
 <summary>
 Seta uma busca usando Contains(<paramref name="PropertyValues"/>)"  para cada propriedade em <paramref name="PropertyNames"/>
 </summary>
 <param name="PropertyValues"></param>
 <param name="PropertyNames"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.SetMember(System.String,InnerLibs.LINQ.FilterConditional,System.Boolean)">
 <summary>
 Configura um novo membro para este filtro
 </summary>
 <param name="PropertyName"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`2.IsCurrentPage(System.Int32)">
 <summary>
 Verifica se á pagina atual é igual a uma pagina especifica
 </summary>
 <param name="Index"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PaginationFilter`1.#ctor(System.Action{InnerLibs.LINQ.PaginationFilter{`0}})">
 <summary>
 Cria uma nova instancia e seta a exclusividade de filtro
 </summary>
</member>
<member name="P:InnerLibs.LINQ.PropertyFilter`2.Filter">
 <summary>
 Expressão binaria deste filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.ValidValues">
 <summary>
 Retorna apenas os valores validos para este filtro (<see cref="P:InnerLibs.LINQ.PropertyFilter`2.AcceptNullValues"/> e <see cref="P:InnerLibs.LINQ.PropertyFilter`2.ValueValidation"/>)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PropertyFilter`2.AcceptNullValues">
 <summary>
 Configura este filtro para utilização de valores nulos na query
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PropertyFilter`2.Enabled">
 <summary>
 Indica se este filtro está ativo
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PropertyFilter`2.Operator">
 <summary>
 Operador usado nesse filtro
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PropertyFilter`2.Is">
 <summary>
 Comparara o valor do filtro com TRUE ou FALSE
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PropertyFilter`2.PropertyValues">
 <summary>
 Valores a serem testados por esse filtro
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PropertyFilter`2.Parameter">
 <summary>
 Parametro da expressão lambda
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PropertyFilter`2.Member">
 <summary>
 Expressão do membro utilizado no filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.SetValues``1(``0[])">
 <summary>
 Seta varios valores para esse filtro testar. Substitui os valores antigos
 </summary>
 <param name="Values"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.SetValues``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Seta varios valores para esse filtro testar. Substitui os valores antigos
 </summary>
 <param name="Values"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.AddValues``1(System.Nullable{``0}[])">
 <summary>
 Adciona varios valores para esse filtro testar.
 </summary>
 <param name="Values"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.SetValue``1(``0)">
 <summary>
 Seta um unico valor para esse filtro testar. Substitui os antigos
 </summary>
 <param name="Value"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.SetValue``1(System.Nullable{``0})">
 <summary>
 Seta um unico valor para esse filtro testar. Substitui os antigos
 </summary>
 <param name="Value"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.SetMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},InnerLibs.LINQ.FilterConditional)">
 <summary>
 Sete um membro para ser utilizado neste filtro. É ignorado quando seus Values estão nulos ou vazios
 </summary>
 <param name="PropertySelector"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.SetMember(System.String,InnerLibs.LINQ.FilterConditional)">
 <summary>
 Sete um membro para ser utilizado neste filtro. É ignorado quando seus Values estão nulos ou vazios
 </summary>
 <param name="PropertyName"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.SetOperator(System.String)">
 <summary>
 Seta o operador utilizado nesse filtro
 </summary>
 <param name="[Operator]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.Negate">
 <summary>
 Nega o filtro atual
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.CompareTrue">
 <summary>
 Força uma comparação positiva para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.CompareFalse">
 <summary>
 Força uma comparação negativa para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.ContainsAll``1(System.Nullable{``0})">
 <summary>
 Seta o operador para Contains e o Valor para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Seta o operador para Contains e os Valores para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.Contains``1(System.Nullable{``0})">
 <summary>
 Seta o operador para Contains e o Valor para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.Contains``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Seta o operador para Contains e os Valores para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.StartsWith``1(System.Nullable{``0})">
 <summary>
 Seta o operador para StartsWith e o Valor para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.StartsWith``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Seta o operador para StartsWith e os Valores para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.EndsWith``1(System.Nullable{``0})">
 <summary>
 Seta o operador para EndsWith e o Valor para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.EndsWith``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Seta o operador para EndsWith e os Valores para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.CrossContains``1(System.Nullable{``0})">
 <summary>
 Seta o operador para CrossContains e o Valor para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.CrossContains``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Seta o operador para CrossContains e os Valores para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.Equal``1(System.Nullable{``0})">
 <summary>
 Seta o operador para = e o Valor para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.Equal``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Seta o operador para = e os Valores para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.GreaterThan``1(System.Nullable{``0})">
 <summary>
 Seta o operador para > e o Valor para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.GreaterThan``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Seta o operador para > e os Valores para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.LessThan``1(System.Nullable{``0})">
 <summary>
 Seta o operador para &lt; e o Valor para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.LessThan``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Seta o operador para   &lt; e os Valores para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.GreaterThanOrEqual``1(System.Nullable{``0})">
 <summary>
 Seta o operador para  >= e o Valor para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.GreaterThanOrEqual``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Seta o operador para  >= e os Valores para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.LessThanOrEqual``1(System.Nullable{``0})">
 <summary>
 Seta o operador para   &lt;= e o Valor para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.LessThanOrEqual``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Seta o operador para   &lt; e os Valores para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.NotEqual``1(System.Nullable{``0})">
 <summary>
 Seta o operador para  != e o Valor para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.NotEqual``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Seta o operador para  != e os Valores para este filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.AllowNull">
 <summary>
 Permite que valores nulos sejam adcionados ao filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.IgnoreNull">
 <summary>
 Impede que valores nulos sejam adcionados ao filtro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.SetEnabled(System.Boolean)">
 <summary>
 Ativa ou desativa esse filtro durante a construção da expressão
 </summary>
 <param name="Enabled"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.LINQ.PropertyFilter`2.QueryStringSeparator">
 <summary>
 Separador utilizado pelo <see cref="!:CreateQueryParameter(Boolean)"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.PropertyFilter`2.CreateQueryParameter(System.Boolean,System.Boolean)">
 <summary>
 Retorna uma string em formato de parametro de QueryString deste filtro
 </summary>
 <param name="ForceEnabled"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.SelectWithPrevious``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
 <summary>
 Realiza um Select trazendo o item anterior junto com o atual
 </summary>
 <typeparam name="TSource"></typeparam>
 <typeparam name="TResult"></typeparam>
 <param name="source"></param>
 <param name="projection"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.CreateFilter``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Retorna um <see cref="T:InnerLibs.LINQ.PaginationFilter`2"/> para a lista especificada
 </summary>
 <typeparam name="T"></typeparam>
 <param name="List"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.CreateFilter``1(System.Collections.Generic.IEnumerable{``0},System.Action{InnerLibs.LINQ.PaginationFilter{``0,``0}})">
 <summary>
 Retorna um <see cref="T:InnerLibs.LINQ.PaginationFilter`2"/> para a lista especificada
 </summary>
 <typeparam name="T"></typeparam>
 <param name="List"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.CreateFilter``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Action{InnerLibs.LINQ.PaginationFilter{``0,``1}})">
 <summary>
 Retorna um <see cref="T:InnerLibs.LINQ.PaginationFilter`2"/> para a lista especificada
 </summary>
 <typeparam name="T"></typeparam>
 <param name="List"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.CreateFilter``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
 <summary>
 Retorna um <see cref="T:InnerLibs.LINQ.PaginationFilter`2"/> para a lista especificada
 </summary>
 <typeparam name="T"></typeparam>
 <param name="List"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.WhereExpression``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.IComparable},System.Boolean,InnerLibs.LINQ.FilterConditional)">
 <summary>
 Gera uma expressao lambda a partir do nome de uma propriedade, uma operacao e um valor
 </summary>
 <typeparam name="Type">Tipo do objeto acessado</typeparam>
 <param name="PropertyName">Propriedade do objeto <typeparamref name="Type"/></param>
 <param name="[Operator]">Operador ou método do objeto <typeparamref name="Type"/> que retorna um <see cref="T:System.Boolean"/></param>
 <param name="PropertyValue">Valor da propriedade comparado com o <paramref name="Operator"/> ou como o primeiro argumento do método de mesmo nome definido em <typeparamref name="Type"/></param>
 <param name="[Is]">Compara o resultado com TRUE ou FALSE</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.WhereExpression``1(System.Linq.IQueryable{``0},System.String,System.String,System.Collections.Generic.IEnumerable{System.IComparable},System.Boolean,System.Boolean)">
 <summary>
 Busca em um <see cref="T:System.Linq.IQueryable`1"/> usando uma expressao lambda a partir do nome de uma propriedade, uma operacao e um valor
 </summary>
 <typeparam name="T">Tipo do objeto acessado</typeparam>
 <param name="List">Lista</param>
 <param name="PropertyName">Propriedade do objeto <typeparamref name="T"/></param>
 <param name="[Operator]">Operador ou método do objeto <typeparamref name="T"/> que retorna um <see cref="T:System.Boolean"/></param>
 <param name="PropertyValue">Valor da propriedade comparado com o <paramref name="Operator"/> ou como o primeiro argumento do método de mesmo nome definido em <typeparamref name="T"/></param>
 <param name="[Is]">Compara o resultado com TRUE ou FALSE</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.GetOperatorExpression(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.IComparable},InnerLibs.LINQ.FilterConditional)">
 <summary>
 Retorna uma expressão de comparação para um ou mais valores
 </summary>
 <param name="Member"></param>
 <param name="[Operator]"></param>
 <param name="PropertyValues"></param>
 <param name="Conditional"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.GenerateParameterExpression``1">
 <summary>
 Cria uma ParameterExpression utilizando o tipo para gerar um nome amigável
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.GenerateParameterExpression(System.Type)">
 <summary>
 Cria uma ParameterExpression utilizando o tipo para gerar um nome amigável
 </summary>
 <param name="Type"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.FirstOrDefaultExpression``1(System.Linq.IQueryable{``0},System.String,System.String,System.Object,System.Boolean)">
 <summary>
 Busca em um <see cref="T:System.Linq.IQueryable`1"/> usando uma expressao lambda a partir do nome de uma propriedade, uma operacao e um valor
 </summary>
 <typeparam name="T">Tipo do objeto acessado</typeparam>
 <param name="List">Lista</param>
 <param name="PropertyName">Propriedade do objeto <typeparamref name="T"/></param>
 <param name="[Operator]">Operador ou método do objeto <typeparamref name="T"/> que retorna um <see cref="T:System.Boolean"/></param>
 <param name="PropertyValue">Valor da propriedade comparado com o <paramref name="Operator"/> ou como o primeiro argumento do método de mesmo nome definido em <typeparamref name="T"/></param>
 <param name="[Is]">Compara o resultado com TRUE ou FALSE</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.SingleOrDefaultExpression``1(System.Linq.IQueryable{``0},System.String,System.String,System.Object,System.Boolean)">
 <summary>
 Busca em um <see cref="T:System.Linq.IQueryable`1"/> usando uma expressao lambda a partir do nome de uma propriedade, uma operacao e um valor
 </summary>
 <typeparam name="T">Tipo do objeto acessado</typeparam>
 <param name="List">Lista</param>
 <param name="PropertyName">Propriedade do objeto <typeparamref name="T"/></param>
 <param name="[Operator]">Operador ou método do objeto <typeparamref name="T"/> que retorna um <see cref="T:System.Boolean"/></param>
 <param name="PropertyValue">Valor da propriedade comparado com o <paramref name="Operator"/> ou como o primeiro argumento do método de mesmo nome definido em <typeparamref name="T"/></param>
 <param name="[Is]">Compara o resultado com TRUE ou FALSE</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.GetPropertyInfo``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
 <summary>
 Retorna as informacoes de uma propriedade a partir de um seletor
 </summary>
 <typeparam name="TSource"></typeparam>
 <typeparam name="TProperty"></typeparam>
 <param name="source"></param>
 <param name="propertyLambda"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.Traverse``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
 <summary>
 Percorre uma Lista de objetos que possuem como propriedade objetos do mesmo tipo e as unifica recursivamente
 </summary>
 <typeparam name="T">Tipo do Objeto</typeparam>
 <param name="Items">Itens</param>
 <param name="ChildSelector">Seletor das propriedades filhas</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.Traverse``1(``0,System.Func{``0,``0})">
 <summary>
 Percorre uma Lista de objetos que possuem como propriedade objetos do mesmo tipo e as unifica recursivamente
 </summary>
 <typeparam name="T">Tipo do Objeto</typeparam>
 <param name="Item">Itens</param>
 <param name="ParentSelector">Seletor das propriedades filhas</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.Traverse``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Boolean)">
 <summary>
 Percorre uma Lista de objetos que possuem como propriedade objetos do mesmo tipo e as unifica recursivamente
 </summary>
 <typeparam name="T">Tipo do Objeto</typeparam>
 <param name="Item">Itens</param>
 <param name="ChildSelector">Seletor das propriedades filhas</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.Traverse``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Boolean)">
 <summary>
 Percorre uma Lista de objetos que possuem como propriedade objetos do mesmo tipo e as unifica recursivamente expondo uma outra propriedade
 </summary>
 <typeparam name="T">Tipo do Objeto</typeparam>
 <param name="Item">Itens</param>
 <param name="ChildSelector">Seletor das propriedades filhas</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.Traverse``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Boolean)">
 <summary>
 Percorre uma Lista de objetos que possuem como propriedade objetos do mesmo tipo e as unifica recursivamente expondo uma outra propriedade
 </summary>
 <typeparam name="T">Tipo do Objeto</typeparam>
 <param name="Item">Itens</param>
 <param name="ChildSelector">Seletor das propriedades filhas</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.Traverse``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Linq.IQueryable{``1}},System.Boolean)">
 <summary>
 Percorre uma Lista de objetos que possuem como propriedade objetos do mesmo tipo e as unifica recursivamente expondo uma outra propriedade
 </summary>
 <typeparam name="T">Tipo do Objeto</typeparam>
 <param name="Item">Itens</param>
 <param name="ChildSelector">Seletor das propriedades filhas</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.CreateWhereExpression``1(System.Boolean)">
 <summary>
 Cria uma <see cref="T:System.Linq.Expressions.Expression"/> condicional a partir de um valor <see cref="T:System.Boolean"/>
 </summary>
 <typeparam name="T">Tipo do objeto</typeparam>
 <param name="DefaultReturnValue">Valor padrão</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
 <summary>
 Concatena uma expressão com outra usando o operador And  
 </summary>
 <typeparam name="T"></typeparam>
 <param name="FirstExpression"></param>
 <param name="OtherExpressions"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
 <summary>
 Concatena uma expressão com outra usando o operador OR (||)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="FirstExpression"></param>
 <param name="OtherExpressions"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.CreateWhereExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
 <summary>
 Cria uma <see cref="T:System.Linq.Expressions.Expression"/> condicional a partir de uma outra expressão
 </summary>
 <typeparam name="T">Tipo do objeto</typeparam>
 <param name="predicate">Valor padrão</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.DistinctBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Boolean)">
 <summary>
 Distingui os items de uma lista a partir de uma propriedade da classe
 </summary>
 <typeparam name="T">Tipo da classe</typeparam>
 <typeparam name="TKey">Tipo da propriedade</typeparam>
 <param name="items">     Lista</param>
 <param name="[property]">Propriedade</param>
 <param name="OrderBy">Criterio que indica qual o objeto que deverá ser preservado na lista se encontrado mais de um</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
 <summary>
 Distingui os items de uma lista a partir de uma propriedade da classe
 </summary>
 <typeparam name="T">Tipo da classe</typeparam>
 <typeparam name="TKey">Tipo da propriedade</typeparam>
 <param name="items">     Lista</param>
 <param name="[property]">Propriedade</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.DistinctBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
 <summary>
 Distingui os items de uma lista a partir de uma propriedade da classe
 </summary>
 <typeparam name="T">Tipo da classe</typeparam>
 <typeparam name="TKey">Tipo da propriedade</typeparam>
 <param name="items">     Lista</param>
 <param name="[property]">Propriedade</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Linq.IQueryable{``0},System.Int32)">
 <summary>
 Criar um <see cref="T:System.Collections.Generic.Dictionary`2"/> agrupando os itens em páginas de um tamanho especifico
 </summary>
 <typeparam name="Tsource"></typeparam>
 <param name="source">  </param>
 <param name="PageSize"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.GroupByPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
 <summary>
 Criar um <see cref="T:System.Collections.Generic.Dictionary`2"/> agrupando os itens em páginas de um tamanho especifico
 </summary>
 <typeparam name="Tsource"></typeparam>
 <param name="source">  </param>
 <param name="PageSize"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.HasSamePropertyValues``1(``0,``0,System.Func{``0,System.Object}[])">
 <summary>
 Verifica se uma instancia de uma classe possui propriedades especificas com valores igual
 as de outra instancia da mesma classe
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Obj1">      Instancia 1</param>
 <param name="Obj2">      Instancia 2</param>
 <param name="Properties">Propriedades</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.OrderByLike``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])">
 <summary>
 Orderna uma lista a partir da aproximaçao de um deerminado campo com uma string
 </summary>
 <typeparam name="T"></typeparam>
 <param name="items">           </param>
 <param name="PropertySelector"></param>
 <param name="Ascending">       </param>
 <param name="Searches">        </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Randomiza a ordem de um <see cref="T:System.Collections.IEnumerable"/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="items"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.OrderByRandom``1(System.Linq.IQueryable{``0})">
 <summary>
 Randomiza a ordem de um <see cref="T:System.Linq.IQueryable"/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="items"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.Page``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
 <summary>
 Reduz um <see cref="T:System.Linq.IQueryable"/> em uma página especifica
 </summary>
 <typeparam name="TSource"></typeparam>
 <param name="Source">    </param>
 <param name="PageNumber"></param>
 <param name="PageSize">  </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
 <summary>
 Reduz um <see cref="T:System.Collections.IEnumerable"/> em uma página especifica
 </summary>
 <typeparam name="TSource"></typeparam>
 <param name="Source">    </param>
 <param name="PageNumber"></param>
 <param name="PageSize">  </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.Search``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{``0,System.String}}[])">
 <summary>
 Retorna um <see cref="T:System.Linq.IQueryable`1"/> procurando em varios campos diferentes de uma entidade
 </summary>
 <typeparam name="ClassType">Tipo da Entidade</typeparam>
 <param name="Table">Tabela da Entidade</param>
 <param name="SearchTerms">Termos da pesquisa</param>
 <param name="Properties">Propriedades onde <paramref name="SearchTerms"/> serão procurados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.Search``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{``0,System.String}}[])">
 <summary>
 Retorna um <see cref="T:System.Linq.IQueryable`1"/> procurando em varios campos diferentes de uma entidade
 </summary>
 <typeparam name="ClassType">Tipo da Entidade</typeparam>
 <param name="Table">Tabela da Entidade</param>
 <param name="SearchTerms">Termos da pesquisa</param>
 <param name="Properties">Propriedades onde <paramref name="SearchTerms"/> serão procurados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Collections.Generic.IEnumerable{``0},System.String)">
 <summary>
 Seleciona e une em uma unica string varios elementos
 </summary>
 <typeparam name="TSource"></typeparam>
 <param name="Source">   </param>
 ''' <param name="Separator"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
 <summary>
 Seleciona e une em uma unica string varios elementos
 </summary>
 <typeparam name="TSource"></typeparam>
 <param name="Source">   </param>
 <param name="Selector"> </param>
 <param name="Separator"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.SelectJoin``1(System.Linq.IQueryable{``0},System.Func{``0,System.String},System.String)">
 <summary>
 Seleciona e une em uma unica string varios elementos
 </summary>
 <typeparam name="TSource"></typeparam>
 <param name="Source">   </param>
 <param name="Selector"> </param>
 <param name="Separator"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)">
 <summary>
 Seleciona e une em uma unica string varios elementos enumeraveis
 </summary>
 <typeparam name="TSource"></typeparam>
 <param name="Source">   </param>
 <param name="Selector"> </param>
 <param name="Separator"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.SelectManyJoin``1(System.Linq.IQueryable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}},System.String)">
 <summary>
 Seleciona e une em uma unica string varios elementos enumeraveis
 </summary>
 <typeparam name="TSource"></typeparam>
 <param name="Source">   </param>
 <param name="Selector"> </param>
 <param name="Separator"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.OrderByWithPriority``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})">
 <summary>
 Ordena um <see cref="T:System.Collections.IEnumerable"/> priorizando valores especificos a uma condição no
 inicio da coleção e então segue uma ordem padrão para os outros.
 </summary>
 <typeparam name="T"></typeparam>
 <typeparam name="DefaultOrderType"></typeparam>
 <param name="items">       colecao</param>
 <param name="Priority">    Seletor que define a prioridade</param>
 <param name="DefaultOrder">ordenacao padrao para os outros itens</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.ThenByProperty``1(System.Linq.IQueryable{``0},System.String[],System.Boolean)">
 <summary>
 Ordena um <see cref="T:System.Linq.IQueryable`1"/> a partir do nome de uma ou mais propriedades
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source">      </param>
 <param name="sortProperty"></param>
 <param name="Ascending">   </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.ThenByProperty``1(System.Collections.Generic.IEnumerable{``0},System.String[],System.Boolean)">
 <summary>
 Ordena um <see cref="T:System.Collections.Generic.IEnumerable`1"/> a partir do nome de uma ou mais propriedades
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source">      </param>
 <param name="sortProperty"></param>
 <param name="Ascending">   </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.ThenByList``1(System.Linq.IOrderedEnumerable{``0},``0[])">
 <summary>
 Ordena um <see cref="T:System.Collections.Generic.IEnumerable`1"/> a partir de outra lista do mesmo tipo
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Source"></param>
 <param name="OrderSource"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.ThenByLike``1(System.Linq.IQueryable{``0},System.String[],System.String,System.Boolean)">
 <summary>
 Ordena um <see cref="T:System.Collections.Generic.IEnumerable`1"/> a partir da aproximaçao de uma ou mais
 <see cref="T:System.String"/> com o valor de um determinado campo
 </summary>
 <typeparam name="T"></typeparam>
 <param name="items">       </param>
 <param name="Searches">    </param>
 <param name="SortProperty"></param>
 <param name="Ascending">   </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.ThenByLike``1(System.Linq.IQueryable{``0},System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Boolean)">
 <summary>
 Ordena um <see cref="T:System.Collections.Generic.IEnumerable`1"/> a partir da aproximaçao de uma ou mais
 <see cref="T:System.String"/> com o valor de um determinado campo
 </summary>
 <typeparam name="T"></typeparam>
 <param name="items">       </param>
 <param name="Searches">    </param>
 <param name="SortProperty"></param>
 <param name="Ascending">   </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.ThenByLike``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Boolean,System.String[])">
 <summary>
 Ordena um <see cref="T:System.Collections.Generic.IEnumerable`1"/> a partir da aproximaçao de uma ou mais
 <see cref="T:System.String"/> com o valor de um determinado campo
 </summary>
 <typeparam name="T"></typeparam>
 <param name="items">           </param>
 <param name="PropertySelector"></param>
 <param name="Ascending">       </param>
 <param name="Searches">        </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.Most``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)">
 <summary>
 Retorna TRUE se a maioria dos testes em uma lista retornarem o valor correspondente
 </summary>
 <param name="List"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.MostTrue``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
 <summary>
 Retorna TRUE se a maioria dos testes em uma lista retornarem true
 </summary>
 <param name="List"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.MostFalse``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
 <summary>
 Retorna TRUE se a maioria dos testes em uma lista retornarem false
 </summary>
 <param name="List"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.Most(System.Collections.Generic.IEnumerable{System.Boolean},System.Boolean)">
 <summary>
 Retorna TRUE se a maioria dos testes em uma lista retornarem o valor correspondente
 </summary>
 <param name="List"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.MostTrue(System.Boolean[])">
 <summary>
 Retorna TRUE se a maioria dos testes em uma lista retornarem TRUE
 </summary>
 <param name="Tests"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.MostFalse(System.Boolean[])">
 <summary>
 Retorna TRUE se a maioria dos testes em uma lista retornarem FALSE
 </summary>
 <param name="Tests"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.AllTrue(System.Boolean[])">
 <summary>
 Retorna TRUE se a todos os testes em uma lista retornarem TRUE
 </summary>
 <param name="Tests"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.LINQ.LINQExtensions.AllFalse(System.Boolean[])">
 <summary>
 Retorna TRUE se a todos os testes em uma lista retornarem FALSE
 </summary>
 <param name="Tests"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.EquationPair">
 <summary>
 Representa um Par X,Y para operaçoes matemáticas
 </summary>

</member>
<member name="M:InnerLibs.RuleOfThree.#ctor(InnerLibs.EquationPair,InnerLibs.EquationPair)">
 <summary>
 Calcula uma regra de tres
 </summary>
 <param name="FirstEquation"></param>
 <param name="SecondEquation"></param>
</member>
<member name="M:InnerLibs.RuleOfThree.Resolve">
 <summary>
 Atualiza o campo nulo da <see cref="T:InnerLibs.EquationPair"/> corrspondente pelo <see cref="P:InnerLibs.RuleOfThree.UnknowValue"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.RuleOfThree.#ctor(System.Nullable{System.Decimal}[])">
 <summary>
 Calcula uma regra de três
 </summary>
</member>
<member name="P:InnerLibs.RuleOfThree.FirstEquation">
 <summary>
 Primeira Equaçao
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.RuleOfThree.SecondEquation">
 <summary>
 Segunda Equaçao
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.MathExt">
 <summary>
 Módulo para calculos
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.MathExt.CalculateSimpleInterest(System.Decimal,System.Decimal,System.Decimal)">
 <summary>
 Calcula os Juros simples
 </summary>
 <param name="Capital">Capital</param>
 <param name="Rate">Taxa</param>
 <param name="Time">Tempo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.CalculateCompoundInterest(System.Decimal,System.Decimal,System.Decimal)">
 <summary>
 Calcula Juros compostos
 </summary>
 <param name="Capital">Capital</param>
 <param name="Rate">Taxa</param>
 <param name="Time">Tempo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.HasDecimalPart(System.Decimal)">
 <summary>
 Verifica se um numero possui parte decimal
 </summary>
 <param name="Value"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.HasDecimalPart(System.Double)">
 <summary>
 Verifica se um numero possui parte decimal
 </summary>
 <param name="Value"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.DifferenceIfMin(System.Int32,System.Int32)">
 <summary>
 Retorna a diferença entre 2 numeros se o valor minimo for maior que o total
 </summary>
 <param name="Total"></param>
 <param name="MinValue"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.DifferenceIfMax(System.Int32,System.Int32)">
 <summary>
 Retorna a diferença entre 2 numeros se o valor maximo for menor que o total
 </summary>
 <param name="Total"></param>
 <param name="MaxValue"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.ToOrdinalNumber(System.Int32,System.Boolean)">
 <summary>
 retorna o numeor em sua forma ordinal (inglês)
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.ToOrdinalNumber(System.Int64,System.Boolean)">
 <summary>
 retorna o numeor em sua forma ordinal (inglês)
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.ToOrdinalNumber(System.Int16)">
 <summary>
 retorna o numeor em sua forma ordinal (inglês)
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.ToOrdinalNumber(System.Double)">
 <summary>
 retorna o numeor em sua forma ordinal (inglês)
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.ToOrdinalNumber(System.Decimal)">
 <summary>
 retorna o numeor em sua forma ordinal (inglês)
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.EvaluateExpression(System.String,System.Boolean)">
 <summary>
 Executa uma Expressão matematica/lógica simples
 </summary>
 <param name="Formula">Expressão matematica</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.EvaluateExpression``1(System.String,System.Boolean)">
 <summary>
 Executa uma Expressão matematica/lógica simples
 </summary>
 <param name="Formula">Expressão matematica</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.ArithmeticProgression(System.Int32,System.Int32,System.Int32)">
 <summary>
 Retorna uma progressão Aritmética com N numeros
 </summary>
 <param name="FirstNumber"></param>
 <param name="[Constant]"> </param>
 <param name="Length">     </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.GeometricProgression(System.Int32,System.Int32,System.Int32)">
 <summary>
 Retorna uma Progressão Gemoétrica com N numeros
 </summary>
 <param name="FirstNumber"></param>
 <param name="[Constant]"> </param>
 <param name="Length">     </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.CartesianProduct``1(System.Collections.Generic.IEnumerable{``0}[])">
 <summary>
 Retorna todas as possiveis combinações de Arrays do mesmo tipo (Produto Cartesiano)
 </summary>
 <param name="Sets">Lista de Arrays para combinar</param>
 <returns>Produto Cartesiano</returns>
</member>
<member name="M:InnerLibs.MathExt.Fibonacci(System.Int32)">
 <summary>
 Retorna uma sequencia Fibonacci de N numeros
 </summary>
 <param name="Length">Quantidade de numeros da sequencia</param>
 <returns>Lista com a sequencia Fibonacci</returns>
</member>
<member name="M:InnerLibs.MathExt.Factorial(System.Int32)">
 <summary>
 Calcula o fatorial de um numero
 </summary>
 <param name="Number">Numero inteiro positivo maior que zero</param>
 <returns>fatorial do numero inteiro</returns>
</member>
<member name="M:InnerLibs.MathExt.CalculatePercent``2(System.Collections.Generic.Dictionary{``0,``1})">
 <summary>
 Calcula a porcentagem de cada valor em um dicionario em relação a sua totalidade
 </summary>
 <typeparam name="TKey"></typeparam>
 <typeparam name="TValue"></typeparam>
 <param name="Dic"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.CalculatePercent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
 <summary>
 Calcula a porcentagem de cada valor de uma classe em relação a sua totalidade em uma lista
 </summary>
 <typeparam name="TKey"></typeparam>
 <typeparam name="TValue"></typeparam>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.CalculatePercent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
 <summary>
 Calcula a porcentagem de cada valor de uma classe em relação a sua totalidade em uma lista
 </summary>
</member>
<member name="M:InnerLibs.MathExt.CalculatePercent``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Calcula a porcentagem de cada valor de uma classe em relação a sua totalidade em uma lista
 </summary>
</member>
<member name="M:InnerLibs.MathExt.CalculatePercentVariation(System.Decimal,System.Decimal)">
 <summary>
 Calcula a variação percentual entre 2 valores
 </summary>
 <param name="StartValue"></param>
 <param name="EndValue"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.CalculatePercentVariation(System.Int32,System.Int32)">
 <summary>
 Calcula a variação percentual entre 2 valores
 </summary>
 <param name="StartValue"></param>
 <param name="EndValue"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.CalculatePercentVariation(System.Int64,System.Int64)">
 <summary>
 Calcula a variação percentual entre 2 valores
 </summary>
 <param name="StartValue"></param>
 <param name="EndValue"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.CalculatePercent(System.Decimal,System.Decimal)">
 <summary>
 Retorna o percentual de um valor
 </summary>
 <param name="Value">Valor a ser calculado</param>
 <param name="Total">Valor Total (Representa 100%)</param>
 <returns>Um numero decimal contendo a porcentagem</returns>
</member>
<member name="M:InnerLibs.MathExt.CalculateValueFromPercent(System.String,System.Decimal)">
 <summary>
 Retorna o valor de um determinado percentual de um valor total
 </summary>
 <param name="Percent">
 Porcentagem, pode ser um numero ou uma string com o sinal de porcento. Ex.: 15 ou 15%
 </param>
 <param name="Total">  Valor Total (Representa 100%)</param>
 <returns>Um numero decimal contendo o valor relativo a porcentagem</returns>
</member>
<member name="M:InnerLibs.MathExt.CalculateValueFromPercent(System.Int32,System.Decimal)">
 <summary>
 Retorna o valor de um determinado percentual de um valor total
 </summary>
 <param name="Percent">
 Porcentagem, pode ser um numero ou uma string com o sinal de porcento. Ex.: 15 ou 15%
 </param>
 <param name="Total">  Valor Total (Representa 100%)</param>
 <returns>Um numero decimal contendo o valor relativo a porcentagem</returns>
</member>
<member name="M:InnerLibs.MathExt.CalculateValueFromPercent(System.Decimal,System.Decimal)">
 <summary>
 Retorna o valor de um determinado percentual de um valor total
 </summary>
 <param name="Percent">
 Porcentagem, pode ser um numero ou uma string com o sinal de porcento. Ex.: 15 ou 15%
 </param>
 <param name="Total">  Valor Total (Representa 100%)</param>
 <returns>Um numero decimal contendo o valor relativo a porcentagem</returns>
</member>
<member name="M:InnerLibs.MathExt.GetDecimalPlaces(System.Decimal,System.Int32)">
 <summary>
 Retorna um numero inteiro representando a parte decimal de um numero decimal
 </summary>
 <param name="Value">Valor decimal</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.Ceil(System.Decimal)">
 <summary>
 Arredonda um numero para cima. Ex.: 4,5 -&gt; 5
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.MathExt.Ceil(System.Double)">
 <summary>
 Arredonda um numero para cima. Ex.: 4,5 -&gt; 5
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.MathExt.Floor(System.Decimal)">
 <summary>
 Arredonda um numero para baixo. Ex.: 4,5 -&gt; 4
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.MathExt.Floor(System.Double)">
 <summary>
 Arredonda um numero para baixo. Ex.: 4,5 -&gt; 4
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.MathExt.FloorLong(System.Double)">
 <summary>
 Arredonda um numero para baixo. Ex.: 4,5 -&gt; 4
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.MathExt.CeilLong(System.Double)">
 <summary>
 Arredonda um numero para cima. Ex.: 4,5 -&gt; 5
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.MathExt.FloorLong(System.Decimal)">
 <summary>
 Arredonda um numero para baixo. Ex.: 4,5 -&gt; 4
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.MathExt.CeilLong(System.Decimal)">
 <summary>
 Arredonda um numero para cima. Ex.: 4,5 -&gt; 5
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.MathExt.FloorInt(System.Double)">
 <summary>
 Arredonda um numero para baixo. Ex.: 4,5 -&gt; 4
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.MathExt.CeilInt(System.Double)">
 <summary>
 Arredonda um numero para cima. Ex.: 4,5 -&gt; 5
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.MathExt.FloorInt(System.Decimal)">
 <summary>
 Arredonda um numero para baixo. Ex.: 4,5 -&gt; 4
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.MathExt.CeilInt(System.Decimal)">
 <summary>
 Arredonda um numero para cima. Ex.: 4,5 -&gt; 5
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.MathExt.SetMaxValue``1(``0,``0)">
 <summary>
 Limita o valor Maximo de um numero
 </summary>
 <param name="Number">  Numero</param>
 <param name="MaxValue">Valor Maximo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.SetMinValue``1(``0,``0)">
 <summary>
 Limita o valor minimo de um numero
 </summary>
 <param name="Number">  Numero</param>
 <param name="MinValue">Valor Maximo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.LimitRange``1(System.IComparable,System.IComparable,System.IComparable)">
 <summary>
 Limita um range para um numero
 </summary>
 <param name="Number">  Numero</param>
 <param name="MinValue">Valor Minimo para o numero</param>
 <param name="MaxValue">Valor máximo para o numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.LimitRange(System.Int32,System.IComparable,System.IComparable)">
 <summary>
 Limita um range para um numero
 </summary>
 <param name="Number">  Numero</param>
 <param name="MinValue">Valor Minimo para o numero</param>
 <param name="MaxValue">Valor máximo para o numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.LimitRange(System.Decimal,System.IComparable,System.IComparable)">
 <summary>
 Limita um range para um numero
 </summary>
 <param name="Number">  Numero</param>
 <param name="MinValue">Valor Minimo para o numero</param>
 <param name="MaxValue">Valor máximo para o numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.LimitRange(System.Double,System.IComparable,System.IComparable)">
 <summary>
 Limita um range para um numero
 </summary>
 <param name="Number">  Numero</param>
 <param name="MinValue">Valor Minimo para o numero</param>
 <param name="MaxValue">Valor máximo para o numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.LimitRange(System.Int64,System.IComparable,System.IComparable)">
 <summary>
 Limita um range para um numero
 </summary>
 <param name="Number">  Numero</param>
 <param name="MinValue">Valor Minimo para o numero</param>
 <param name="MaxValue">Valor máximo para o numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.LimitRange(System.DateTime,System.IComparable,System.IComparable)">
 <summary>
 Limita um range para um numero
 </summary>
 <param name="Number">  Numero</param>
 <param name="MinValue">Valor Minimo para o numero</param>
 <param name="MaxValue">Valor máximo para o numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.RoundDecimal(System.Decimal,System.Nullable{System.Int32})">
 <summary>
 Arredonda um numero para o valor inteiro mais próximo
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.RoundDouble(System.Double,System.Nullable{System.Int32})">
 <summary>
 Arredonda um numero para o valor inteiro mais próximo
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.RoundInt(System.Decimal)">
 <summary>
 Arredonda um numero para o valor inteiro mais próximo
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.RoundInt(System.Double)">
 <summary>
 Arredonda um numero para o valor inteiro mais próximo
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.RoundLong(System.Decimal)">
 <summary>
 Arredonda um numero para o valor inteiro mais próximo
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.RoundLong(System.Double)">
 <summary>
 Arredonda um numero para o valor inteiro mais próximo
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.Lerp(System.Single,System.Single,System.Single)">
 <summary>
 Realiza um calculo de interpolação Linear
 </summary>
 <param name="Start"> </param>
 <param name="[End]"> </param>
 <param name="Amount"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.Sum(System.Double[])">
 <summary>
 Soma todos os números de um array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo a soma de todos os valores</returns>
</member>
<member name="M:InnerLibs.MathExt.Sum(System.Int64[])">
 <summary>
 Soma todos os números de um array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo a soma de todos os valores</returns>
</member>
<member name="M:InnerLibs.MathExt.Sum(System.Int32[])">
 <summary>
 Soma todos os números de um array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo a soma de todos os valores</returns>
</member>
<member name="M:InnerLibs.MathExt.Sum(System.Decimal[])">
 <summary>
 Soma todos os números de um array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo a soma de todos os valores</returns>
</member>
<member name="M:InnerLibs.MathExt.Average(System.Decimal[])">
 <summary>
 Tira a média de todos os números de um Array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo</returns>
</member>
<member name="M:InnerLibs.MathExt.Average(System.Double[])">
 <summary>
 Tira a média de todos os números de um Array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo</returns>
</member>
<member name="M:InnerLibs.MathExt.Average(System.Int32[])">
 <summary>
 Tira a média de todos os números de um Array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo</returns>
</member>
<member name="M:InnerLibs.MathExt.Average(System.Int64[])">
 <summary>
 Tira a média de todos os números de um Array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo</returns>
</member>
<member name="M:InnerLibs.MathExt.ToRadians(System.Double)">
 <summary>
 COnverte graus para radianos
 </summary>
 <param name="Degrees"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.MathExt.CalculateDistance(InnerLibs.Locations.AddressInfo,InnerLibs.Locations.AddressInfo)">
 <summary>
 Calcula a distancia entre 2 locais
 </summary>
 <param name="FirstLocation"> Primeiro Local</param>
 <param name="SecondLocation">Segundo Local</param>
 <returns>A distancia em kilometros</returns>
</member>
<member name="M:InnerLibs.MathExt.CalculateDistanceMatrix(InnerLibs.Locations.AddressInfo[])">
 <summary>
 Calcula a distancia passando por todos os pontos
 </summary>
 <param name="Locations">Localizacoes</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.FileTypeExtensions">
 <summary>
 Módulo de manipulaçao de MIME Types
 </summary>
</member>
<member name="M:InnerLibs.FileTypeExtensions.GetFileType(System.String)">
 <summary>
 Retorna o Mime Type a partir da extensão de um arquivo
 </summary>
 <param name="Extension">extensão do arquivo</param>
 <returns>string mime type</returns>
</member>
<member name="M:InnerLibs.FileTypeExtensions.GetFileType(System.IO.FileInfo)">
 <summary>
 Retorna o Mime Type a partir de um arquivo
 </summary>
 <param name="File">Arquivo</param>
 <returns>string mime type</returns>
</member>
<member name="M:InnerLibs.FileTypeExtensions.GetFileType(System.Drawing.Imaging.ImageFormat)">
 <summary>
 Retorna o Mime Type a partir de de um formato de Imagem
 </summary>
 <param name="RawFormat">Formato de Imagem</param>
 <returns>string mime type</returns>
</member>
<member name="M:InnerLibs.FileTypeExtensions.GetFileType(System.Drawing.Image)">
 <summary>
 Retorna o Mime Type a partir de de uma Imagem
 </summary>
 <param name="Image">Imagem</param>
 <returns>string mime type</returns>
</member>
<member name="M:InnerLibs.FileTypeExtensions.ToFileType(System.String)">
 <summary>
 Retorna um Objeto FileType a partir de uma string MIME Type, Nome ou Extensão de Arquivo
 </summary>
 <param name="MimeTypeOrExtensionOrPathOrDataURI"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileTypeExtensions.GetIcon(System.IO.FileSystemInfo)">
 <summary>
 Retorna um icone de acordo com o arquivo
 </summary>
 <param name="File">Arquivo</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.FileType">
 <summary>
 Classe que representa um MIME Type
 </summary>
</member>
<member name="P:InnerLibs.FileType.Extensions">
 <summary>
 Extensão do arquivo
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FileType.MimeTypes">
 <summary>
 Tipo do arquivo (MIME Type String)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FileType.Description">
 <summary>
 Descrição do tipo de arquivo
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.IsImage">
 <summary>
 Verifica se Tipo de arquivo é de imagem
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.IsAudio">
 <summary>
 Verifica se Tipo de arquivo é de audio
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.IsVideo">
 <summary>
 Verifica se Tipo de arquivo é de audio
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.IsText">
 <summary>
 Verifica se Tipo de arquivo é de audio
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.IsApplication">
 <summary>
 Verifica se Tipo de arquivo é de audio
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FileType.FirstTypes">
 <summary>
 Retorna o tipo do MIME Type (antes da barra)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FileType.SubTypes">
 <summary>
 Retorna o subtipo do MIME Type (depois da barra)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.GetFileTypeList(System.Boolean)">
 <summary>
 Retorna uma Lista com todos os MIME Types suportados
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.GetFileTypeStringList(InnerLibs.FileTypeList)">
 <summary>
 Retorna uma lista de strings contendo todos os MIME Types
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.GetExtensions(System.String,InnerLibs.FileTypeList)">
 <summary>
 Traz uma lista de extensões de acordo com o MIME type especificado
 </summary>
 <param name="MIME">MIME Type String</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.GetFileType(System.String,InnerLibs.FileTypeList)">
 <summary>
 Retorna um objeto FileType a partir de uma extensão de Arquivo ou FileType string
 </summary>
 <param name="MimeTypeOrExtensionOrPathOrDataURI"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.#ctor">
 <summary>
 Constroi um MIME Type Default
 </summary>
</member>
<member name="M:InnerLibs.FileType.#ctor(System.IO.FileInfo,InnerLibs.FileTypeList)">
 <summary>
 Constroi um File Type a partir de um Arquivo (FileInfo)
 </summary>
 <param name="File">Fileinfo com o Arquivo</param>
</member>
<member name="M:InnerLibs.FileType.#ctor(System.String,InnerLibs.FileTypeList)">
 <summary>
 Constroi um File Type a partir da extensão ou MIME Type de um Arquivo
 </summary>
 <param name="MimeTypeOrExtensionOrPathOrDataURI">Extensão do arquivo</param>
</member>
<member name="M:InnerLibs.FileType.ToString">
 <summary>
 Retorna uma string com o primeiro MIME TYPE do arquivo
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.ToFilterString">
 <summary>
 Retorna uma string representando um filtro de caixa de dialogo WinForms
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.FileTypeList">
 <summary>
 Lista com Tipos de arquivo ultilizada para filtro e validação
 </summary>
</member>
<member name="M:InnerLibs.FileTypeList.#ctor">
 <summary>
 Cria uma nova lista vazia
 </summary>
</member>
<member name="M:InnerLibs.FileTypeList.#ctor(System.String[])">
 <summary>
 Cria uma nova lista a partir de mime types, caminhos ou extensoes
 </summary>
 <param name="FileTypes">Tipos de Arquivos</param>
</member>
<member name="M:InnerLibs.FileTypeList.#ctor(InnerLibs.FileType[])">
 <summary>
 Cria uma nova lista a partir de tipos de arquivos
 </summary>
 <param name="FileTypes">Tipos de Arquivos</param>
</member>
<member name="M:InnerLibs.FileTypeList.#ctor(System.Collections.Generic.List{InnerLibs.FileType})">
 <summary>
 Cria uma nova lista a partir de uma lista de tipos de arquivos
 </summary>
 <param name="FileTypeList">Tipos de Arquivos</param>
</member>
<member name="M:InnerLibs.FileTypeList.#ctor(System.Func{InnerLibs.FileType,System.Boolean})">
 <summary>
 Cria uma nova lista a partir de um critério de filtro
 </summary>
 <param name="predicate">Criterio de busca</param>
</member>
<member name="M:InnerLibs.FileTypeList.#ctor(InnerLibs.FileTypeList,System.Func{InnerLibs.FileType,System.Boolean})">
 <summary>
 Cria uma nova lista a partir de um critério de filtro
 </summary>
 <param name="predicate">Criterio de busca</param>
</member>
<member name="M:InnerLibs.FileTypeList.ToFilterString">
 <summary>
 Retorna uma string representando um filtro de caixa de dialogo WinForms
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileTypeList.SearchFiles(System.IO.DirectoryInfo,System.IO.SearchOption)">
 <summary>
 Busca arquivos que correspondam com as extensões desta lista
 </summary>
 <param name="Directory">   Diretório</param>
 <param name="SearchOption">Tipo de busca</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.FileTypeList.Extensions">
 <summary>
 Retorna todas as extensões da lista
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FileTypeList.MimeTypes">
 <summary>
 Retorna todas os MIME Types da lista
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.Money">
 <summary>
 Estrutura que representa valores em dinheiro de uma determinada <see cref="T:System.Globalization.CultureInfo"/>.
 </summary>
</member>
<member name="M:InnerLibs.Money.#ctor(System.Decimal)">
 <summary>
 Cria uma nova instancia de moeda
 </summary>
 <param name="Value">Valor</param>
</member>
<member name="M:InnerLibs.Money.#ctor(System.Decimal,System.Globalization.CultureInfo)">
 <summary>
 Cria uma nova instancia de moeda
 </summary>
 <param name="Value">Valor</param>
 <param name="Culture">Cultura</param>
</member>
<member name="M:InnerLibs.Money.#ctor(System.Decimal,System.String)">
 <summary>
 Cria uma nova instancia de moeda
 </summary>
 <param name="Value">Valor</param>
 <param name="Culture">Cultura</param>
</member>
<member name="M:InnerLibs.Money.ToString">
 <summary>
 String do valor formatado como moeda, é um alias para <see cref="P:InnerLibs.Money.MoneyString"/>
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Money.MoneyString">
 <summary>
 String do valor formatado como moeda
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Money.ToString(System.Int32)">
 <summary>
 String do valor formatado como moeda
 </summary>
 <param name="Precision">Precisao de casas decimais</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Money.GetCultureInfosByCurrencySymbol(System.String)">
 <summary>
 Traz uma lista de <see cref="T:System.Globalization.CultureInfo"/> que utilizam uma determinada moeda de acordo com o simbolo, simbolo ISO ou
 </summary>
 <param name="Currency">Moeda</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.Money.Region">
 <summary>
 Região correspondente a essa moeda
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Money.Culture">
 <summary>
 Cultura correspondente a esta moeda
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Money.op_Like(InnerLibs.Money,InnerLibs.Money)">
 <summary>
 Verifica se 2 valores sao da mesma moeda
 </summary>
 <param name="Value1"></param>
 <param name="Value2"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Money.Equals(System.Object)">
 <summary>
 Compara se 2 valores são iguais (mesmo valor e moeda)
 </summary>
 <param name="obj"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Online.OnlineList`2">
 <summary>
 <see cref="T:System.Collections.Generic.Dictionary`2"/> utilizado para controle de usuários que estão online/offline em uma aplicação
 </summary>
 <typeparam name="UserType">Tipo da Classe do usuário</typeparam>
 <typeparam name="IdType">Tipo do ID do usuário</typeparam>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.GetID(`0)">
 <summary>
 Retorna o ID do usuário
 </summary>
 <param name="User"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.OnlineList`2.OnCreateLog">
 <summary>
 Função que será executada quando ocorrer uma entrada no log
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.#ctor(System.Func{`0,`1})">
 <summary>
 Cria uma nova instancia de OnlineList apontando a propriedade do ID do usuario  e opcionalmente
 </summary>
 <param name="IdProperty">Expressão lambda que indica qual propriedade da classe <see cref="!:UserType"/> é o ID de tipo <see cref="!:IdType"/></param>
</member>
<member name="P:InnerLibs.Online.OnlineList`2.Chat">
 <summary>
 Lista de conversas dos usuários
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.OnlineList`2.Log">
 <summary>
 Entradas de ações dos usuários
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.OnlineList`2.BackupDirectory">
 <summary>
 Diretorio onde serão guardados os XMLs deta lista
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.OnlineList`2.LogFile">
 <summary>
 Caminho do arquivo XML do Log
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.OnlineList`2.ChatFile">
 <summary>
 Caminho do arquivo XML do Chat
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.OnlineList`2.ToleranceTime">
 <summary>
 Tolerancia que o servidor considera um usuário online ou na mesma atividade
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.GetUser(`0)">
 <summary>
 Retorna um OnlineUser a partir de uma instancia de <typeparamref name="UserType"/>
 </summary>
 <param name="User"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.OnlineList`2.Item(`0)">
 <summary>
 Retorna um usuario de acordo com seu ID
 </summary>
 <param name="User"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.Add(`0)">
 <summary>
 Adciona um usuario a esta lista
 </summary>
 <param name="User"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.Add(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 Adciona varios usuarios a esta lista
 </summary>
 <param name="Users"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.AddMany(`0[])">
 <summary>
 Adciona varios usuarios a esta lista
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.Add(`0,System.Nullable{System.Boolean},System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.DateTime})">
 <summary>
 Adciona um usuario a esta lista
 </summary>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.ContainsUser(`0)">
 <summary>
 Verifica se um usuario está nesta lista
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.OnlineUsers">
 <summary>
 Retorna todos os <see cref="T:InnerLibs.Online.OnlineUser`2"/> que estão Online no momento
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.OfflineUsers">
 <summary>
 Retorna todos os <see cref="T:InnerLibs.Online.OnlineUser`2"/> que estão Offline
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.Users">
 <summary>
 Retorna todos os <see cref="T:InnerLibs.Online.OnlineUser`2"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.GetUsersData(System.Nullable{System.Boolean})">
 <summary>
 Retorna todo os usuarios
 </summary>
 <param name="IsOnline">True para online, false para offline, null para todos</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.Remove(`0[])">
 <summary>
 Remove um usuário desta lista
 </summary>
 <param name="Obj"></param>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.Remove(`1)">
 <summary>
 Remove um usuário desta lista a partir do ID
 </summary>
 <param name="ID"></param>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.SetOffline(`0)">
 <summary>
 Seta um usuario como offline e cria uma entrada no log
 </summary>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.SetOnlineActivity(`0,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.DateTime})">
 <summary>
 Seta um usuario como online e atribui uma atividade a ele. Cria entrada no log automaticamente
 </summary>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.SetOnline(`0)">
 <summary>
 Seta um usuario como online e cria uma entrada no Log
 </summary>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.KeepOnline(`0)">
 <summary>
 Mantém um usuario online mas não atribui nenhuma nova atividade nem cria entradas no LOG
 </summary>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.UserById(`1)">
 <summary>
 Retorna um usuário desta lista a partir do ID
 </summary>
 <param name="Key"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.UserDataById(`1)">
 <summary>
 Retorna um usuário desta lista a partir do ID
 </summary>
 <param name="Key"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineList`2.CreateLog(`0,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.DateTime})">
 <summary>
 Cria uma entrada no log deste usuário
 </summary>
 <param name="Logdata"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.UserLog`2.CreateLog(`0,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.DateTime})">
 <summary>
 Cria uma entrada no log deste usuário com uma data especifica
 </summary>
 <param name="Logdata"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Online.UserLogEntry`2">
 <summary>
 Entrada de ação do usuário no sistema
 </summary>
 <typeparam name="UserType"></typeparam>
 <typeparam name="IdType"></typeparam>
</member>
<member name="P:InnerLibs.Online.UserLogEntry`2.Message">
 <summary>
 Texto sobre a ocorrencia
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.UserLogEntry`2.DateTime">
 <summary>
 Data e hora da ocorrência
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.UserLogEntry`2.URL">
 <summary>
 Ultima URL da ocorrencia
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.UserLogEntry`2.GetUser">
 <summary>
 Usuário
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.UserLogEntry`2.UserID">
 <summary>
 ID do Usuário
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.UserLogEntry`2.LogData">
 <summary>
 Informações adicionais
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.UserLogEntry`2.ID">
 <summary>
 ID desta entrada
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.Online.OnlineUser`2">
 <summary>
 Usuario Online/Offline
 </summary>
 <typeparam name="UserType"></typeparam>
 <typeparam name="IdType"></typeparam>
</member>
<member name="M:InnerLibs.Online.OnlineUser`2.SendMessage(`0,System.String)">
 <summary>
 Envia uma mensagem no chat para outro usuario
 </summary>
 <param name="ToUser"></param>
 <param name="Message"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.OnlineUser`2.ID">
 <summary>
 ID deste usuário
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.OnlineUser`2.IsOnline">
 <summary>
 Indica se o usuario está online ou não
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.OnlineUser`2.User">
 <summary>
 Informações relacionadas do usuário do tipo <typeparamref name="UserType"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineUser`2.LogEntries">
 <summary>
 Entradas no Log para este usuário
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.OnlineUser`2.LastActivity">
 <summary>
 Ultima atividade do usuário
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.OnlineUser`2.LastOnline">
 <summary>
 Ultima vez que o usuário esteve Online
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.OnlineUser`2.LastUrl">
 <summary>
 Ultima URL/caminho que o usuário acessou
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.OnlineUser`2.Conversations">
 <summary>
 Conversas deste usuário
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.OnlineUser`2.GetConversations(`0)">
 <summary>
 Retorna uma lista de conversas com um usuario específico ou todas
 </summary>
 <param name="WithUser"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Online.UserChat`2">
 <summary>
 Lista de conversas entre usuários
 </summary>
 <typeparam name="UserType"></typeparam>
 <typeparam name="IdType"></typeparam>
</member>
<member name="M:InnerLibs.Online.UserChat`2.GetConversation(`0,`0)">
 <summary>
 Retorna uma conversa entre 2 usuários
 </summary>
 <param name="User"></param>
 <param name="WithUser"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.UserChat`2.DeleteConversation(`0,`0)">
 <summary>
 Apaga uma conversa com um usuário
 </summary>
 <param name="User"></param>
 <param name="WithUser"></param>
</member>
<member name="M:InnerLibs.Online.UserChat`2.Send(`0,`0,System.String)">
 <summary>
 Envia uma nova mensagem
 </summary>
 <param name="FromUser"></param>
 <param name="ToUser"></param>
 <param name="Message"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Online.UserConversation`2">
 <summary>
 Mensagen do chat do usuário
 </summary>
 <typeparam name="UserType"></typeparam>
 <typeparam name="IdType"></typeparam>
</member>
<member name="P:InnerLibs.Online.UserConversation`2.ID">
 <summary>
 Id desta mensagem
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.UserConversation`2.Viewed">
 <summary>
 Inndica se esta conversa foi visualizada
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.UserConversation`2.FromUser">
 <summary>
 Usuario Emissor
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.UserConversation`2.FromUserID">
 <summary>
 Id do usuário emissor
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.UserConversation`2.ToUserID">
 <summary>
 ID do usuário destinatario
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.UserConversation`2.Message">
 <summary>
 Mensagem
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.UserConversation`2.SentDate">
 <summary>
 Data de envio da mensagem
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.UserConversation`2.ToUser">
 <summary>
 Usuario destinatário
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Online.UserConversation`2.ViewedDate">
 <summary>
 Data de visualização da mensagem
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.UserConversation`2.GetMyUser(`0)">
 <summary>
 Retorna a instancia de <see cref="T:InnerLibs.Online.OnlineUser`2"/> (Emissor ou destinatário) de um <see cref="!:UserType"/> especifico
 </summary>
 <param name="Myself">Seu usuário</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.UserConversation`2.GetOtherUser(`0)">
 <summary>
 Retorna a instancia de <see cref="T:InnerLibs.Online.OnlineUser`2"/> (Emissor ou destinatário) de um <see cref="!:UserType"/> especifico
 </summary>
 <param name="Myself">Seu usuário</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.UserConversation`2.IsFrom(`0)">
 <summary>
 Retorna true se a mensagem for de <paramref name="User"/>
 </summary>
 <param name="User"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Online.UserConversation`2.IsTo(`0)">
 <summary>
 Retorna true se a mensagem for para <paramref name="User"/>
 </summary>
 <param name="User"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.Printer.Printer.TextWriter">
 <summary>
 TextWriter interno desta Printer
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Text.Encoding)">
 <summary>
 Initializes a new instance of the <see cref="T:InnerLibs.Printer.Printer"/> class.
 </summary>
 <param name="PrinterName">Printer name, shared name or port of printer install</param>
 <param name="ColsNormal">Number of columns for normal mode print</param>
 <param name="ColsCondensed">Number of columns for condensed mode print</param>
 <param name="ColsExpanded">Number of columns for expanded mode print</param>
 <param name="Encoding">Custom Encoding</param>
</member>
<member name="M:InnerLibs.Printer.Printer.#ctor(InnerLibs.Printer.Command.IPrintCommand,System.String,System.Int32,System.Int32,System.Int32,System.Text.Encoding)">
 <summary>
 Initializes a new instance of the <see cref="T:InnerLibs.Printer.Printer"/> class.
 </summary>
 <param name="PrinterName">Printer name, shared name or port of printer install</param>
 <param name="ColsNormal">Number of columns for normal mode print</param>
 <param name="ColsCondensed">Number of columns for condensed mode print</param>
 <param name="ColsExpanded">Number of columns for expanded mode print</param>
 <param name="Encoding">Custom Encoding</param>
</member>
<member name="M:InnerLibs.Printer.Printer.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:InnerLibs.Printer.Printer"/> class.
 </summary>
 <param name="PrinterName">Printer name, shared name or port of printer install</param>
 <param name="ColsNormal">Number of columns for normal mode print</param>
 <param name="ColsCondensed">Number of columns for condensed mode print</param>
 <param name="ColsExpanded">Number of columns for expanded mode print</param>
</member>
<member name="M:InnerLibs.Printer.Printer.#ctor(System.String,System.Text.Encoding)">
 <summary>
Initializes a new instance of the <see cref="T:InnerLibs.Printer.Printer"/> class.
 </summary>
 <param name="PrinterName">Printer name, shared name or port of printer install</param>
 <param name="Encoding">Custom Encoding</param>
</member>
<member name="M:InnerLibs.Printer.Printer.#ctor(System.String)">
 <summary>
Initializes a new instance of the <see cref="T:InnerLibs.Printer.Printer"/> class.
 </summary>
 <param name="PrinterName">Printer name, shared name or port of printer install</param>
</member>
<member name="M:InnerLibs.Printer.Printer.UseRewriteFunction(System.Func{System.String,System.String})">
 <summary>
 Funcao que reescreve o valor antes de chamar o <see cref="M:InnerLibs.Printer.Printer.Write(System.String,System.Boolean)"/>
 </summary>
 <param name="StringAction"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.UseRewriteFunction(System.Action{System.String})">
 <summary>
 Funcao que reescreve o valor antes de chamar o <see cref="M:InnerLibs.Printer.Printer.Write(System.String,System.Boolean)"/>
 </summary>
 <param name="StringAction"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.RemoveRewriteFunction">
 <summary>
 Remove a função de reescrita de valor definida pela <see cref="M:InnerLibs.Printer.Printer.UseRewriteFunction(System.Func{System.String,System.String})"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.UseDiacritics(System.Boolean)">
 <summary>
 Permite a ultilização de acentos nas chamadas <see cref="M:InnerLibs.Printer.Printer.Write(System.String,System.Boolean)"/> posteriores
 </summary>
 <param name="OnOff"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.DontUseDiacritics">
 <summary>
 Remove todos os acentos das chamadas <see cref="M:InnerLibs.Printer.Printer.Write(System.String,System.Boolean)"/> posteriores
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.NewLine(System.Int32)">
 <summary>
 Adciona um numero <paramref name="Lines"/> de quebras de linha ao <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/>
 </summary>
 <param name="Lines"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.Space(System.Int32)">
 <summary>
 Adciona um numero <paramref name="Spaces"/> de espaços em branco ao <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/>
 </summary>
 <param name="Spaces"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.Clear">
 <summary>
 Limpa o <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.Separator(System.Char,System.Nullable{System.Int32})">
 <summary>
 Escreve um separador
 </summary>
 <param name="Character"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.AutoTest">
 <summary>
 Imprime o auto-teste da impressora
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.TestDiacritics">
 <summary>
 Testa os acentos para esta impressora
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.ResetFont">
 <summary>
 Alinha a esquerda, remove formatação (italico, negrito, sublinhado) e retorna a fonte ao seu tamanho normal
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.GetCurrentColumns">
 <summary>
 Retorna o numero de colunas  do modo atual
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.Write(System.Byte[])">
 <summary>
 Escreve os bytes contidos em <paramref name="value"/> no <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/>
 </summary>
 <param name="value"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.Write(System.String,System.Boolean)">
 <summary>
 Escreve o <paramref name="value"/> no <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/> se <paramref name="Test"/> for TRUE
 </summary>
 <param name="value"></param>
 <param name="Test"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteLine(System.String,System.Boolean)">
 <summary>
 Escreve o <paramref name="value"/> se <paramref name="Test"/> for TRUE e quebra uma linha
 </summary>
 <param name="value"></param>
 <param name="Test"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteLine(System.String)">
 <summary>
 Escreve o <paramref name="value"/>   e quebra uma linha
 </summary>
 <param name="value"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteLine(System.String[])">
 <summary>
 Escreve varias linhas no <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/>
 </summary>
 <param name="values"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteTest">
 <summary>
 Escreve um teste de 48 colunas no <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``0,``1}},System.Boolean)">
 <summary>
 Escreve os valores de um Dictionary como pares
 </summary>
 <typeparam name="T1"></typeparam>
 <typeparam name="T2"></typeparam>
 <param name="dics"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.Boolean)">
 <summary>
 Escreve os valores de um Dictionary como pares
 </summary>
 <typeparam name="T1"></typeparam>
 <typeparam name="T2"></typeparam>
 <param name="dic"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteDictionary``2(System.Collections.Generic.IDictionary{``0,``1}[])">
 <summary>
 Escreve os valores de um Dictionary como pares
 </summary>
 <typeparam name="T1"></typeparam>
 <typeparam name="T2"></typeparam>
 <param name="dics"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteDictionary``2(System.Boolean,System.Collections.Generic.IDictionary{``0,``1}[])">
 <summary>
 Escreve os valores de um Dictionary como pares
 </summary>
 <typeparam name="T1"></typeparam>
 <typeparam name="T2"></typeparam>
 <param name="dics"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteList(System.Collections.Generic.IEnumerable{System.Object},System.Int32)">
 <summary>
 Escreve uma lista de itens no <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/>
 </summary>
 <param name="Items"></param>
 <param name="ListOrdenator"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteList(System.Object[])">
 <summary>
 Escreve uma lista de itens no <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/>
 </summary>
</member>
<member name="M:InnerLibs.Printer.Printer.WritePair(System.Object,System.Object,System.Nullable{System.Int32},System.Char)">
 <summary>
 Escreve um par de infomações no <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/>.
 </summary>
</member>
<member name="M:InnerLibs.Printer.Printer.WritePriceLine(System.String,System.Decimal,System.Globalization.CultureInfo,System.Nullable{System.Int32},System.Char)">
 <summary>
 Escreve uma linha de preço no <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/>
 </summary>
 <param name="Description"></param>
 <param name="Price"></param>
 <param name="Culture"></param>
 <param name="Columns"></param>
 <param name="CharLine"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WritePriceList(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Decimal}},System.Globalization.CultureInfo,System.Nullable{System.Int32},System.Char)">
 <summary>
 Escreve uma lista de preços no <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/>
 </summary>
 <param name="Culture"></param>
 <param name="Columns"></param>
 <param name="CharLine"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WritePriceList``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Globalization.CultureInfo,System.Nullable{System.Int32},System.Char)">
 <summary>
 Escreve uma lista de preços no <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/>
 </summary>
 <param name="Culture"></param>
 <param name="Columns"></param>
 <param name="CharLine"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteTable``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Escreve uma tabela no <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteTable``1(``0[])">
 <summary>
 Escreve uma tabela no <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteClass``1(``0[])">
 <summary>
 Escreve as Propriedades e valores de uma classe como pares
 </summary>
 <typeparam name="T"></typeparam>
 <param name="objs"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteClass``1(System.Boolean,``0[])">
 <summary>
 Escreve as Propriedades e valores de uma classe como pares
 </summary>
 <typeparam name="T"></typeparam>
 <param name="objs"></param>
 <param name="PartialCutOnEach"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteClass``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
 <summary>
 Escreve as Propriedades e valores de uma classe como pares
 </summary>
 <typeparam name="T"></typeparam>
 <param name="obj"></param>
 <param name="PartialCutOnEach"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteTemplate``1(System.String,System.Boolean,``0[])">
 <summary>
 Escreve um template para uma lista substituindo as marcações {Propriedade} encontradas pelo valor da propriedade equivalente em <typeparamref name="T"/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="TemplateString"></param>
 <param name="obj"></param>
 <param name="PartialCutOnEach"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteTemplate``1(System.String,``0[])">
 <summary>
 Escreve um template para uma lista substituindo as marcações {Propriedade} encontradas pelo valor da propriedade equivalente em <typeparamref name="T"/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="TemplateString"></param>
 <param name="obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteTemplate``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Boolean)">
 <summary>
 Escreve um template para uma lista substituindo as marcações {Propriedade} encontradas pelo valor da propriedade equivalente em <typeparamref name="T"/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="TemplateString"></param>
 <param name="obj"></param>
 <param name="PartialCutOnEach"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteTemplate``1(System.String,``0,System.Boolean)">
 <summary>
 Escreve um template substituindo as marcações {Propriedade} encontradas pelo valor da propriedade equivalente em <typeparamref name="T"/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="TemplateString"></param>
 <param name="obj"></param>
 <param name="PartialCutOnEach"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteDate(System.DateTime,System.String)">
 <summary>
 Escreve uma data usando formato especifico
 </summary>
 <param name="Format"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteDate(System.DateTime,System.Globalization.CultureInfo)">
 <summary>
 Escreve uma data usando uma Cultura especifica
 </summary>
 <param name="Format"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteDate(System.String)">
 <summary>
 Escreve a data atual usando formato especifico
 </summary>
 <param name="Format"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.WriteDate(System.Globalization.CultureInfo)">
 <summary>
 Escreve a data atual usando uma cultura especifica
 </summary>
 <param name="Format"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.PrintDocument(System.Int32,System.Boolean)">
 <summary>
 Imprime o conteudo do <see cref="P:InnerLibs.Printer.Printer.DocumentBuffer"/> atual e limpa o buffer
 </summary>
 <param name="Copies"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.PrintDocument(System.String,System.Int32)">
 <summary>
 Imprime o conteudo de um arquivo ou o conteudo de todos os arquivos de um diretorio
 </summary>
 <param name="FileOrDirectoryPath"></param>
 <param name="Copies"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.PrintDocument(System.Byte[],System.Int32)">
 <summary>
 Envia os Bytes para a impressora ou arquivo
 </summary>
 <param name="Copies"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.Printer.SaveFile(System.String,System.Boolean)">
 <summary>
 Escreve um Arquivo com os dados binarios e HTML desta impressao
 </summary>
 <param name="FileOrDirectoryPath"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.XmlTemplates.XmlTemplatePrinter.WriteXmlTemplate``1(``0,System.Xml.XmlDocument)">
 <summary>
 Escreve um template de um <see cref="T:System.Xml.Linq.XDocument"/> para cada entrada em uma lista substituindo as marcações {Propriedade} encontradas pelo valor da propriedade equivalente
 </summary>
 <typeparam name="T"></typeparam>
 <param name="obj"></param>
 <param name="Xml"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.XmlTemplates.XmlTemplatePrinter.WriteXmlTemplate``1(System.Collections.Generic.IEnumerable{``0},System.Xml.XmlDocument)">
 <summary>
 Escreve um template de um <see cref="T:System.Xml.Linq.XDocument"/> para cada entrada em uma lista substituindo as marcações {Propriedade} encontradas pelo valor da propriedade equivalente
 </summary>
 <typeparam name="T"></typeparam>
 <param name="obj"></param>
 <param name="Xml"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.XmlTemplates.XmlTemplatePrinter.WriteXmlTemplate``1(``0,System.Xml.XmlNode)">
 <summary>
 Escreve um template de um <see cref="T:System.Xml.Linq.XDocument"/> para cada entrada em uma lista substituindo as marcações {Propriedade} encontradas pelo valor da propriedade equivalente
 </summary>
 <typeparam name="T"></typeparam>
 <param name="obj"></param>
 <param name="Xml"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.XmlTemplates.XmlTemplatePrinter.WriteXmlTemplate``1(``0,System.Xml.Linq.XDocument)">
 <summary>
 Escreve um template de um <see cref="T:System.Xml.Linq.XDocument"/> para cada entrada em uma lista substituindo as marcações {Propriedade} encontradas pelo valor da propriedade equivalente
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Item"></param>
 <param name="Xml"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Printer.XmlTemplates.XmlTemplatePrinter.WriteXmlTemplate``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XElement)">
 <summary>
 Escreve um template de um <see cref="T:System.Xml.XmlNode"/> para cada entrada em uma lista substituindo as marcações {Propriedade} encontradas pelo valor da propriedade equivalente
 </summary>
</member>
<member name="M:InnerLibs.Printer.XmlTemplates.XmlTemplatePrinter.WriteXmlTemplate``1(``0,System.Xml.Linq.XElement)">
 <summary>
 Escreve um template de um <see cref="T:System.Xml.XmlNode"/> para o objeto designado substituindo as marcações {Propriedade} encontradas pelo valor da propriedade equivalente
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Item"></param>
 <param name="Xml"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.QuestionTest">
 <summary>
 Classe que representa uma Avaliação de Perguntas e respostas, podendo elas serem Dissertativas, Multipla Escolha ou de Atribuição de Pontos
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.PersonalInfo">
 <summary>
 Informações adicionais, normalmente nome do usuario e outras informações unicas
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.ID">
 <summary>
 Informações adicionais, normalmente nome do usuario e outras informações unicas
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.IsValid">
 <summary>
 Verifica se o peso da prova equivale a soma dos pesos das questões
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Questions">
 <summary>
 Retorna as questões desta avaliação
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Title">
 <summary>
 Titulo da Avaliação
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.QuestionTest.QuestionTest.CreateQuestion``1">
 <summary>
 Adiciona uma nova questão a avaliação.
 </summary>
</member>
<member name="M:InnerLibs.QuestionTest.QuestionTest.GetQuestion``1(System.String)">
 <summary>
 Pega uma questão por ID
 </summary>
 <typeparam name="T">Tipo da Questão</typeparam>
 <param name="ID"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.QuestionTest.QuestionTest.GetAlternative(System.String)">
 <summary>
 Pega uma Alternativa de uma Questão pelo ID
 </summary>
 <param name="ID"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.MinimumWeightAllowed">
 <summary>
 Valor Minimo da nota para aprovação (Normalmente 6)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Weight">
 <summary>
 Peso da Avaliação (Normalmente 10)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Header">
 <summary>
 Cabeçalho da prova. Texto adicional que ficará antes das questões e apoós o título
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Footer">
 <summary>
 Rodapé da prova. Texto adicional que ficará após as questões
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.IsApproved">
 <summary>
 Retorna TRUE se a nota final (média da avaliação + os bonus) é maior ou igual ao minimo permitido, caso contrário, FALSE
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Hits">
 <summary>
 Numero de questões que o usuário acertou
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Fails">
 <summary>
 Numero de questões que o usuário errou
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Average">
 <summary>
 Média da Avaliação
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Bonus">
 <summary>
 Pontos de bonificação que serão somados a média final da avaliação
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.FinalNote">
 <summary>
 Nota final da avaliação (Bonus + Média)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.HitPercent">
 <summary>
 Porcentagem de Acertos do Usuário
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.FailPercent">
 <summary>
 Porcentagem de Erros do Usuário
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.QuestionTest.QuestionTest.#ctor(System.String)">
 <summary>
 Instancia uma nova avaliação com titulo
 </summary>
 <param name="Title">Titulo da avaliação</param>
</member>
<member name="M:InnerLibs.QuestionTest.QuestionTest.SetMinimumAllowedAsHalf(System.Decimal)">
 <summary>
 Configura o valor minimo permitido para aprovação como metade do peso da avaliação
 </summary>
 <param name="Weight">Parametro opcional que altera o valor do peso da avaliação</param>
</member>
<member name="M:InnerLibs.QuestionTest.QuestionTest.SetMinimumAllowedAsPercent(System.String,System.Decimal)">
 <summary>
 Configura o valor minimo permitido para aprovação como n% do peso da avaliação
 </summary>
 <param name="Percent">Porcentagem da prova</param>
 <param name="Weight">Parametro opcional que altera o valor do peso da avaliação</param>
</member>
<member name="T:InnerLibs.QuestionTest.Question">
 <summary>
 Classe Base para as questões de uma avaliação
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.Question.QuestionType">
 <summary>
 Tipo da QUestão
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Question.Test">
 <summary>
 Teste a qual esta questão pertence
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Question.ID">
 <summary>
 O codigo de identificação desta questão
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Question.Statement">
 <summary>
 Enunciado da questão (texto da pergunta)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Question.Weight">
 <summary>
 Peso da Pergunta
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Question.Hits">
 <summary>
 Retorna um numero que representa o quanto o usuario acertou essa pergunta
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Question.IsCorrect">
 <summary>
 Verifica se a pergunta está corretamente assinalada
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.QuestionTest.Question.ToString">
 <summary>
 Return the statment text for this question
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Question.Number">
 <summary>
 Numero da questão
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Question.Reviewed">
 <summary>
 Indica se esta questão foi revisada pelo professor
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.StatementImages">
 <summary>
 Imagens adicionada a um enuncidado
 </summary>
</member>
<member name="T:InnerLibs.QuestionTest.QuestionStatement">
 <summary>
 Enunciado de uma pergunta
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionStatement.Text">
 <summary>
 Texto do enunciado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionStatement.Images">
 <summary>
 Imagens adicionadas ao enunciado (com legenda)
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.StatementImage">
 <summary>
 Imagem com legenda de um enunciado
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.StatementImage.Image">
 <summary>
 Imagem do enunciado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.StatementImage.Subtitle">
 <summary>
 Legenda da Imagem
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.NumericQuestion">
 <summary>
 Questões em que a resposta é numerica e implica diretamente no peso da questão (normalmente utilizada em pesquisas)
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.NumericQuestion.Answer">
 <summary>
 Pontos que o usuario atribuiu a esta questão
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.NumericQuestion.MinValue">
 <summary>
 Menor valor permitido pela questão
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.NumericQuestion.MaxValue">
 <summary>
 Maior valor permitido pela questão
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.NumericQuestion.Hits">
 <summary>
 Pontos multiplicados pelo peso da questão
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.NumericQuestion.IsCorrect">
 <summary>
 Perguntas numericas sempre estão corretas. Neste caso, o que vale é a resposta multiplicada pelo peso que implica diretamente no peso da avaliação
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.DissertativeQuestion">
 <summary>
 Questão Dissertativa. Deve ser corrigida manualmente
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.DissertativeQuestion.Answer">
 <summary>
 Resposta dissertativa da pergunta
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.DissertativeQuestion.Correct">
 <summary>
 Valor que indica se a questão está de alguma forma correta
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.DissertativeQuestion.Lines">
 <summary>
 Numero de linhas que devem ser impressas para esta questão
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.DissertativeQuestion.IsCorrect">
 <summary>
 Verifica se a pergunta está preenchida
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.DissertativeQuestion.Hits">
 <summary>
 Representa quantos pontos essa questão vale de acordo com a assertividade
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.DissertativeQuestion.Assertiveness">
 <summary>
 Assertividade da questão, uma valor entre 0 e o peso da questão que representa o quanto esta questão está correta
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.AlternativeQuestion">
 <summary>
 Classe base para questões de 'alternativa' ou de 'verdadeiro ou falso'
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.AlternativeQuestion.Alternatives">
 <summary>
 Lista de alternativas da questão
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.AlternativeQuestion.RenderAsSelect">
 <summary>
 Indica se esta alternativa deve ser renderizada no HTML como um <see cref="!:HtmlSelectElement"/>. Caso Contrario, serão renderizadas como listas de Check Box ou Radio Button
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.AlternativeQuestion.AllowMultiple">
 <summary>
 Verifica se esta pergunta permite multiplas alternativas
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.AlternativeQuestion.Answer">
 <summary>
 Retorna as alternativas marcadas pelo usuário
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.SingleAlternativeQuestion">
 <summary>
 Pergunta de alternativa. o Usuário deverá assinalar a UNICA alternativa correta entre varias alternativas
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.SingleAlternativeQuestion.Hits">
 <summary>
 Retorna um numero que representa o quanto o usuario acertou essa pergunta
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.SingleAlternativeQuestion.IsCorrect">
 <summary>
 Verifica se a pergunta está corretamente assinalada. Anula a questão automaticamente se estiver mal formada (com mais de uma alternativa correta ou nenhuma alternativa correta)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.SingleAlternativeQuestion.IsValidQuestion">
 <summary>
 Verifica se as existe apenas uma unica alternativa correta na questão
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.MultipleAlternativeQuestion">
 <summary>
 Pergunta de Verdadeiro ou Falso. O Usuário deverá assinalar as questões verdadeiras ou falsas correspondente ao enunciado da pergunta.
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.MultipleAlternativeQuestion.Hits">
 <summary>
 Retorna um numero que representa o quanto o usuario acertou essa pergunta
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.MultipleAlternativeQuestion.IsCorrect">
 <summary>
 Verifica se a pergunta está corretamente assinalada
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.AlternativeList">
 <summary>
 Lista de Alternativas de uma questão de alternativas
 </summary>
</member>
<member name="M:InnerLibs.QuestionTest.AlternativeList.Add(System.String,System.Boolean)">
 <summary>
 Adiciona uma alternativa a questão. A alternativa é ignorada se já existir na lista
 </summary>
 <param name="Text">Texto da alternativa</param>
 <param name="Correct">Parametro que indica se esta alternativa é correta ou verdadeira</param>
</member>
<member name="T:InnerLibs.QuestionTest.Alternative">
 <summary>
 Objeto que representa uma alternativa de uma pergunta de alternativas
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.Alternative.ID">
 <summary>
 ID da alternativa
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Alternative.Number">
 <summary>
 O numero da alternativa
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Alternative.Text">
 <summary>
 Texto da alternativa
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Alternative.Correct">
 <summary>
 Valor que indica se a alternativa está correta ou verdadeira
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Alternative.Checked">
 <summary>
 Valor que indica se esta alternativa foi assinalada
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Alternative.IsCorrect">
 <summary>
 Verifica se a resposta do usuário é correta para esta alternativa
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.Romanize">
 <summary>
 Modulo para manipulação de numeros romanos
 </summary>
 <remarks></remarks>
</member>
<member name="T:InnerLibs.Romanize.RomanDigit">
 <summary>
 Lista de algarismos romanos
 </summary>
</member>
<member name="F:InnerLibs.Romanize.RomanDigit.I">
 <summary>
 Valor correspondente
 </summary>
</member>
<member name="F:InnerLibs.Romanize.RomanDigit.V">
 <summary>
 Valor correspondente
 </summary>
</member>
<member name="F:InnerLibs.Romanize.RomanDigit.X">
 <summary>
 Valor correspondente
 </summary>
</member>
<member name="F:InnerLibs.Romanize.RomanDigit.L">
 <summary>
 Valor correspondente
 </summary>
</member>
<member name="F:InnerLibs.Romanize.RomanDigit.C">
 <summary>
 Valor correspondente
 </summary>
</member>
<member name="F:InnerLibs.Romanize.RomanDigit.D">
 <summary>
 Valor correspondente
 </summary>
</member>
<member name="F:InnerLibs.Romanize.RomanDigit.M">
 <summary>
 Valor correspondente
 </summary>
</member>
<member name="M:InnerLibs.Romanize.ToArabic(System.String)">
 <summary>
 Converte uma String contendo um numero romano para seu valor arabico
 </summary>
 <param name="RomanNumber">Stringo contendo o numero romano</param>
 <returns>Valor em arabico</returns>
</member>
<member name="M:InnerLibs.Romanize.ToRoman(System.Int32)">
 <summary>
 Converte um valor numérico arabico para numero romano
 </summary>
 <param name="ArabicNumber">Valor numerico arabico</param>
 <returns>uma string com o numero romano</returns>
</member>
<member name="M:InnerLibs.SoundEx.SoundEx(System.String)">
 <summary>
 Gera um código SOUNDEX para comparação de fonemas
 </summary>
 <param name="Text">Texto</param>
 <returns>Um código soundex</returns>
</member>
<member name="M:InnerLibs.SoundEx.SoundsLike(System.String,System.String)">
 <summary>
 Compara 2 palavras e verifica se elas possuem fonema parecido
 </summary>
 <param name="FirstText">Primeira palavra</param>
 <param name="SecondText">Segunda palavra</param>
 <returns>TRUE se possuirem o mesmo fonema</returns>
</member>
<member name="M:InnerLibs.SoundEx.SoundEx(System.String,System.Int32)">
 <summary>
 Gera um código SOUNDEX para comparação de fonemas
 </summary>
 <param name="Text">Texto</param>
 <returns>Um código soundex</returns>
</member>
<member name="T:InnerLibs.Phonetic">
 <summary>
 Implementação da função SoundEX em Portugues
 </summary>
</member>
<member name="P:InnerLibs.Phonetic.SoundsLike(System.String)">
 <summary>
 Compara o fonema de uma palavra em portugues com outra palavra
 </summary>
 <param name="Word">Palavra para comparar</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Phonetic.op_Like(InnerLibs.Phonetic,System.String)">
 <summary>
 Compara o fonema de uma palavra com outra
 </summary>
 <param name="Word1">primeira palavra</param>
 <param name="Word2">segunda palavra</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Phonetic.op_Like(System.String,InnerLibs.Phonetic)">
 <summary>
 Compara o fonema de uma palavra com outra
 </summary>
 <param name="Word1">primeira palavra</param>
 <param name="Word2">segunda palavra</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Phonetic.IsListenedIn(System.String)">
 <summary>
 Verifica se o fonema atual está presente em alguma frase
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.Phonetic.Word">
 <summary>
 Palavra Original
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Phonetic.#ctor(System.String)">
 <summary>
 Cria um novo Phonetic a partir de uma palavra
 </summary>
 <param name="Word">Palavra</param>
</member>
<member name="P:InnerLibs.Phonetic.SoundExCode">
 <summary>
 Código SoundExBR que representa o fonema da palavra
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.Text">
 <summary>
 Modulo de manipulação de Texto
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Text.BoxTextCSS(System.String)">
 <summary>
 Encapsula um texto em uma caixa incorporado em comentários CSS
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.BoxText(System.String)">
 <summary>
 Encapsula um texto em uma caixa
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ParseConnectionString(System.String)">
 <summary>
 Parseia uma ConnectionString em um Dicionário
 </summary>
 <param name="ConnectionString"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ParseQueryString(System.String)">
 <summary>

 </summary>
 <param name="querystring"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.IsLikeAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Verifica se um texto existe em uma determinada lista usando comparação com caratere curinga
 </summary>
 <param name="Text"></param>
 <param name="Patterns"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.IsLikeAny(System.String,System.String[])">
 <summary>
 Verifica se um texto existe em uma determinada lista usando comparação com caratere curinga
 </summary>
 <param name="Text"></param>
 <param name="Patterns"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Like(System.String,System.String)">
 <summary>
 operador LIKE do VB para C# em forma de extension method
 </summary>
 <param name="Text"></param>
 <param name="OtherText"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.FormatCPFOrCNPJ(System.Int64)">
 <summary>
 Formata um numero para CNPJ ou CNPJ se forem validos
 </summary>
 <param name="Document"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.FormatCNPJ(System.Int64)">
 <summary>
 Formata um numero para CNPJ
 </summary>
 <param name="CNPJ"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.FormatCNPJ(System.String)">
 <summary>
 Formata um numero para CNPJ
 </summary>
 <param name="CNPJ"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.FormatCPF(System.Int64)">
 <summary>
 Formata um numero para CPF
 </summary>
 <param name="CPF"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.FormatCPF(System.String)">
 <summary>
 Formata um numero para CPF
 </summary>
 <param name="CPF"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.PrintIf(System.String,System.Boolean)">
 <summary>
 Retorna a string especificada se o valor booleano for verdadeiro
 </summary>
 <param name="Text"></param>
 <param name="BooleanValue"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.SplitAny(System.String,System.String[])">
 <summary>
 Separa uma string em varias partes a partir de varias strings removendo as entradas em branco
 </summary>
 <param name="Text"></param>
 <param name="SplitText"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.SplitAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Separa uma string em varias partes a partir de varias strings removendo as entradas em branco
 </summary>
 <param name="Text"></param>
 <param name="SplitText"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ReplaceLast(System.String,System.String,System.String)">
 <summary>
 Substitui a ultima ocorrencia de um texto por outro
 </summary>
 <param name="Text"></param>
 <param name="OldText"></param>
 <param name="NewText"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ReplaceFirst(System.String,System.String,System.String)">
 <summary>
 Substitui a primeira ocorrencia de um texto por outro
 </summary>
 <param name="Text"></param>
 <param name="OldText"></param>
 <param name="NewText"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Alphabetize(System.String)">
 <summary>
 Retorna uma string em ordem afabética baseada em uma outra string
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.AppendLine(System.String,System.String)">
 <summary>
 Adiciona texto ao final de uma string com uma quebra de linha no final do <paramref name="AppendText"/>
 </summary>
 <param name="Text">      Texto</param>
 <param name="AppendText">Texto adicional</param>
</member>
<member name="M:InnerLibs.Text.PrependLine(System.String,System.String)">
 <summary>
 Adiciona texto ao inicio de uma string com uma quebra de linha no final do <paramref name="AppendText"/>
 </summary>
 <param name="Text">      Texto</param>
 <param name="AppendText">Texto adicional</param>
</member>
<member name="M:InnerLibs.Text.AppendIf(System.String,System.String,System.Boolean)">
 <summary>
 Adiciona texto ao final de uma string se um criterio for cumprido
 </summary>
 <param name="Text">      Texto</param>
 <param name="AppendText">Texto adicional</param>
 <param name="Test">      Teste</param>
</member>
<member name="M:InnerLibs.Text.AppendIf(System.String,System.String,System.Func{System.String,System.Boolean})">
 <summary>
 Adiciona texto ao final de uma string se um criterio for cumprido
 </summary>
 <param name="Text">      Texto</param>
 <param name="AppendText">Texto adicional</param>
 <param name="Test">      Teste</param>
</member>
<member name="M:InnerLibs.Text.PrependIf(System.String,System.String,System.Func{System.String,System.Boolean})">
 <summary>
 Adiciona texto ao final de uma string se um criterio for cumprido
 </summary>
 <param name="Text">      Texto</param>
 <param name="PrependText">Texto adicional</param>
 <param name="Test">      Teste</param>
</member>
<member name="M:InnerLibs.Text.PrependWhile(System.String,System.String,System.Func{System.String,System.Boolean})">
 <summary>
 Adiciona texto ao inicio de uma string enquanto um criterio for cumprido
 </summary>
 <param name="Text">      Texto</param>
 <param name="PrependText">Texto adicional</param>
 <param name="Test">      Teste</param>
</member>
<member name="M:InnerLibs.Text.AppendWhile(System.String,System.String,System.Func{System.String,System.Boolean})">
 <summary>
 Adiciona texto ao final de uma string enquanto um criterio for cumprido
 </summary>
 <param name="Text">      Texto</param>
 <param name="AppendText">Texto adicional</param>
 <param name="Test">      Teste</param>
</member>
<member name="M:InnerLibs.Text.ApplySpaceOnWrapChars(System.String)">
 <summary>
 Aplica espacos em todos os caracteres de encapsulamento
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.CamelSplit(System.String)">
 <summary>
 Transforma um texto em CamelCase em um array de palavras  a partir de suas letras maíusculas
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.CamelAdjust(System.String)">
 <summary>
 Separa as palavras de um texto CamelCase a partir de suas letras maíusculas
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToNormalCase(System.String)">
 <summary>
 Pega um texto em "CamelCase" ou "Snake_Case" e o retorna na forma "normal case"
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Censor(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean@)">
 <summary>
 Censura as palavras de um texto substituindo as palavras indesejadas por * (ou outro
 caractere desejado) e retorna um valor indicando se o texto precisou ser censurado
 </summary>
 <param name="Text">               Texto</param>
 <param name="BadWords">           Lista de palavras indesejadas</param>
 <param name="CensorshipCharacter">Caractere que será aplicado nas palavras censuradas</param>
 <returns>TRUE se a frase precisou ser censurada, FALSE se a frase não precisou de censura</returns>
</member>
<member name="M:InnerLibs.Text.Censor(System.String,System.String,System.String[])">
 <summary>
 Retorna um novo texto censurando as palavras de um texto substituindo as palavras indesejadas
 por um caractere desejado)
 </summary>
 <param name="Text">               Texto</param>
 <param name="BadWords">           Array de palavras indesejadas</param>
 <param name="CensorshipCharacter">Caractere que será aplicado nas palavras censuradas</param>
</member>
<member name="M:InnerLibs.Text.ContainsMost(System.String,System.StringComparison,System.String[])">
 <summary>
 Verifica se uma string contém a maioria dos valores especificados
 </summary>
 <param name="Text">  Texto correspondente</param>
 <param name="Values">Lista de valores</param>
 <returns>True se conter a maioria dos valores, false se não</returns>
</member>
<member name="M:InnerLibs.Text.ContainsMost(System.String,System.String[])">
 <summary>
 Verifica se uma string contém a maioria dos valores especificados
 </summary>
 <param name="Text">  Texto correspondente</param>
 <param name="Values">Lista de valores</param>
 <returns>True se conter todos os valores, false se não</returns>
</member>
<member name="M:InnerLibs.Text.ContainsAll(System.String,System.String[])">
 <summary>
 Verifica se uma String contém todos os valores especificados
 </summary>
 <param name="Text">  Texto correspondente</param>
 <param name="Values">Lista de valores</param>
 <returns>True se conter todos os valores, false se não</returns>
</member>
<member name="M:InnerLibs.Text.ContainsAll(System.String,System.StringComparison,System.String[])">
 <summary>
 Verifica se uma String contém todos os valores especificados
 </summary>
 <param name="Text">          Texto correspondente</param>
 <param name="Values">        Lista de valores</param>
 <param name="ComparisonType">Tipo de comparacao</param>
 <returns>True se conter algum valor, false se não</returns>
</member>
<member name="M:InnerLibs.Text.ContainsAny(System.String,System.String[])">
 <summary>
 Verifica se uma String contém qualquer um dos valores especificados
 </summary>
 <param name="Text">  Texto correspondente</param>
 <param name="Values">Lista de valores</param>
 <returns>True se conter algum valor, false se não</returns>
</member>
<member name="M:InnerLibs.Text.ContainsAny(System.String,System.StringComparison,System.String[])">
 <summary>
 Verifica se uma String contém qualquer um dos valores especificados
 </summary>
 <param name="Text">          Texto correspondente</param>
 <param name="Values">        Lista de valores</param>
 <param name="ComparisonType">Tipo de comparacao</param>
 <returns>True se conter algum valor, false se não</returns>
</member>
<member name="M:InnerLibs.Text.CountCharacter(System.String,System.Char)">
 <summary>
 Conta os caracters especificos de uma string
 </summary>
 <param name="Text">     Texto</param>
 <param name="Character">Caractere</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.CountWords(System.String,System.Boolean,System.String[])">
 <summary>
 Retorna as plavaras contidas em uma frase em ordem alfabética e sua respectiva quantidade
 </summary>
 <param name="Text">            TExto</param>
 <param name="RemoveDiacritics">indica se os acentos devem ser removidos das palavras</param>
 <param name="Words">
 Desconsidera outras palavras e busca a quantidadade de cada palavra especificada em um array
 </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.DeleteLine(System.String,System.Int32)">
 <summary>
 Remove uma linha especifica de um texto
 </summary>
 <param name="Text">Texto</param>
 <param name="LineIndex">Numero da linha</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.DistinctCount(System.String[])">
 <summary>
 Cria um dicionário com as palavras de uma lista e a quantidade de cada uma.
 </summary>
 <param name="List">Lista de palavras</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.DistinctCount(System.String)">
 <summary>
 Cria um dicionário com as palavras de uma frase e sua respectiva quantidade.
 </summary>
 <param name="Phrase">Lista de palavras</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.EndsWithAny(System.String,System.String[])">
 <summary>
 Verifica se uma string termina com alguma outra string de um array
 </summary>
 <param name="Text"> </param>
 <param name="Words"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.EscapeQuotesToQuery(System.String)">
 <summary>
 Prepara uma string com aspas simples para uma Query TransactSQL
 </summary>
 <param name="Text">Texto a ser tratado</param>
 <returns>String pornta para a query</returns>
</member>
<member name="M:InnerLibs.Text.FindNumbers(System.String)">
 <summary>
 Procura numeros em uma string e retorna um array deles
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.FindCEP(System.String)">
 <summary>
 Procura CEPs em uma string
 </summary>
 <param name="TExt"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.FindByRegex(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
 <summary>
 Procura CEPs em uma string
 </summary>
 <param name="TExt"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.FindTelephoneNumbers(System.String)">
 <summary>
 Procurea numeros de telefone em um texto
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.FixBreakLines(System.String)">
 <summary>
 Transforma quebras de linha HTML em quebras de linha comuns ao .net
 </summary>
 <param name="Text">Texto correspondente</param>
 <returns>String fixada</returns>
</member>
<member name="M:InnerLibs.Text.FixPunctuation(System.String@,System.String,System.Boolean)">
 <summary>
 Adciona pontuaçao ao final de uma string se a mesma não terminar com alguma pontuacao.
 </summary>
 <param name="Text">       Frase, Texto a ser pontuado</param>
 <param name="Punctuation">Ponto a ser adicionado na frase se a mesma não estiver com pontuacao</param>
 <returns>Frase corretamente pontuada</returns>
</member>
<member name="M:InnerLibs.Text.FixText(System.String,System.Int32,System.Int32)">
 <summary>
 Arruma a ortografia do texto captalizando corretamente, adcionando pontução ao final de frase
 caso nescessário e removendo espaços excessivos ou incorretos
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Format(System.String,System.String[])">
 <summary>
 Extension Method para <see cref="T:System.String"/>
 </summary>
 <param name="Text">Texto</param>
 <param name="Args">Objetos de substituição</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.GetAfter(System.String,System.String,System.Boolean)">
 <summary>
 Retorna um texto posterior a outro
 </summary>
 <param name="Text"> Texto correspondente</param>
 <param name="Value">Texto Posterior</param>
 <returns>Uma string com o valor posterior ao valor especificado.</returns>
</member>
<member name="M:InnerLibs.Text.GetAllBetween(System.String,System.String,System.String)">
 <summary>
 Retorna todas as ocorrencias de um texto entre dois textos
 </summary>
 <param name="Text">  O texto correspondente</param>
 <param name="Before">O texto Anterior</param>
 <param name="After"> O texto Posterior</param>
 <returns>Uma String com o texto entre o texto anterior e posterior</returns>
</member>
<member name="M:InnerLibs.Text.GetBefore(System.String,System.String,System.Boolean)">
 <summary>
 Retorna um texto anterior a outro
 </summary>
 <param name="Text"> Texto correspondente</param>
 <param name="Value">Texto Anterior</param>
 <returns>Uma string com o valor anterior ao valor especificado.</returns>
</member>
<member name="M:InnerLibs.Text.GetBetween(System.String,System.String,System.String)">
 <summary>
 Retorna o texto entre dois textos
 </summary>
 <param name="Text">  O texto correspondente</param>
 <param name="Before">O texto Anterior</param>
 <param name="After"> O texto Posterior</param>
 <returns>Uma String com o texto entre o texto anterior e posterior</returns>
</member>
<member name="M:InnerLibs.Text.GetDomain(System.Uri,System.Boolean)">
 <summary>
 Pega o dominio principal de uma URL
 </summary>
 <param name="URL">URL</param>
 <returns>nome do dominio</returns>
</member>
<member name="M:InnerLibs.Text.GetDomain(System.String,System.Boolean)">
 <summary>
 Pega o dominio principal de uma URL
 </summary>
 <param name="URL">URL</param>
 <returns>nome do dominio</returns>
</member>
<member name="M:InnerLibs.Text.GetMiddleChars(System.String,System.Int32)">
 <summary>
 Retorna N caracteres de uma string a partir do caractere encontrado no centro
 </summary>
 <param name="Text">  </param>
 <param name="Length"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.GetOppositeWrapChar(System.String)">
 <summary>
 Retorna o caractere de encapsulamento oposto ao caractere indicado
 </summary>
 <param name="Text">Caractere</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.IsOpenWrapChar(System.String)">
 <summary>
 Retorna o caractere de encapsulamento oposto ao caractere indicado
 </summary>
 <param name="Text">Caractere</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.GetRandomItem``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Sorteia um item da Lista
 </summary>
 <typeparam name="Type">Tipo de lista</typeparam>
 <param name="List">Lista</param>
 <returns>Um valor do tipo especificado</returns>
</member>
<member name="M:InnerLibs.Text.GetRandomItem``1(``0[])">
 <summary>
 Sorteia um item da Lista
 </summary>
 <typeparam name="Type">Tipo da Matriz</typeparam>
 <param name="Array">Matriz</param>
 <returns>Um valor do tipo especificado</returns>
</member>
<member name="M:InnerLibs.Text.GetRelativeURL(System.Uri)">
 <summary>
 Retorna o caminho relativo da url
 </summary>
 <param name="URL">Url</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.GetRelativeURL(System.String)">
 <summary>
 Retorna o caminho relativo da url
 </summary>
 <param name="URL">Url</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.GetWords(System.String)">
 <summary>
 Retorna uma lista de palavras encontradas no texto em ordem alfabetica
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.GetWrappedText(System.String,System.String,System.Boolean)">
 <summary>
 Captura todas as sentenças que estão entre aspas ou parentesis ou chaves ou colchetes em um texto
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.HtmlDecode(System.String)">
 <summary>
 Retorna um texto com entidades HTML convertidas para caracteres e tags BR em breaklines
 </summary>
 <param name="Text">string HTML</param>
 <returns>String HTML corrigido</returns>
</member>
<member name="M:InnerLibs.Text.HtmlEncode(System.String)">
 <summary>
 Escapa o texto HTML
 </summary>
 <param name="Text">string HTML</param>
 <returns>String HTML corrigido</returns>
</member>
<member name="M:InnerLibs.Text.IsAnagramOf(System.String,System.String)">
 <summary>
 Verifica se uma palavra é um Anagrama de outra palavra
 </summary>
 <param name="Text">       </param>
 <param name="AnotherText"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.IsAny(System.String,System.String[])">
 <summary>
 Compara se uma string é igual a outras strings
 </summary>
 <param name="Text"> string principal</param>
 <param name="Texts">strings para comparar</param>
 <returns>TRUE se alguma das strings for igual a principal</returns>
</member>
<member name="M:InnerLibs.Text.IsAny(System.String,System.StringComparison,System.String[])">
 <summary>
 Compara se uma string é igual a outras strings
 </summary>
 <param name="Text"> string principal</param>
 <param name="Texts">strings para comparar</param>
 <returns>TRUE se alguma das strings for igual a principal</returns>
</member>
<member name="M:InnerLibs.Text.IsNotAny(System.String,System.String[])">
 <summary>
 Compara se uma string nao é igual a outras strings
 </summary>
 <param name="Text"> string principal</param>
 <param name="Texts">strings para comparar</param>
 <returns>TRUE se nenhuma das strings for igual a principal</returns>
</member>
<member name="M:InnerLibs.Text.IsNotAny(System.String,System.StringComparison,System.String[])">
 <summary>
 Compara se uma string nao é igual a outras strings
 </summary>
 <param name="Text"> string principal</param>
 <param name="Texts">strings para comparar</param>
 <returns>TRUE se alguma das strings for igual a principal</returns>
</member>
<member name="M:InnerLibs.Text.IsPalindrome(System.String,System.Boolean)">
 <summary>
 Verifica se uma palavra ou frase é idêntica da direita para a esqueda bem como da esqueda
 para direita
 </summary>
 <param name="Text">             Texto</param>
 <param name="IgnoreWhiteSpaces">Ignora os espaços na hora de comparar</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
 <summary>
 Une todos os valores de um objeto em uma unica string
 </summary>
 <param name="Array">    Objeto com os valores</param>
 <param name="Separator">Separador entre as strings</param>
 <returns>string</returns>
</member>
<member name="M:InnerLibs.Text.Join``1(``0[],System.String)">
 <summary>
 Une todos os valores de um objeto em uma unica string
 </summary>
 <param name="Array">    Objeto com os valores</param>
 <param name="Separator">Separador entre as strings</param>
 <returns>string</returns>
</member>
<member name="M:InnerLibs.Text.Join``1(System.String,``0[])">
 <summary>
 Une todos os valores de um objeto em uma unica string
 </summary>
 <param name="Array">    Objeto com os valores</param>
 <param name="Separator">Separador entre as strings</param>
 <returns>string</returns>
</member>
<member name="M:InnerLibs.Text.Join``1(System.Collections.Generic.List{``0},System.String)">
 <summary>
 Une todos os valores de um objeto em uma unica string
 </summary>
 <param name="List">     Objeto com os valores</param>
 <param name="Separator">Separador entre as strings</param>
 <returns>string</returns>
</member>
<member name="M:InnerLibs.Text.CrossContains(System.String,System.String,System.StringComparison)">
 <summary>
 Verifica se um texto contém outro ou vice versa
 </summary>
 <param name="Text"></param>
 <param name="OtherText"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Contains(System.String,System.String,System.StringComparison)">
 <summary>
 Verifica se um texto contém outro
 </summary>
 <param name="Text"></param>
 <param name="OtherText"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.LevenshteinDistance(System.String,System.String)">
<summary>
 Computa a distancia de Levenshtein entre 2 strings.
 </summary>
</member>
<member name="M:InnerLibs.Text.ParseAlphaNumeric(System.String)">
 <summary>
 limpa um texto deixando apenas os caracteres alfanumericos.
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ParseDigits(System.String,System.Globalization.CultureInfo)">
 <summary>
 Remove caracteres não numéricos de uma string
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Poopfy(System.String[])">
 <summary>
 Retorna uma string em sua forma poop
 </summary>
 <param name="Words"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Poopfy(System.String)">
 <summary>
 Retorna uma string em sua forma poop
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.PreetyPrint(System.Xml.XmlDocument)">
 <summary>
 Return a Idented XML string
 </summary>
 <param name="Document"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Prepend(System.String,System.String)">
 <summary>
 Adiciona texto ao começo de uma string
 </summary>
 <param name="Text">       Texto</param>
 <param name="PrependText">Texto adicional</param>
</member>
<member name="M:InnerLibs.Text.Append(System.String,System.String)">
 <summary>
 Adiciona texto ao fim de uma string
 </summary>
 <param name="Text">       Texto</param>
 <param name="AppendText">Texto adicional</param>
</member>
<member name="M:InnerLibs.Text.PrependIf(System.String,System.String,System.Boolean)">
 <summary>
 Adiciona texto ao começo de uma string se um criterio for cumprido
 </summary>
 <param name="Text">       Texto</param>
 <param name="PrependText">Texto adicional</param>
 <param name="Test">       Teste</param>
</member>
<member name="M:InnerLibs.Text.QuantifyText(System.FormattableString)">
 <summary>
 Retorna o texto a na sua forma singular ou plural de acordo com uma quantidade determinada em uma lista ou um valor numérico encontrado no primeiro parametro.
 </summary>
 <param name="PluralText">Texto no plural</param>
 <returns></returns>
 <example>texto = $"{2} pães"</example>
</member>
<member name="M:InnerLibs.Text.QuantifyText(System.String,System.Object)">
 <summary>
 Retorna o texto a na sua forma singular ou plural de acordo com uma quantidade determinada em uma lista ou um valor numérico.
 </summary>
 <param name="PluralText">Texto no plural</param>
 <param name="Quantity">  Quantidade de Itens</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.QuantifyText(System.String,System.Object,System.Decimal@)">
 <summary>
 Retorna o texto a na sua forma singular ou plural de acordo com uma quantidade determinada em uma lista ou um valor numérico.
 </summary>
 <param name="PluralText">Texto no plural</param>
 <param name="QuantityOrListOrBoolean">  Quantidade de Itens</param>
 <param name="OutQuantity">Devolve a quantidade encontrada em <paramref name="QuantityOrListOrBoolean"/> </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.QuantifyText``1(System.Collections.Generic.IEnumerable{``0},System.String)">
 <summary>
 Retorna o texto a na sua forma singular ou plural de acordo com um numero determinado.
 </summary>
 <param name="PluralText">Texto no plural</param>
 <param name="List">Lista com itens</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.QuantifyText(System.Int32,System.String)">
 <summary>
 Retorna o texto a na sua forma singular ou plural de acordo com um numero determinado.
 </summary>
 <param name="PluralText">Texto no plural</param>
 <param name="Quantity">Quantidade de Itens</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.QuantifyText(System.Decimal,System.String)">
 <summary>
 Retorna o texto a na sua forma singular ou plural de acordo com um numero determinado.
 </summary>
 <param name="PluralText">Texto no plural</param>
 <param name="Quantity">Quantidade de Itens</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.QuantifyText(System.Int16,System.String)">
 <summary>
 Retorna o texto a na sua forma singular ou plural de acordo com um numero determinado.
 </summary>
 <param name="PluralText">Texto no plural</param>
 <param name="Quantity">Quantidade de Itens</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.QuantifyText(System.Int64,System.String)">
 <summary>
 Retorna o texto a na sua forma singular ou plural de acordo com um numero determinado.
 </summary>
 <param name="PluralText">Texto no plural</param>
 <param name="Quantity">Quantidade de Itens</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.QuantifyText(System.Double,System.String)">
 <summary>
 Retorna o texto a na sua forma singular ou plural de acordo com um numero determinado.
 </summary>
 <param name="PluralText">Texto no plural</param>
 <param name="Quantity">Quantidade de Itens</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Quote(System.String,System.Char)">
 <summary>
 Encapsula um tento entre 2 caracteres (normalmente parentesis, chaves, aspas ou colchetes)
 </summary>
 <param name="Text">     Texto</param>
 <param name="OpenQuoteChar">Caractere de encapsulamento</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Brackfy(System.String,System.Char)">
 <summary>
 Encapsula um tento entre 2 caracteres (normalmente parentesis, chaves, aspas ou colchetes) é um alias de <see cref="M:InnerLibs.Text.Quote(System.String,System.Char)"/>
 </summary>
 <param name="Text">     Texto</param>
 <param name="BracketChar">Caractere de encapsulamento</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.QuoteIf(System.String,System.Boolean,System.String)">
 <summary>
 Encapsula um tento entre 2 textos (normalmente parentesis, chaves, aspas ou colchetes) se uma
 condiçao for cumprida
 </summary>
 <param name="Text">     Texto</param>
 <param name="QuoteChar">Caractere de encapsulamento</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.RandomItem``1(``0[])">
 <summary>
 Sorteia um item da Matriz
 </summary>
 <typeparam name="Type">Tipo da Matriz</typeparam>
 <param name="Array">Matriz</param>
 <returns>Um valor do tipo especificado</returns>
</member>
<member name="M:InnerLibs.Text.RegexEscape(System.String)">
 <summary>
 Escapa caracteres exclusivos de uma regex
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.RemoveAccents(System.String)">
 <summary>
 Remove os acentos de uma string
 </summary>
 <param name="Text">Texto</param>
 <returns>String sem os acentos</returns>
</member>
<member name="M:InnerLibs.Text.RemoveAny(System.String,System.String[])">
 <summary>
 Remove várias strings de uma string
 </summary>
 <param name="Text">  Texto</param>
 <param name="Values">Strings a serem removidas</param>
 <returns>Uma string com os valores removidos</returns>
</member>
<member name="M:InnerLibs.Text.RemoveDiacritics(System.String@)">
 <summary>
 Remove os acentos de uma string
 </summary>
 <param name="Text">Texto</param>
 <returns>String sem os acentos</returns>
</member>
<member name="M:InnerLibs.Text.RemoveFirstAny(System.String,System.Boolean,System.String[])">
 <summary>
 Remove o final de uma string se ela for igual a qualquer um dos valores correspondentes
 </summary>
 <param name="Text">              Texto</param>
 <param name="ContinuouslyRemove">
 Parametro que indica se a string deve continuar sendo testada até que todas as ocorrencias
 sejam removidas
 </param>
 <param name="StartStringTest">   Conjunto de textos que serão comparados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.RemoveFirstAny(System.String,System.String[])">
 <summary>
 Remove continuamente o começo de uma string se ela for igual a qualquer um dos valores correspondentes
 </summary>
 <param name="Text">              Texto</param>
 <param name="StartStringTest">     Conjunto de textos que serão comparados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.RemoveFirstChars(System.String,System.Int32)">
 <summary>
 Remove os X primeiros caracteres
 </summary>
 <param name="Text">     Texto</param>
 <param name="Quantity"> Quantidade de Caracteres</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.RemoveFirstEqual(System.String,System.String)">
 <summary>
 Remove um texto do inicio de uma string se ele for um outro texto especificado
 </summary>
 <param name="Text">           Texto</param>
 <param name="StartStringTest">Texto inicial que será comparado</param>
</member>
<member name="M:InnerLibs.Text.RemoveLastAny(System.String,System.Boolean,System.String[])">
 <summary>
 Remove o final de uma string se ela for igual a qualquer um dos valores correspondentes
 </summary>
 <param name="Text">              Texto</param>
 <param name="ContinuouslyRemove">
 Parametro que indica se a string deve continuar sendo testada até que todas as ocorrencias
 sejam removidas
 </param>
 <param name="EndStringTest">     Conjunto de textos que serão comparados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.RemoveLastAny(System.String,System.String[])">
 <summary>
 Remove continuamente o final de uma string se ela for igual a qualquer um dos valores correspondentes
 </summary>
 <param name="Text">              Texto</param>
 <param name="EndStringTest">     Conjunto de textos que serão comparados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.RemoveLastChars(System.String,System.Int32)">
 <summary>
 Remove os X ultimos caracteres
 </summary>
 <param name="Text">    Texto</param>
 <param name="Quantity">Quantidade de Caracteres</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.RemoveLastEqual(System.String,System.String)">
 <summary>
 Remove um texto do final de uma string se ele for um outro texto
 </summary>
 <param name="Text">         Texto</param>
 <param name="EndStringTest">Texto final que será comparado</param>
</member>
<member name="M:InnerLibs.Text.RemoveNonPrintable(System.String)">
 <summary>
 Remove caracteres não printaveis de uma string
 </summary>
 <param name="Text">Texto</param>
 <returns>String corrigida</returns>
</member>
<member name="M:InnerLibs.Text.Replace(System.String[],System.String,System.String,System.Boolean)">
 <summary>
 Faz uma busca em todos os elementos do array e aplica um ReplaceFrom comum
 </summary>
 <param name="Strings">        Array de strings</param>
 <param name="OldValue">       Valor antigo que será substituido</param>
 <param name="NewValue">       Valor utilizado para substituir o valor antigo</param>
 <param name="ReplaceIfEquals">
 Se TRUE, realiza o replace se o valor no array for idêntico ao Valor antigo, se FALSE realiza
 um ReplaceFrom em quaisquer valores antigos encontrados dentro do valor do array
 </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Replace(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean)">
 <summary>
 Faz uma busca em todos os elementos de uma lista e aplica um ReplaceFrom comum
 </summary>
 <param name="Strings">        Array de strings</param>
 <param name="OldValue">       Valor antigo que será substituido</param>
 <param name="NewValue">       Valor utilizado para substituir o valor antigo</param>
 <param name="ReplaceIfEquals">
 Se TRUE, realiza o replace se o valor no array for idêntico ao Valor antigo, se FALSE realiza
 um ReplaceFrom em quaisquer valores antigos encontrados dentro do valor do array
 </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Aplica varios replaces a um texto a partir de um <see cref="T:System.Collections.IDictionary"/>
 </summary>
</member>
<member name="M:InnerLibs.Text.ReplaceFrom``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})">
 <summary>
 Aplica varios replaces a um texto a partir de um <see cref="T:System.Collections.IDictionary"/>
 </summary>
</member>
<member name="M:InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String,System.String[]},System.StringComparison)">
 <summary>
 Aplica um replace a um texto baseando-se em um <see cref="T:System.Collections.IDictionary"/>.
 </summary>
</member>
<member name="M:InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String[],System.String},System.StringComparison)">
 <summary>
 Aplica um replace a um texto baseando-se em um <see cref="T:System.Collections.IDictionary"/>.
 </summary>
</member>
<member name="M:InnerLibs.Text.ReplaceFrom(System.String,System.Collections.Generic.IDictionary{System.String[],System.String[]},System.StringComparison)">
 <summary>
 Aplica um replace a um texto baseando-se em um <see cref="T:System.Collections.IDictionary"/>.
 </summary>
</member>
<member name="M:InnerLibs.Text.ReplaceMany(System.String,System.String,System.String[])">
 <summary>
 Retorna uma nova sequência na qual todas as ocorrências de uma String especificada são
 substituídas por um novo valor.
 </summary>
 <param name="Text">     Texto</param>
 <param name="NewValue"> Novo Valor</param>
 <param name="OldValues">Valores a serem substituido por um novo valor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ReplaceNone(System.String,System.String)">
 <summary>
 Retorna uma nova sequência na qual todas as ocorrências de uma String especificada são
 substituídas por vazio.
 </summary>
 <param name="Text">    Texto</param>
 <param name="OldValue">Valor a ser substituido por vazio</param>
 <returns>String corrigida</returns>
</member>
<member name="M:InnerLibs.Text.SensitiveReplace(System.String,System.String,System.String,System.StringComparison)">
 <summary>
 Realiza um replace em uma string usando um tipo especifico de comparacao
 </summary>
 <param name="Text">          </param>
 <param name="NewValue">      </param>
 <param name="OldValue">      </param>
 <param name="ComparisonType"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.SensitiveReplace(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
 <summary>
 Realiza um replace em uma string usando um tipo especifico de comparacao
 </summary>
 <param name="Text">          </param>
 <param name="NewValue">      </param>
 <param name="OldValues">     </param>
 <param name="ComparisonType"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Shuffle``1(``0[])">
 <summary>
 Randomiza a ordem dos itens de um Array
 </summary>
 <typeparam name="Type">Tipo do Array</typeparam>
 <param name="Array">Matriz</param>
</member>
<member name="M:InnerLibs.Text.Shuffle``1(System.Collections.Generic.List{``0}@)">
 <summary>
 Randomiza a ordem dos itens de uma Lista
 </summary>
 <typeparam name="Type">Tipo de Lista</typeparam>
 <param name="List">Matriz</param>
</member>
<member name="M:InnerLibs.Text.Shuffle(System.String@)">
 <summary>
 Aleatoriza a ordem das letras de um texto
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Singularize(System.String)">
 <summary>
 Retorna a frase ou termo especificado em sua forma singular
 </summary>
 <param name="Text">Texto no plural</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Slice(System.String,System.Int32,System.String)">
 <summary>
 Corta un texto para exibir um numero máximo de caracteres ou na primeira quebra de linha.
 </summary>
 <param name="Text"></param>
 <param name="TextLength"></param>
 <param name="Ellipsis"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Split(System.String,System.String,System.StringSplitOptions)">
 <summary>
 Separa um texto em um array de strings a partir de uma outra string
 </summary>
 <param name="Text">     Texto</param>
 <param name="Separator">Texto utilizado como separador</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.StartsWithAny(System.String,System.String[])">
 <summary>
 Verifica se uma string começa com alguma outra string de um array
 </summary>
 <param name="Text"> </param>
 <param name="Words"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.SyllableCount(System.String)">
 <summary>
 Conta as silabas de uma palavra
 </summary>
 <param name="Word"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToAlternateCase(System.String)">
 <summary>
 Alterna maiusculas e minusculas para cada letra de uma string
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToAnagram(System.String)">
 <summary>
 Retorna um anagrama de um texto
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToCamel(System.String)">
 <summary>
 Transforma uma frase em uma palavra CamelCase
 </summary>
 <param name="Text">Texto a ser manipulado</param>
 <returns>Uma String com o texto am CameCase</returns>
</member>
<member name="M:InnerLibs.Text.ToFileSizeString(System.Byte[],System.Int32)">
 <summary>
 Retorna o uma string representando um valor em bytes, KB, MB ou TB
 </summary>
 <param name="Size">Tamanho</param>
 <returns>String com o tamanho + unidade de medida</returns>
</member>
<member name="M:InnerLibs.Text.ToFileSizeString(System.IO.FileInfo,System.Int32)">
 <summary>
 Retorna o uma string representando um valor em bytes, KB, MB ou TB
 </summary>
 <param name="Size">Tamanho</param>
 <returns>String com o tamanho + unidade de medida</returns>
</member>
<member name="M:InnerLibs.Text.ToFileSizeString(System.Double,System.Int32)">
 <summary>
 Retorna o uma string representando um valor em bytes, KB, MB ou TB
 </summary>
 <param name="Size">Tamanho</param>
 <returns>String com o tamanho + unidade de medida</returns>
</member>
<member name="M:InnerLibs.Text.ToFileSizeString(System.Int32,System.Int32)">
 <summary>
 Retorna o uma string representando um valor em bytes, KB, MB ou TB
 </summary>
 <param name="Size">Tamanho</param>
 <returns>String com o tamanho + unidade de medida</returns>
</member>
<member name="M:InnerLibs.Text.ToFileSizeString(System.Int64,System.Int32)">
 <summary>
 Retorna o uma string representando um valor em bytes, KB, MB ou TB
 </summary>
 <param name="Size">Tamanho</param>
 <returns>String com o tamanho + unidade de medida</returns>
</member>
<member name="M:InnerLibs.Text.ToFileSizeString(System.Decimal,System.Int32)">
 <summary>
 Retorna o uma string representando um valor em bytes, KB, MB ou TB
 </summary>
 <param name="Size">Tamanho</param>
 <returns>String com o tamanho + unidade de medida</returns>
</member>
<member name="M:InnerLibs.Text.ToFriendlyURL(System.String,System.Boolean)">
 <summary>
 Prepara uma string para se tornar uma URL amigavel (remove caracteres nao permitidos e troca
 espacos por hifen)
 </summary>
 <param name="Text">         </param>
 <param name="UseUnderscore">
 Indica se os espacos serão substituidos por underscores (underline). Use FALSE para hifens
 </param>
 <returns>string amigavel para URL</returns>
</member>
<member name="M:InnerLibs.Text.ToFriendlyPathName(System.String)">
 <summary>
 Prepara uma string para se tornar uma caminho amigavel (remove caracteres nao permitidos)
 </summary>
 <param name="Text"></param>
 <returns>string amigavel para URL</returns>
</member>
<member name="M:InnerLibs.Text.AdjustPathChars(System.String,System.Boolean)">
 <summary>
 Ajusta um caminho colocando as barras corretamente e substituindo caracteres inválidos
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToLeet(System.String,System.Int32)">
 <summary>
 Converte um texo para Leet (1337)
 </summary>
 <param name="text">  TExto original</param>
 <param name="degree">Grau de itensidade (0 - 100%)</param>
 <returns>Texto em 1337</returns>
</member>
<member name="M:InnerLibs.Text.ToPercentString(System.Decimal,System.Int32)">
 <summary>
 Retorna um numero com o sinal de porcentagem
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToPercentString(System.Int32)">
 <summary>
 Retorna um numero com o sinal de porcentagem
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToPercentString(System.Double,System.Int32)">
 <summary>
 Retorna um numero com o sinal de porcentagem
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToPercentString(System.Int16)">
 <summary>
 Retorna um numero com o sinal de porcentagem
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToPercentString(System.Int64)">
 <summary>
 Retorna um numero com o sinal de porcentagem
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToProperCase(System.String,System.Boolean)">
 <summary>
 Coloca o texto em TitleCase
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToRandomCase(System.String,System.Int32)">
 <summary>
 Coloca a string em Randomcase (aleatoriamente letras maiusculas ou minusculas)
 </summary>
 <param name="Text"></param>
 <param name="Times">Numero de vezes que serão sorteados caracteres.</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToSlugCase(System.String,System.Boolean)">
 <summary>
 Prepara uma string para se tornar uma URL amigavel (remove caracteres nao permitidos e troca
 espacos por hifen). É um alias para <see cref="M:InnerLibs.Text.ToFriendlyURL(System.String,System.Boolean)"/>
 </summary>
 <param name="Text">         </param>
 <param name="UseUnderscore">
 Indica se os espacos serão substituidos por underscores (underline). Use FALSE para hifens
 </param>
 <returns>string amigavel para URL</returns>
</member>
<member name="M:InnerLibs.Text.ToSnakeCase(System.String)">
 <summary>
 Retorna uma string em Snake_Case
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToStream(System.String)">
 <summary>
 Cria um <see cref="T:System.IO.Stream"/> a partir de uma string
 </summary>
 <param name="TExt"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.MaskTelephoneNumber(System.String)">
 <summary>
 Aplica uma mascara a um numero de telefone
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.MaskTelephoneNumber(System.Int64)">
 <summary>
 Aplica uma mascara a um numero de telefone
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.MaskTelephoneNumber(System.Int32)">
 <summary>
 Aplica uma mascara a um numero de telefone
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.MaskTelephoneNumber(System.Decimal)">
 <summary>
 Aplica uma mascara a um numero de telefone
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.MaskTelephoneNumber(System.Double)">
 <summary>
 Aplica uma mascara a um numero de telefone
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToTitle(System.String,System.Boolean)">
 <summary>
 Transforma um texto em titulo
 </summary>
 <param name="Text">Texto a ser manipulado</param>
 <param name="ForceCase">Se FALSE, apenas altera o primeiro caractere de cada palavra como UPPERCASE, dexando os demais intactos. Se TRUE, força o primeiro caractere de casa palavra como UPPERCASE e os demais como LOWERCASE</param>
 <returns>Uma String com o texto em nome próprio</returns>
</member>
<member name="M:InnerLibs.Text.ToXMLString(System.Xml.XmlDocument)">
 <summary>
 Transforma um XML Document em string
 </summary>
 <param name="XML">Documento XML</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.TrimAny(System.String,System.Boolean,System.String[])">
 <summary>
 Remove do começo e do final de uma string qualquer valor que estiver no conjunto
 </summary>
 <param name="Text">              Texto</param>
 <param name="ContinuouslyRemove">
 Parametro que indica se a string deve continuar sendo testada até que todas as ocorrencias
 sejam removidas
 </param>
 <param name="StringTest">        Conjunto de textos que serão comparados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.TrimAny(System.String,System.String[])">
 <summary>
 Remove do começo e do final de uma string qualquer valor que estiver no conjunto
 </summary>
 <param name="Text">      Texto</param>
 <param name="StringTest">Conjunto de textos que serão comparados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.TrimCarriage(System.String)">
 <summary>
 Remove continuamente caracteres em branco do começo e fim de uma string incluindo breaklines
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.UrlDecode(System.String)">
 <summary>
 Decoda uma string de uma transmissão por URL
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.UrlEncode(System.String)">
 <summary>
 Encoda uma string para transmissão por URL
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ForEachLine(System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.String}})">
 <summary>
 Executa uma ação para cada linha de um texto
 </summary>
 <param name="Text"></param>
 <param name="Action"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Wrap(System.String,System.String)">
 <summary>
 Encapsula um tento entre 2 textos
 </summary>
 <param name="Text">    Texto</param>
 <param name="WrapText">Caractere de encapsulamento</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Wrap(System.String,System.String,System.String)">
 <summary>
 Encapsula um tento entre 2 textos
 </summary>
 <param name="Text">    Texto</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.FullNumberWriter">
 <summary>
 Classe para escrever numeros por extenso com suporte até 999 quintilhoes
 </summary>
</member>
<member name="P:InnerLibs.FullNumberWriter.Minus">
 <summary>
 String que representa a palavra "Menos". Utilizada quando os números são negativos
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Zero">
 <summary>
 String que representa o numero 0.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.And">
 <summary>
 String que representa a palavra "e". Utilizada na concatenação de expressões
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.One">
 <summary>
 String que representa o numero 1.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Two">
 <summary>
 String que representa o numero 2.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Three">
 <summary>
 String que representa o numero 3.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Four">
 <summary>
 String que representa o numero 4.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Five">
 <summary>
 String que representa o numero 5.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Six">
 <summary>
 String que representa o numero 6.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Seven">
 <summary>
 String que representa o numero 7.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Eight">
 <summary>
 String que representa o numero 8.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Nine">
 <summary>
 String que representa o numero 9.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Ten">
 <summary>
 String que representa o numero 10.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Eleven">
 <summary>
 String que representa o numero 11.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Twelve">
 <summary>
 String que representa o numero 12.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Thirteen">
 <summary>
 String que representa o numero 13.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Fourteen">
 <summary>
 String que representa o numero 14.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Fifteen">
 <summary>
 String que representa o numero 15.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Sixteen">
 <summary>
 String que representa o numero 16.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Seventeen">
 <summary>
 String que representa o numero 17.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Eighteen">
 <summary>
 String que representa o numero 18.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Nineteen">
 <summary>
 String que representa o numero 19.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Twenty">
 <summary>
 String que representa os numeros 20 a 29 .
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Thirty">
 <summary>
 String que representa os numeros 30 a 39.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Fourty">
 <summary>
 String que representa os numeros 40 a 49.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Fifty">
 <summary>
 String que representa os numeros 50 a 59.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Sixty">
 <summary>
 String que representa os numeros 60 a 69.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Seventy">
 <summary>
 String que representa os numeros 70 a 79.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Eighty">
 <summary>
 String que representa os numeros 80 a 89.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Ninety">
 <summary>
 String que representa os numeros 90 a 99.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.ExactlyOneHundred">
 <summary>
 String que represena o exato numero 100. Em alguns idiomas esta string não é nescessária
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.OneHundred">
 <summary>
 String que representa os numeros 100 a 199.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.TwoHundred">
 <summary>
 String que representa os numeros 200 a 299.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.ThreeHundred">
 <summary>
 String que representa os numeros 300 a 399.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.FourHundred">
 <summary>
 String que representa os numeros 400 a 499.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.FiveHundred">
 <summary>
 String que representa os numeros 500 a 599.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.SixHundred">
 <summary>
 String que representa os numeros 600 a 699.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.SevenHundred">
 <summary>
 String que representa os numeros 700 a 799.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.EightHundred">
 <summary>
 String que representa os numeros 800 a 899.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.NineHundred">
 <summary>
 String que representa os numeros 900 a 999.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Thousand">
 <summary>
 String que representa os numeros 1000 a 9999
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Million">
 <summary>
 Par de strings que representam os numeros 1 milhão a 999 milhões
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Billion">
 <summary>
 Par de strings que representam os numeros 1 bilhão a 999 bilhões
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Trillion">
 <summary>
 Par de strings que representam os numeros 1 trilhão a 999 trilhões
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Quadrillion">
 <summary>
 Par de strings que representam os numeros 1 quadrilhão a 999 quadrilhões
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.Quintillion">
 <summary>
 Par de strings que representam os numeros 1 quintilhão a 999 quintilhões
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.MoreThan">
 <summary>
 String utilizada quando o numero é maior que 999 quintilhões. Retorna uma string "Mais de 999 quintilhões"
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullNumberWriter.DecimalSeparator">
 <summary>
 String utilizada quando um numero possui casa decimais. Normalmente "virgula"
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FullNumberWriter.#ctor">
 <summary>
 Instancia um novo <see cref="T:InnerLibs.FullNumberWriter"/> com as configurações default (inglês)
 </summary>
</member>
<member name="P:InnerLibs.FullNumberWriter.Text(System.Decimal,System.Int32)">
 <summary>
 Escreve um numero por extenso
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.FullMoneyWriter">
 <summary>
 Classe para escrever moedas por extenso com suporte até 999 quintilhoes de $$
 </summary>
</member>
<member name="P:InnerLibs.FullMoneyWriter.CurrencyName">
 <summary>
 Par de strings que representam os nomes da moeda em sua forma singular ou plural
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FullMoneyWriter.CurrencyCentsName">
 <summary>
 Par de strings que representam os centavos desta moeda em sua forma singular ou plural
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FullMoneyWriter.ToString(System.Decimal,System.Int32)">
 <summary>
 Escreve um numero por extenso
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.FullMoneyWriter.ToString(InnerLibs.Money,System.Int32)">
 <summary>
 Escreve um numero por extenso
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ConnectionStringParser.ToString">
 <summary>
 Retorna a connectionstring deste parser
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.HtmlTag">
 <summary>
 Classe para criação de strings contendo tags HTML
 </summary>
</member>
<member name="T:InnerLibs.Sentence">
 <summary>
 Sentença de um texto (uma frase ou oração)
 </summary>
</member>
<member name="T:InnerLibs.SentencePart">
 <summary>
 Parte de uma sentença. Pode ser uma palavra, pontuaçao ou qualquer caractere de encapsulamento
 </summary>
</member>
<member name="M:InnerLibs.SentencePart.IsWord">
 <summary>
 Retorna TRUE se esta parte de senteça for uma palavra
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.SentencePart.IsNotWord">
 <summary>
 Retorna TRUE se esta parte de senteça não for uma palavra
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.SentencePart.IsOpenWrapChar">
 <summary>
 Retorna TRUE se esta parte de senteça for um caractere de abertura de encapsulamento
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.SentencePart.IsCloseWrapChar">
 <summary>
 Retorna TRUE se esta parte de senteça for um caractere de fechamento de encapsulamento
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.SentencePart.IsComma">
 <summary>
 Retorna TRUE se esta parte de sentença é uma vírgula
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.SentencePart.IsEndOfSentencePunctuation">
 <summary>
 Retorna TRUE se esta parte de senteça for um caractere de encerramento de frase (pontuaçao)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.SentencePart.IsMidSentencePunctuation">
 <summary>
 Retorna TRUE se esta parte de senteça for um caractere de de meio de sentença (dois pontos ou ponto e vírgula)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.SentencePart.IsPunctuation">
 <summary>
 Retorna TRUE se esta parte de senteça for qualquer tipo de pontuaçao
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.SentencePart.Text">
 <summary>
 Texto desta parte de sentença
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.SentencePart.Previous">
 <summary>
 Parte de sentença anterior
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.SentencePart.Next">
 <summary>
 Parte da próxima sentença
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.SentencePart.NeedSpaceOnNext">
 <summary>
 Retorna true se é nescessário espaço andes da proxima sentença
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.StructuredText">
 <summary>
 Texto estruturado (Dividido em parágrafos)
 </summary>
</member>
<member name="M:InnerLibs.StructuredText.ToString">
 <summary>
 Retorna o texto corretamente formatado
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.StructuredText.#ctor(System.String)">
 <summary>
 Cria um novo texto estruturado (dividido em paragrafos, sentenças e palavras)
 </summary>
 <param name="OriginalText"></param>
</member>
<member name="P:InnerLibs.TimeMachine.FortnightGroup`1.GetData(InnerLibs.TimeMachine.Fortnight)">
 <summary>
 Retorna da <see cref="P:InnerLibs.TimeMachine.FortnightGroup`1.DataCollection"/> os valores correspondentes a quinzena especificada
 </summary>
 <param name="Fort">Quinzena</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.FortnightGroup`1.GetData(System.String)">
 <summary>
 Retorna da <see cref="P:InnerLibs.TimeMachine.FortnightGroup`1.DataCollection"/> os valores correspondentes a quinzena especificada em <paramref name="Key"/>
 </summary>
 <param name="Key">Key da quinzena q@MM-YYYY</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.FortnightGroup`1.ToDataDictionary(System.Boolean)">
 <summary>
 Retorna um <see cref="T:System.Collections.Generic.Dictionary`2"/> com as informaçoes agrupadas por quinzena
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.FortnightGroup`1.CreateFromDataGroup(System.Collections.Generic.IEnumerable{`0},InnerLibs.DateRange,System.Func{`0,System.DateTime}[])">
 <summary>
 Cria um <see cref="T:InnerLibs.TimeMachine.FortnightGroup`1"/> a partir de uma coleção de objetos
 </summary>
 <param name="Range">Periodo especifico que este grupo irá abranger idependentemente das datas em <paramref name="DateSelector"/></param>
 <param name="Data">Coleção de objetos</param>
 <param name="DateSelector">Expressão Lambda que indica quais campos do objeto contém uma data que deve ser utilizada</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.FortnightGroup`1.CreateFromDataGroup(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.DateTime}[])">
 <summary>
 Cria um <see cref="T:InnerLibs.TimeMachine.FortnightGroup`1"/> a partir de uma coleção de objetos
 </summary>
 <param name="Data">Coleção de objetos</param>
 <param name="DateSelector">Expressão Lambda que indica quais campos do objeto contém uma data que deve ser utilizada</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.FortnightGroup`1.CreateFromDateRange(System.DateTime,System.DateTime)">
 <summary>
 Cria um <see cref="T:InnerLibs.TimeMachine.FortnightGroup`1"/> a partir de uma data inicial e uma data final
 </summary>
 <param name="StartDate">Data inicial</param>
 <param name="EndDate">Data Final</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.FortnightGroup`1.#ctor(System.DateTime,System.Int32)">
 <summary>
 Instancia um novo <see cref="T:InnerLibs.TimeMachine.FortnightGroup`1"/> a partir de uma data inicial e um numero fixo de quinzenas
 </summary>
 <param name="StartDate"></param>
 <param name="FortnightCount"></param>
</member>
<member name="M:InnerLibs.TimeMachine.Fortnight.#ctor(System.Nullable{System.DateTime})">
 <summary>
 Cria uma instancia de quinzena a partir de uma data que a mesma pode conter
 </summary>
 <param name="AnyDate">Qualquer data. Se NULL, a data atual é utilizada</param>
</member>
<member name="P:InnerLibs.TimeMachine.Fortnight.Key">
 <summary>
 String que identifica a quinzena em uma coleção
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Fortnight.Period">
 <summary>
 Periodo que esta quinzena possui
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Fortnight.Number">
 <summary>
 Numero da quinzena (1 ou 2)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.Fortnight.FormatName(System.String)">
 <summary>
 Retorna a Key de um <see cref="T:InnerLibs.TimeMachine.Fortnight"/> em um formato especifico.
 </summary>
 <param name="Format">Formato da string</param>
<remarks>
<list type="number">
<listheader>
 <term> Marcação </term>
 <description> Descrição </description>
 </listheader>
<item><term>{f} ou {q}</term><description> Retorna o numero da quinzena com 1 digito. EX.: "1", "2"</description></item>
<item><term>{ff} ou {qq}</term><description> Retorna o numero da quinzena com 2 digitos. EX.: "01", "02"</description></item>
<item><term>{o}</term><description> Retorna sufixo ordinal da quinzena atual. EX.: "st", "nd", "rd", "th"</description></item>
<item><term>{s}</term><description> Retorna o numero do primeiro dia da quinzena com 1 digito. EX.: "1", "2", "30","31"</description></item>
<item><term>{ss}</term><description> Retorna o numero do primeiro dia da quinzena com 2 digitos. EX.: "01", "02","30","31"</description></item>
<item><term>{e} ou {ee}</term><description> Retorna o numero do ultimo dia da quinzena com 1 digito. EX.: "1", "2", "30","31"</description></item>
<item><term>{m}</term><description> Retorna o numero do mês da quinzena com 1 digito. EX.: "1", "2","11","12"</description></item>
<item><term>{mm}</term><description> Retorna o numero do mês da quinzena com 2 digitos. EX.: "01", "02","11","12"</description></item>
<item><term>{mmm}</term><description> Retorna o nome do mês da quinzena abreviado. EX.: "Jan", "Fev","Nov","Dez"</description></item>
<item><term>{mmmm}</term><description> Retorna o nome do mês da quinzena. EX.: "Janeiro", "Fevereiro","Novembro","Dezembro"</description></item>
<item><term>{y} ou {yy} ou {a} ou {aa}</term><description> Retorna os 2 ultimos números do ano da quinzena. EX.: "18", "19","20"</description></item>
<item><term>{yyy} ou {yyyy} ou {aaa} ou {aaaa}</term><description> Retorna o número do ano da quinzena. EX.: "2018", "2019","2020"</description></item>
</list>
</remarks>
<returns>Uma string no formato especificado</returns>
</member>
<member name="T:InnerLibs.TimeMachine.FortnightGroup">
 <summary>
 Lista de dias agrupados em quinzenas
 </summary>
</member>
<member name="P:InnerLibs.TimeMachine.FortnightGroup.Item(System.String)">
 <summary>
 Retorna uma quinzena a partir da sua Key
 </summary>
 <param name="Key"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.FortnightGroup.Item(System.Int32)">
 <summary>
 Retorna uma quinzena a partir da sua Index
 </summary>
 <param name="Index"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.FortnightGroup.StartDate">
 <summary>
 Retorna a data inicial do periodo
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.FortnightGroup.EndDate">
 <summary>
 Retorna a ultima data do periodo
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.FortnightGroup.AllDays">
 <summary>
 Retorna uma lista com todos os dias entre as quinzenas
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.FortnightGroup.Period">
 <summary>
 Retorna um periodo equivalente a este grupo de quinzena
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.FortnightGroup.GerarLista(System.DateTime,System.Int32)">
 <summary>
 Instancia um novo <see cref="T:InnerLibs.TimeMachine.FortnightGroup"/> a partir de uma data e um numero de quinzenas
 </summary>
 <param name="StartDate"></param>
 <param name="FortnightCount"></param>
</member>
<member name="M:InnerLibs.TimeMachine.FortnightGroup.#ctor(System.DateTime,System.Int32)">
 <summary>
 Instancia um novo <see cref="T:InnerLibs.TimeMachine.FortnightGroup"/> a partir de uma data e um numero de quinzenas
 </summary>
 <param name="StartDate"></param>
 <param name="FortnightCount"></param>
</member>
<member name="M:InnerLibs.TimeMachine.FortnightGroup.CreateFromDateRange(System.DateTime,System.DateTime)">
 <summary>
 Cria um grupo de quinzenas entre 2 datas
 </summary>
 <param name="StartDate"></param>
 <param name="EndDate"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.FortnightGroup.CreateFromDateRange(InnerLibs.DateRange)">
 <summary>
 Cria um grupo de quinzenas entre 2 datas
 </summary>
<param name="Range">Periodo</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.TimeMachine.LongTimeSpan">
 <summary>
 Classe para comapração entre 2 Datas com possibilidade de validação de dias Relevantes
 </summary>
</member>
<member name="M:InnerLibs.TimeMachine.LongTimeSpan.#ctor(System.DateTime,System.DateTime,System.DayOfWeek[])">
 <summary>
 Inicia uma instancia de TimeFlow
 </summary>
 <param name="StartDate">Data inicial</param>
 <param name="EndDate">Data Final (data mais recente)</param>
 <param name="RelevantDaysOfWeek">Lista de dias da semana que são relevantes (dias letivos)</param>
</member>
<member name="M:InnerLibs.TimeMachine.LongTimeSpan.#ctor(System.TimeSpan)">
 <summary>
 Inicia uma instancia de TimeFlow a partir de um TimeSpan
 </summary>
 <param name="Span">Intervalo de tempo</param>
</member>
<member name="M:InnerLibs.TimeMachine.LongTimeSpan.#ctor(System.DateTime,System.TimeSpan)">
 <summary>
 Inicia uma instancia de TimeFlow a partir de uma data inicial e um TimeSpan
 </summary>
 <param name="StartDate">Data Inicial</param>
 <param name="Span">Intervalo de tempo</param>
</member>
<member name="P:InnerLibs.TimeMachine.LongTimeSpan.StartDate">
 <summary>
 Data Inicial
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.LongTimeSpan.EndDate">
 <summary>
 Data Final
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.LongTimeSpan.RelevantDays">
 <summary>
 Dias Relevantes entre as datas Inicial e Final
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.LongTimeSpan.AllDays">
 <summary>
 Todos os dias entre as datas Inicial e Final
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.LongTimeSpan.NonRelevantDays">
 <summary>
 Dias não relevantes entre as datas Inicial e Final
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.LongTimeSpan.RelevantDaysOfWeek">
 <summary>
 Dias da semana relevantes
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.LongTimeSpan.NonRelevantDaysOfWeek">
 <summary>
 Dias da semana não relevantes
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.LongTimeSpan.Years">
 <summary>
 Numero de Anos
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.LongTimeSpan.Months">
 <summary>
 Numero de Meses
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.LongTimeSpan.Days">
 <summary>
 Numero de Dias
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.LongTimeSpan.Hours">
 <summary>
 Numero de Horas
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.LongTimeSpan.Minutes">
 <summary>
 Numero de Minutos
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.LongTimeSpan.Seconds">
 <summary>
 Numero de Segundos
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.LongTimeSpan.Milliseconds">
 <summary>
 Numero de milisegundos
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.LongTimeSpan.ToTimeElapsedString(System.Boolean)">
 <summary>
 Retorna uma String no formato "X anos, Y meses e Z dias"
 </summary>
 <param name="FullString">Parametro que indica se as horas, minutos e segundos devem ser apresentados caso o tempo seja maior que 1 dia</param>
 <returns>string</returns>
</member>
<member name="M:InnerLibs.TimeMachine.LongTimeSpan.ToString">
 <summary>
 Retorna uma string com a quantidade de itens e o tempo de produção
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.TimeMachine.TimeDemand">
 <summary>
 Classe base para calculo de demandas
 </summary>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Sunday">
 <summary>
 Domingo
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Monday">
 <summary>
 Segunda-Feira
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Tuesday">
 <summary>
 Terça-Feira
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Wednesday">
 <summary>
 Quarta-Feira
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Thursday">
 <summary>
 Quinta-Feira
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Friday">
 <summary>
 Sexta-Feira
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Saturday">
 <summary>
 Sábado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Item">
 <summary>
 item da Produção
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.StartDate">
 <summary>
 Data Inicial da produção
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.PushDateIntoJourney(System.DateTime@)">
 <summary>
 Empurra a data para dentro da proxima hora disponivel dentro jornada de trabalho
 </summary>
 <param name="[Date]">Data a ser Verificada</param>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.EndDate">
 <summary>
 Data de encerramento da produção
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.#ctor(System.DateTime,System.TimeSpan,System.Int32,System.String,System.String)">
 <summary>
 Inicia uma nova Demanda com as propriedades do item
 </summary>
 <param name="StartDate">Data Inicial da produção</param>
 <param name="Time">Tempo do item</param>
 <param name="Quantity">Quantidade de itens</param>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.CloneAndQueue(System.TimeSpan)">
 <summary>
 Cria uma demanda após a demanda atual com as mesmas caracteristicas
 </summary>
 <param name="DelayTime">Tempo adicionado entre uma demanda e outra</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.WorkDays(System.DayOfWeek[])">
 <summary>
 Dias especificos da semana entre as datas inicial e final da demanda
 </summary>
 <param name="DaysOfWeek">Dias da semana</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.RelevantDays">
 <summary>
 Dias relevantes (letivos) entre as datas inicial e final
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.NonRelevantDays">
 <summary>
 Dias não relevantes (nao letivos e feriados) entre as datas inicial e final
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.BuildTimeFlow">
 <summary>
 Retorna um TimeFlow desta demanda
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.ToString">
 <summary>
 Retorna uma string representado a quantidade de itens e o tempo gasto com a produção
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.ToTimeElapsedString(System.Boolean)">
 <summary>
 Retorna uma String no formato "X anos, Y meses e Z dias"
 </summary>
 <param name="FullString">Parametro que indica se as horas, minutos e segundos devem ser apresentados caso o tempo seja maior que 1 dia</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.#ctor">
 <summary>
 inicia uma nova demanda
 </summary>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.GetPercentCompletion(System.DateTime)">
 <summary>
 Retorna a porcentagem em relacao a posição de uma data entre a data inicial (0%) e final (100%)
 </summary>
 <param name="MidDate"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.RelevantDaysOfWeek">
 <summary>
 Dias da semana relevantes
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.HoliDays">
 <summary>
 Feriados, pontos facuultativos e/ou datas especificas consideradas não relevantes
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.NonRelevantDaysOfWeek">
 <summary>
 Dias da semana não relevantes
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.TotalTime(System.DateTime)">
 <summary>
 Retorna a jornada de trabalho + hora de almoço de uma data de acordo com as configuracoes desta demanda
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.JourneyTime(System.DateTime)">
 <summary>
 Retorna o tempo da jornada de trabalho de uma data de acordo com as configuracoes desta demanda
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.LunchTime(System.DateTime)">
 <summary>
 Retorna o tempo de almoço de uma data de acordo com as configuracoes desta demanda
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.JourneyStartHour(System.DateTime)">
 <summary>
 Retorna a hora inicial da jornada de uma data de acordo com as configuracoes desta demanda
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.JourneyEndHour(System.DateTime)">
 <summary>
 Retorna a hora final da jornada de uma data acordo com as configuracoes desta demanda
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.LunchStartHour(System.DateTime)">
 <summary>
 Retorno a hora de inicio do almoço de uma data de acordo com as configurações desta demanda
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.LunchEndHour(System.DateTime)">
 <summary>
 Retorna a hora de termino do almoço de uma data de acordo com as configurações desta demanda
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.WorkTime">
 <summary>
 Intervalo de horas trabalhadas entre as datas de inicio e fim desta demanda
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.GetWorkTimeBetween(System.DateTime,System.DateTime)">
 <summary>
 Retorna o intervalo de horas trabalhadas entre duas datas baseado nas confuguracoes desta demanda
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.TimeMachine.Day">
 <summary>
 Dia de Uma Demanda
 </summary>
</member>
<member name="M:InnerLibs.TimeMachine.Day.#ctor">
 <summary>
 Inicia uma instancia de dia letivo
 </summary>
</member>
<member name="M:InnerLibs.TimeMachine.Day.#ctor(System.DateTime,System.TimeSpan,System.DateTime,System.TimeSpan)">
 <summary>
 Inicia uma instancia de dia letivo
 </summary>
 <param name="StartHour">Hora Incial</param>
 <param name="Journey">Jornada de trabalho</param>
</member>
<member name="P:InnerLibs.TimeMachine.Day.JourneyTime">
 <summary>
 Jornada de Trabalho/Produção
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Day.LunchTime">
 <summary>
 Hora de Almoço
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Day.TotalTime">
 <summary>
 Jornada + hora de Almoço
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Day.StartHour">
 <summary>
 Hora inicial da jornada
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Day.LunchHour">
 <summary>
 Hora de almoco
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Day.EndHour">
 <summary>
 Hora que se encerra a jornada (inclui hora de almoço)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.Day.SetJourney(System.DateTime,System.TimeSpan,System.DateTime,System.TimeSpan)">
 <summary>
 Define a hora inicial e a jornada de trabalho deste dia
 </summary>
 <param name="StartHour"></param>
 <param name="Journey"></param>
 <param name="LunchTime">Horas de Almoço</param>
</member>
<member name="T:InnerLibs.TimeMachine.Item">
 <summary>
 Item de Uma demanda
 </summary>
</member>
<member name="P:InnerLibs.TimeMachine.Item.Quantity">
 <summary>
 Quantidade de itens
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Item.Time">
 <summary>
 Tempo de produção de 1 item
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Item.ProductionTime">
 <summary>
 Tempo totald e produção de todos os itens
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Item.SingularItem">
 <summary>
 String que representa o item quando sua quantidade é 1
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Item.MultipleItem">
 <summary>
 string que representa o item quando sua quantidade é maior que 1
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.Item.ToString">
 <summary>
 Retorna uma string que representa a quantidade do item
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.UnitConverter">
 <summary>
 Classe para manipulaçao de numeros e conversão unidades
 </summary>
</member>
<member name="M:InnerLibs.UnitConverter.#ctor">
 <summary>
 Inicia um <see cref="T:InnerLibs.UnitConverter"/> vazio
 </summary>
</member>
<member name="M:InnerLibs.UnitConverter.CreateBase1000Converter">
 <summary>
 Cria um <see cref="T:InnerLibs.UnitConverter"/> de Base 1000 (de y a E)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.UnitConverter.CreateComplexMassConverter">
 <summary>
 Cria um <see cref="T:InnerLibs.UnitConverter"/> de de Massa (peso) complexos de base 10 (de mg a kg)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.UnitConverter.CreateSimpleMassConverter">
 <summary>
 Cria um <see cref="T:InnerLibs.UnitConverter"/> de de Massa (peso) simples de base 1000 (de mg a T)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.UnitConverter.CreateFileSizeConverter">
 <summary>
 Cria um <see cref="T:InnerLibs.UnitConverter"/> de Base 1024 (Bytes) de (B a EB)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.UnitConverter.#ctor(System.Collections.Generic.Dictionary{System.Decimal,System.String})">
 <summary>
 Cria um <see cref="T:InnerLibs.UnitConverter"/> utilizando um <see cref="T:System.Collections.Generic.Dictionary`2"/> com as marcaçoes de unidade de medida
 </summary>
 <param name="Units">Unidades de medida. Permite uso de singular e plural separando as palavras com ";" </param>
 <remarks>Utilize ponto e virgula (;) para separar unidades de medidas com singular;plural (EX.: Centimetro;Centimetros)</remarks>
</member>
<member name="M:InnerLibs.UnitConverter.#ctor(System.Collections.Generic.Dictionary{System.String,System.Decimal})">
 <summary>
 Cria um <see cref="T:InnerLibs.UnitConverter"/> utilizando um <see cref="T:System.Collections.Generic.Dictionary`2"/> com as marcaçoes de unidade de medida
 </summary>
 <param name="Units">Unidades de medida. Permite uso de singular e plural separando as palavras com ";" </param>
 <remarks>Utilize ponto e virgula (;) para separar unidades de medidas com singular;plural (EX.: Centimetro;Centimetros)</remarks>
</member>
<member name="M:InnerLibs.UnitConverter.#ctor(System.Decimal,System.Decimal,System.String[])">
 <summary>
 Cria um <see cref="T:InnerLibs.UnitConverter"/> utilizando um numero inicial, uma base multiplicadora e um array com as unidades de medida
 </summary>
 <param name="StartAt">Numero Inicial</param>
 <param name="Base">Base multiplicadora, exponencia o numero em <paramref name="StartAt"/> para cada item em <paramref name="Units"/></param>
 <param name="Units">Unidades de medida. Permite uso de singular e plural separando as palavras com ";" </param>
 <remarks>Utilize ponto e virgula (;) para separar unidades de medidas com singular;plural (EX.: Centimetro;Centimetros)</remarks>
</member>
<member name="M:InnerLibs.UnitConverter.#ctor(System.Int32,System.String[])">
 <summary>
 Cria um <see cref="T:InnerLibs.UnitConverter"/> utilizando uma base multiplicadora e um array com as unidades de medida começando pelo numero 1
 </summary>
 <param name="Base">Base multiplicadora, exponencia o numero 1 para cada item em <paramref name="Units"/></param>
 <param name="Units">Unidades de medida. Permite uso de singular e plural separando as palavras com ";" </param>
 <remarks>Utilize ponto e virgula (;) para separar unidades de medidas com singular;plural (EX.: Centimetro;Centimetros)</remarks>
</member>
<member name="M:InnerLibs.UnitConverter.Abreviate(System.Decimal,System.Int32)">
 <summary>
 Abrevia um numero com a unidade mais alta encontrada dentro do conversor
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.UnitConverter.Abreviate(System.Int32)">
 <summary>
 Abrevia um numero com a unidade mais alta encontrada dentro do conversor
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.UnitConverter.Abreviate(System.Int16)">
 <summary>
 Abrevia um numero com a unidade mais alta encontrada dentro do conversor
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.UnitConverter.Abreviate(System.Int64)">
 <summary>
 Abrevia um numero com a unidade mais alta encontrada dentro do conversor
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.UnitConverter.Parse(System.String,System.Int32)">
 <summary>
 Retorna o numero decimal a partir de uma string abreviada
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.UnitConverter.ParseUnit(System.String)">
 <summary>
 Extrai a Unidade utilizada a partir de um numero abreviado
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.UnitConverter.Convert(System.Decimal,System.String,System.String)">
 <summary>
 Converte um numero   decimal em outro numero decimal a partir de unidades de medida
 </summary>
 <param name="Number">Numero</param>
 <param name="From">Unidade de Medida de origem</param>
 <param name="[To]">Unidade de medida de destino</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.UnitConverter.Convert(System.String,System.String)">
 <summary>
 Converte um numero abreviado em decimal
 </summary>
 <param name="AbreviatedNumber">Numero abreviado</param>
 <param name="[To]">Unidade de destino</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.UnitConverter.ConvertAbreviate(System.String,System.String)">
 <summary>
 Converte um numero abreviado em outro numero abreviado de outra unidade
 </summary>
 <param name="AbreviatedNumber">Numero abreviado</param>
 <param name="[To]">Unidade de destino</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.UnitConverter.GetUnit(System.String)">
 <summary>
 Retorna a unidade e a base a partir do nome da unidade
 </summary>
 <param name="U"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.vCard">
 <summary>
 Um objeto vCard
 </summary>
</member>
<member name="T:InnerLibs.Verify">
 <summary>
 Verifica determinados valores como Arquivos, Numeros e URLs
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Verify.IsValidCNH(System.String)">
 <summary>
 Verifica se a string é um CNH válido
 </summary>
 <param name="Text">CNH</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsValidCPFOrCNPJ(System.String)">
 <summary>
 Verifica se a string é um CPF ou CNPJ válido
 </summary>
 <param name="Text">CPF ou CNPJ</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsValidCPF(System.String)">
 <summary>
 Verifica se a string é um CPF válido
 </summary>
 <param name="Text">CPF</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsValidCEP(System.String)">
 <summary>
 Verifica se uma string é um cep válido
 </summary>
 <param name="CEP"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsValidCNPJ(System.String)">
 <summary>
 Verifica se a string é um CNPJ válido
 </summary>
 <param name="Text">CPF</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsFilePath(System.String)">
 <summary>
 Verifica se uma string é um caminho de arquivo válido
 </summary>
 <param name="Text">Texto</param>
 <returns>TRUE se o caminho for válido</returns>
</member>
<member name="M:InnerLibs.Verify.IsDirectoryPath(System.String)">
 <summary>
 Verifica se uma string é um caminho de diretório válido
 </summary>
 <param name="Text">Texto</param>
 <returns>TRUE se o caminho for válido</returns>
</member>
<member name="M:InnerLibs.Verify.IsPath(System.String)">
 <summary>
 Verifica se uma string é um caminho de diretóio válido
 </summary>
 <param name="Text">Texto</param>
 <returns>TRUE se o caminho for válido</returns>
</member>
<member name="M:InnerLibs.Verify.IsIP(System.String)">
 <summary>
 Verifica se a string é um endereço IP válido
 </summary>
 <param name="IP">Endereco IP</param>
 <returns>TRUE ou FALSE</returns>
</member>
<member name="M:InnerLibs.Verify.IsTelephone(System.String)">
 <summary>
 Valida se a string é um telefone
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsInUse(System.IO.FileInfo)">
 <summary>
 Verifica se o arquivo está em uso por outro procedimento
 </summary>
 <param name="File">o Arquivo a ser verificado</param>
 <returns>TRUE se o arquivo estiver em uso, FALSE se não estiver</returns>
</member>
<member name="M:InnerLibs.Verify.IsNumber(System.Object)">
 <summary>
 Verifica se o valor é um numero
 </summary>
 <param name="Value">Valor a ser verificado, pode ser qualquer objeto</param>
 <returns>TRUE se for um numero, FALSE se não for um numero</returns>
</member>
<member name="M:InnerLibs.Verify.CanBeNumber(System.Object)">
 <summary>
 Verifica se o valor é um numero ou pode ser convertido em numero
 </summary>
 <param name="Value">Valor a ser verificado, pode ser qualquer objeto</param>
 <returns>TRUE se for um numero, FALSE se não for um numero</returns>
</member>
<member name="M:InnerLibs.Verify.IsNotNumber(System.Object)">
 <summary>
 Verifica se o valor não é um numero
 </summary>
 <param name="Value">Valor a ser verificado, pode ser qualquer objeto</param>
 <returns>FALSE se for um numero, TRUE se não for um numero</returns>
</member>
<member name="M:InnerLibs.Verify.IsEmail(System.String)">
 <summary>
 Verifica se um determinado texto é um email
 </summary>
 <param name="Text">Texto a ser validado</param>
 <returns>TRUE se for um email, FALSE se não for email</returns>
</member>
<member name="M:InnerLibs.Verify.IsURL(System.String)">
 <summary>
 Verifica se um determinado texto é uma URL válida
 </summary>
 <param name="Text">Texto a ser verificado</param>
 <returns>TRUE se for uma URL, FALSE se não for uma URL válida</returns>
</member>
<member name="M:InnerLibs.Verify.IsValidDomain(System.String)">
 <summary>
 Verifica se o dominio é válido (existe) em uma URL ou email
 </summary>
 <param name="DomainOrEmail">Uma String contendo a URL ou email</param>
 <returns>TRUE se o dominio existir, FALSE se o dominio não existir</returns>
 <remarks>Retornara sempre false quando nao houver conexao com a internet</remarks>
</member>
<member name="M:InnerLibs.Verify.GetIndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
 <summary>
 Tenta retornar um index de um IEnumerable a partir de um valor especifico. retorna -1 se o index nao existir
 </summary>
 <typeparam name="T">Tipo do IEnumerable e do valor</typeparam>
 <param name="Arr">Array</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IfNoIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
 <summary>
 Tenta retornar um valor de um IEnumerable a partir de um Index especifico. retorna um valor default se o index nao existir
 </summary>
 <typeparam name="T">Tipo do IEnumerable e do valor</typeparam>
 <param name="Arr">Array</param>
 <param name="Index">Posicao</param>
 <param name="ValueIfNoIndex">Valor se o mesmo nao existir</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IfBlankOrNoIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
 <summary>
 Tenta retornar um valor de um IEnumerable a partir de um Index especifico. retorna um valor default se o index nao existir ou seu valor for branco ou nothing
 </summary>
 <typeparam name="T">Tipo do IEnumerable e do valor</typeparam>
 <param name="Arr">Array</param>
 <param name="Index">Posicao</param>
 <param name="ValueIfBlankOrNoIndex">Valor se o mesmo nao existir</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IfNullOrEmpty``1(System.Object[],``0[])">
 <summary>
 Verifica se um aray está vazio ou nula e retorna um outro valor caso TRUE
 </summary>
 <typeparam name="T">Tipo da Variavel</typeparam>
 <param name="Value">       Valor</param>
 <param name="ValuesIfBlank">Valor se estiver em branco</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IfNullOrEmpty``1(System.Collections.Generic.IEnumerable{System.Object[]},``0[])">
 <summary>
 Verifica se um aray está vazio ou nula e retorna um outro valor caso TRUE
 </summary>
 <typeparam name="T">Tipo da Variavel</typeparam>
 <param name="Value">       Valor</param>
 <param name="ValuesIfBlank">Valor se estiver em branco</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IfNullOrEmpty``1(System.Collections.Generic.IEnumerable{System.Object[]},System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Verifica se um aray está vazio ou nula e retorna um outro valor caso TRUE
 </summary>
 <typeparam name="T">Tipo da Variavel</typeparam>
 <param name="Value">       Valor</param>
 <param name="ValueIfBlank">Valor se estiver em branco</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IfBlank``1(System.Object,``0)">
 <summary>
 Verifica se uma variavel está vazia, em branco ou nula e retorna um outro valor caso TRUE
 </summary>
 <typeparam name="T">Tipo da Variavel</typeparam>
 <param name="Value">       Valor</param>
 <param name="ValueIfBlank">Valor se estiver em branco</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.NullIf``1(``0,System.Func{``0,System.Boolean})">
 <summary>
 Anula o valor de um objeto se ele for igual a outro objeto
 </summary>
 <param name="Value">Valor</param>
 <param name="TestExpression">Outro Objeto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.NullIf``1(``0,``0)">
 <summary>
 Anula o valor de um objeto se ele for igual a outro objeto
 </summary>
 <param name="Value">Valor</param>
 <param name="TestValue">Outro Objeto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.NullIf``1(System.Nullable{``0},System.Nullable{``0})">
 <summary>
 Anula o valor de um objeto se ele for igual a outro objeto
 </summary>
 <param name="Value">Valor</param>
 <param name="TestValue">Outro Objeto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.NullIf(System.String,System.String,System.StringComparison)">
 <summary>
 Anula o valor de uma string se ela for igual a outra string
 </summary>
 <param name="Value">Valor</param>
 <param name="TestValue">Outro Objeto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsEmpty(System.String)">
 <summary>
 Verifica se uma String está vazia
 </summary>
 <param name="Text">Uma string</param>
 <returns>TRUE se estivar vazia, caso contrario FALSE</returns>
</member>
<member name="M:InnerLibs.Verify.IsEmpty(System.FormattableString)">
 <summary>
 Verifica se uma String está vazia
 </summary>
 <param name="Text">Uma string</param>
 <returns>TRUE se estivar vazia, caso contrario FALSE</returns>
</member>
<member name="M:InnerLibs.Verify.IsBlank(System.String)">
 <summary>
 Verifica se uma String está em branco
 </summary>
 <param name="Text">Uma string</param>
 <returns>TRUE se estivar vazia ou em branco, caso contrario FALSE</returns>
</member>
<member name="M:InnerLibs.Verify.IsBlank(System.FormattableString)">
 <summary>
 Verifica se uma String está em branco
 </summary>
 <param name="Text">Uma string</param>
 <returns>TRUE se estivar vazia ou em branco, caso contrario FALSE</returns>
</member>
<member name="M:InnerLibs.Verify.IsNotBlank(System.String)">
 <summary>
 Verifica se uma String não está em branco
 </summary>
 <param name="Text">Uma string</param>
 <returns>FALSE se estivar vazia ou em branco, caso contrario TRUE</returns>
</member>
<member name="M:InnerLibs.Verify.IsNotEmpty(System.String)">
 <summary>
 Verifica se uma String não está vazia
 </summary>
 <param name="Text">Uma string</param>
 <returns>FALSE se estivar vazia ou em branco, caso contrario TRUE</returns>
</member>
<member name="M:InnerLibs.Verify.IsNotEmpty(System.FormattableString)">
 <summary>
 Verifica se uma String não está vazia
 </summary>
 <param name="Text">Uma string</param>
 <returns>FALSE se estivar vazia ou em branco, caso contrario TRUE</returns>
</member>
<member name="M:InnerLibs.Verify.IsEven(System.Decimal)">
 <summary>
 Verifica se um numero é par
 </summary>
 <param name="Value">Valor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsEven(System.Int32)">
 <summary>
 Verifica se um numero é par
 </summary>
 <param name="Value">Valor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsEven(System.Int64)">
 <summary>
 Verifica se um numero é par
 </summary>
 <param name="Value">Valor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsEven(System.Double)">
 <summary>
 Verifica se um numero é par
 </summary>
 <param name="Value">Valor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsOdd(System.Decimal)">
 <summary>
 Verifica se um numero é impar
 </summary>
 <param name="Value">Valor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsOdd(System.Int32)">
 <summary>
 Verifica se um numero é impar
 </summary>
 <param name="Value">Valor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsOdd(System.Int64)">
 <summary>
 Verifica se um numero é impar
 </summary>
 <param name="Value">Valor</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Web">
 <summary>
 Modulo Web
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Web.FileNameAsTitle(System.IO.FileSystemInfo)">
 <summary>
 Retorna o Titulo do arquivo a partir do nome do arquivo
 </summary>
 <param name="Info"> Arquivo ou Diretório</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.FileNameAsTitle(System.String)">
 <summary>
 Retorna o Titulo do arquivo a partir do nome do arquivo
 </summary>
 <param name="FileName"> Arquivo ou Diretório</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.MinifyCSS(System.String,System.Boolean)">
 <summary>
 Minifica uma folha de estilo CSS
 </summary>
 <param name="CSS">String contendo o CSS</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.MinifyJS(System.String)">
 <summary>
 Minifica um arquivo JavaScript
 </summary>
 <param name="Js">String contendo o Javascript</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.IsConnected(System.String)">
 <summary>
 Verifica se o computador está conectado com a internet
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.AddParameter(System.Uri,System.String,System.Boolean,System.String[])">
 <summary>
 Adciona um parametro a Query String de uma URL
 </summary>
 <param name="Url">  Uri</param>
 <param name="Key">  Nome do parâmetro</param>
 <param name="Values">Valor do Parâmetro</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.AddParameter(System.Uri,System.String,System.String[])">
 <summary>
 Adciona um parametro a Query String de uma URL
 </summary>
 <param name="Url">  Uri</param>
 <param name="Key">  Nome do parâmetro</param>
 <param name="Values">Valor do Parâmetro</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.RemoveParameter(System.Uri,System.String[])">
 <summary>
 Adciona um parametro a Query String de uma URL
 </summary>
 <param name="Url">  Uri</param>
 <param name="Key">  Nome do parâmetro</param>
 <param name="Values">Valor do Parâmetro</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.GetUrlSegments(System.String)">
 <summary>
 Retorna os segmentos de uma url
 </summary>
 <param name="Url"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.ReplaceUrlParameters``1(System.String,``0)">
 <summary>
 Substitui os parametros de rota de uma URL por valores de um objeto
 </summary>
 <typeparam name="T"></typeparam>
 <param name="obj"></param>
 <param name="UrlPattern"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.GetFacebookUsername(System.String)">
 <summary>
 Captura o Username ou UserID de uma URL do Facebook
 </summary>
 <param name="URL">URL do Facebook</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.GetFacebookUsername(System.Uri)">
 <summary>
 Captura o Username ou UserID de uma URL do Facebook
 </summary>
 <param name="URL">URL do Facebook</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.GetYoutubeThumbnail(System.String)">
 <summary>
 Captura a Thumbnail de um video do youtube
 </summary>
 <param name="URL">Url do Youtube</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.GetYoutubeThumbnail(System.Uri)">
 <summary>
 Captura a Thumbnail de um video do youtube
 </summary>
 <param name="URL">Url do Youtube</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.GetVideoId(System.String)">
 <summary>
 Captura o ID de um video do YOUTUBE ou VIMEO em uma URL
 </summary>
 <param name="URL">URL do video</param>
 <returns>ID do video do youtube ou Vimeo</returns>
</member>
<member name="M:InnerLibs.Web.GetVideoId(System.Uri)">
 <summary>
 Captura o ID de um video do youtube em uma URL
 </summary>
 <param name="URL">URL do video</param>
 <returns>ID do video do youtube</returns>
</member>
<member name="M:InnerLibs.Web.IsDown(System.String)">
 <summary>
 Verifica se um site está indisponível usando o serviço IsUp.Me
 </summary>
 <param name="Url">Url</param>
 <returns>True para site fora do Ar</returns>
</member>
<member name="M:InnerLibs.Web.IsUp(System.String)">
 <summary>
 Verifica se um site está disponível usando o serviço IsUp.Me
 </summary>
 <param name="Url">Url</param>
 <returns>False para site fora do Ar</returns>
</member>
<member name="M:InnerLibs.Web.IsDown(System.Uri)">
 <summary>
 Verifica se um site está indisponível usando o serviço IsUp.Me
 </summary>
 <param name="Url">Url</param>
 <returns>True para site fora do Ar</returns>
</member>
<member name="M:InnerLibs.Web.IsUp(System.Uri)">
 <summary>
 Verifica se um site está disponível usando o serviço IsUp.Me
 </summary>
 <param name="Url">Url</param>
 <returns>False para site fora do Ar</returns>
</member>
</members>
</doc>
